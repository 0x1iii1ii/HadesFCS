
HadesF4RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d43c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800d5d0  0800d5d0  0001d5d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbf0  0800dbf0  00020670  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbf0  0800dbf0  0001dbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbf8  0800dbf8  00020670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbf8  0800dbf8  0001dbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbfc  0800dbfc  0001dbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000670  20000000  0800dc00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f54  20000670  0800e270  00020670  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055c4  0800e270  000255c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020670  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a122  00000000  00000000  000206a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a27  00000000  00000000  0003a7c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001528  00000000  00000000  0003e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001370  00000000  00000000  0003f718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c6d  00000000  00000000  00040a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012485  00000000  00000000  000636f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca95a  00000000  00000000  00075b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001404d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065cc  00000000  00000000  00140550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000670 	.word	0x20000670
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5b4 	.word	0x0800d5b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000674 	.word	0x20000674
 80001cc:	0800d5b4 	.word	0x0800d5b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_drsub>:
 80001f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f8:	e002      	b.n	8000200 <__adddf3>
 80001fa:	bf00      	nop

080001fc <__aeabi_dsub>:
 80001fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000200 <__adddf3>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000206:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020a:	ea94 0f05 	teq	r4, r5
 800020e:	bf08      	it	eq
 8000210:	ea90 0f02 	teqeq	r0, r2
 8000214:	bf1f      	itttt	ne
 8000216:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000222:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000226:	f000 80e2 	beq.w	80003ee <__adddf3+0x1ee>
 800022a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000232:	bfb8      	it	lt
 8000234:	426d      	neglt	r5, r5
 8000236:	dd0c      	ble.n	8000252 <__adddf3+0x52>
 8000238:	442c      	add	r4, r5
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	ea82 0000 	eor.w	r0, r2, r0
 8000246:	ea83 0101 	eor.w	r1, r3, r1
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	2d36      	cmp	r5, #54	; 0x36
 8000254:	bf88      	it	hi
 8000256:	bd30      	pophi	{r4, r5, pc}
 8000258:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800025c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000260:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000264:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x70>
 800026a:	4240      	negs	r0, r0
 800026c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000270:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000274:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000278:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x84>
 800027e:	4252      	negs	r2, r2
 8000280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000284:	ea94 0f05 	teq	r4, r5
 8000288:	f000 80a7 	beq.w	80003da <__adddf3+0x1da>
 800028c:	f1a4 0401 	sub.w	r4, r4, #1
 8000290:	f1d5 0e20 	rsbs	lr, r5, #32
 8000294:	db0d      	blt.n	80002b2 <__adddf3+0xb2>
 8000296:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029a:	fa22 f205 	lsr.w	r2, r2, r5
 800029e:	1880      	adds	r0, r0, r2
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a8:	1880      	adds	r0, r0, r2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	4159      	adcs	r1, r3
 80002b0:	e00e      	b.n	80002d0 <__adddf3+0xd0>
 80002b2:	f1a5 0520 	sub.w	r5, r5, #32
 80002b6:	f10e 0e20 	add.w	lr, lr, #32
 80002ba:	2a01      	cmp	r2, #1
 80002bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c0:	bf28      	it	cs
 80002c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	18c0      	adds	r0, r0, r3
 80002cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d4:	d507      	bpl.n	80002e6 <__adddf3+0xe6>
 80002d6:	f04f 0e00 	mov.w	lr, #0
 80002da:	f1dc 0c00 	rsbs	ip, ip, #0
 80002de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ea:	d31b      	bcc.n	8000324 <__adddf3+0x124>
 80002ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f0:	d30c      	bcc.n	800030c <__adddf3+0x10c>
 80002f2:	0849      	lsrs	r1, r1, #1
 80002f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002fc:	f104 0401 	add.w	r4, r4, #1
 8000300:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000304:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000308:	f080 809a 	bcs.w	8000440 <__adddf3+0x240>
 800030c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000310:	bf08      	it	eq
 8000312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000316:	f150 0000 	adcs.w	r0, r0, #0
 800031a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031e:	ea41 0105 	orr.w	r1, r1, r5
 8000322:	bd30      	pop	{r4, r5, pc}
 8000324:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000328:	4140      	adcs	r0, r0
 800032a:	eb41 0101 	adc.w	r1, r1, r1
 800032e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000332:	f1a4 0401 	sub.w	r4, r4, #1
 8000336:	d1e9      	bne.n	800030c <__adddf3+0x10c>
 8000338:	f091 0f00 	teq	r1, #0
 800033c:	bf04      	itt	eq
 800033e:	4601      	moveq	r1, r0
 8000340:	2000      	moveq	r0, #0
 8000342:	fab1 f381 	clz	r3, r1
 8000346:	bf08      	it	eq
 8000348:	3320      	addeq	r3, #32
 800034a:	f1a3 030b 	sub.w	r3, r3, #11
 800034e:	f1b3 0220 	subs.w	r2, r3, #32
 8000352:	da0c      	bge.n	800036e <__adddf3+0x16e>
 8000354:	320c      	adds	r2, #12
 8000356:	dd08      	ble.n	800036a <__adddf3+0x16a>
 8000358:	f102 0c14 	add.w	ip, r2, #20
 800035c:	f1c2 020c 	rsb	r2, r2, #12
 8000360:	fa01 f00c 	lsl.w	r0, r1, ip
 8000364:	fa21 f102 	lsr.w	r1, r1, r2
 8000368:	e00c      	b.n	8000384 <__adddf3+0x184>
 800036a:	f102 0214 	add.w	r2, r2, #20
 800036e:	bfd8      	it	le
 8000370:	f1c2 0c20 	rsble	ip, r2, #32
 8000374:	fa01 f102 	lsl.w	r1, r1, r2
 8000378:	fa20 fc0c 	lsr.w	ip, r0, ip
 800037c:	bfdc      	itt	le
 800037e:	ea41 010c 	orrle.w	r1, r1, ip
 8000382:	4090      	lslle	r0, r2
 8000384:	1ae4      	subs	r4, r4, r3
 8000386:	bfa2      	ittt	ge
 8000388:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800038c:	4329      	orrge	r1, r5
 800038e:	bd30      	popge	{r4, r5, pc}
 8000390:	ea6f 0404 	mvn.w	r4, r4
 8000394:	3c1f      	subs	r4, #31
 8000396:	da1c      	bge.n	80003d2 <__adddf3+0x1d2>
 8000398:	340c      	adds	r4, #12
 800039a:	dc0e      	bgt.n	80003ba <__adddf3+0x1ba>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0220 	rsb	r2, r4, #32
 80003a4:	fa20 f004 	lsr.w	r0, r0, r4
 80003a8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ac:	ea40 0003 	orr.w	r0, r0, r3
 80003b0:	fa21 f304 	lsr.w	r3, r1, r4
 80003b4:	ea45 0103 	orr.w	r1, r5, r3
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f1c4 040c 	rsb	r4, r4, #12
 80003be:	f1c4 0220 	rsb	r2, r4, #32
 80003c2:	fa20 f002 	lsr.w	r0, r0, r2
 80003c6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ca:	ea40 0003 	orr.w	r0, r0, r3
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	fa21 f004 	lsr.w	r0, r1, r4
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f094 0f00 	teq	r4, #0
 80003de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003e2:	bf06      	itte	eq
 80003e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e8:	3401      	addeq	r4, #1
 80003ea:	3d01      	subne	r5, #1
 80003ec:	e74e      	b.n	800028c <__adddf3+0x8c>
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf18      	it	ne
 80003f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f8:	d029      	beq.n	800044e <__adddf3+0x24e>
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	d005      	beq.n	8000412 <__adddf3+0x212>
 8000406:	ea54 0c00 	orrs.w	ip, r4, r0
 800040a:	bf04      	itt	eq
 800040c:	4619      	moveq	r1, r3
 800040e:	4610      	moveq	r0, r2
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	ea91 0f03 	teq	r1, r3
 8000416:	bf1e      	ittt	ne
 8000418:	2100      	movne	r1, #0
 800041a:	2000      	movne	r0, #0
 800041c:	bd30      	popne	{r4, r5, pc}
 800041e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000422:	d105      	bne.n	8000430 <__adddf3+0x230>
 8000424:	0040      	lsls	r0, r0, #1
 8000426:	4149      	adcs	r1, r1
 8000428:	bf28      	it	cs
 800042a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000434:	bf3c      	itt	cc
 8000436:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800043a:	bd30      	popcc	{r4, r5, pc}
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf1a      	itte	ne
 8000454:	4619      	movne	r1, r3
 8000456:	4610      	movne	r0, r2
 8000458:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800045c:	bf1c      	itt	ne
 800045e:	460b      	movne	r3, r1
 8000460:	4602      	movne	r2, r0
 8000462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000466:	bf06      	itte	eq
 8000468:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800046c:	ea91 0f03 	teqeq	r1, r3
 8000470:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	bf00      	nop

08000478 <__aeabi_ui2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f04f 0500 	mov.w	r5, #0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e750      	b.n	8000338 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_i2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b0:	bf48      	it	mi
 80004b2:	4240      	negmi	r0, r0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e73e      	b.n	8000338 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_f2d>:
 80004bc:	0042      	lsls	r2, r0, #1
 80004be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ca:	bf1f      	itttt	ne
 80004cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d8:	4770      	bxne	lr
 80004da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004de:	bf08      	it	eq
 80004e0:	4770      	bxeq	lr
 80004e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e6:	bf04      	itt	eq
 80004e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	e71c      	b.n	8000338 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_ul2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	e00a      	b.n	8000526 <__aeabi_l2d+0x16>

08000510 <__aeabi_l2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051e:	d502      	bpl.n	8000526 <__aeabi_l2d+0x16>
 8000520:	4240      	negs	r0, r0
 8000522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000526:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800052a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000532:	f43f aed8 	beq.w	80002e6 <__adddf3+0xe6>
 8000536:	f04f 0203 	mov.w	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	fa00 fc03 	lsl.w	ip, r0, r3
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 fe03 	lsl.w	lr, r1, r3
 800055e:	ea40 000e 	orr.w	r0, r0, lr
 8000562:	fa21 f102 	lsr.w	r1, r1, r2
 8000566:	4414      	add	r4, r2
 8000568:	e6bd      	b.n	80002e6 <__adddf3+0xe6>
 800056a:	bf00      	nop

0800056c <__aeabi_dmul>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000572:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057a:	bf1d      	ittte	ne
 800057c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000580:	ea94 0f0c 	teqne	r4, ip
 8000584:	ea95 0f0c 	teqne	r5, ip
 8000588:	f000 f8de 	bleq	8000748 <__aeabi_dmul+0x1dc>
 800058c:	442c      	add	r4, r5
 800058e:	ea81 0603 	eor.w	r6, r1, r3
 8000592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059e:	bf18      	it	ne
 80005a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ac:	d038      	beq.n	8000620 <__aeabi_dmul+0xb4>
 80005ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c2:	f04f 0600 	mov.w	r6, #0
 80005c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ca:	f09c 0f00 	teq	ip, #0
 80005ce:	bf18      	it	ne
 80005d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e0:	d204      	bcs.n	80005ec <__aeabi_dmul+0x80>
 80005e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e6:	416d      	adcs	r5, r5
 80005e8:	eb46 0606 	adc.w	r6, r6, r6
 80005ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000600:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000604:	bf88      	it	hi
 8000606:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800060a:	d81e      	bhi.n	800064a <__aeabi_dmul+0xde>
 800060c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000624:	ea46 0101 	orr.w	r1, r6, r1
 8000628:	ea40 0002 	orr.w	r0, r0, r2
 800062c:	ea81 0103 	eor.w	r1, r1, r3
 8000630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000634:	bfc2      	ittt	gt
 8000636:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063e:	bd70      	popgt	{r4, r5, r6, pc}
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f04f 0e00 	mov.w	lr, #0
 8000648:	3c01      	subs	r4, #1
 800064a:	f300 80ab 	bgt.w	80007a4 <__aeabi_dmul+0x238>
 800064e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000652:	bfde      	ittt	le
 8000654:	2000      	movle	r0, #0
 8000656:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800065a:	bd70      	pople	{r4, r5, r6, pc}
 800065c:	f1c4 0400 	rsb	r4, r4, #0
 8000660:	3c20      	subs	r4, #32
 8000662:	da35      	bge.n	80006d0 <__aeabi_dmul+0x164>
 8000664:	340c      	adds	r4, #12
 8000666:	dc1b      	bgt.n	80006a0 <__aeabi_dmul+0x134>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f305 	lsl.w	r3, r0, r5
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f205 	lsl.w	r2, r1, r5
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	fa21 f604 	lsr.w	r6, r1, r4
 8000690:	eb42 0106 	adc.w	r1, r2, r6
 8000694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000698:	bf08      	it	eq
 800069a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f1c4 040c 	rsb	r4, r4, #12
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ac:	fa20 f005 	lsr.w	r0, r0, r5
 80006b0:	fa01 f204 	lsl.w	r2, r1, r4
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	f141 0100 	adc.w	r1, r1, #0
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f205 	lsl.w	r2, r0, r5
 80006d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006dc:	fa20 f304 	lsr.w	r3, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea43 0302 	orr.w	r3, r3, r2
 80006e8:	fa21 f004 	lsr.w	r0, r1, r4
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	fa21 f204 	lsr.w	r2, r1, r4
 80006f4:	ea20 0002 	bic.w	r0, r0, r2
 80006f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f094 0f00 	teq	r4, #0
 800070c:	d10f      	bne.n	800072e <__aeabi_dmul+0x1c2>
 800070e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000712:	0040      	lsls	r0, r0, #1
 8000714:	eb41 0101 	adc.w	r1, r1, r1
 8000718:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3c01      	subeq	r4, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1a6>
 8000722:	ea41 0106 	orr.w	r1, r1, r6
 8000726:	f095 0f00 	teq	r5, #0
 800072a:	bf18      	it	ne
 800072c:	4770      	bxne	lr
 800072e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	eb43 0303 	adc.w	r3, r3, r3
 8000738:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800073c:	bf08      	it	eq
 800073e:	3d01      	subeq	r5, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1c6>
 8000742:	ea43 0306 	orr.w	r3, r3, r6
 8000746:	4770      	bx	lr
 8000748:	ea94 0f0c 	teq	r4, ip
 800074c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000750:	bf18      	it	ne
 8000752:	ea95 0f0c 	teqne	r5, ip
 8000756:	d00c      	beq.n	8000772 <__aeabi_dmul+0x206>
 8000758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075c:	bf18      	it	ne
 800075e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000762:	d1d1      	bne.n	8000708 <__aeabi_dmul+0x19c>
 8000764:	ea81 0103 	eor.w	r1, r1, r3
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000776:	bf06      	itte	eq
 8000778:	4610      	moveq	r0, r2
 800077a:	4619      	moveq	r1, r3
 800077c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000780:	d019      	beq.n	80007b6 <__aeabi_dmul+0x24a>
 8000782:	ea94 0f0c 	teq	r4, ip
 8000786:	d102      	bne.n	800078e <__aeabi_dmul+0x222>
 8000788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800078c:	d113      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 800078e:	ea95 0f0c 	teq	r5, ip
 8000792:	d105      	bne.n	80007a0 <__aeabi_dmul+0x234>
 8000794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000798:	bf1c      	itt	ne
 800079a:	4610      	movne	r0, r2
 800079c:	4619      	movne	r1, r3
 800079e:	d10a      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007be:	bd70      	pop	{r4, r5, r6, pc}

080007c0 <__aeabi_ddiv>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ce:	bf1d      	ittte	ne
 80007d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d4:	ea94 0f0c 	teqne	r4, ip
 80007d8:	ea95 0f0c 	teqne	r5, ip
 80007dc:	f000 f8a7 	bleq	800092e <__aeabi_ddiv+0x16e>
 80007e0:	eba4 0405 	sub.w	r4, r4, r5
 80007e4:	ea81 0e03 	eor.w	lr, r1, r3
 80007e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f0:	f000 8088 	beq.w	8000904 <__aeabi_ddiv+0x144>
 80007f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000804:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800080c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000810:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000814:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000818:	429d      	cmp	r5, r3
 800081a:	bf08      	it	eq
 800081c:	4296      	cmpeq	r6, r2
 800081e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000822:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000826:	d202      	bcs.n	800082e <__aeabi_ddiv+0x6e>
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	1ab6      	subs	r6, r6, r2
 8000830:	eb65 0503 	sbc.w	r5, r5, r3
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 000c 	orrcs.w	r0, r0, ip
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800089c:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a0:	d018      	beq.n	80008d4 <__aeabi_ddiv+0x114>
 80008a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008be:	d1c0      	bne.n	8000842 <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	d10b      	bne.n	80008de <__aeabi_ddiv+0x11e>
 80008c6:	ea41 0100 	orr.w	r1, r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008d2:	e7b6      	b.n	8000842 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	bf04      	itt	eq
 80008da:	4301      	orreq	r1, r0
 80008dc:	2000      	moveq	r0, #0
 80008de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e2:	bf88      	it	hi
 80008e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e8:	f63f aeaf 	bhi.w	800064a <__aeabi_dmul+0xde>
 80008ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f0:	bf04      	itt	eq
 80008f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fa:	f150 0000 	adcs.w	r0, r0, #0
 80008fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800090c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000910:	bfc2      	ittt	gt
 8000912:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091a:	bd70      	popgt	{r4, r5, r6, pc}
 800091c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000920:	f04f 0e00 	mov.w	lr, #0
 8000924:	3c01      	subs	r4, #1
 8000926:	e690      	b.n	800064a <__aeabi_dmul+0xde>
 8000928:	ea45 0e06 	orr.w	lr, r5, r6
 800092c:	e68d      	b.n	800064a <__aeabi_dmul+0xde>
 800092e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000932:	ea94 0f0c 	teq	r4, ip
 8000936:	bf08      	it	eq
 8000938:	ea95 0f0c 	teqeq	r5, ip
 800093c:	f43f af3b 	beq.w	80007b6 <__aeabi_dmul+0x24a>
 8000940:	ea94 0f0c 	teq	r4, ip
 8000944:	d10a      	bne.n	800095c <__aeabi_ddiv+0x19c>
 8000946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094a:	f47f af34 	bne.w	80007b6 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	f47f af25 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e72c      	b.n	80007b6 <__aeabi_dmul+0x24a>
 800095c:	ea95 0f0c 	teq	r5, ip
 8000960:	d106      	bne.n	8000970 <__aeabi_ddiv+0x1b0>
 8000962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000966:	f43f aefd 	beq.w	8000764 <__aeabi_dmul+0x1f8>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e722      	b.n	80007b6 <__aeabi_dmul+0x24a>
 8000970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000974:	bf18      	it	ne
 8000976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097a:	f47f aec5 	bne.w	8000708 <__aeabi_dmul+0x19c>
 800097e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000982:	f47f af0d 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098a:	f47f aeeb 	bne.w	8000764 <__aeabi_dmul+0x1f8>
 800098e:	e712      	b.n	80007b6 <__aeabi_dmul+0x24a>

08000990 <__gedf2>:
 8000990:	f04f 3cff 	mov.w	ip, #4294967295
 8000994:	e006      	b.n	80009a4 <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__ledf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	e002      	b.n	80009a4 <__cmpdf2+0x4>
 800099e:	bf00      	nop

080009a0 <__cmpdf2>:
 80009a0:	f04f 0c01 	mov.w	ip, #1
 80009a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ba:	d01b      	beq.n	80009f4 <__cmpdf2+0x54>
 80009bc:	b001      	add	sp, #4
 80009be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009c2:	bf0c      	ite	eq
 80009c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c8:	ea91 0f03 	teqne	r1, r3
 80009cc:	bf02      	ittt	eq
 80009ce:	ea90 0f02 	teqeq	r0, r2
 80009d2:	2000      	moveq	r0, #0
 80009d4:	4770      	bxeq	lr
 80009d6:	f110 0f00 	cmn.w	r0, #0
 80009da:	ea91 0f03 	teq	r1, r3
 80009de:	bf58      	it	pl
 80009e0:	4299      	cmppl	r1, r3
 80009e2:	bf08      	it	eq
 80009e4:	4290      	cmpeq	r0, r2
 80009e6:	bf2c      	ite	cs
 80009e8:	17d8      	asrcs	r0, r3, #31
 80009ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ee:	f040 0001 	orr.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__cmpdf2+0x64>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d107      	bne.n	8000a14 <__cmpdf2+0x74>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d1d6      	bne.n	80009bc <__cmpdf2+0x1c>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d0d3      	beq.n	80009bc <__cmpdf2+0x1c>
 8000a14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdrcmple>:
 8000a1c:	4684      	mov	ip, r0
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4662      	mov	r2, ip
 8000a22:	468c      	mov	ip, r1
 8000a24:	4619      	mov	r1, r3
 8000a26:	4663      	mov	r3, ip
 8000a28:	e000      	b.n	8000a2c <__aeabi_cdcmpeq>
 8000a2a:	bf00      	nop

08000a2c <__aeabi_cdcmpeq>:
 8000a2c:	b501      	push	{r0, lr}
 8000a2e:	f7ff ffb7 	bl	80009a0 <__cmpdf2>
 8000a32:	2800      	cmp	r0, #0
 8000a34:	bf48      	it	mi
 8000a36:	f110 0f00 	cmnmi.w	r0, #0
 8000a3a:	bd01      	pop	{r0, pc}

08000a3c <__aeabi_dcmpeq>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff fff4 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a44:	bf0c      	ite	eq
 8000a46:	2001      	moveq	r0, #1
 8000a48:	2000      	movne	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmplt>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffea 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a58:	bf34      	ite	cc
 8000a5a:	2001      	movcc	r0, #1
 8000a5c:	2000      	movcs	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmple>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffe0 	bl	8000a2c <__aeabi_cdcmpeq>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpge>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffce 	bl	8000a1c <__aeabi_cdrcmple>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpgt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffc4 	bl	8000a1c <__aeabi_cdrcmple>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpun>:
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x10>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d10a      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__aeabi_dcmpun+0x20>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_dcmpun+0x26>
 8000ac0:	f04f 0000 	mov.w	r0, #0
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0001 	mov.w	r0, #1
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b972 	b.w	8000ef8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	4688      	mov	r8, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	d967      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0720 	rsb	r7, r2, #32
 8000c4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c52:	4095      	lsls	r5, r2
 8000c54:	ea47 0803 	orr.w	r8, r7, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c64:	fa1f fc85 	uxth.w	ip, r5
 8000c68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c70:	fb07 f10c 	mul.w	r1, r7, ip
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18eb      	adds	r3, r5, r3
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7e:	f080 811b 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8118 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000c88:	3f02      	subs	r7, #2
 8000c8a:	442b      	add	r3, r5
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca0:	45a4      	cmp	ip, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	192c      	adds	r4, r5, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	442c      	add	r4, r5
 8000cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	b11e      	cbz	r6, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xbe>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80eb 	beq.w	8000eb2 <__udivmoddi4+0x286>
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f783 	clz	r7, r3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d147      	bne.n	8000d82 <__udivmoddi4+0x156>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd0>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80fa 	bhi.w	8000ef0 <__udivmoddi4+0x2c4>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xe8>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 808f 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1e:	1b49      	subs	r1, r1, r5
 8000d20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d24:	fa1f f885 	uxth.w	r8, r5
 8000d28:	2701      	movs	r7, #1
 8000d2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb08 f10c 	mul.w	r1, r8, ip
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d40:	18eb      	adds	r3, r5, r3
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x14c>
 8000d68:	192c      	adds	r4, r5, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x14a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80b6 	bhi.w	8000ee2 <__udivmoddi4+0x2b6>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e79f      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d82:	f1c7 0c20 	rsb	ip, r7, #32
 8000d86:	40bb      	lsls	r3, r7
 8000d88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d90:	fa01 f407 	lsl.w	r4, r1, r7
 8000d94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da0:	4325      	orrs	r5, r4
 8000da2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da6:	0c2c      	lsrs	r4, r5, #16
 8000da8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dac:	fa1f fa8e 	uxth.w	sl, lr
 8000db0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db4:	fb09 f40a 	mul.w	r4, r9, sl
 8000db8:	429c      	cmp	r4, r3
 8000dba:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	f080 8087 	bcs.w	8000ede <__udivmoddi4+0x2b2>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f240 8084 	bls.w	8000ede <__udivmoddi4+0x2b2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4473      	add	r3, lr
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	b2ad      	uxth	r5, r5
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df0:	45a2      	cmp	sl, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1e 0404 	adds.w	r4, lr, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfc:	d26b      	bcs.n	8000ed6 <__udivmoddi4+0x2aa>
 8000dfe:	45a2      	cmp	sl, r4
 8000e00:	d969      	bls.n	8000ed6 <__udivmoddi4+0x2aa>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4474      	add	r4, lr
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	eba4 040a 	sub.w	r4, r4, sl
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c2      	mov	sl, r8
 8000e16:	464b      	mov	r3, r9
 8000e18:	d354      	bcc.n	8000ec4 <__udivmoddi4+0x298>
 8000e1a:	d051      	beq.n	8000ec0 <__udivmoddi4+0x294>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d069      	beq.n	8000ef4 <__udivmoddi4+0x2c8>
 8000e20:	ebb1 050a 	subs.w	r5, r1, sl
 8000e24:	eb64 0403 	sbc.w	r4, r4, r3
 8000e28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	40fc      	lsrs	r4, r7
 8000e30:	ea4c 0505 	orr.w	r5, ip, r5
 8000e34:	e9c6 5400 	strd	r5, r4, [r6]
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f703 	lsr.w	r7, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0c01      	lsrs	r1, r0, #16
 8000e56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5a:	fa1f f885 	uxth.w	r8, r5
 8000e5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb07 f308 	mul.w	r3, r7, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x256>
 8000e72:	1869      	adds	r1, r5, r1
 8000e74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e78:	d22f      	bcs.n	8000eda <__udivmoddi4+0x2ae>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d92d      	bls.n	8000eda <__udivmoddi4+0x2ae>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4429      	add	r1, r5
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	b281      	uxth	r1, r0
 8000e86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb00 f308 	mul.w	r3, r0, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x27e>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea0:	d217      	bcs.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d915      	bls.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb0:	e73b      	b.n	8000d2a <__udivmoddi4+0xfe>
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e709      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	e6e7      	b.n	8000c8c <__udivmoddi4+0x60>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ec0:	4541      	cmp	r1, r8
 8000ec2:	d2ab      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ecc:	3801      	subs	r0, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	e7a4      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	e7e9      	b.n	8000eaa <__udivmoddi4+0x27e>
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	e795      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000eda:	4667      	mov	r7, ip
 8000edc:	e7d1      	b.n	8000e82 <__udivmoddi4+0x256>
 8000ede:	4681      	mov	r9, r0
 8000ee0:	e77c      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	442c      	add	r4, r5
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0x14c>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	442b      	add	r3, r5
 8000eee:	e72f      	b.n	8000d50 <__udivmoddi4+0x124>
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	e708      	b.n	8000d06 <__udivmoddi4+0xda>
 8000ef4:	4637      	mov	r7, r6
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0xa0>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <BMI088_Init>:
#include "BMI088.h"

uint8_t BMI088_Init(BMI088IMU *imu, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intAccPinBank, uint16_t intAccPin, GPIO_TypeDef *intGyrPinBank, uint16_t intGyrPin) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af04      	add	r7, sp, #16
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	807b      	strh	r3, [r7, #2]
	imu->I2Chandle     = I2Chandle;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	601a      	str	r2, [r3, #0]
	imu->intAccPinBank = intAccPinBank;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	605a      	str	r2, [r3, #4]
	imu->intAccPin     = intAccPin;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	887a      	ldrh	r2, [r7, #2]
 8000f1a:	811a      	strh	r2, [r3, #8]
	imu->intGyrPinBank = intGyrPinBank;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f20:	60da      	str	r2, [r3, #12]
	imu->intGyrPin     = intGyrPin;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000f26:	821a      	strh	r2, [r3, #16]
	imu->acc[0] = 0.0f;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f04f 0200 	mov.w	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
	imu->acc[1] = 0.0f;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
	imu->acc[2] = 0.0f;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f04f 0200 	mov.w	r2, #0
 8000f3e:	61da      	str	r2, [r3, #28]
	imu->gyr[0] = 0.0f;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
	imu->gyr[1] = 0.0f;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
	imu->gyr[2] = 0.0f;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
	 * ACCELEROMETER
	 */

	/* Check chip ID */
	uint8_t chipID;
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	2364      	movs	r3, #100	; 0x64
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	2301      	movs	r3, #1
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	f107 0317 	add.w	r3, r7, #23
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2132      	movs	r1, #50	; 0x32
 8000f70:	f004 f916 	bl	80051a0 <HAL_I2C_Mem_Read>

	if (chipID != 0x1E) {
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	2b1e      	cmp	r3, #30
 8000f78:	d001      	beq.n	8000f7e <BMI088_Init+0x82>
		return 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e0ca      	b.n	8001114 <BMI088_Init+0x218>
	} else {
		/* Configure accelerometer LPF bandwidth (Normal, 1010) and ODR (100 Hz, 1000) --> Actual bandwidth = 40 Hz */
		uint8_t accConf = 0xA8;
 8000f7e:	23a8      	movs	r3, #168	; 0xa8
 8000f80:	77fb      	strb	r3, [r7, #31]
		txBuf[0] = BMI088_ACC_CONF; txBuf[1] = accConf;
 8000f82:	2340      	movs	r3, #64	; 0x40
 8000f84:	763b      	strb	r3, [r7, #24]
 8000f86:	7ffb      	ldrb	r3, [r7, #31]
 8000f88:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	f107 0218 	add.w	r2, r7, #24
 8000f92:	2364      	movs	r3, #100	; 0x64
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2302      	movs	r3, #2
 8000f98:	2132      	movs	r1, #50	; 0x32
 8000f9a:	f003 fddd 	bl	8004b58 <HAL_I2C_Master_Transmit>

		/* Accelerometer range (+-6G = 0x01) */
		uint8_t accRange = 0x01;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	77bb      	strb	r3, [r7, #30]
		txBuf[0] = BMI088_ACC_RANGE; txBuf[1] = accRange;
 8000fa2:	2341      	movs	r3, #65	; 0x41
 8000fa4:	763b      	strb	r3, [r7, #24]
 8000fa6:	7fbb      	ldrb	r3, [r7, #30]
 8000fa8:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	f107 0218 	add.w	r2, r7, #24
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	2132      	movs	r1, #50	; 0x32
 8000fba:	f003 fdcd 	bl	8004b58 <HAL_I2C_Master_Transmit>

		/* Configure INT1 and INT2 pin */
		uint8_t intConf = 0x0A;
 8000fbe:	230a      	movs	r3, #10
 8000fc0:	777b      	strb	r3, [r7, #29]
		txBuf[0] = BMI088_INT1_IO_CONF; txBuf[1] = intConf;
 8000fc2:	2353      	movs	r3, #83	; 0x53
 8000fc4:	763b      	strb	r3, [r7, #24]
 8000fc6:	7f7b      	ldrb	r3, [r7, #29]
 8000fc8:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	f107 0218 	add.w	r2, r7, #24
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	2132      	movs	r1, #50	; 0x32
 8000fda:	f003 fdbd 	bl	8004b58 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_INT2_IO_CONF;
 8000fde:	2354      	movs	r3, #84	; 0x54
 8000fe0:	763b      	strb	r3, [r7, #24]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	f107 0218 	add.w	r2, r7, #24
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2302      	movs	r3, #2
 8000ff0:	2132      	movs	r1, #50	; 0x32
 8000ff2:	f003 fdb1 	bl	8004b58 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_INT1_INT2_MAP_DATA; txBuf[1] = 0x44;
 8000ff6:	2358      	movs	r3, #88	; 0x58
 8000ff8:	763b      	strb	r3, [r7, #24]
 8000ffa:	2344      	movs	r3, #68	; 0x44
 8000ffc:	767b      	strb	r3, [r7, #25]

		/* Set accelerometer to active mode */
		txBuf[0] = BMI088_ACC_PWR_CONF; txBuf[1] = 0x00;
 8000ffe:	237c      	movs	r3, #124	; 0x7c
 8001000:	763b      	strb	r3, [r7, #24]
 8001002:	2300      	movs	r3, #0
 8001004:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f107 0218 	add.w	r2, r7, #24
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2302      	movs	r3, #2
 8001014:	2132      	movs	r1, #50	; 0x32
 8001016:	f003 fd9f 	bl	8004b58 <HAL_I2C_Master_Transmit>

		/* Switch accelerometer on */
		txBuf[0] = BMI088_ACC_PWR_CTRL; txBuf[1] = 0x04;
 800101a:	237d      	movs	r3, #125	; 0x7d
 800101c:	763b      	strb	r3, [r7, #24]
 800101e:	2304      	movs	r3, #4
 8001020:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6818      	ldr	r0, [r3, #0]
 8001026:	f107 0218 	add.w	r2, r7, #24
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2302      	movs	r3, #2
 8001030:	2132      	movs	r1, #50	; 0x32
 8001032:	f003 fd91 	bl	8004b58 <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 8001036:	2005      	movs	r0, #5
 8001038:	f003 f95a 	bl	80042f0 <HAL_Delay>
	/*
	 * GYROSCOPE
	 */

	/* Check chip ID */
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_GYR_I2C_ADDR, BMI088_GYR_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f107 0317 	add.w	r3, r7, #23
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2200      	movs	r2, #0
 8001052:	21d2      	movs	r1, #210	; 0xd2
 8001054:	f004 f8a4 	bl	80051a0 <HAL_I2C_Mem_Read>

	if (chipID != 0x0F) {
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2b0f      	cmp	r3, #15
 800105c:	d001      	beq.n	8001062 <BMI088_Init+0x166>
		return 0;
 800105e:	2300      	movs	r3, #0
 8001060:	e058      	b.n	8001114 <BMI088_Init+0x218>
	} else {
		/* Gyro range (+- 500deg/s) */
		uint8_t gyrRange = 0x02;
 8001062:	2302      	movs	r3, #2
 8001064:	773b      	strb	r3, [r7, #28]
		txBuf[0] = BMI088_GYR_RANGE; txBuf[1] = gyrRange;
 8001066:	230f      	movs	r3, #15
 8001068:	763b      	strb	r3, [r7, #24]
 800106a:	7f3b      	ldrb	r3, [r7, #28]
 800106c:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	f107 0218 	add.w	r2, r7, #24
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2302      	movs	r3, #2
 800107c:	21d2      	movs	r1, #210	; 0xd2
 800107e:	f003 fd6b 	bl	8004b58 <HAL_I2C_Master_Transmit>

		/* Gyro bandwidth/ODR (ODR = 200 Hz --> Filter bandwidth = 47 Hz) */
		uint8_t gyrBandwidth = 0x83;
 8001082:	2383      	movs	r3, #131	; 0x83
 8001084:	76fb      	strb	r3, [r7, #27]
		txBuf[0] = BMI088_GYR_BANDWIDTH; txBuf[1] = gyrBandwidth;
 8001086:	2310      	movs	r3, #16
 8001088:	763b      	strb	r3, [r7, #24]
 800108a:	7efb      	ldrb	r3, [r7, #27]
 800108c:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	f107 0218 	add.w	r2, r7, #24
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2302      	movs	r3, #2
 800109c:	21d2      	movs	r1, #210	; 0xd2
 800109e:	f003 fd5b 	bl	8004b58 <HAL_I2C_Master_Transmit>

		/* Gyro power mode */
		txBuf[0] = BMI088_GYR_LPM1; txBuf[1] = 0x00;
 80010a2:	2311      	movs	r3, #17
 80010a4:	763b      	strb	r3, [r7, #24]
 80010a6:	2300      	movs	r3, #0
 80010a8:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	f107 0218 	add.w	r2, r7, #24
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2302      	movs	r3, #2
 80010b8:	21d2      	movs	r1, #210	; 0xd2
 80010ba:	f003 fd4d 	bl	8004b58 <HAL_I2C_Master_Transmit>

		/* Enable gyro interrupt and map to pins */
		txBuf[0] = BMI088_GYR_INT_CTRL; txBuf[1] = 0x80;
 80010be:	2315      	movs	r3, #21
 80010c0:	763b      	strb	r3, [r7, #24]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6818      	ldr	r0, [r3, #0]
 80010ca:	f107 0218 	add.w	r2, r7, #24
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2302      	movs	r3, #2
 80010d4:	21d2      	movs	r1, #210	; 0xd2
 80010d6:	f003 fd3f 	bl	8004b58 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_GYR_INT3_INT4_IO_CONF; txBuf[1] = 0x05;
 80010da:	2316      	movs	r3, #22
 80010dc:	763b      	strb	r3, [r7, #24]
 80010de:	2305      	movs	r3, #5
 80010e0:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6818      	ldr	r0, [r3, #0]
 80010e6:	f107 0218 	add.w	r2, r7, #24
 80010ea:	2364      	movs	r3, #100	; 0x64
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2302      	movs	r3, #2
 80010f0:	21d2      	movs	r1, #210	; 0xd2
 80010f2:	f003 fd31 	bl	8004b58 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_GYR_INT3_INT4_IO_MAP; txBuf[1] = 0x81;
 80010f6:	2318      	movs	r3, #24
 80010f8:	763b      	strb	r3, [r7, #24]
 80010fa:	2381      	movs	r3, #129	; 0x81
 80010fc:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	f107 0218 	add.w	r2, r7, #24
 8001106:	2364      	movs	r3, #100	; 0x64
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2302      	movs	r3, #2
 800110c:	21d2      	movs	r1, #210	; 0xd2
 800110e:	f003 fd23 	bl	8004b58 <HAL_I2C_Master_Transmit>
	}

	return 1;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <BMI088_ReadAcc>:
	uint8_t txBuf[] = {BMI088_GYR_SOFTRESET, 0xB6};
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
	HAL_Delay(1);
}

void BMI088_ReadAcc(BMI088IMU *imu) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af04      	add	r7, sp, #16
 8001122:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[6];
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_DATA, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, BMI088_I2C_TIMEOUT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2306      	movs	r3, #6
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	2212      	movs	r2, #18
 800113a:	2132      	movs	r1, #50	; 0x32
 800113c:	f004 f830 	bl	80051a0 <HAL_I2C_Mem_Read>

	int16_t accX = rxBuf[1];
 8001140:	7b7b      	ldrb	r3, [r7, #13]
 8001142:	82fb      	strh	r3, [r7, #22]
			accX <<= 8;
 8001144:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	82fb      	strh	r3, [r7, #22]
			accX |= rxBuf[0];
 800114c:	7b3b      	ldrb	r3, [r7, #12]
 800114e:	b21a      	sxth	r2, r3
 8001150:	8afb      	ldrh	r3, [r7, #22]
 8001152:	4313      	orrs	r3, r2
 8001154:	82fb      	strh	r3, [r7, #22]

	int16_t accY = rxBuf[3];
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	82bb      	strh	r3, [r7, #20]
			accY <<= 8;
 800115a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	82bb      	strh	r3, [r7, #20]
			accY |= rxBuf[2];
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	b21a      	sxth	r2, r3
 8001166:	8abb      	ldrh	r3, [r7, #20]
 8001168:	4313      	orrs	r3, r2
 800116a:	82bb      	strh	r3, [r7, #20]

	int16_t accZ = rxBuf[5];
 800116c:	7c7b      	ldrb	r3, [r7, #17]
 800116e:	827b      	strh	r3, [r7, #18]
			accZ <<= 8;
 8001170:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	827b      	strh	r3, [r7, #18]
			accZ |= rxBuf[4];
 8001178:	7c3b      	ldrb	r3, [r7, #16]
 800117a:	b21a      	sxth	r2, r3
 800117c:	8a7b      	ldrh	r3, [r7, #18]
 800117e:	4313      	orrs	r3, r2
 8001180:	827b      	strh	r3, [r7, #18]

	/* Scale (to m/s^2) and re-map axes */
	imu->acc[0] = -accY * 0.00179626456f;
 8001182:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001186:	425b      	negs	r3, r3
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001190:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80011e0 <BMI088_ReadAcc+0xc4>
 8001194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->acc[1] = -accX * 0.00179626456f;
 800119e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011a2:	425b      	negs	r3, r3
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80011e0 <BMI088_ReadAcc+0xc4>
 80011b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->acc[2] = -accZ * 0.00179626456f;
 80011ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011be:	425b      	negs	r3, r3
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80011e0 <BMI088_ReadAcc+0xc4>
 80011cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	3aeb70a3 	.word	0x3aeb70a3

080011e4 <BMI088_ReadGyr>:

void BMI088_ReadGyr(BMI088IMU *imu) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	; 0x28
 80011e8:	af04      	add	r7, sp, #16
 80011ea:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[6];
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_GYR_I2C_ADDR, BMI088_GYR_DATA, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, BMI088_I2C_TIMEOUT);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2306      	movs	r3, #6
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	2202      	movs	r2, #2
 8001202:	21d2      	movs	r1, #210	; 0xd2
 8001204:	f003 ffcc 	bl	80051a0 <HAL_I2C_Mem_Read>

	int16_t gyrX = rxBuf[1];
 8001208:	7b7b      	ldrb	r3, [r7, #13]
 800120a:	82fb      	strh	r3, [r7, #22]
			gyrX <<= 8;
 800120c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	82fb      	strh	r3, [r7, #22]
			gyrX |= rxBuf[0];
 8001214:	7b3b      	ldrb	r3, [r7, #12]
 8001216:	b21a      	sxth	r2, r3
 8001218:	8afb      	ldrh	r3, [r7, #22]
 800121a:	4313      	orrs	r3, r2
 800121c:	82fb      	strh	r3, [r7, #22]

	int16_t gyrY = rxBuf[3];
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	82bb      	strh	r3, [r7, #20]
			gyrY <<= 8;
 8001222:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	82bb      	strh	r3, [r7, #20]
			gyrY |= rxBuf[2];
 800122a:	7bbb      	ldrb	r3, [r7, #14]
 800122c:	b21a      	sxth	r2, r3
 800122e:	8abb      	ldrh	r3, [r7, #20]
 8001230:	4313      	orrs	r3, r2
 8001232:	82bb      	strh	r3, [r7, #20]

	int16_t gyrZ = rxBuf[5];
 8001234:	7c7b      	ldrb	r3, [r7, #17]
 8001236:	827b      	strh	r3, [r7, #18]
			gyrZ <<= 8;
 8001238:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	827b      	strh	r3, [r7, #18]
			gyrZ |= rxBuf[4];
 8001240:	7c3b      	ldrb	r3, [r7, #16]
 8001242:	b21a      	sxth	r2, r3
 8001244:	8a7b      	ldrh	r3, [r7, #18]
 8001246:	4313      	orrs	r3, r2
 8001248:	827b      	strh	r3, [r7, #18]

	/* Scale (to rad/s) and re-map axes */
	imu->gyr[0] = -gyrY * 0.00026632423f;
 800124a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800124e:	425b      	negs	r3, r3
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001258:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80012a8 <BMI088_ReadGyr+0xc4>
 800125c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->gyr[1] = -gyrX * 0.00026632423f;
 8001266:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800126a:	425b      	negs	r3, r3
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001274:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80012a8 <BMI088_ReadGyr+0xc4>
 8001278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu->gyr[2] = -gyrZ * 0.00026632423f;
 8001282:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001286:	425b      	negs	r3, r3
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001290:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80012a8 <BMI088_ReadGyr+0xc4>
 8001294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	398ba16f 	.word	0x398ba16f

080012ac <GPSNMEAParser_Init>:
#include "GPSNMEAParser.h"

void GPSNMEAParser_Init(GPSData *gpsData) {
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	gpsData->curSentence = NONE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	gpsData->readingHeader = 0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	gpsData->readingSentenceData = 0;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	gpsData->headerBufIndex = 0;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	gpsData->segmentBufIndex = 0;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	gpsData->segmentCount = 0;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	
	/* Null-terminate header buffer (needed for strcmp function) */
	gpsData->headerBuf[5] = '\0';
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <GPSNMEAParser_ExtractGGA>:

void GPSNMEAParser_ExtractGGA(GPSData *gpsData) {
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	ed2d 8b02 	vpush	{d8}
 80012fe:	b090      	sub	sp, #64	; 0x40
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (gpsData->segmentCount == 2) { /* Latitude */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130a:	2b02      	cmp	r3, #2
 800130c:	d166      	bne.n	80013dc <GPSNMEAParser_ExtractGGA+0xe4>
 800130e:	466b      	mov	r3, sp
 8001310:	461d      	mov	r5, r3
		
		/* Extract degrees */
		char latDegBuf[] = {gpsData->segmentBuf[0], gpsData->segmentBuf[1]};
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001318:	733b      	strb	r3, [r7, #12]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001320:	737b      	strb	r3, [r7, #13]
			
		/* Extract minutes */
		char cLatMin[gpsData->segmentBufIndex - 2];
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001328:	1e98      	subs	r0, r3, #2
 800132a:	1e43      	subs	r3, r0, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	4603      	mov	r3, r0
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	f04f 0400 	mov.w	r4, #0
 800133e:	00d4      	lsls	r4, r2, #3
 8001340:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001344:	00cb      	lsls	r3, r1, #3
 8001346:	4603      	mov	r3, r0
 8001348:	4619      	mov	r1, r3
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	f04f 0400 	mov.w	r4, #0
 8001356:	00d4      	lsls	r4, r2, #3
 8001358:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800135c:	00cb      	lsls	r3, r1, #3
 800135e:	4603      	mov	r3, r0
 8001360:	3307      	adds	r3, #7
 8001362:	08db      	lsrs	r3, r3, #3
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	ebad 0d03 	sub.w	sp, sp, r3
 800136a:	466b      	mov	r3, sp
 800136c:	3300      	adds	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
		for (int n = 2; n < gpsData->segmentBufIndex; n++) {
 8001370:	2302      	movs	r3, #2
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001374:	e00b      	b.n	800138e <GPSNMEAParser_ExtractGGA+0x96>
			cLatMin[n - 2] = gpsData->segmentBuf[n];
 8001376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001378:	3b02      	subs	r3, #2
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800137e:	440a      	add	r2, r1
 8001380:	322b      	adds	r2, #43	; 0x2b
 8001382:	7811      	ldrb	r1, [r2, #0]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	54d1      	strb	r1, [r2, r3]
		for (int n = 2; n < gpsData->segmentBufIndex; n++) {
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	3301      	adds	r3, #1
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001394:	461a      	mov	r2, r3
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	4293      	cmp	r3, r2
 800139a:	dbec      	blt.n	8001376 <GPSNMEAParser_ExtractGGA+0x7e>
		}
		
		/* Convert to decimal */
		gpsData->latitude_dec = ((float) atoi(latDegBuf)) + ((float) atof(cLatMin)) / 60.0f;	
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4618      	mov	r0, r3
 80013a2:	f009 f891 	bl	800a4c8 <atoi>
 80013a6:	ee07 0a90 	vmov	s15, r0
 80013aa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f009 f886 	bl	800a4c2 <atof>
 80013b6:	ec54 3b10 	vmov	r3, r4, d0
 80013ba:	4618      	mov	r0, r3
 80013bc:	4621      	mov	r1, r4
 80013be:	f7ff fbcd 	bl	8000b5c <__aeabi_d2f>
 80013c2:	ee06 0a90 	vmov	s13, r0
 80013c6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800169c <GPSNMEAParser_ExtractGGA+0x3a4>
 80013ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ce:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edc3 7a00 	vstr	s15, [r3]
 80013d8:	46ad      	mov	sp, r5
		}
		
		gpsData->meanSeaLevel_m = (float) atof(cMSL);	
		
	}
}
 80013da:	e159      	b.n	8001690 <GPSNMEAParser_ExtractGGA+0x398>
	} else if (gpsData->segmentCount == 3) { /* N/S */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d10b      	bne.n	80013fe <GPSNMEAParser_ExtractGGA+0x106>
		gpsData->latitudeNS = (gpsData->segmentBuf[0] == 'S');
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80013ec:	2b53      	cmp	r3, #83	; 0x53
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	77da      	strb	r2, [r3, #31]
}
 80013fc:	e148      	b.n	8001690 <GPSNMEAParser_ExtractGGA+0x398>
	} else if (gpsData->segmentCount == 4) { /* Longitude */
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001404:	2b04      	cmp	r3, #4
 8001406:	d16a      	bne.n	80014de <GPSNMEAParser_ExtractGGA+0x1e6>
 8001408:	466b      	mov	r3, sp
 800140a:	461d      	mov	r5, r3
		char lonDegBuf[] ={gpsData->segmentBuf[0], gpsData->segmentBuf[1], gpsData->segmentBuf[2]};
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001412:	723b      	strb	r3, [r7, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800141a:	727b      	strb	r3, [r7, #9]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001422:	72bb      	strb	r3, [r7, #10]
		char cLonMin[gpsData->segmentBufIndex - 3];
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800142a:	1ed8      	subs	r0, r3, #3
 800142c:	1e43      	subs	r3, r0, #1
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	4603      	mov	r3, r0
 8001432:	4619      	mov	r1, r3
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	f04f 0400 	mov.w	r4, #0
 8001440:	00d4      	lsls	r4, r2, #3
 8001442:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001446:	00cb      	lsls	r3, r1, #3
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	f04f 0400 	mov.w	r4, #0
 8001458:	00d4      	lsls	r4, r2, #3
 800145a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800145e:	00cb      	lsls	r3, r1, #3
 8001460:	4603      	mov	r3, r0
 8001462:	3307      	adds	r3, #7
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	ebad 0d03 	sub.w	sp, sp, r3
 800146c:	466b      	mov	r3, sp
 800146e:	3300      	adds	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
		for (int n = 3; n < gpsData->segmentBufIndex; n++) {
 8001472:	2303      	movs	r3, #3
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
 8001476:	e00b      	b.n	8001490 <GPSNMEAParser_ExtractGGA+0x198>
			cLonMin[n - 3] = gpsData->segmentBuf[n];
 8001478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800147a:	3b03      	subs	r3, #3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001480:	440a      	add	r2, r1
 8001482:	322b      	adds	r2, #43	; 0x2b
 8001484:	7811      	ldrb	r1, [r2, #0]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	54d1      	strb	r1, [r2, r3]
		for (int n = 3; n < gpsData->segmentBufIndex; n++) {
 800148a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148c:	3301      	adds	r3, #1
 800148e:	633b      	str	r3, [r7, #48]	; 0x30
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001496:	461a      	mov	r2, r3
 8001498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149a:	4293      	cmp	r3, r2
 800149c:	dbec      	blt.n	8001478 <GPSNMEAParser_ExtractGGA+0x180>
		gpsData->longitude_dec = ((float) atoi(lonDegBuf)) + ((float) atof(cLonMin)) / 60.0f;	
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4618      	mov	r0, r3
 80014a4:	f009 f810 	bl	800a4c8 <atoi>
 80014a8:	ee07 0a90 	vmov	s15, r0
 80014ac:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f009 f805 	bl	800a4c2 <atof>
 80014b8:	ec54 3b10 	vmov	r3, r4, d0
 80014bc:	4618      	mov	r0, r3
 80014be:	4621      	mov	r1, r4
 80014c0:	f7ff fb4c 	bl	8000b5c <__aeabi_d2f>
 80014c4:	ee06 0a90 	vmov	s13, r0
 80014c8:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800169c <GPSNMEAParser_ExtractGGA+0x3a4>
 80014cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edc3 7a01 	vstr	s15, [r3, #4]
 80014da:	46ad      	mov	sp, r5
}
 80014dc:	e0d8      	b.n	8001690 <GPSNMEAParser_ExtractGGA+0x398>
	} else if (gpsData->segmentCount == 5) { /* E/W */
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e4:	2b05      	cmp	r3, #5
 80014e6:	d10c      	bne.n	8001502 <GPSNMEAParser_ExtractGGA+0x20a>
		gpsData->longitudeEW = (gpsData->segmentBuf[0] == 'W');
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80014ee:	2b57      	cmp	r3, #87	; 0x57
 80014f0:	bf0c      	ite	eq
 80014f2:	2301      	moveq	r3, #1
 80014f4:	2300      	movne	r3, #0
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001500:	e0c6      	b.n	8001690 <GPSNMEAParser_ExtractGGA+0x398>
	} else if (gpsData->segmentCount == 6) { /* Fix quality */
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001508:	2b06      	cmp	r3, #6
 800150a:	d107      	bne.n	800151c <GPSNMEAParser_ExtractGGA+0x224>
		gpsData->fixQuality = (uint8_t) (gpsData->segmentBuf[0] - '0'); /* Convert char to int */
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001512:	3b30      	subs	r3, #48	; 0x30
 8001514:	b2da      	uxtb	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	775a      	strb	r2, [r3, #29]
}
 800151a:	e0b9      	b.n	8001690 <GPSNMEAParser_ExtractGGA+0x398>
	} else if (gpsData->segmentCount == 7) { /* Number of satellites being tracked */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001522:	2b07      	cmp	r3, #7
 8001524:	d111      	bne.n	800154a <GPSNMEAParser_ExtractGGA+0x252>
		gpsData->numSatellites = ((uint8_t) (gpsData->segmentBuf[0] - '0')) * 10 + (uint8_t) (gpsData->segmentBuf[1] - '0');
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800152c:	461a      	mov	r2, r3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4413      	add	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800153c:	4413      	add	r3, r2
 800153e:	b2db      	uxtb	r3, r3
 8001540:	3b10      	subs	r3, #16
 8001542:	b2da      	uxtb	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	779a      	strb	r2, [r3, #30]
}
 8001548:	e0a2      	b.n	8001690 <GPSNMEAParser_ExtractGGA+0x398>
	} else if (gpsData->segmentCount == 9) { /* Altitude above mean sea level */
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001550:	2b09      	cmp	r3, #9
 8001552:	d14c      	bne.n	80015ee <GPSNMEAParser_ExtractGGA+0x2f6>
 8001554:	466b      	mov	r3, sp
 8001556:	461d      	mov	r5, r3
		char cAlt[gpsData->segmentBufIndex];
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 003b 	ldrb.w	r0, [r3, #59]	; 0x3b
 800155e:	4603      	mov	r3, r0
 8001560:	3b01      	subs	r3, #1
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
 8001564:	b2c1      	uxtb	r1, r0
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	f04f 0400 	mov.w	r4, #0
 8001572:	00d4      	lsls	r4, r2, #3
 8001574:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001578:	00cb      	lsls	r3, r1, #3
 800157a:	b2c1      	uxtb	r1, r0
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	f04f 0400 	mov.w	r4, #0
 8001588:	00d4      	lsls	r4, r2, #3
 800158a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800158e:	00cb      	lsls	r3, r1, #3
 8001590:	4603      	mov	r3, r0
 8001592:	3307      	adds	r3, #7
 8001594:	08db      	lsrs	r3, r3, #3
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	ebad 0d03 	sub.w	sp, sp, r3
 800159c:	466b      	mov	r3, sp
 800159e:	3300      	adds	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
		for (int n = 0; n < gpsData->segmentBufIndex; n++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
 80015a6:	e00c      	b.n	80015c2 <GPSNMEAParser_ExtractGGA+0x2ca>
			cAlt[n] = gpsData->segmentBuf[n];
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ac:	4413      	add	r3, r2
 80015ae:	332b      	adds	r3, #43	; 0x2b
 80015b0:	7819      	ldrb	r1, [r3, #0]
 80015b2:	6a3a      	ldr	r2, [r7, #32]
 80015b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b6:	4413      	add	r3, r2
 80015b8:	460a      	mov	r2, r1
 80015ba:	701a      	strb	r2, [r3, #0]
		for (int n = 0; n < gpsData->segmentBufIndex; n++) {
 80015bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015be:	3301      	adds	r3, #1
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80015c8:	461a      	mov	r2, r3
 80015ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015cc:	4293      	cmp	r3, r2
 80015ce:	dbeb      	blt.n	80015a8 <GPSNMEAParser_ExtractGGA+0x2b0>
		gpsData->altitude_m = (float) atof(cAlt);	
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f008 ff75 	bl	800a4c2 <atof>
 80015d8:	ec54 3b10 	vmov	r3, r4, d0
 80015dc:	4618      	mov	r0, r3
 80015de:	4621      	mov	r1, r4
 80015e0:	f7ff fabc 	bl	8000b5c <__aeabi_d2f>
 80015e4:	4602      	mov	r2, r0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	46ad      	mov	sp, r5
}
 80015ec:	e050      	b.n	8001690 <GPSNMEAParser_ExtractGGA+0x398>
	} else if (gpsData->segmentCount == 11) { /* Height of geoid (mean sea level) above WGS84 ellipsoid */
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f4:	2b0b      	cmp	r3, #11
 80015f6:	d14b      	bne.n	8001690 <GPSNMEAParser_ExtractGGA+0x398>
 80015f8:	466b      	mov	r3, sp
 80015fa:	461d      	mov	r5, r3
		char cMSL[gpsData->segmentBufIndex];
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 003b 	ldrb.w	r0, [r3, #59]	; 0x3b
 8001602:	4603      	mov	r3, r0
 8001604:	3b01      	subs	r3, #1
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001608:	b2c1      	uxtb	r1, r0
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	f04f 0400 	mov.w	r4, #0
 8001616:	00d4      	lsls	r4, r2, #3
 8001618:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800161c:	00cb      	lsls	r3, r1, #3
 800161e:	b2c1      	uxtb	r1, r0
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	f04f 0400 	mov.w	r4, #0
 800162c:	00d4      	lsls	r4, r2, #3
 800162e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001632:	00cb      	lsls	r3, r1, #3
 8001634:	4603      	mov	r3, r0
 8001636:	3307      	adds	r3, #7
 8001638:	08db      	lsrs	r3, r3, #3
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	ebad 0d03 	sub.w	sp, sp, r3
 8001640:	466b      	mov	r3, sp
 8001642:	3300      	adds	r3, #0
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
		for (int n = 0; n < gpsData->segmentBufIndex; n++) {
 8001646:	2300      	movs	r3, #0
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38
 800164a:	e00c      	b.n	8001666 <GPSNMEAParser_ExtractGGA+0x36e>
			cMSL[n] = gpsData->segmentBuf[n];
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001650:	4413      	add	r3, r2
 8001652:	332b      	adds	r3, #43	; 0x2b
 8001654:	7819      	ldrb	r1, [r3, #0]
 8001656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165a:	4413      	add	r3, r2
 800165c:	460a      	mov	r2, r1
 800165e:	701a      	strb	r2, [r3, #0]
		for (int n = 0; n < gpsData->segmentBufIndex; n++) {
 8001660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001662:	3301      	adds	r3, #1
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800166c:	461a      	mov	r2, r3
 800166e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001670:	4293      	cmp	r3, r2
 8001672:	dbeb      	blt.n	800164c <GPSNMEAParser_ExtractGGA+0x354>
		gpsData->meanSeaLevel_m = (float) atof(cMSL);	
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	4618      	mov	r0, r3
 8001678:	f008 ff23 	bl	800a4c2 <atof>
 800167c:	ec54 3b10 	vmov	r3, r4, d0
 8001680:	4618      	mov	r0, r3
 8001682:	4621      	mov	r1, r4
 8001684:	f7ff fa6a 	bl	8000b5c <__aeabi_d2f>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	619a      	str	r2, [r3, #24]
 800168e:	46ad      	mov	sp, r5
}
 8001690:	bf00      	nop
 8001692:	3740      	adds	r7, #64	; 0x40
 8001694:	46bd      	mov	sp, r7
 8001696:	ecbd 8b02 	vpop	{d8}
 800169a:	bdb0      	pop	{r4, r5, r7, pc}
 800169c:	42700000 	.word	0x42700000

080016a0 <GPSNMEAParser_Feed>:
	* MAGNETIC VARIATION COMES WITH N/W/S/E ??? 
	*/
	
}

void GPSNMEAParser_Feed(GPSData *gpsData, char c) {		
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
	
	if (gpsData->readingHeader) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d059      	beq.n	800176a <GPSNMEAParser_Feed+0xca>
				
			gpsData->headerBuf[gpsData->headerBufIndex] = c;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			gpsData->headerBufIndex++;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016ce:	3301      	adds	r3, #1
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			
			/* Check if all header characters have been read in */
			if (gpsData->headerBufIndex == 5) {
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016de:	2b05      	cmp	r3, #5
 80016e0:	f040 8095 	bne.w	800180e <GPSNMEAParser_Feed+0x16e>
				gpsData->readingHeader = 0;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				gpsData->readingSentenceData = 1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				
				/* Extract sentence type */
				if (!strcmp(gpsData->headerBuf, "GNGGA")) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3324      	adds	r3, #36	; 0x24
 80016f8:	4947      	ldr	r1, [pc, #284]	; (8001818 <GPSNMEAParser_Feed+0x178>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fd68 	bl	80001d0 <strcmp>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d104      	bne.n	8001710 <GPSNMEAParser_Feed+0x70>
					gpsData->curSentence = GGA;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800170e:	e023      	b.n	8001758 <GPSNMEAParser_Feed+0xb8>
				} else if (!strcmp(gpsData->headerBuf, "GNRMC")) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3324      	adds	r3, #36	; 0x24
 8001714:	4941      	ldr	r1, [pc, #260]	; (800181c <GPSNMEAParser_Feed+0x17c>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fd5a 	bl	80001d0 <strcmp>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d104      	bne.n	800172c <GPSNMEAParser_Feed+0x8c>
					gpsData->curSentence = RMC;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2202      	movs	r2, #2
 8001726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800172a:	e015      	b.n	8001758 <GPSNMEAParser_Feed+0xb8>
				} else if (!strcmp(gpsData->headerBuf, "GNVTG")) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3324      	adds	r3, #36	; 0x24
 8001730:	493b      	ldr	r1, [pc, #236]	; (8001820 <GPSNMEAParser_Feed+0x180>)
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fd4c 	bl	80001d0 <strcmp>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d104      	bne.n	8001748 <GPSNMEAParser_Feed+0xa8>
					gpsData->curSentence = VTG;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2203      	movs	r2, #3
 8001742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001746:	e007      	b.n	8001758 <GPSNMEAParser_Feed+0xb8>
				} else { /* Unknown sentence type (or not implemented yet) */
					gpsData->curSentence = 0;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					gpsData->readingSentenceData = 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				}
					
								
				/* Reset sentence segment buffer and segment counter */
				gpsData->segmentBufIndex = 0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				gpsData->segmentCount = 0;								
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
		}
			
	}
	
}
 8001768:	e051      	b.n	800180e <GPSNMEAParser_Feed+0x16e>
		if (c == '$') { /* Start of sentence */
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	2b24      	cmp	r3, #36	; 0x24
 800176e:	d10b      	bne.n	8001788 <GPSNMEAParser_Feed+0xe8>
			gpsData->readingHeader = 1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			gpsData->readingSentenceData = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			gpsData->headerBufIndex = 0;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		if (gpsData->readingSentenceData) {	/* Extract sentence data */		
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800178e:	2b00      	cmp	r3, #0
 8001790:	d03d      	beq.n	800180e <GPSNMEAParser_Feed+0x16e>
			if (c == '\r' || c == '\n') { /* End of sentence */
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	2b0d      	cmp	r3, #13
 8001796:	d002      	beq.n	800179e <GPSNMEAParser_Feed+0xfe>
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d104      	bne.n	80017a8 <GPSNMEAParser_Feed+0x108>
				gpsData->readingSentenceData = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80017a6:	e032      	b.n	800180e <GPSNMEAParser_Feed+0x16e>
				if (c == ',') { /* End of segment */						
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	2b2c      	cmp	r3, #44	; 0x2c
 80017ac:	d11e      	bne.n	80017ec <GPSNMEAParser_Feed+0x14c>
					if (gpsData->segmentCount > 1) { /* Start from second 'argument' */
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d90c      	bls.n	80017d2 <GPSNMEAParser_Feed+0x132>
						if (gpsData->curSentence == GGA) { /* GGA */
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d103      	bne.n	80017ca <GPSNMEAParser_Feed+0x12a>
							GPSNMEAParser_ExtractGGA(gpsData);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fd98 	bl	80012f8 <GPSNMEAParser_ExtractGGA>
 80017c8:	e003      	b.n	80017d2 <GPSNMEAParser_Feed+0x132>
						} else if (gpsData->curSentence == RMC) { /* RMC */
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017d0:	2b02      	cmp	r3, #2
					gpsData->segmentBufIndex = 0;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
					gpsData->segmentCount++;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e0:	3301      	adds	r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80017ea:	e010      	b.n	800180e <GPSNMEAParser_Feed+0x16e>
					gpsData->segmentBuf[gpsData->segmentBufIndex] = c;						
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
					gpsData->segmentBufIndex++;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8001804:	3301      	adds	r3, #1
 8001806:	b2da      	uxtb	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	0800d5d0 	.word	0x0800d5d0
 800181c:	0800d5d8 	.word	0x0800d5d8
 8001820:	0800d5e0 	.word	0x0800d5e0

08001824 <IISMagnetometer_Init>:
#include "IIS2MDC.h"

uint8_t IISMagnetometer_Init(IISMagnetometer *mag, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intPinBank, uint16_t intPin) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af04      	add	r7, sp, #16
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	807b      	strh	r3, [r7, #2]
	mag->I2Chandle  = I2Chandle;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	601a      	str	r2, [r3, #0]
	mag->intPinBank = intPinBank;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	605a      	str	r2, [r3, #4]
	mag->intPin     = intPin;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	887a      	ldrh	r2, [r7, #2]
 8001842:	811a      	strh	r2, [r3, #8]
	mag->xyz[0]     = 0;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
	mag->xyz[1]     = 0;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
	mag->xyz[2]     = 0;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
	mag->tempC      = 0.0f;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	619a      	str	r2, [r3, #24]

	/* Check device ID register */
	uint8_t whoAmI;
	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_WHOAMI_REG, I2C_MEMADD_SIZE_8BIT, &whoAmI, 1, IIS_I2C_TIMEOUT);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	2364      	movs	r3, #100	; 0x64
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	2301      	movs	r3, #1
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2301      	movs	r3, #1
 8001878:	224f      	movs	r2, #79	; 0x4f
 800187a:	213c      	movs	r1, #60	; 0x3c
 800187c:	f003 fc90 	bl	80051a0 <HAL_I2C_Mem_Read>

	if (whoAmI != IIS_WHOAMI) {
 8001880:	7d3b      	ldrb	r3, [r7, #20]
 8001882:	2b40      	cmp	r3, #64	; 0x40
 8001884:	d001      	beq.n	800188a <IISMagnetometer_Init+0x66>
		return 0;
 8001886:	2300      	movs	r3, #0
 8001888:	e030      	b.n	80018ec <IISMagnetometer_Init+0xc8>

	/* Configure sensor */
	uint8_t txBuf[2];

	/* Temperature compensation = 1, Reboot = 0, Soft_Rst = 0, Low Power = 0, ODR 100 Hz = 11, MODE CONTINUOUS 00 */
	uint8_t cfgRegA = 0x8C;
 800188a:	238c      	movs	r3, #140	; 0x8c
 800188c:	75fb      	strb	r3, [r7, #23]
	txBuf[0] = IIS_CFG_REG_A; txBuf[1] = cfgRegA;
 800188e:	2360      	movs	r3, #96	; 0x60
 8001890:	743b      	strb	r3, [r7, #16]
 8001892:	7dfb      	ldrb	r3, [r7, #23]
 8001894:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f107 0210 	add.w	r2, r7, #16
 800189e:	2364      	movs	r3, #100	; 0x64
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2302      	movs	r3, #2
 80018a4:	213c      	movs	r1, #60	; 0x3c
 80018a6:	f003 f957 	bl	8004b58 <HAL_I2C_Master_Transmit>

	/* 0 0 0, Offset cancellation = 0, INT_on_DataOff = 0, Set_Freq = 0, Offset cancellation = 0, Low-pass filter = 1 */
	uint8_t cfgRegB = 0x01;
 80018aa:	2301      	movs	r3, #1
 80018ac:	75bb      	strb	r3, [r7, #22]
	txBuf[0] = IIS_CFG_REG_B; txBuf[1] = cfgRegB;
 80018ae:	2361      	movs	r3, #97	; 0x61
 80018b0:	743b      	strb	r3, [r7, #16]
 80018b2:	7dbb      	ldrb	r3, [r7, #22]
 80018b4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	f107 0210 	add.w	r2, r7, #16
 80018be:	2364      	movs	r3, #100	; 0x64
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2302      	movs	r3, #2
 80018c4:	213c      	movs	r1, #60	; 0x3c
 80018c6:	f003 f947 	bl	8004b58 <HAL_I2C_Master_Transmit>

	/* 0, INT_on_PIN = 0, I2C_DIS = 0, BDU = 0, BLE = 0, 0, Self_test = 0, DRDY_on_PIN = 1 */
	uint8_t cfgRegC = 0x01;
 80018ca:	2301      	movs	r3, #1
 80018cc:	757b      	strb	r3, [r7, #21]
	txBuf[0] = IIS_CFG_REG_C; txBuf[1] = cfgRegC;
 80018ce:	2362      	movs	r3, #98	; 0x62
 80018d0:	743b      	strb	r3, [r7, #16]
 80018d2:	7d7b      	ldrb	r3, [r7, #21]
 80018d4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	f107 0210 	add.w	r2, r7, #16
 80018de:	2364      	movs	r3, #100	; 0x64
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2302      	movs	r3, #2
 80018e4:	213c      	movs	r1, #60	; 0x3c
 80018e6:	f003 f937 	bl	8004b58 <HAL_I2C_Master_Transmit>

	return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <IISMagnetometer_Read>:
	uint8_t txBuf[] = {IIS_CFG_REG_A, 0x60};
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
	HAL_Delay(50);
}

void IISMagnetometer_Read(IISMagnetometer *mag) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af04      	add	r7, sp, #16
 80018fa:	6078      	str	r0, [r7, #4]
	/* Wait until DRDY pin is set */
	while (!HAL_GPIO_ReadPin(mag->intPinBank, mag->intPin)) {
 80018fc:	e002      	b.n	8001904 <IISMagnetometer_Read+0x10>
		HAL_Delay(5);
 80018fe:	2005      	movs	r0, #5
 8001900:	f002 fcf6 	bl	80042f0 <HAL_Delay>
	while (!HAL_GPIO_ReadPin(mag->intPinBank, mag->intPin)) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	891b      	ldrh	r3, [r3, #8]
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f002 ffae 	bl	8004870 <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f1      	beq.n	80018fe <IISMagnetometer_Read+0xa>

	/* Read raw X, Y, and Z values */
	uint8_t rxBuf[2];
	int16_t magRaw[3];

	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_OUTX_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	9302      	str	r3, [sp, #8]
 8001922:	2302      	movs	r3, #2
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	2268      	movs	r2, #104	; 0x68
 8001930:	213c      	movs	r1, #60	; 0x3c
 8001932:	f003 fc35 	bl	80051a0 <HAL_I2C_Mem_Read>
	magRaw[0] = ((rxBuf[1] << 8) | rxBuf[0]);
 8001936:	7d7b      	ldrb	r3, [r7, #21]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	b21a      	sxth	r2, r3
 800193c:	7d3b      	ldrb	r3, [r7, #20]
 800193e:	b21b      	sxth	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b21b      	sxth	r3, r3
 8001944:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_OUTY_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	2364      	movs	r3, #100	; 0x64
 800194c:	9302      	str	r3, [sp, #8]
 800194e:	2302      	movs	r3, #2
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	226a      	movs	r2, #106	; 0x6a
 800195c:	213c      	movs	r1, #60	; 0x3c
 800195e:	f003 fc1f 	bl	80051a0 <HAL_I2C_Mem_Read>
	magRaw[1] = ((rxBuf[1] << 8) | rxBuf[0]);
 8001962:	7d7b      	ldrb	r3, [r7, #21]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	b21a      	sxth	r2, r3
 8001968:	7d3b      	ldrb	r3, [r7, #20]
 800196a:	b21b      	sxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	b21b      	sxth	r3, r3
 8001970:	81fb      	strh	r3, [r7, #14]

	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_OUTZ_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	2364      	movs	r3, #100	; 0x64
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	2302      	movs	r3, #2
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	226c      	movs	r2, #108	; 0x6c
 8001988:	213c      	movs	r1, #60	; 0x3c
 800198a:	f003 fc09 	bl	80051a0 <HAL_I2C_Mem_Read>
	magRaw[2] = ((rxBuf[1] << 8) | rxBuf[0]);
 800198e:	7d7b      	ldrb	r3, [r7, #21]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	b21a      	sxth	r2, r3
 8001994:	7d3b      	ldrb	r3, [r7, #20]
 8001996:	b21b      	sxth	r3, r3
 8001998:	4313      	orrs	r3, r2
 800199a:	b21b      	sxth	r3, r3
 800199c:	823b      	strh	r3, [r7, #16]

	/* Sensitivity is 1.5 (+-7%) milli Gauss per LSB */
    mag->xyz[0] =  magRaw[0] * 1.5f;
 800199e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019aa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80019ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	edc3 7a03 	vstr	s15, [r3, #12]
    mag->xyz[1] = -magRaw[1] * 1.5f;
 80019b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019bc:	425b      	negs	r3, r3
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edc3 7a04 	vstr	s15, [r3, #16]
    mag->xyz[2] = -magRaw[2] * 1.5f;
 80019d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019d8:	425b      	negs	r3, r3
 80019da:	ee07 3a90 	vmov	s15, r3
 80019de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e2:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80019e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Read temperature */
	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_TEMP_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	2364      	movs	r3, #100	; 0x64
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	2302      	movs	r3, #2
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2301      	movs	r3, #1
 8001a04:	226e      	movs	r2, #110	; 0x6e
 8001a06:	213c      	movs	r1, #60	; 0x3c
 8001a08:	f003 fbca 	bl	80051a0 <HAL_I2C_Mem_Read>
	int16_t temp = rxBuf[1];
 8001a0c:	7d7b      	ldrb	r3, [r7, #21]
 8001a0e:	82fb      	strh	r3, [r7, #22]
			temp <<= 8;
 8001a10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	82fb      	strh	r3, [r7, #22]
			temp |= rxBuf[0];
 8001a18:	7d3b      	ldrb	r3, [r7, #20]
 8001a1a:	b21a      	sxth	r2, r3
 8001a1c:	8afb      	ldrh	r3, [r7, #22]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	82fb      	strh	r3, [r7, #22]

	mag->tempC = temp / 8.0f;
 8001a22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001a32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <KalmanRollPitch_Init>:
#include "KalmanRollPitch.h"

void KalmanRollPitch_Init(KalmanRollPitch *kal, float Pinit, float *Q, float *R) {
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a50:	6079      	str	r1, [r7, #4]
 8001a52:	603a      	str	r2, [r7, #0]
	kal->phi   = 0.0f;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
	kal->theta = 0.0f;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	605a      	str	r2, [r3, #4]
	kal->P[0] = Pinit; kal->P[1] = 0.0f;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
	kal->P[2] = 0.0f;  kal->P[3] = Pinit;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	615a      	str	r2, [r3, #20]
	kal->Q[0] = Q[0];  kal->Q[1] = Q[1];
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	619a      	str	r2, [r3, #24]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	61da      	str	r2, [r3, #28]
	kal->R[0] = R[0];  kal->R[1] = R[1]; kal->R[2] = R[2];
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	621a      	str	r2, [r3, #32]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <KalmanRollPitch_Update>:

void KalmanRollPitch_Update(KalmanRollPitch *kal, float *gyr, float *acc, float Va, float T) {
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b0bd      	sub	sp, #244	; 0xf4
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6178      	str	r0, [r7, #20]
 8001abc:	6139      	str	r1, [r7, #16]
 8001abe:	60fa      	str	r2, [r7, #12]
 8001ac0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ac4:	edc7 0a01 	vstr	s1, [r7, #4]
	/* Extract measurements */
	float p = gyr[0];
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float q = gyr[1];
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float r = gyr[2];
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	float ax = acc[0];
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float ay = acc[1];
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float az = acc[2];
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	/* Predict */

	/* Compute common trig terms */
	float sp = sin(kal->phi);   float cp = cos(kal->phi);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fcdd 	bl	80004bc <__aeabi_f2d>
 8001b02:	4603      	mov	r3, r0
 8001b04:	460c      	mov	r4, r1
 8001b06:	ec44 3b10 	vmov	d0, r3, r4
 8001b0a:	f007 f845 	bl	8008b98 <sin>
 8001b0e:	ec54 3b10 	vmov	r3, r4, d0
 8001b12:	4618      	mov	r0, r3
 8001b14:	4621      	mov	r1, r4
 8001b16:	f7ff f821 	bl	8000b5c <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fcc9 	bl	80004bc <__aeabi_f2d>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460c      	mov	r4, r1
 8001b2e:	ec44 3b10 	vmov	d0, r3, r4
 8001b32:	f006 ffed 	bl	8008b10 <cos>
 8001b36:	ec54 3b10 	vmov	r3, r4, d0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	f7ff f80d 	bl	8000b5c <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float tt = tan(kal->theta);
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fcb5 	bl	80004bc <__aeabi_f2d>
 8001b52:	4603      	mov	r3, r0
 8001b54:	460c      	mov	r4, r1
 8001b56:	ec44 3b10 	vmov	d0, r3, r4
 8001b5a:	f007 f865 	bl	8008c28 <tan>
 8001b5e:	ec54 3b10 	vmov	r3, r4, d0
 8001b62:	4618      	mov	r0, r3
 8001b64:	4621      	mov	r1, r4
 8001b66:	f7fe fff9 	bl	8000b5c <__aeabi_d2f>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	/* x+ = x- + T * f(x,u) */
	kal->phi   = kal->phi   + T * (p + tt * (q * sp + r * cp));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	edd7 6a3a 	vldr	s13, [r7, #232]	; 0xe8
 8001b7a:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001b7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b82:	ed97 6a39 	vldr	s12, [r7, #228]	; 0xe4
 8001b86:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001b8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b8e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b92:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001b96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b9a:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8001b9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
	kal->theta = kal->theta + T * (    q * cp      - r * sp);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bba:	edd7 6a3a 	vldr	s13, [r7, #232]	; 0xe8
 8001bbe:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001bc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc6:	ed97 6a39 	vldr	s12, [r7, #228]	; 0xe4
 8001bca:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001bce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bd2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Recompute common trig terms using new state estimates */
	      sp = sin(kal->phi); 		  cp = cos(kal->phi);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fc65 	bl	80004bc <__aeabi_f2d>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	ec44 3b10 	vmov	d0, r3, r4
 8001bfa:	f006 ffcd 	bl	8008b98 <sin>
 8001bfe:	ec54 3b10 	vmov	r3, r4, d0
 8001c02:	4618      	mov	r0, r3
 8001c04:	4621      	mov	r1, r4
 8001c06:	f7fe ffa9 	bl	8000b5c <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc51 	bl	80004bc <__aeabi_f2d>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	460c      	mov	r4, r1
 8001c1e:	ec44 3b10 	vmov	d0, r3, r4
 8001c22:	f006 ff75 	bl	8008b10 <cos>
 8001c26:	ec54 3b10 	vmov	r3, r4, d0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	f7fe ff95 	bl	8000b5c <__aeabi_d2f>
 8001c32:	4603      	mov	r3, r0
 8001c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float st = sin(kal->theta); float ct = cos(kal->theta); tt = st / ct;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fc3d 	bl	80004bc <__aeabi_f2d>
 8001c42:	4603      	mov	r3, r0
 8001c44:	460c      	mov	r4, r1
 8001c46:	ec44 3b10 	vmov	d0, r3, r4
 8001c4a:	f006 ffa5 	bl	8008b98 <sin>
 8001c4e:	ec54 3b10 	vmov	r3, r4, d0
 8001c52:	4618      	mov	r0, r3
 8001c54:	4621      	mov	r1, r4
 8001c56:	f7fe ff81 	bl	8000b5c <__aeabi_d2f>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc29 	bl	80004bc <__aeabi_f2d>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460c      	mov	r4, r1
 8001c6e:	ec44 3b10 	vmov	d0, r3, r4
 8001c72:	f006 ff4d 	bl	8008b10 <cos>
 8001c76:	ec54 3b10 	vmov	r3, r4, d0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	f7fe ff6d 	bl	8000b5c <__aeabi_d2f>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001c88:	edd7 6a32 	vldr	s13, [r7, #200]	; 0xc8
 8001c8c:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8001c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c94:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc

	/* Jacobian of f(x,u) */
	float A[4] = { tt * (q * cp - r * sp), (r * cp + q * sp) * (tt * tt + 1.0f),
 8001c98:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 8001c9c:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca4:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 8001ca8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001cac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cb4:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 8001cc0:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001cc4:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ccc:	edd7 6a3a 	vldr	s13, [r7, #232]	; 0xe8
 8001cd0:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cdc:	edd7 6a33 	vldr	s13, [r7, #204]	; 0xcc
 8001ce0:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
				 -(r * cp + q * sp),        0.0f};
 8001cf8:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001cfc:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d04:	edd7 6a3a 	vldr	s13, [r7, #232]	; 0xe8
 8001d08:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d14:	eef1 7a67 	vneg.f32	s15, s15
	float A[4] = { tt * (q * cp - r * sp), (r * cp + q * sp) * (tt * tt + 1.0f),
 8001d18:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	/* Update covariance matrix P+ = P- + T * (A*P- + P-*A' + Q) */
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d2a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001d2e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d40:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d52:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8001d70:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7e:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d90:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da2:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
					  T*(A[0]*kal->P[2] + A[2]*kal->P[0]   + A[1]*kal->P[3] + A[3]*kal->P[2]),    T*(kal->Q[1]      + A[2]*kal->P[1] + A[2]*kal->P[2] + 2.0f*A[3]*kal->P[3]) };
 8001dc0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dce:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de0:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df2:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e08:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 8001e0c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
					  T*(A[0]*kal->P[2] + A[2]*kal->P[0]   + A[1]*kal->P[3] + A[3]*kal->P[2]),    T*(kal->Q[1]      + A[2]*kal->P[1] + A[2]*kal->P[2] + 2.0f*A[3]*kal->P[3]) };
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e16:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e28:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e3a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001e3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e54:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 8001e58:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

	kal->P[0] = kal->P[0] + Ptmp[0]; kal->P[1] = kal->P[1] + Ptmp[1];
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e62:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	edc3 7a02 	vstr	s15, [r3, #8]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e76:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	edc3 7a03 	vstr	s15, [r3, #12]
	kal->P[2] = kal->P[2] + Ptmp[2]; kal->P[3] = kal->P[3] + Ptmp[3];
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e8a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	edc3 7a04 	vstr	s15, [r3, #16]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001e9e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	edc3 7a05 	vstr	s15, [r3, #20]


	/* Update */

	/* Re-compute common trig terms */
	sp = sin(kal->phi);   cp = cos(kal->phi);
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb03 	bl	80004bc <__aeabi_f2d>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460c      	mov	r4, r1
 8001eba:	ec44 3b10 	vmov	d0, r3, r4
 8001ebe:	f006 fe6b 	bl	8008b98 <sin>
 8001ec2:	ec54 3b10 	vmov	r3, r4, d0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	4621      	mov	r1, r4
 8001eca:	f7fe fe47 	bl	8000b5c <__aeabi_d2f>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe faef 	bl	80004bc <__aeabi_f2d>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460c      	mov	r4, r1
 8001ee2:	ec44 3b10 	vmov	d0, r3, r4
 8001ee6:	f006 fe13 	bl	8008b10 <cos>
 8001eea:	ec54 3b10 	vmov	r3, r4, d0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	f7fe fe33 	bl	8000b5c <__aeabi_d2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	st = sin(kal->theta); ct = cos(kal->theta);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fadb 	bl	80004bc <__aeabi_f2d>
 8001f06:	4603      	mov	r3, r0
 8001f08:	460c      	mov	r4, r1
 8001f0a:	ec44 3b10 	vmov	d0, r3, r4
 8001f0e:	f006 fe43 	bl	8008b98 <sin>
 8001f12:	ec54 3b10 	vmov	r3, r4, d0
 8001f16:	4618      	mov	r0, r3
 8001f18:	4621      	mov	r1, r4
 8001f1a:	f7fe fe1f 	bl	8000b5c <__aeabi_d2f>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fac7 	bl	80004bc <__aeabi_f2d>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	ec44 3b10 	vmov	d0, r3, r4
 8001f36:	f006 fdeb 	bl	8008b10 <cos>
 8001f3a:	ec54 3b10 	vmov	r3, r4, d0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	4621      	mov	r1, r4
 8001f42:	f7fe fe0b 	bl	8000b5c <__aeabi_d2f>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	/* Output function h(x,u) */
	float h[3] = { q * Va * st               + g * st,
 8001f4c:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 8001f50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f58:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f60:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001f64:	eddf 6aef 	vldr	s13, [pc, #956]	; 8002324 <KalmanRollPitch_Update+0x870>
 8001f68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f70:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
				   r * Va * ct - p * Va * st - g * ct * sp,
 8001f74:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f80:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f88:	edd7 6a3b 	vldr	s13, [r7, #236]	; 0xec
 8001f8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f94:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001f98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fa0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001fa4:	eddf 6adf 	vldr	s13, [pc, #892]	; 8002324 <KalmanRollPitch_Update+0x870>
 8001fa8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001fac:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
	float h[3] = { q * Va * st               + g * st,
 8001fb8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
				  -q * Va * ct               - g * ct * cp };
 8001fbc:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8001fc0:	eeb1 7a67 	vneg.f32	s14, s15
 8001fc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fcc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001fd8:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8002324 <KalmanRollPitch_Update+0x870>
 8001fdc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001fe0:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float h[3] = { q * Va * st               + g * st,
 8001fec:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

	/* Jacobian of h(x,u) */
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ff6:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 8001ffa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002002:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800200a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800200e:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8002324 <KalmanRollPitch_Update+0x870>
 8002012:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
				  -g * cp * ct, -r * Va * st - p * Va * ct + g * sp * st,
 800201e:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002022:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8002328 <KalmanRollPitch_Update+0x874>
 8002026:	ee27 7a87 	vmul.f32	s14, s15, s14
 800202a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800202e:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8002032:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
				  -g * cp * ct, -r * Va * st - p * Va * ct + g * sp * st,
 8002036:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 800203a:	eeb1 7a67 	vneg.f32	s14, s15
 800203e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002042:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002046:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 800204a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204e:	edd7 6a3b 	vldr	s13, [r7, #236]	; 0xec
 8002052:	edd7 7a02 	vldr	s15, [r7, #8]
 8002056:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800205a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 800205e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002062:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002066:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 800206a:	eddf 6aae 	vldr	s13, [pc, #696]	; 8002324 <KalmanRollPitch_Update+0x870>
 800206e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002072:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8002076:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207a:	ee77 7a27 	vadd.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 800207e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				   g * sp * ct, (q * Va + g * cp) * st };
 8002082:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8002086:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8002324 <KalmanRollPitch_Update+0x870>
 800208a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800208e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8002092:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8002096:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				   g * sp * ct, (q * Va + g * cp) * st };
 800209a:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 800209e:	edd7 7a02 	vldr	s15, [r7, #8]
 80020a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a6:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80020aa:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8002324 <KalmanRollPitch_Update+0x870>
 80020ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020b6:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80020ba:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 80020be:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

	/* Kalman gain K = P * C' / (C * P * C' + R) */
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80020c8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80020cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80020d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	edd3 7a08 	vldr	s15, [r3, #32]
 80020de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80020e6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80020ea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80020ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80020f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fc:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002100:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002104:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	edd3 7a05 	vldr	s15, [r3, #20]
 800210e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002116:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 800211a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800211e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	edd3 7a04 	vldr	s15, [r3, #16]
 800212c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002130:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002134:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002138:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 800214e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002152:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	edd3 7a03 	vldr	s15, [r3, #12]
 800215c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002160:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	edd3 7a05 	vldr	s15, [r3, #20]
 800216a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800216e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002172:	ee67 7a27 	vmul.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8002176:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002180:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002184:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	edd3 7a02 	vldr	s15, [r3, #8]
 800218e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002192:	edd7 5a22 	vldr	s11, [r7, #136]	; 0x88
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	edd3 7a04 	vldr	s15, [r3, #16]
 800219c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80021a0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80021a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ac:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80021b0:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80021ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021be:	edd7 5a22 	vldr	s11, [r7, #136]	; 0x88
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80021c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80021cc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80021d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d4:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 80021d8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 80021dc:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80021e0:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80021ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021ee:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80021f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002204:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8002208:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002212:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002216:	edd7 5a22 	vldr	s11, [r7, #136]	; 0x88
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002220:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002224:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222c:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8002230:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 8002234:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002238:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002242:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002246:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002250:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002258:	ee67 7a27 	vmul.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 800225c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 8002260:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002264:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	edd3 7a02 	vldr	s15, [r3, #8]
 800226e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002272:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	edd3 7a04 	vldr	s15, [r3, #16]
 800227c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002280:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002288:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800228c:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	edd3 7a03 	vldr	s15, [r3, #12]
 8002296:	ee26 6a27 	vmul.f32	s12, s12, s15
 800229a:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80022a4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80022a8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80022ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b0:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 80022b4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80022be:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80022c2:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80022cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022d0:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80022da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80022de:	ee76 7a27 	vadd.f32	s15, s12, s15
 80022e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ea:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 80022ee:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80022f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022fc:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	edd3 7a05 	vldr	s15, [r3, #20]
 8002306:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800230a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800230e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002312:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8002316:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	float Gdetinv = 1.0f / (G[0]*G[4]*G[8] - G[0]*G[5]*G[7] - G[1]*G[3]*G[8] + G[1]*G[5]*G[6] + G[2]*G[3]*G[7] - G[2]*G[4]*G[6]);
 800231a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800231e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002322:	e003      	b.n	800232c <KalmanRollPitch_Update+0x878>
 8002324:	411cf5c3 	.word	0x411cf5c3
 8002328:	c11cf5c3 	.word	0xc11cf5c3
 800232c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002330:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002334:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002338:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800233c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002340:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002344:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800234c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002350:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002354:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002358:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800235c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002364:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002368:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800236c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002370:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002374:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002380:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002384:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002388:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800238c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002394:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002398:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800239c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80023a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023a4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80023a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b8:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 80023bc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80023c0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80023c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c8:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80023cc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80023d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023d8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80023dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80023e4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80023e8:	eeb1 7a67 	vneg.f32	s14, s15
 80023ec:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80023f0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80023f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023f8:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80023fc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002400:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002404:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8002410:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002414:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002418:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002420:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800242c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002434:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				     -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 8002438:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800243c:	eeb1 7a67 	vneg.f32	s14, s15
 8002440:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8002444:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002448:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800244c:	ed97 6a1b 	vldr	s12, [r7, #108]	; 0x6c
 8002450:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002454:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002458:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800245c:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8002460:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				     -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 8002464:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002468:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800246c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002470:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002474:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002480:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002484:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8002488:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				     -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 800248c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8002490:	eeb1 7a67 	vneg.f32	s14, s15
 8002494:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002498:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800249c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024a0:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 80024a4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80024a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024b0:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 80024b4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	                  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 80024b8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80024bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80024c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c4:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80024c8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80024cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024d4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80024d8:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 80024dc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	                  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 80024e0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80024e4:	eeb1 7a67 	vneg.f32	s14, s15
 80024e8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80024ec:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80024f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024f4:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 80024f8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80024fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002500:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002504:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8002508:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	                  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 800250c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002510:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002518:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800251c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002524:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002528:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800252c:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8002530:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 8002534:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002538:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002542:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002546:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002550:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800255c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002560:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	edd3 7a02 	vldr	s15, [r3, #8]
 800256a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800256e:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	edd3 7a03 	vldr	s15, [r3, #12]
 8002578:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800257c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002588:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800258c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002590:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	edd3 7a03 	vldr	s15, [r3, #12]
 800259a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a2:	edc7 7a07 	vstr	s15, [r7, #28]
 80025a6:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80025aa:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80025b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80025b8:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	edd3 7a03 	vldr	s15, [r3, #12]
 80025c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ce:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80025d2:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80025dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025e0:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80025ea:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025ee:	ee76 7a27 	vadd.f32	s15, s12, s15
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025fa:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80025fe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002602:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	edd3 7a03 	vldr	s15, [r3, #12]
 800260c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002614:	edc7 7a08 	vstr	s15, [r7, #32]
 8002618:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800261c:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	edd3 7a02 	vldr	s15, [r3, #8]
 8002626:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800262a:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	edd3 7a03 	vldr	s15, [r3, #12]
 8002634:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800263c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002640:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002644:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	edd3 7a02 	vldr	s15, [r3, #8]
 800264e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002652:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	edd3 7a03 	vldr	s15, [r3, #12]
 800265c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002660:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002670:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002674:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	edd3 7a03 	vldr	s15, [r3, #12]
 800267e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002686:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 800268a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800268e:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	edd3 7a04 	vldr	s15, [r3, #16]
 8002698:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800269c:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80026a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b2:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80026b6:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80026c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026c4:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80026ce:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80026d2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80026d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026de:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80026e2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80026e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80026f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f4:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 80026f8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 80026fc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002700:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	edd3 7a04 	vldr	s15, [r3, #16]
 800270a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800270e:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	edd3 7a05 	vldr	s15, [r3, #20]
 8002718:	ee66 7a27 	vmul.f32	s15, s12, s15
 800271c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002724:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002728:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002732:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002736:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002740:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002744:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002750:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002754:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002758:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 800276a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 800276e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002772:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	edd3 7a04 	vldr	s15, [r3, #16]
 800277c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002780:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	edd3 7a05 	vldr	s15, [r3, #20]
 800278a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800278e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002796:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800279a:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80027a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027a8:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80027b2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80027b6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80027ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c2:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80027c6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80027ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80027d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d8:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 80027dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	/* Update covariance matrix P++ = (I - K * C) * P+ */
	Ptmp[0] = -kal->P[2]*(C[1]*K[0] + C[3]*K[1] + C[5]*K[2]) - kal->P[0]*(C[2]*K[1] + C[4]*K[2] - 1.0f); Ptmp[1] = -kal->P[3]*(C[1]*K[0] + C[3]*K[1] + C[5]*K[2]) - kal->P[1]*(C[2]*K[1] + C[4]*K[2] - 1.0f);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80027e6:	eeb1 7a67 	vneg.f32	s14, s15
 80027ea:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80027ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80027f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027f6:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80027fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80027fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002802:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002806:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800280a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800280e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002820:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8002824:	edd7 7a08 	vldr	s15, [r7, #32]
 8002828:	ee26 6a27 	vmul.f32	s12, s12, s15
 800282c:	edd7 5a23 	vldr	s11, [r7, #140]	; 0x8c
 8002830:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002834:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002838:	ee76 7a27 	vadd.f32	s15, s12, s15
 800283c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002840:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	edd3 7a05 	vldr	s15, [r3, #20]
 8002856:	eeb1 7a67 	vneg.f32	s14, s15
 800285a:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800285e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002862:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002866:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800286a:	edd7 7a08 	vldr	s15, [r7, #32]
 800286e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002872:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002876:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800287a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800287e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002890:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8002894:	edd7 7a08 	vldr	s15, [r7, #32]
 8002898:	ee26 6a27 	vmul.f32	s12, s12, s15
 800289c:	edd7 5a23 	vldr	s11, [r7, #140]	; 0x8c
 80028a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028a4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80028a8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80028ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80028b0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80028b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028bc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	Ptmp[2] = -kal->P[2]*(C[1]*K[3] + C[3]*K[4] + C[5]*K[5] - 1.0f) - kal->P[0]*(C[2]*K[4] + C[4]*K[5]); Ptmp[3] = -kal->P[3]*(C[1]*K[3] + C[3]*K[4] + C[5]*K[5] - 1.0f) - kal->P[1]*(C[2]*K[4] + C[4]*K[5]);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80028c6:	eeb1 7a67 	vneg.f32	s14, s15
 80028ca:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80028ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028d6:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80028da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028e6:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80028ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80028ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80028fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	edd3 6a02 	vldr	s13, [r3, #8]
 8002908:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 800290c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002910:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002914:	edd7 5a23 	vldr	s11, [r7, #140]	; 0x8c
 8002918:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800291c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002920:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	edd3 7a05 	vldr	s15, [r3, #20]
 8002936:	eeb1 7a67 	vneg.f32	s14, s15
 800293a:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800293e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002942:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002946:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800294a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800294e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002952:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002956:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800295a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800295e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800296a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800296e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	edd3 6a03 	vldr	s13, [r3, #12]
 8002978:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 800297c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002980:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002984:	edd7 5a23 	vldr	s11, [r7, #140]	; 0x8c
 8002988:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800298c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002990:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

	kal->P[0] = kal->P[0] + Ptmp[0]; kal->P[1] = kal->P[1] + Ptmp[1];
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80029a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80029aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	edc3 7a02 	vstr	s15, [r3, #8]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80029ba:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80029be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	edc3 7a03 	vstr	s15, [r3, #12]
	kal->P[2] = kal->P[2] + Ptmp[2]; kal->P[3] = kal->P[3] + Ptmp[3];
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	ed93 7a04 	vldr	s14, [r3, #16]
 80029ce:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80029d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	edc3 7a04 	vstr	s15, [r3, #16]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	ed93 7a05 	vldr	s14, [r3, #20]
 80029e2:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80029e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Update state estimate x++ = x+ + K * (y - h) */
	kal->phi   = kal->phi   + K[0] * (ax - h[0]) + K[1] * (ay - h[1]) + K[2] * (az - h[2]);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	ed93 7a00 	vldr	s14, [r3]
 80029f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80029fa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80029fe:	ed97 6a38 	vldr	s12, [r7, #224]	; 0xe0
 8002a02:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002a12:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002a16:	ed97 6a37 	vldr	s12, [r7, #220]	; 0xdc
 8002a1a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a26:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002a2a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002a2e:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002a32:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	edc3 7a00 	vstr	s15, [r3]
	kal->theta = kal->theta + K[3] * (ax - h[0]) + K[4] * (ay - h[1]) + K[5] * (az - h[2]);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a4a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8002a4e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002a52:	ed97 6a38 	vldr	s12, [r7, #224]	; 0xe0
 8002a56:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a62:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002a66:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8002a6a:	ed97 6a37 	vldr	s12, [r7, #220]	; 0xdc
 8002a6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a7a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002a7e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002a82:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 8002a86:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002a98:	bf00      	nop
 8002a9a:	37f4      	adds	r7, #244	; 0xf4
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd90      	pop	{r4, r7, pc}

08002aa0 <MPRLSBarometer_Init>:
#include "MPRLS.h"

uint8_t MPRLSBarometer_Init(MPRLSBarometer *bar, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *rstPinBank, uint16_t rstPin, GPIO_TypeDef *intPinBank, uint16_t intPin) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	807b      	strh	r3, [r7, #2]
	bar->I2Chandle  = I2Chandle;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	601a      	str	r2, [r3, #0]
	bar->rstPinBank = rstPinBank;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	605a      	str	r2, [r3, #4]
	bar->rstPin     = rstPin;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	887a      	ldrh	r2, [r7, #2]
 8002abe:	811a      	strh	r2, [r3, #8]
	bar->intPinBank = intPinBank;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a3a      	ldr	r2, [r7, #32]
 8002ac4:	60da      	str	r2, [r3, #12]
	bar->intPin     = intPin;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aca:	821a      	strh	r2, [r3, #16]
	bar->pressurePa = 0.0f;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	615a      	str	r2, [r3, #20]

	MPRLSBarometer_Reset(bar);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f80d 	bl	8002af4 <MPRLSBarometer_Reset>

	HAL_Delay(10);
 8002ada:	200a      	movs	r0, #10
 8002adc:	f001 fc08 	bl	80042f0 <HAL_Delay>

	uint8_t status = MPRLSBarometer_ReadStatus(bar);
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f82d 	bl	8002b40 <MPRLSBarometer_ReadStatus>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	75fb      	strb	r3, [r7, #23]

	return status;
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <MPRLSBarometer_Reset>:

void MPRLSBarometer_Reset(MPRLSBarometer *bar) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_SET);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6858      	ldr	r0, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	891b      	ldrh	r3, [r3, #8]
 8002b04:	2201      	movs	r2, #1
 8002b06:	4619      	mov	r1, r3
 8002b08:	f001 feca 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_RESET);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6858      	ldr	r0, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	891b      	ldrh	r3, [r3, #8]
 8002b14:	2200      	movs	r2, #0
 8002b16:	4619      	mov	r1, r3
 8002b18:	f001 fec2 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002b1c:	200a      	movs	r0, #10
 8002b1e:	f001 fbe7 	bl	80042f0 <HAL_Delay>
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_SET);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6858      	ldr	r0, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	891b      	ldrh	r3, [r3, #8]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f001 feb7 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002b32:	2032      	movs	r0, #50	; 0x32
 8002b34:	f001 fbdc 	bl	80042f0 <HAL_Delay>
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <MPRLSBarometer_ReadStatus>:

uint8_t MPRLSBarometer_ReadStatus(MPRLSBarometer *bar) {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	6078      	str	r0, [r7, #4]
	uint8_t status;
	HAL_I2C_Master_Receive(bar->I2Chandle, MPRLS_I2C_ADDR, &status, 1, MPRLS_I2C_TIMEOUT);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	f107 020f 	add.w	r2, r7, #15
 8002b50:	2364      	movs	r3, #100	; 0x64
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2301      	movs	r3, #1
 8002b56:	2130      	movs	r1, #48	; 0x30
 8002b58:	f002 f8fc 	bl	8004d54 <HAL_I2C_Master_Receive>

	return status;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <MPRLSBarometer_ReadPressure>:

uint8_t MPRLSBarometer_ReadPressure(MPRLSBarometer *bar) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	6078      	str	r0, [r7, #4]
	/* Send read data request */
	uint8_t txBuf[3] = {0xAA, 0x00, 0x00};
 8002b70:	23aa      	movs	r3, #170	; 0xaa
 8002b72:	733b      	strb	r3, [r7, #12]
 8002b74:	2300      	movs	r3, #0
 8002b76:	737b      	strb	r3, [r7, #13]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(bar->I2Chandle, MPRLS_I2C_ADDR, txBuf, 3, MPRLS_I2C_TIMEOUT);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	f107 020c 	add.w	r2, r7, #12
 8002b84:	2364      	movs	r3, #100	; 0x64
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2303      	movs	r3, #3
 8002b8a:	2130      	movs	r1, #48	; 0x30
 8002b8c:	f001 ffe4 	bl	8004b58 <HAL_I2C_Master_Transmit>

	/* Wait until EOC indicator is set */
	while (!HAL_GPIO_ReadPin(bar->intPinBank, bar->intPin)) {
 8002b90:	e002      	b.n	8002b98 <MPRLSBarometer_ReadPressure+0x30>
		HAL_Delay(5);
 8002b92:	2005      	movs	r0, #5
 8002b94:	f001 fbac 	bl	80042f0 <HAL_Delay>
	while (!HAL_GPIO_ReadPin(bar->intPinBank, bar->intPin)) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8a1b      	ldrh	r3, [r3, #16]
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f001 fe64 	bl	8004870 <HAL_GPIO_ReadPin>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f1      	beq.n	8002b92 <MPRLSBarometer_ReadPressure+0x2a>
	}

	/* Request four bytes (1x status, 3x data) */
	uint8_t rxBuf[4];
	HAL_I2C_Master_Receive(bar->I2Chandle, MPRLS_I2C_ADDR, rxBuf, 4, MPRLS_I2C_TIMEOUT);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	f107 0208 	add.w	r2, r7, #8
 8002bb6:	2364      	movs	r3, #100	; 0x64
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2304      	movs	r3, #4
 8002bbc:	2130      	movs	r1, #48	; 0x30
 8002bbe:	f002 f8c9 	bl	8004d54 <HAL_I2C_Master_Receive>

	/* Check status byte */
	if ((rxBuf[0] & MPRLS_STATUS_MATHSAT) || (rxBuf[0] & MPRLS_STATUS_FAILED)) {
 8002bc2:	7a3b      	ldrb	r3, [r7, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d104      	bne.n	8002bd6 <MPRLSBarometer_ReadPressure+0x6e>
 8002bcc:	7a3b      	ldrb	r3, [r7, #8]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MPRLSBarometer_ReadPressure+0x72>
		return 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e03a      	b.n	8002c50 <MPRLSBarometer_ReadPressure+0xe8>
	}

	/* Compute raw pressure reading */
	uint32_t pressureRaw = rxBuf[1];
 8002bda:	7a7b      	ldrb	r3, [r7, #9]
 8002bdc:	617b      	str	r3, [r7, #20]
			 pressureRaw <<= 8;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	617b      	str	r3, [r7, #20]
			 pressureRaw |= rxBuf[2];
 8002be4:	7abb      	ldrb	r3, [r7, #10]
 8002be6:	461a      	mov	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
			 pressureRaw <<= 8;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	617b      	str	r3, [r7, #20]
			 pressureRaw |= rxBuf[3];
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	617b      	str	r3, [r7, #20]

	/* Convert to pressure reading in Pascal */
	float psi  = (pressureRaw - 0x19999A) * (MPRLS_PSI_MAX - MPRLS_PSI_MIN);
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	f1a3 7320 	sub.w	r3, r3, #41943040	; 0x2800000
 8002c0e:	3b0a      	subs	r3, #10
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c18:	edc7 7a04 	vstr	s15, [r7, #16]
		  psi /= (float) (0xE66666 - 0x19999A);
 8002c1c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c20:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002c58 <MPRLSBarometer_ReadPressure+0xf0>
 8002c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c28:	edc7 7a04 	vstr	s15, [r7, #16]
		  psi += MPRLS_PSI_MIN;
 8002c2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c30:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002c5c <MPRLSBarometer_ReadPressure+0xf4>
 8002c34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c38:	edc7 7a04 	vstr	s15, [r7, #16]

	bar->pressurePa = MPRLS_PSI_TO_PA * psi;
 8002c3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002c60 <MPRLSBarometer_ReadPressure+0xf8>
 8002c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Success */
	return 1;
 8002c4e:	2301      	movs	r3, #1
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	4b4ccccc 	.word	0x4b4ccccc
 8002c5c:	00000000 	.word	0x00000000
 8002c60:	45d7760f 	.word	0x45d7760f

08002c64 <TMP100_Init>:
#include "TMP100.h"

void TMP100_Init(TMP100 *tmp, I2C_HandleTypeDef *I2Chandle) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
	tmp->I2Chandle = I2Chandle;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	601a      	str	r2, [r3, #0]
	tmp->temp_C = 0.0f;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	605a      	str	r2, [r3, #4]

	/* Configure sensor */
	uint8_t txBuf[] = {TMP100_REG_CONF,  0x60};
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <TMP100_Init+0x3c>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(tmp->I2Chandle, TMP100_I2C_ADDR, txBuf, 2, TMP100_I2C_TIMEOUT);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	f107 020c 	add.w	r2, r7, #12
 8002c8a:	2364      	movs	r3, #100	; 0x64
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	2302      	movs	r3, #2
 8002c90:	219c      	movs	r1, #156	; 0x9c
 8002c92:	f001 ff61 	bl	8004b58 <HAL_I2C_Master_Transmit>
}
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	0800d5e8 	.word	0x0800d5e8

08002ca4 <UAVDataLink_Pack>:
#include "UAVDataLink.h"

uint8_t UAVDataLink_Pack(const uint8_t IDA, const uint8_t IDB, const uint8_t PAYLOADLENGTH, const uint8_t *PAYLOAD, uint8_t *byteStreamOut) {
 8002ca4:	b5b0      	push	{r4, r5, r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	4603      	mov	r3, r0
 8002cae:	71fb      	strb	r3, [r7, #7]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	71bb      	strb	r3, [r7, #6]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	717b      	strb	r3, [r7, #5]
 8002cb8:	466b      	mov	r3, sp
 8002cba:	461d      	mov	r5, r3

    static uint8_t SEQUENCE = 1;
    uint8_t n;

    /* Create array to store packet data */
    uint8_t rawDataLength = 4 + PAYLOADLENGTH + 1; /* 4 header bytes, payload bytes, and checksum byte */
 8002cbc:	797b      	ldrb	r3, [r7, #5]
 8002cbe:	3305      	adds	r3, #5
 8002cc0:	757b      	strb	r3, [r7, #21]
    uint8_t rawData[rawDataLength];
 8002cc2:	7d78      	ldrb	r0, [r7, #21]
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	b2c1      	uxtb	r1, r0
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	f04f 0400 	mov.w	r4, #0
 8002cd8:	00d4      	lsls	r4, r2, #3
 8002cda:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002cde:	00cb      	lsls	r3, r1, #3
 8002ce0:	b2c1      	uxtb	r1, r0
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	f04f 0400 	mov.w	r4, #0
 8002cee:	00d4      	lsls	r4, r2, #3
 8002cf0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002cf4:	00cb      	lsls	r3, r1, #3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	3307      	adds	r3, #7
 8002cfa:	08db      	lsrs	r3, r3, #3
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	ebad 0d03 	sub.w	sp, sp, r3
 8002d02:	466b      	mov	r3, sp
 8002d04:	3300      	adds	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]

    /* Set packet header */
    rawData[0] = SEQUENCE;
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <UAVDataLink_Pack+0x10c>)
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	701a      	strb	r2, [r3, #0]
    rawData[1] = IDA;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	79fa      	ldrb	r2, [r7, #7]
 8002d14:	705a      	strb	r2, [r3, #1]
    rawData[2] = IDB;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	79ba      	ldrb	r2, [r7, #6]
 8002d1a:	709a      	strb	r2, [r3, #2]
    rawData[3] = PAYLOADLENGTH;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	797a      	ldrb	r2, [r7, #5]
 8002d20:	70da      	strb	r2, [r3, #3]

    /* Attach payload */
    for (n = 0; n < PAYLOADLENGTH; n++) {
 8002d22:	2300      	movs	r3, #0
 8002d24:	75bb      	strb	r3, [r7, #22]
 8002d26:	e00a      	b.n	8002d3e <UAVDataLink_Pack+0x9a>

        rawData[4 + n] = PAYLOAD[n];
 8002d28:	7dbb      	ldrb	r3, [r7, #22]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	441a      	add	r2, r3
 8002d2e:	7dbb      	ldrb	r3, [r7, #22]
 8002d30:	3304      	adds	r3, #4
 8002d32:	7811      	ldrb	r1, [r2, #0]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	54d1      	strb	r1, [r2, r3]
    for (n = 0; n < PAYLOADLENGTH; n++) {
 8002d38:	7dbb      	ldrb	r3, [r7, #22]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	75bb      	strb	r3, [r7, #22]
 8002d3e:	7dba      	ldrb	r2, [r7, #22]
 8002d40:	797b      	ldrb	r3, [r7, #5]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d3f0      	bcc.n	8002d28 <UAVDataLink_Pack+0x84>

    }

    /* Calculate checksum and set as last byte of packet */
    uint8_t cs = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]
    for (n = 0; n < PAYLOADLENGTH; n++) {
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	75bb      	strb	r3, [r7, #22]
 8002d4e:	e009      	b.n	8002d64 <UAVDataLink_Pack+0xc0>

        cs ^= PAYLOAD[n];
 8002d50:	7dbb      	ldrb	r3, [r7, #22]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	4413      	add	r3, r2
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	4053      	eors	r3, r2
 8002d5c:	75fb      	strb	r3, [r7, #23]
    for (n = 0; n < PAYLOADLENGTH; n++) {
 8002d5e:	7dbb      	ldrb	r3, [r7, #22]
 8002d60:	3301      	adds	r3, #1
 8002d62:	75bb      	strb	r3, [r7, #22]
 8002d64:	7dba      	ldrb	r2, [r7, #22]
 8002d66:	797b      	ldrb	r3, [r7, #5]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d3f1      	bcc.n	8002d50 <UAVDataLink_Pack+0xac>

    }

    rawData[rawDataLength - 1] = cs;
 8002d6c:	7d7b      	ldrb	r3, [r7, #21]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	7df9      	ldrb	r1, [r7, #23]
 8002d74:	54d1      	strb	r1, [r2, r3]

    /* Encode with consistent overhead byte stuffing */
    uint8_t encodedPacketLength = UAVDataLink_EncodeCOBS(rawData, rawDataLength, byteStreamOut);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	7d79      	ldrb	r1, [r7, #21]
 8002d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 f819 	bl	8002db4 <UAVDataLink_EncodeCOBS>
 8002d82:	4603      	mov	r3, r0
 8002d84:	72fb      	strb	r3, [r7, #11]

    /* Increment sequence number */
    if (SEQUENCE == 255) {
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <UAVDataLink_Pack+0x10c>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2bff      	cmp	r3, #255	; 0xff
 8002d8c:	d103      	bne.n	8002d96 <UAVDataLink_Pack+0xf2>

        SEQUENCE = 1;
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <UAVDataLink_Pack+0x10c>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]
 8002d94:	e005      	b.n	8002da2 <UAVDataLink_Pack+0xfe>

    } else {

        SEQUENCE++;
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <UAVDataLink_Pack+0x10c>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <UAVDataLink_Pack+0x10c>)
 8002da0:	701a      	strb	r2, [r3, #0]

    }

    return encodedPacketLength;
 8002da2:	7afb      	ldrb	r3, [r7, #11]
 8002da4:	46ad      	mov	sp, r5

}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bdb0      	pop	{r4, r5, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <UAVDataLink_EncodeCOBS>:

    return nFloats;

}

uint8_t UAVDataLink_EncodeCOBS(const uint8_t *dataIn, const uint8_t dataInLength, uint8_t *dataOut) {
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	72fb      	strb	r3, [r7, #11]

    uint8_t dataOutLength = 1; /* At least one header byte (set here) and one end byte (0x00) (set at end of function) */
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
    uint8_t dataOutIndex  = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75bb      	strb	r3, [r7, #22]
    uint8_t nextZeroIndex = 1; /* Initially, assume first byte is a zero */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	757b      	strb	r3, [r7, #21]

    for (uint8_t dataInIndex = 0; dataInIndex < dataInLength; dataInIndex++) {
 8002dce:	2300      	movs	r3, #0
 8002dd0:	753b      	strb	r3, [r7, #20]
 8002dd2:	e020      	b.n	8002e16 <UAVDataLink_EncodeCOBS+0x62>

        if (dataIn[dataInIndex] == 0) {
 8002dd4:	7d3b      	ldrb	r3, [r7, #20]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <UAVDataLink_EncodeCOBS+0x40>

            dataOut[dataOutIndex] = nextZeroIndex;
 8002de0:	7dbb      	ldrb	r3, [r7, #22]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	7d7a      	ldrb	r2, [r7, #21]
 8002de8:	701a      	strb	r2, [r3, #0]

            nextZeroIndex = 1;
 8002dea:	2301      	movs	r3, #1
 8002dec:	757b      	strb	r3, [r7, #21]
            dataOutIndex  = dataOutLength;
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	75bb      	strb	r3, [r7, #22]
 8002df2:	e00a      	b.n	8002e0a <UAVDataLink_EncodeCOBS+0x56>

        } else {

            dataOut[dataOutLength] = dataIn[dataInIndex];
 8002df4:	7d3b      	ldrb	r3, [r7, #20]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	441a      	add	r2, r3
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	440b      	add	r3, r1
 8002e00:	7812      	ldrb	r2, [r2, #0]
 8002e02:	701a      	strb	r2, [r3, #0]

            nextZeroIndex++;
 8002e04:	7d7b      	ldrb	r3, [r7, #21]
 8002e06:	3301      	adds	r3, #1
 8002e08:	757b      	strb	r3, [r7, #21]

        }

        dataOutLength++;
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
    for (uint8_t dataInIndex = 0; dataInIndex < dataInLength; dataInIndex++) {
 8002e10:	7d3b      	ldrb	r3, [r7, #20]
 8002e12:	3301      	adds	r3, #1
 8002e14:	753b      	strb	r3, [r7, #20]
 8002e16:	7d3a      	ldrb	r2, [r7, #20]
 8002e18:	7afb      	ldrb	r3, [r7, #11]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d3da      	bcc.n	8002dd4 <UAVDataLink_EncodeCOBS+0x20>

    }

    dataOut[dataOutIndex] = nextZeroIndex;
 8002e1e:	7dbb      	ldrb	r3, [r7, #22]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	4413      	add	r3, r2
 8002e24:	7d7a      	ldrb	r2, [r7, #21]
 8002e26:	701a      	strb	r2, [r3, #0]

    /* Append final, delimiting zero to mark end of packet */
    dataOut[dataOutLength] = 0;
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
    dataOutLength++;
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	3301      	adds	r3, #1
 8002e36:	75fb      	strb	r3, [r7, #23]

    return dataOutLength;
 8002e38:	7dfb      	ldrb	r3, [r7, #23]

}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <UBloxGPS_Init>:
#include "UBLOX.h"

void UBloxGPS_Init(UBloxGPS *gps, UART_HandleTypeDef *uart, GPIO_TypeDef *rstPinBank, uint16_t rstPin, GPIO_TypeDef *ppsPinBank, uint16_t ppsPin, GPIO_TypeDef *lnaEnablePinBank, uint16_t lnaEnablePin) {
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	807b      	strh	r3, [r7, #2]
	gps->uart             = uart;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	601a      	str	r2, [r3, #0]
	gps->rstPinBank       = rstPinBank;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	605a      	str	r2, [r3, #4]
	gps->rstPin           = rstPin;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	811a      	strh	r2, [r3, #8]
	gps->ppsPinBank       = ppsPinBank;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	60da      	str	r2, [r3, #12]
	gps->ppsPin           = ppsPin;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8bba      	ldrh	r2, [r7, #28]
 8002e70:	821a      	strh	r2, [r3, #16]
	gps->lnaEnablePinBank = lnaEnablePinBank;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	615a      	str	r2, [r3, #20]
	gps->lnaEnablePin     = lnaEnablePin;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e7c:	831a      	strh	r2, [r3, #24]

	gps->latitude    = 0.0f;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	61da      	str	r2, [r3, #28]
	gps->longitude   = 0.0f;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	621a      	str	r2, [r3, #32]
	gps->altitude    = 0.0f;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	625a      	str	r2, [r3, #36]	; 0x24
	gps->course      = 0.0f;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
	gps->groundSpeed = 0.0f;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c

	gps->uartBufIndex  = 0;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	gps->uartBufLength = 0;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <UBloxGPS_Reset>:

void UBloxGPS_Reset(UBloxGPS *gps) {
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_SET);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6858      	ldr	r0, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	891b      	ldrh	r3, [r3, #8]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f001 fce3 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_RESET);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6858      	ldr	r0, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	891b      	ldrh	r3, [r3, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f001 fcdb 	bl	80048a0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002eea:	2032      	movs	r0, #50	; 0x32
 8002eec:	f001 fa00 	bl	80042f0 <HAL_Delay>
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_SET);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6858      	ldr	r0, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	891b      	ldrh	r3, [r3, #8]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4619      	mov	r1, r3
 8002efc:	f001 fcd0 	bl	80048a0 <HAL_GPIO_WritePin>
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a07      	ldr	r2, [pc, #28]	; (8002f34 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4a06      	ldr	r2, [pc, #24]	; (8002f38 <vApplicationGetIdleTaskMemory+0x30>)
 8002f1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2280      	movs	r2, #128	; 0x80
 8002f24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	2000068c 	.word	0x2000068c
 8002f38:	200006e0 	.word	0x200006e0

08002f3c <FIRFilter_Init>:
	float *buf;
	uint8_t order;
	uint8_t putIndex;
} FIRFilter ;

void FIRFilter_Init(FIRFilter *filt, float *coeff, float *buf, const uint8_t order) {
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	70fb      	strb	r3, [r7, #3]
	filt->out = 0.0f;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
	
	filt->coeff = coeff;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	605a      	str	r2, [r3, #4]
	filt->buf   = buf;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
	filt->order = order;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	731a      	strb	r2, [r3, #12]
	filt->putIndex = 0;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	735a      	strb	r2, [r3, #13]

	for (uint8_t n = 0; n < order; n++) {
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]
 8002f6e:	e00a      	b.n	8002f86 <FIRFilter_Init+0x4a>
		filt->buf[n] = 0.0f;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n < order; n++) {
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	3301      	adds	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
 8002f86:	7dfa      	ldrb	r2, [r7, #23]
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d3f0      	bcc.n	8002f70 <FIRFilter_Init+0x34>
	}
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *filt, float in) {
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	ed87 0a00 	vstr	s0, [r7]
    /* Store newest input value in circular buffer */
    filt->buf[filt->putIndex] = in;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7b5b      	ldrb	r3, [r3, #13]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	601a      	str	r2, [r3, #0]
    
    /* Compute filter output */
    uint8_t getIndex = filt->putIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7b5b      	ldrb	r3, [r3, #13]
 8002fba:	73fb      	strb	r3, [r7, #15]
    
    filt->out = 0.0f;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
    for (uint8_t n = 0; n < filt->order; n++) {
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73bb      	strb	r3, [r7, #14]
 8002fc8:	e025      	b.n	8003016 <FIRFilter_Update+0x7c>
        filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	ed93 7a00 	vldr	s14, [r3]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	edd3 6a00 	vldr	s13, [r3]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	edd3 7a00 	vldr	s15, [r3]
 8002fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	edc3 7a00 	vstr	s15, [r3]
        
        if (getIndex == 0) {
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <FIRFilter_Update+0x70>
            getIndex = filt->order - 1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	7b1b      	ldrb	r3, [r3, #12]
 8003004:	3b01      	subs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	e002      	b.n	8003010 <FIRFilter_Update+0x76>
        } else {
           getIndex--; 
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	3b01      	subs	r3, #1
 800300e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t n = 0; n < filt->order; n++) {
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	3301      	adds	r3, #1
 8003014:	73bb      	strb	r3, [r7, #14]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7b1b      	ldrb	r3, [r3, #12]
 800301a:	7bba      	ldrb	r2, [r7, #14]
 800301c:	429a      	cmp	r2, r3
 800301e:	d3d4      	bcc.n	8002fca <FIRFilter_Update+0x30>
        }
    }
    
    /* Increment buffer index */
    filt->putIndex++;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7b5b      	ldrb	r3, [r3, #13]
 8003024:	3301      	adds	r3, #1
 8003026:	b2da      	uxtb	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	735a      	strb	r2, [r3, #13]
    if (filt->putIndex == filt->order) {
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7b5a      	ldrb	r2, [r3, #13]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7b1b      	ldrb	r3, [r3, #12]
 8003034:	429a      	cmp	r2, r3
 8003036:	d102      	bne.n	800303e <FIRFilter_Update+0xa4>
        filt->putIndex = 0;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	735a      	strb	r2, [r3, #13]
    }
    
    /* Return output */
    return filt->out;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	ee07 3a90 	vmov	s15, r3
}
 8003046:	eeb0 0a67 	vmov.f32	s0, s15
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <main>:
FIRFilter firAcc[3];
FIRFilter firMag[3];
FIRFilter firBar;

int main(void)
{
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b0b6      	sub	sp, #216	; 0xd8
 8003058:	af00      	add	r7, sp, #0
  HAL_Init();
 800305a:	f001 f907 	bl	800426c <HAL_Init>

  SystemClock_Config();
 800305e:	f000 fbf5 	bl	800384c <SystemClock_Config>

  MX_GPIO_Init();
 8003062:	f000 fd65 	bl	8003b30 <MX_GPIO_Init>

  HAL_Delay(500);
 8003066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800306a:	f001 f941 	bl	80042f0 <HAL_Delay>

  MX_I2C1_Init();
 800306e:	f000 fc57 	bl	8003920 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003072:	f000 fc83 	bl	800397c <MX_I2C2_Init>
  MX_I2C3_Init();
 8003076:	f000 fcaf 	bl	80039d8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800307a:	f000 fcdb 	bl	8003a34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800307e:	f000 fd03 	bl	8003a88 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003082:	f000 fd2b 	bl	8003adc <MX_USART3_UART_Init>

  initPeripherals();
 8003086:	f000 fb6f 	bl	8003768 <initPeripherals>

  FIRFilter_Init(&firGyr[0], firCoeffGyr, firGyrXBuf, FIRGYRN);
 800308a:	2349      	movs	r3, #73	; 0x49
 800308c:	4a6d      	ldr	r2, [pc, #436]	; (8003244 <main+0x1f0>)
 800308e:	496e      	ldr	r1, [pc, #440]	; (8003248 <main+0x1f4>)
 8003090:	486e      	ldr	r0, [pc, #440]	; (800324c <main+0x1f8>)
 8003092:	f7ff ff53 	bl	8002f3c <FIRFilter_Init>
  FIRFilter_Init(&firGyr[1], firCoeffGyr, firGyrYBuf, FIRGYRN);
 8003096:	2349      	movs	r3, #73	; 0x49
 8003098:	4a6d      	ldr	r2, [pc, #436]	; (8003250 <main+0x1fc>)
 800309a:	496b      	ldr	r1, [pc, #428]	; (8003248 <main+0x1f4>)
 800309c:	486d      	ldr	r0, [pc, #436]	; (8003254 <main+0x200>)
 800309e:	f7ff ff4d 	bl	8002f3c <FIRFilter_Init>
  FIRFilter_Init(&firGyr[2], firCoeffGyr, firGyrZBuf, FIRGYRN);
 80030a2:	2349      	movs	r3, #73	; 0x49
 80030a4:	4a6c      	ldr	r2, [pc, #432]	; (8003258 <main+0x204>)
 80030a6:	4968      	ldr	r1, [pc, #416]	; (8003248 <main+0x1f4>)
 80030a8:	486c      	ldr	r0, [pc, #432]	; (800325c <main+0x208>)
 80030aa:	f7ff ff47 	bl	8002f3c <FIRFilter_Init>

  FIRFilter_Init(&firAcc[0], firCoeffAcc, firAccXBuf, FIRACCN);
 80030ae:	2349      	movs	r3, #73	; 0x49
 80030b0:	4a6b      	ldr	r2, [pc, #428]	; (8003260 <main+0x20c>)
 80030b2:	496c      	ldr	r1, [pc, #432]	; (8003264 <main+0x210>)
 80030b4:	486c      	ldr	r0, [pc, #432]	; (8003268 <main+0x214>)
 80030b6:	f7ff ff41 	bl	8002f3c <FIRFilter_Init>
  FIRFilter_Init(&firAcc[1], firCoeffAcc, firAccYBuf, FIRACCN);
 80030ba:	2349      	movs	r3, #73	; 0x49
 80030bc:	4a6b      	ldr	r2, [pc, #428]	; (800326c <main+0x218>)
 80030be:	4969      	ldr	r1, [pc, #420]	; (8003264 <main+0x210>)
 80030c0:	486b      	ldr	r0, [pc, #428]	; (8003270 <main+0x21c>)
 80030c2:	f7ff ff3b 	bl	8002f3c <FIRFilter_Init>
  FIRFilter_Init(&firAcc[2], firCoeffAcc, firAccZBuf, FIRACCN);
 80030c6:	2349      	movs	r3, #73	; 0x49
 80030c8:	4a6a      	ldr	r2, [pc, #424]	; (8003274 <main+0x220>)
 80030ca:	4966      	ldr	r1, [pc, #408]	; (8003264 <main+0x210>)
 80030cc:	486a      	ldr	r0, [pc, #424]	; (8003278 <main+0x224>)
 80030ce:	f7ff ff35 	bl	8002f3c <FIRFilter_Init>

  FIRFilter_Init(&firMag[0], firCoeffMag, firMagXBuf, FIRMAGN);
 80030d2:	2339      	movs	r3, #57	; 0x39
 80030d4:	4a69      	ldr	r2, [pc, #420]	; (800327c <main+0x228>)
 80030d6:	496a      	ldr	r1, [pc, #424]	; (8003280 <main+0x22c>)
 80030d8:	486a      	ldr	r0, [pc, #424]	; (8003284 <main+0x230>)
 80030da:	f7ff ff2f 	bl	8002f3c <FIRFilter_Init>
  FIRFilter_Init(&firMag[1], firCoeffMag, firMagYBuf, FIRMAGN);
 80030de:	2339      	movs	r3, #57	; 0x39
 80030e0:	4a69      	ldr	r2, [pc, #420]	; (8003288 <main+0x234>)
 80030e2:	4967      	ldr	r1, [pc, #412]	; (8003280 <main+0x22c>)
 80030e4:	4869      	ldr	r0, [pc, #420]	; (800328c <main+0x238>)
 80030e6:	f7ff ff29 	bl	8002f3c <FIRFilter_Init>
  FIRFilter_Init(&firMag[2], firCoeffMag, firMagZBuf, FIRMAGN);
 80030ea:	2339      	movs	r3, #57	; 0x39
 80030ec:	4a68      	ldr	r2, [pc, #416]	; (8003290 <main+0x23c>)
 80030ee:	4964      	ldr	r1, [pc, #400]	; (8003280 <main+0x22c>)
 80030f0:	4868      	ldr	r0, [pc, #416]	; (8003294 <main+0x240>)
 80030f2:	f7ff ff23 	bl	8002f3c <FIRFilter_Init>

  FIRFilter_Init(&firBar, firCoeffBar, firBarBuf, FIRBARN);
 80030f6:	2359      	movs	r3, #89	; 0x59
 80030f8:	4a67      	ldr	r2, [pc, #412]	; (8003298 <main+0x244>)
 80030fa:	4968      	ldr	r1, [pc, #416]	; (800329c <main+0x248>)
 80030fc:	4868      	ldr	r0, [pc, #416]	; (80032a0 <main+0x24c>)
 80030fe:	f7ff ff1d 	bl	8002f3c <FIRFilter_Init>

  float kalQ[] = {3.0f * 0.000011941f, 2.0f * 0.000011941f};
 8003102:	4a68      	ldr	r2, [pc, #416]	; (80032a4 <main+0x250>)
 8003104:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800310c:	e883 0003 	stmia.w	r3, {r0, r1}
  float kalR[] = {0.00024636441f, 0.00024636441f, 0.00034741232f};
 8003110:	4a65      	ldr	r2, [pc, #404]	; (80032a8 <main+0x254>)
 8003112:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003116:	ca07      	ldmia	r2, {r0, r1, r2}
 8003118:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  KalmanRollPitch_Init(&kal, 10.0f, kalQ, kalR);
 800311c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8003120:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003124:	4619      	mov	r1, r3
 8003126:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800312a:	4860      	ldr	r0, [pc, #384]	; (80032ac <main+0x258>)
 800312c:	f7fe fc8a 	bl	8001a44 <KalmanRollPitch_Init>

  GPSNMEAParser_Init(&gpsData);
 8003130:	485f      	ldr	r0, [pc, #380]	; (80032b0 <main+0x25c>)
 8003132:	f7fe f8bb 	bl	80012ac <GPSNMEAParser_Init>

  /* Heartbeat LED task */
  osThreadDef(heartbeatLEDTask, heartbeatTask, osPriorityLow, 0, 128);
 8003136:	4b5f      	ldr	r3, [pc, #380]	; (80032b4 <main+0x260>)
 8003138:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800313c:	461d      	mov	r5, r3
 800313e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003142:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003146:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatHandle = osThreadCreate(osThread(heartbeatLEDTask), NULL);
 800314a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f004 fada 	bl	800770a <osThreadCreate>
 8003156:	4602      	mov	r2, r0
 8003158:	4b57      	ldr	r3, [pc, #348]	; (80032b8 <main+0x264>)
 800315a:	601a      	str	r2, [r3, #0]

  /* Sensor tasks */
  osThreadDef(barometerReadTask, barometerReadTask, osPriorityAboveNormal, 0, 128);
 800315c:	4b57      	ldr	r3, [pc, #348]	; (80032bc <main+0x268>)
 800315e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8003162:	461d      	mov	r5, r3
 8003164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003168:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800316c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  barometerReadHandle = osThreadCreate(osThread(barometerReadTask), NULL);
 8003170:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003174:	2100      	movs	r1, #0
 8003176:	4618      	mov	r0, r3
 8003178:	f004 fac7 	bl	800770a <osThreadCreate>
 800317c:	4602      	mov	r2, r0
 800317e:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <main+0x26c>)
 8003180:	601a      	str	r2, [r3, #0]

  osThreadDef(imuGyroReadTask, imuGyroReadTask, osPriorityRealtime, 0, 128);
 8003182:	4b50      	ldr	r3, [pc, #320]	; (80032c4 <main+0x270>)
 8003184:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8003188:	461d      	mov	r5, r3
 800318a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800318c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800318e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuGyroReadHandle = osThreadCreate(osThread(imuGyroReadTask), NULL);
 8003196:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f004 fab4 	bl	800770a <osThreadCreate>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b48      	ldr	r3, [pc, #288]	; (80032c8 <main+0x274>)
 80031a6:	601a      	str	r2, [r3, #0]

  osThreadDef(imuAccReadTask, imuAccReadTask, osPriorityRealtime, 0, 256);
 80031a8:	4b48      	ldr	r3, [pc, #288]	; (80032cc <main+0x278>)
 80031aa:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80031ae:	461d      	mov	r5, r3
 80031b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuAccReadHandle = osThreadCreate(osThread(imuAccReadTask), NULL);
 80031bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f004 faa1 	bl	800770a <osThreadCreate>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <main+0x27c>)
 80031cc:	601a      	str	r2, [r3, #0]

  osThreadDef(magReadTask, magReadTask, osPriorityRealtime, 0, 128);
 80031ce:	4b41      	ldr	r3, [pc, #260]	; (80032d4 <main+0x280>)
 80031d0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80031d4:	461d      	mov	r5, r3
 80031d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  magReadHandle = osThreadCreate(osThread(magReadTask), NULL);
 80031e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031e6:	2100      	movs	r1, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 fa8e 	bl	800770a <osThreadCreate>
 80031ee:	4602      	mov	r2, r0
 80031f0:	4b39      	ldr	r3, [pc, #228]	; (80032d8 <main+0x284>)
 80031f2:	601a      	str	r2, [r3, #0]

  osThreadDef(gpsReadTask, gpsReadTask, osPriorityNormal, 0, 128);
 80031f4:	4b39      	ldr	r3, [pc, #228]	; (80032dc <main+0x288>)
 80031f6:	f107 041c 	add.w	r4, r7, #28
 80031fa:	461d      	mov	r5, r3
 80031fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gpsReadHandle = osThreadCreate(osThread(gpsReadTask), NULL);
 8003208:	f107 031c 	add.w	r3, r7, #28
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fa7b 	bl	800770a <osThreadCreate>
 8003214:	4602      	mov	r2, r0
 8003216:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <main+0x28c>)
 8003218:	601a      	str	r2, [r3, #0]

  /* Serial debug output task */
  osThreadDef(debugSerialTask, debugSerialTask, osPriorityLow, 0, 256);
 800321a:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <main+0x290>)
 800321c:	463c      	mov	r4, r7
 800321e:	461d      	mov	r5, r3
 8003220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  debugSerialHandle = osThreadCreate(osThread(debugSerialTask), NULL);
 800322c:	463b      	mov	r3, r7
 800322e:	2100      	movs	r1, #0
 8003230:	4618      	mov	r0, r3
 8003232:	f004 fa6a 	bl	800770a <osThreadCreate>
 8003236:	4602      	mov	r2, r0
 8003238:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <main+0x294>)
 800323a:	601a      	str	r2, [r3, #0]

  osKernelStart();
 800323c:	f004 fa5e 	bl	80076fc <osKernelStart>
  
  while (1)
 8003240:	e7fe      	b.n	8003240 <main+0x1ec>
 8003242:	bf00      	nop
 8003244:	20005454 	.word	0x20005454
 8003248:	20000004 	.word	0x20000004
 800324c:	20005110 	.word	0x20005110
 8003250:	20005314 	.word	0x20005314
 8003254:	20005120 	.word	0x20005120
 8003258:	20004bc8 	.word	0x20004bc8
 800325c:	20005130 	.word	0x20005130
 8003260:	20004750 	.word	0x20004750
 8003264:	20000128 	.word	0x20000128
 8003268:	200050e0 	.word	0x200050e0
 800326c:	200048a8 	.word	0x200048a8
 8003270:	200050f0 	.word	0x200050f0
 8003274:	20004cec 	.word	0x20004cec
 8003278:	20005100 	.word	0x20005100
 800327c:	20004ffc 	.word	0x20004ffc
 8003280:	2000024c 	.word	0x2000024c
 8003284:	20004b44 	.word	0x20004b44
 8003288:	20004a60 	.word	0x20004a60
 800328c:	20004b54 	.word	0x20004b54
 8003290:	20005154 	.word	0x20005154
 8003294:	20004b64 	.word	0x20004b64
 8003298:	20004e10 	.word	0x20004e10
 800329c:	20000330 	.word	0x20000330
 80032a0:	20005144 	.word	0x20005144
 80032a4:	0800d5f0 	.word	0x0800d5f0
 80032a8:	0800d5f8 	.word	0x0800d5f8
 80032ac:	20005278 	.word	0x20005278
 80032b0:	20004f74 	.word	0x20004f74
 80032b4:	0800d618 	.word	0x0800d618
 80032b8:	20005140 	.word	0x20005140
 80032bc:	0800d648 	.word	0x0800d648
 80032c0:	20004874 	.word	0x20004874
 80032c4:	0800d674 	.word	0x0800d674
 80032c8:	20004ff8 	.word	0x20004ff8
 80032cc:	0800d6a0 	.word	0x0800d6a0
 80032d0:	2000474c 	.word	0x2000474c
 80032d4:	0800d6c8 	.word	0x0800d6c8
 80032d8:	20004ff4 	.word	0x20004ff4
 80032dc:	0800d6f0 	.word	0x0800d6f0
 80032e0:	200046f4 	.word	0x200046f4
 80032e4:	0800d71c 	.word	0x0800d71c
 80032e8:	200048a4 	.word	0x200048a4

080032ec <heartbeatTask>:
  }

}

void heartbeatTask(void const * argument)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 80032f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032f8:	4804      	ldr	r0, [pc, #16]	; (800330c <heartbeatTask+0x20>)
 80032fa:	f001 faea 	bl	80048d2 <HAL_GPIO_TogglePin>
    osDelay(SAMPLE_TIME_LED_MS);
 80032fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003302:	4618      	mov	r0, r3
 8003304:	f004 fa4d 	bl	80077a2 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 8003308:	e7f4      	b.n	80032f4 <heartbeatTask+0x8>
 800330a:	bf00      	nop
 800330c:	40020400 	.word	0x40020400

08003310 <imuGyroReadTask>:
  }

}

void imuGyroReadTask (void const *argument) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

	for (;;) {
		BMI088_ReadGyr(&imu);
 8003318:	480f      	ldr	r0, [pc, #60]	; (8003358 <imuGyroReadTask+0x48>)
 800331a:	f7fd ff63 	bl	80011e4 <BMI088_ReadGyr>

		/* Filter measurements */
		FIRFilter_Update(&firGyr[0], imu.gyr[0]);
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <imuGyroReadTask+0x48>)
 8003320:	edd3 7a08 	vldr	s15, [r3, #32]
 8003324:	eeb0 0a67 	vmov.f32	s0, s15
 8003328:	480c      	ldr	r0, [pc, #48]	; (800335c <imuGyroReadTask+0x4c>)
 800332a:	f7ff fe36 	bl	8002f9a <FIRFilter_Update>
		FIRFilter_Update(&firGyr[1], imu.gyr[1]);
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <imuGyroReadTask+0x48>)
 8003330:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003334:	eeb0 0a67 	vmov.f32	s0, s15
 8003338:	4809      	ldr	r0, [pc, #36]	; (8003360 <imuGyroReadTask+0x50>)
 800333a:	f7ff fe2e 	bl	8002f9a <FIRFilter_Update>
		FIRFilter_Update(&firGyr[2], imu.gyr[2]);
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <imuGyroReadTask+0x48>)
 8003340:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003344:	eeb0 0a67 	vmov.f32	s0, s15
 8003348:	4806      	ldr	r0, [pc, #24]	; (8003364 <imuGyroReadTask+0x54>)
 800334a:	f7ff fe26 	bl	8002f9a <FIRFilter_Update>

		osDelay(SAMPLE_TIME_GYR_MS);
 800334e:	2305      	movs	r3, #5
 8003350:	4618      	mov	r0, r3
 8003352:	f004 fa26 	bl	80077a2 <osDelay>
		BMI088_ReadGyr(&imu);
 8003356:	e7df      	b.n	8003318 <imuGyroReadTask+0x8>
 8003358:	20004878 	.word	0x20004878
 800335c:	20005110 	.word	0x20005110
 8003360:	20005120 	.word	0x20005120
 8003364:	20005130 	.word	0x20005130

08003368 <imuAccReadTask>:
	}

}

void imuAccReadTask (void const *argument) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]

	for (;;) {
		BMI088_ReadAcc(&imu);
 8003370:	481e      	ldr	r0, [pc, #120]	; (80033ec <imuAccReadTask+0x84>)
 8003372:	f7fd fed3 	bl	800111c <BMI088_ReadAcc>

		/* Filter measurements */
		FIRFilter_Update(&firAcc[0], imu.acc[0]);
 8003376:	4b1d      	ldr	r3, [pc, #116]	; (80033ec <imuAccReadTask+0x84>)
 8003378:	edd3 7a05 	vldr	s15, [r3, #20]
 800337c:	eeb0 0a67 	vmov.f32	s0, s15
 8003380:	481b      	ldr	r0, [pc, #108]	; (80033f0 <imuAccReadTask+0x88>)
 8003382:	f7ff fe0a 	bl	8002f9a <FIRFilter_Update>
		FIRFilter_Update(&firAcc[1], imu.acc[1]);
 8003386:	4b19      	ldr	r3, [pc, #100]	; (80033ec <imuAccReadTask+0x84>)
 8003388:	edd3 7a06 	vldr	s15, [r3, #24]
 800338c:	eeb0 0a67 	vmov.f32	s0, s15
 8003390:	4818      	ldr	r0, [pc, #96]	; (80033f4 <imuAccReadTask+0x8c>)
 8003392:	f7ff fe02 	bl	8002f9a <FIRFilter_Update>
		FIRFilter_Update(&firAcc[2], imu.acc[2]);
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <imuAccReadTask+0x84>)
 8003398:	edd3 7a07 	vldr	s15, [r3, #28]
 800339c:	eeb0 0a67 	vmov.f32	s0, s15
 80033a0:	4815      	ldr	r0, [pc, #84]	; (80033f8 <imuAccReadTask+0x90>)
 80033a2:	f7ff fdfa 	bl	8002f9a <FIRFilter_Update>

		/* Update kalman filter */
		float gyrFilt[] = {firGyr[0].out, firGyr[1].out, firGyr[2].out};
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <imuAccReadTask+0x94>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	4b13      	ldr	r3, [pc, #76]	; (80033fc <imuAccReadTask+0x94>)
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <imuAccReadTask+0x94>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	61fb      	str	r3, [r7, #28]
		float accFilt[] = {firAcc[0].out, firAcc[1].out, firAcc[2].out};
 80033b8:	4b0d      	ldr	r3, [pc, #52]	; (80033f0 <imuAccReadTask+0x88>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <imuAccReadTask+0x88>)
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <imuAccReadTask+0x88>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	613b      	str	r3, [r7, #16]
		KalmanRollPitch_Update(&kal, gyrFilt, accFilt, 0.0f, 0.01f);
 80033ca:	f107 0208 	add.w	r2, r7, #8
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8003400 <imuAccReadTask+0x98>
 80033d6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003404 <imuAccReadTask+0x9c>
 80033da:	4619      	mov	r1, r3
 80033dc:	480a      	ldr	r0, [pc, #40]	; (8003408 <imuAccReadTask+0xa0>)
 80033de:	f7fe fb69 	bl	8001ab4 <KalmanRollPitch_Update>

		osDelay(SAMPLE_TIME_ACC_MS);
 80033e2:	230a      	movs	r3, #10
 80033e4:	4618      	mov	r0, r3
 80033e6:	f004 f9dc 	bl	80077a2 <osDelay>
	for (;;) {
 80033ea:	e7c1      	b.n	8003370 <imuAccReadTask+0x8>
 80033ec:	20004878 	.word	0x20004878
 80033f0:	200050e0 	.word	0x200050e0
 80033f4:	200050f0 	.word	0x200050f0
 80033f8:	20005100 	.word	0x20005100
 80033fc:	20005110 	.word	0x20005110
 8003400:	3c23d70a 	.word	0x3c23d70a
 8003404:	00000000 	.word	0x00000000
 8003408:	20005278 	.word	0x20005278

0800340c <magReadTask>:
	}

}

void magReadTask (void const *argument) {
 800340c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]

	for (;;) {
		IISMagnetometer_Read(&mag);
 8003416:	485e      	ldr	r0, [pc, #376]	; (8003590 <magReadTask+0x184>)
 8003418:	f7fe fa6c 	bl	80018f4 <IISMagnetometer_Read>

		/* Filter measurements */
		FIRFilter_Update(&firMag[0], mag.xyz[0]);
 800341c:	4b5c      	ldr	r3, [pc, #368]	; (8003590 <magReadTask+0x184>)
 800341e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003422:	eeb0 0a67 	vmov.f32	s0, s15
 8003426:	485b      	ldr	r0, [pc, #364]	; (8003594 <magReadTask+0x188>)
 8003428:	f7ff fdb7 	bl	8002f9a <FIRFilter_Update>
		FIRFilter_Update(&firMag[1], mag.xyz[1]);
 800342c:	4b58      	ldr	r3, [pc, #352]	; (8003590 <magReadTask+0x184>)
 800342e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003432:	eeb0 0a67 	vmov.f32	s0, s15
 8003436:	4858      	ldr	r0, [pc, #352]	; (8003598 <magReadTask+0x18c>)
 8003438:	f7ff fdaf 	bl	8002f9a <FIRFilter_Update>
		FIRFilter_Update(&firMag[2], mag.xyz[2]);
 800343c:	4b54      	ldr	r3, [pc, #336]	; (8003590 <magReadTask+0x184>)
 800343e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003442:	eeb0 0a67 	vmov.f32	s0, s15
 8003446:	4855      	ldr	r0, [pc, #340]	; (800359c <magReadTask+0x190>)
 8003448:	f7ff fda7 	bl	8002f9a <FIRFilter_Update>

		/* Update heading estimate */
		float sp = sin(kal.phi);
 800344c:	4b54      	ldr	r3, [pc, #336]	; (80035a0 <magReadTask+0x194>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f833 	bl	80004bc <__aeabi_f2d>
 8003456:	4603      	mov	r3, r0
 8003458:	460c      	mov	r4, r1
 800345a:	ec44 3b10 	vmov	d0, r3, r4
 800345e:	f005 fb9b 	bl	8008b98 <sin>
 8003462:	ec54 3b10 	vmov	r3, r4, d0
 8003466:	4618      	mov	r0, r3
 8003468:	4621      	mov	r1, r4
 800346a:	f7fd fb77 	bl	8000b5c <__aeabi_d2f>
 800346e:	4603      	mov	r3, r0
 8003470:	60fb      	str	r3, [r7, #12]
		float cp = cos(kal.phi);
 8003472:	4b4b      	ldr	r3, [pc, #300]	; (80035a0 <magReadTask+0x194>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd f820 	bl	80004bc <__aeabi_f2d>
 800347c:	4603      	mov	r3, r0
 800347e:	460c      	mov	r4, r1
 8003480:	ec44 3b10 	vmov	d0, r3, r4
 8003484:	f005 fb44 	bl	8008b10 <cos>
 8003488:	ec54 3b10 	vmov	r3, r4, d0
 800348c:	4618      	mov	r0, r3
 800348e:	4621      	mov	r1, r4
 8003490:	f7fd fb64 	bl	8000b5c <__aeabi_d2f>
 8003494:	4603      	mov	r3, r0
 8003496:	60bb      	str	r3, [r7, #8]
		heading = atan2(-mag.xyz[1] * cp + mag.xyz[2] * sp, mag.xyz[0] * cos(kal.theta) + (mag.xyz[1] * sp + mag.xyz[2] * cp) * sin(kal.theta));
 8003498:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <magReadTask+0x184>)
 800349a:	edd3 7a04 	vldr	s15, [r3, #16]
 800349e:	eeb1 7a67 	vneg.f32	s14, s15
 80034a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034aa:	4b39      	ldr	r3, [pc, #228]	; (8003590 <magReadTask+0x184>)
 80034ac:	edd3 6a05 	vldr	s13, [r3, #20]
 80034b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80034b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034bc:	ee17 0a90 	vmov	r0, s15
 80034c0:	f7fc fffc 	bl	80004bc <__aeabi_f2d>
 80034c4:	4682      	mov	sl, r0
 80034c6:	468b      	mov	fp, r1
 80034c8:	4b31      	ldr	r3, [pc, #196]	; (8003590 <magReadTask+0x184>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fc fff5 	bl	80004bc <__aeabi_f2d>
 80034d2:	4604      	mov	r4, r0
 80034d4:	460d      	mov	r5, r1
 80034d6:	4b32      	ldr	r3, [pc, #200]	; (80035a0 <magReadTask+0x194>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fc ffee 	bl	80004bc <__aeabi_f2d>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	ec43 2b10 	vmov	d0, r2, r3
 80034e8:	f005 fb12 	bl	8008b10 <cos>
 80034ec:	ec53 2b10 	vmov	r2, r3, d0
 80034f0:	4620      	mov	r0, r4
 80034f2:	4629      	mov	r1, r5
 80034f4:	f7fd f83a 	bl	800056c <__aeabi_dmul>
 80034f8:	4603      	mov	r3, r0
 80034fa:	460c      	mov	r4, r1
 80034fc:	4625      	mov	r5, r4
 80034fe:	461c      	mov	r4, r3
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <magReadTask+0x184>)
 8003502:	ed93 7a04 	vldr	s14, [r3, #16]
 8003506:	edd7 7a03 	vldr	s15, [r7, #12]
 800350a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <magReadTask+0x184>)
 8003510:	edd3 6a05 	vldr	s13, [r3, #20]
 8003514:	edd7 7a02 	vldr	s15, [r7, #8]
 8003518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800351c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003520:	ee17 0a90 	vmov	r0, s15
 8003524:	f7fc ffca 	bl	80004bc <__aeabi_f2d>
 8003528:	4680      	mov	r8, r0
 800352a:	4689      	mov	r9, r1
 800352c:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <magReadTask+0x194>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fc ffc3 	bl	80004bc <__aeabi_f2d>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	ec43 2b10 	vmov	d0, r2, r3
 800353e:	f005 fb2b 	bl	8008b98 <sin>
 8003542:	ec53 2b10 	vmov	r2, r3, d0
 8003546:	4640      	mov	r0, r8
 8003548:	4649      	mov	r1, r9
 800354a:	f7fd f80f 	bl	800056c <__aeabi_dmul>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4620      	mov	r0, r4
 8003554:	4629      	mov	r1, r5
 8003556:	f7fc fe53 	bl	8000200 <__adddf3>
 800355a:	4603      	mov	r3, r0
 800355c:	460c      	mov	r4, r1
 800355e:	ec44 3b17 	vmov	d7, r3, r4
 8003562:	eeb0 1a47 	vmov.f32	s2, s14
 8003566:	eef0 1a67 	vmov.f32	s3, s15
 800356a:	ec4b ab10 	vmov	d0, sl, fp
 800356e:	f005 fb8b 	bl	8008c88 <atan2>
 8003572:	ec54 3b10 	vmov	r3, r4, d0
 8003576:	4618      	mov	r0, r3
 8003578:	4621      	mov	r1, r4
 800357a:	f7fd faef 	bl	8000b5c <__aeabi_d2f>
 800357e:	4602      	mov	r2, r0
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <magReadTask+0x198>)
 8003582:	601a      	str	r2, [r3, #0]

		osDelay(SAMPLE_TIME_MAG_MS);
 8003584:	230a      	movs	r3, #10
 8003586:	4618      	mov	r0, r3
 8003588:	f004 f90b 	bl	80077a2 <osDelay>
	for (;;) {
 800358c:	e743      	b.n	8003416 <magReadTask+0xa>
 800358e:	bf00      	nop
 8003590:	20005438 	.word	0x20005438
 8003594:	20004b44 	.word	0x20004b44
 8003598:	20004b54 	.word	0x20004b54
 800359c:	20004b64 	.word	0x20004b64
 80035a0:	20005278 	.word	0x20005278
 80035a4:	20005578 	.word	0x20005578

080035a8 <gpsReadTask>:
	}

}

void gpsReadTask (void const *argument) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b094      	sub	sp, #80	; 0x50
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

	for (;;) {
		char rxBuf[64];
		HAL_UART_Receive(&huart1, (uint8_t *) rxBuf, 64, 100);
 80035b0:	f107 010c 	add.w	r1, r7, #12
 80035b4:	2364      	movs	r3, #100	; 0x64
 80035b6:	2240      	movs	r2, #64	; 0x40
 80035b8:	480d      	ldr	r0, [pc, #52]	; (80035f0 <gpsReadTask+0x48>)
 80035ba:	f003 fb51 	bl	8006c60 <HAL_UART_Receive>

		for (int n = 0; n < 64; n++) {
 80035be:	2300      	movs	r3, #0
 80035c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c2:	e00b      	b.n	80035dc <gpsReadTask+0x34>
			GPSNMEAParser_Feed(&gpsData, rxBuf[n]);
 80035c4:	f107 020c 	add.w	r2, r7, #12
 80035c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ca:	4413      	add	r3, r2
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	4619      	mov	r1, r3
 80035d0:	4808      	ldr	r0, [pc, #32]	; (80035f4 <gpsReadTask+0x4c>)
 80035d2:	f7fe f865 	bl	80016a0 <GPSNMEAParser_Feed>
		for (int n = 0; n < 64; n++) {
 80035d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d8:	3301      	adds	r3, #1
 80035da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035de:	2b3f      	cmp	r3, #63	; 0x3f
 80035e0:	ddf0      	ble.n	80035c4 <gpsReadTask+0x1c>
		}

		osDelay(SAMPLE_TIME_GPS_MS);
 80035e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 f8db 	bl	80077a2 <osDelay>
	for (;;) {
 80035ec:	e7e0      	b.n	80035b0 <gpsReadTask+0x8>
 80035ee:	bf00      	nop
 80035f0:	20004fb4 	.word	0x20004fb4
 80035f4:	20004f74 	.word	0x20004f74

080035f8 <barometerReadTask>:
	}

}

void barometerReadTask (void const *argument) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

	for (;;) {
		MPRLSBarometer_ReadPressure(&bar);
 8003600:	4807      	ldr	r0, [pc, #28]	; (8003620 <barometerReadTask+0x28>)
 8003602:	f7ff fab1 	bl	8002b68 <MPRLSBarometer_ReadPressure>

		/* Filter measurement */
		FIRFilter_Update(&firBar, bar.pressurePa);
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <barometerReadTask+0x28>)
 8003608:	edd3 7a05 	vldr	s15, [r3, #20]
 800360c:	eeb0 0a67 	vmov.f32	s0, s15
 8003610:	4804      	ldr	r0, [pc, #16]	; (8003624 <barometerReadTask+0x2c>)
 8003612:	f7ff fcc2 	bl	8002f9a <FIRFilter_Update>

		osDelay(SAMPLE_TIME_BAR_MS);
 8003616:	230a      	movs	r3, #10
 8003618:	4618      	mov	r0, r3
 800361a:	f004 f8c2 	bl	80077a2 <osDelay>
		MPRLSBarometer_ReadPressure(&bar);
 800361e:	e7ef      	b.n	8003600 <barometerReadTask+0x8>
 8003620:	200052f8 	.word	0x200052f8
 8003624:	20005144 	.word	0x20005144

08003628 <debugSerialTask>:
	}

}

void debugSerialTask (void const *argument) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b0a6      	sub	sp, #152	; 0x98
 800362c:	af02      	add	r7, sp, #8
 800362e:	6078      	str	r0, [r7, #4]

	for (;;) {

	    NavDataContainer[0] = firAcc[0].out;
 8003630:	4b42      	ldr	r3, [pc, #264]	; (800373c <debugSerialTask+0x114>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a42      	ldr	r2, [pc, #264]	; (8003740 <debugSerialTask+0x118>)
 8003636:	6013      	str	r3, [r2, #0]
		NavDataContainer[1] = firAcc[1].out;
 8003638:	4b40      	ldr	r3, [pc, #256]	; (800373c <debugSerialTask+0x114>)
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	4a40      	ldr	r2, [pc, #256]	; (8003740 <debugSerialTask+0x118>)
 800363e:	6053      	str	r3, [r2, #4]
		NavDataContainer[2] = firAcc[2].out;
 8003640:	4b3e      	ldr	r3, [pc, #248]	; (800373c <debugSerialTask+0x114>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4a3e      	ldr	r2, [pc, #248]	; (8003740 <debugSerialTask+0x118>)
 8003646:	6093      	str	r3, [r2, #8]
		NavDataContainer[3] = firGyr[0].out;
 8003648:	4b3e      	ldr	r3, [pc, #248]	; (8003744 <debugSerialTask+0x11c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a3c      	ldr	r2, [pc, #240]	; (8003740 <debugSerialTask+0x118>)
 800364e:	60d3      	str	r3, [r2, #12]
		NavDataContainer[4] = firGyr[1].out;
 8003650:	4b3c      	ldr	r3, [pc, #240]	; (8003744 <debugSerialTask+0x11c>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	4a3a      	ldr	r2, [pc, #232]	; (8003740 <debugSerialTask+0x118>)
 8003656:	6113      	str	r3, [r2, #16]
		NavDataContainer[5] = firGyr[2].out;
 8003658:	4b3a      	ldr	r3, [pc, #232]	; (8003744 <debugSerialTask+0x11c>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4a38      	ldr	r2, [pc, #224]	; (8003740 <debugSerialTask+0x118>)
 800365e:	6153      	str	r3, [r2, #20]

		NavDataContainer[6] = mag.xyz[0]; //firMag[0].out;
 8003660:	4b39      	ldr	r3, [pc, #228]	; (8003748 <debugSerialTask+0x120>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a36      	ldr	r2, [pc, #216]	; (8003740 <debugSerialTask+0x118>)
 8003666:	6193      	str	r3, [r2, #24]
		NavDataContainer[7] = mag.xyz[1]; //firMag[1].out;
 8003668:	4b37      	ldr	r3, [pc, #220]	; (8003748 <debugSerialTask+0x120>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	4a34      	ldr	r2, [pc, #208]	; (8003740 <debugSerialTask+0x118>)
 800366e:	61d3      	str	r3, [r2, #28]
		NavDataContainer[8] = mag.xyz[2]; //firMag[2].out;
 8003670:	4b35      	ldr	r3, [pc, #212]	; (8003748 <debugSerialTask+0x120>)
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	4a32      	ldr	r2, [pc, #200]	; (8003740 <debugSerialTask+0x118>)
 8003676:	6213      	str	r3, [r2, #32]

		NavDataContainer[9]  = bar.pressurePa; //firBar.out;
 8003678:	4b34      	ldr	r3, [pc, #208]	; (800374c <debugSerialTask+0x124>)
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	4a30      	ldr	r2, [pc, #192]	; (8003740 <debugSerialTask+0x118>)
 800367e:	6253      	str	r3, [r2, #36]	; 0x24
		NavDataContainer[10] = 0.0f;
 8003680:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <debugSerialTask+0x118>)
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	629a      	str	r2, [r3, #40]	; 0x28

		NavDataContainer[11] = (float) gpsData.fixQuality;
 8003688:	4b31      	ldr	r3, [pc, #196]	; (8003750 <debugSerialTask+0x128>)
 800368a:	7f5b      	ldrb	r3, [r3, #29]
 800368c:	ee07 3a90 	vmov	s15, r3
 8003690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <debugSerialTask+0x118>)
 8003696:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		NavDataContainer[12] = gpsData.latitude_dec;
 800369a:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <debugSerialTask+0x128>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a28      	ldr	r2, [pc, #160]	; (8003740 <debugSerialTask+0x118>)
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
		NavDataContainer[13] = gpsData.longitude_dec;
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <debugSerialTask+0x128>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4a26      	ldr	r2, [pc, #152]	; (8003740 <debugSerialTask+0x118>)
 80036a8:	6353      	str	r3, [r2, #52]	; 0x34
		NavDataContainer[14] = gpsData.altitude_m;
 80036aa:	4b29      	ldr	r3, [pc, #164]	; (8003750 <debugSerialTask+0x128>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4a24      	ldr	r2, [pc, #144]	; (8003740 <debugSerialTask+0x118>)
 80036b0:	6393      	str	r3, [r2, #56]	; 0x38
		NavDataContainer[15] = gpsData.groundSpeed_mps;
 80036b2:	4b27      	ldr	r3, [pc, #156]	; (8003750 <debugSerialTask+0x128>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	4a22      	ldr	r2, [pc, #136]	; (8003740 <debugSerialTask+0x118>)
 80036b8:	63d3      	str	r3, [r2, #60]	; 0x3c
		NavDataContainer[16] = gpsData.course_deg;
 80036ba:	4b25      	ldr	r3, [pc, #148]	; (8003750 <debugSerialTask+0x128>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	4a20      	ldr	r2, [pc, #128]	; (8003740 <debugSerialTask+0x118>)
 80036c0:	6413      	str	r3, [r2, #64]	; 0x40

		NavDataContainer[17] = kal.phi   * 57.2957795131f;
 80036c2:	4b24      	ldr	r3, [pc, #144]	; (8003754 <debugSerialTask+0x12c>)
 80036c4:	edd3 7a00 	vldr	s15, [r3]
 80036c8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003758 <debugSerialTask+0x130>
 80036cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036d0:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <debugSerialTask+0x118>)
 80036d2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		NavDataContainer[18] = kal.theta * 57.2957795131f;
 80036d6:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <debugSerialTask+0x12c>)
 80036d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80036dc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003758 <debugSerialTask+0x130>
 80036e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e4:	4b16      	ldr	r3, [pc, #88]	; (8003740 <debugSerialTask+0x118>)
 80036e6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		NavDataContainer[19] = heading   * 57.2957795131f;
 80036ea:	4b1c      	ldr	r3, [pc, #112]	; (800375c <debugSerialTask+0x134>)
 80036ec:	edd3 7a00 	vldr	s15, [r3]
 80036f0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003758 <debugSerialTask+0x130>
 80036f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f8:	4b11      	ldr	r3, [pc, #68]	; (8003740 <debugSerialTask+0x118>)
 80036fa:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

		NavDataContainer[20] = tmp.temp_C;
 80036fe:	4b18      	ldr	r3, [pc, #96]	; (8003760 <debugSerialTask+0x138>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4a0f      	ldr	r2, [pc, #60]	; (8003740 <debugSerialTask+0x118>)
 8003704:	6513      	str	r3, [r2, #80]	; 0x50

		uint8_t UAVDataPacket[128];
		uint8_t UAVDataPacketLength = UAVDataLink_Pack(0, 0, sizeof(NavDataContainer), (const uint8_t *) NavDataContainer, UAVDataPacket);
 8003706:	f107 030c 	add.w	r3, r7, #12
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <debugSerialTask+0x118>)
 800370e:	2254      	movs	r2, #84	; 0x54
 8003710:	2100      	movs	r1, #0
 8003712:	2000      	movs	r0, #0
 8003714:	f7ff fac6 	bl	8002ca4 <UAVDataLink_Pack>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

		HAL_UART_Transmit(&huart3, UAVDataPacket, UAVDataPacketLength, HAL_MAX_DELAY);
 800371e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003722:	b29a      	uxth	r2, r3
 8003724:	f107 010c 	add.w	r1, r7, #12
 8003728:	f04f 33ff 	mov.w	r3, #4294967295
 800372c:	480d      	ldr	r0, [pc, #52]	; (8003764 <debugSerialTask+0x13c>)
 800372e:	f003 f9fe 	bl	8006b2e <HAL_UART_Transmit>

		osDelay(SAMPLE_TIME_DBG_MS);
 8003732:	2364      	movs	r3, #100	; 0x64
 8003734:	4618      	mov	r0, r3
 8003736:	f004 f834 	bl	80077a2 <osDelay>
	for (;;) {
 800373a:	e779      	b.n	8003630 <debugSerialTask+0x8>
 800373c:	200050e0 	.word	0x200050e0
 8003740:	200052a4 	.word	0x200052a4
 8003744:	20005110 	.word	0x20005110
 8003748:	20005438 	.word	0x20005438
 800374c:	200052f8 	.word	0x200052f8
 8003750:	20004f74 	.word	0x20004f74
 8003754:	20005278 	.word	0x20005278
 8003758:	42652ee1 	.word	0x42652ee1
 800375c:	20005578 	.word	0x20005578
 8003760:	20004638 	.word	0x20004638
 8003764:	200049cc 	.word	0x200049cc

08003768 <initPeripherals>:
	}

}

void initPeripherals() {
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af04      	add	r7, sp, #16
	uint8_t status = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	71fb      	strb	r3, [r7, #7]

	/* Initialise pressure sensor */
	uint8_t statBar = (MPRLSBarometer_Init(&bar, &hi2c1, BARNRST_GPIO_Port, BARNRST_Pin, INTBAR_GPIO_Port, INTBAR_Pin) == MPRLS_STATUS_POWERED);
 8003772:	2301      	movs	r3, #1
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <initPeripherals+0xbc>)
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <initPeripherals+0xc0>)
 800377e:	492b      	ldr	r1, [pc, #172]	; (800382c <initPeripherals+0xc4>)
 8003780:	482b      	ldr	r0, [pc, #172]	; (8003830 <initPeripherals+0xc8>)
 8003782:	f7ff f98d 	bl	8002aa0 <MPRLSBarometer_Init>
 8003786:	4603      	mov	r3, r0
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	71bb      	strb	r3, [r7, #6]

	/* Initialise magnetometer */
	uint8_t statMag = IISMagnetometer_Init(&mag, &hi2c1, GPIOA, INTMAG_Pin);
 8003794:	2340      	movs	r3, #64	; 0x40
 8003796:	4a24      	ldr	r2, [pc, #144]	; (8003828 <initPeripherals+0xc0>)
 8003798:	4924      	ldr	r1, [pc, #144]	; (800382c <initPeripherals+0xc4>)
 800379a:	4826      	ldr	r0, [pc, #152]	; (8003834 <initPeripherals+0xcc>)
 800379c:	f7fe f842 	bl	8001824 <IISMagnetometer_Init>
 80037a0:	4603      	mov	r3, r0
 80037a2:	717b      	strb	r3, [r7, #5]

	/* Initialise IMU */
	uint8_t statIMU = BMI088_Init(&imu, &hi2c1, GPIOA, INTACC_Pin, GPIOA, INTGYR_Pin);
 80037a4:	2320      	movs	r3, #32
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <initPeripherals+0xc0>)
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2310      	movs	r3, #16
 80037ae:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <initPeripherals+0xc0>)
 80037b0:	491e      	ldr	r1, [pc, #120]	; (800382c <initPeripherals+0xc4>)
 80037b2:	4821      	ldr	r0, [pc, #132]	; (8003838 <initPeripherals+0xd0>)
 80037b4:	f7fd fba2 	bl	8000efc <BMI088_Init>
 80037b8:	4603      	mov	r3, r0
 80037ba:	713b      	strb	r3, [r7, #4]

	status = statBar + statMag + statIMU;
 80037bc:	79ba      	ldrb	r2, [r7, #6]
 80037be:	797b      	ldrb	r3, [r7, #5]
 80037c0:	4413      	add	r3, r2
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	793b      	ldrb	r3, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	71fb      	strb	r3, [r7, #7]

	/* Initialise temperature sensor */
	TMP100_Init(&tmp, &hi2c1);
 80037ca:	4918      	ldr	r1, [pc, #96]	; (800382c <initPeripherals+0xc4>)
 80037cc:	481b      	ldr	r0, [pc, #108]	; (800383c <initPeripherals+0xd4>)
 80037ce:	f7ff fa49 	bl	8002c64 <TMP100_Init>

	/* Initialise GPS receiver */
	UBloxGPS_Init(&gps, &huart1, GPIOC, GPSNRST_Pin, GPIOC, GPSPPS_Pin, GPIOC, GPSLNAEN_Pin);
 80037d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037d6:	9303      	str	r3, [sp, #12]
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <initPeripherals+0xd8>)
 80037da:	9302      	str	r3, [sp, #8]
 80037dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	4b17      	ldr	r3, [pc, #92]	; (8003840 <initPeripherals+0xd8>)
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037ea:	4a15      	ldr	r2, [pc, #84]	; (8003840 <initPeripherals+0xd8>)
 80037ec:	4915      	ldr	r1, [pc, #84]	; (8003844 <initPeripherals+0xdc>)
 80037ee:	4816      	ldr	r0, [pc, #88]	; (8003848 <initPeripherals+0xe0>)
 80037f0:	f7ff fb29 	bl	8002e46 <UBloxGPS_Init>
	UBloxGPS_Reset(&gps);
 80037f4:	4814      	ldr	r0, [pc, #80]	; (8003848 <initPeripherals+0xe0>)
 80037f6:	f7ff fb64 	bl	8002ec2 <UBloxGPS_Reset>

	if (status < 3) {
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d806      	bhi.n	800380e <initPeripherals+0xa6>
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_SET);
 8003800:	2201      	movs	r2, #1
 8003802:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003806:	4807      	ldr	r0, [pc, #28]	; (8003824 <initPeripherals+0xbc>)
 8003808:	f001 f84a 	bl	80048a0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_RESET);
	}
}
 800380c:	e005      	b.n	800381a <initPeripherals+0xb2>
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_RESET);
 800380e:	2200      	movs	r2, #0
 8003810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003814:	4803      	ldr	r0, [pc, #12]	; (8003824 <initPeripherals+0xbc>)
 8003816:	f001 f843 	bl	80048a0 <HAL_GPIO_WritePin>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40020400 	.word	0x40020400
 8003828:	40020000 	.word	0x40020000
 800382c:	20004a0c 	.word	0x20004a0c
 8003830:	200052f8 	.word	0x200052f8
 8003834:	20005438 	.word	0x20005438
 8003838:	20004878 	.word	0x20004878
 800383c:	20004638 	.word	0x20004638
 8003840:	40020800 	.word	0x40020800
 8003844:	20004fb4 	.word	0x20004fb4
 8003848:	20004640 	.word	0x20004640

0800384c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b094      	sub	sp, #80	; 0x50
 8003850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003852:	f107 0320 	add.w	r3, r7, #32
 8003856:	2230      	movs	r2, #48	; 0x30
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f006 fe6d 	bl	800a53a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003860:	f107 030c 	add.w	r3, r7, #12
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	2300      	movs	r3, #0
 8003872:	60bb      	str	r3, [r7, #8]
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <SystemClock_Config+0xcc>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	4a27      	ldr	r2, [pc, #156]	; (8003918 <SystemClock_Config+0xcc>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	; 0x40
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <SystemClock_Config+0xcc>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800388c:	2300      	movs	r3, #0
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	4b22      	ldr	r3, [pc, #136]	; (800391c <SystemClock_Config+0xd0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a21      	ldr	r2, [pc, #132]	; (800391c <SystemClock_Config+0xd0>)
 8003896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b1f      	ldr	r3, [pc, #124]	; (800391c <SystemClock_Config+0xd0>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038b2:	2302      	movs	r3, #2
 80038b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80038bc:	2319      	movs	r3, #25
 80038be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80038c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80038c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038c6:	2302      	movs	r3, #2
 80038c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038ca:	2304      	movs	r3, #4
 80038cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ce:	f107 0320 	add.w	r3, r7, #32
 80038d2:	4618      	mov	r0, r3
 80038d4:	f002 fa64 	bl	8005da0 <HAL_RCC_OscConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80038de:	f000 f9eb 	bl	8003cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038e2:	230f      	movs	r3, #15
 80038e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038e6:	2302      	movs	r3, #2
 80038e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038fa:	f107 030c 	add.w	r3, r7, #12
 80038fe:	2105      	movs	r1, #5
 8003900:	4618      	mov	r0, r3
 8003902:	f002 fc8f 	bl	8006224 <HAL_RCC_ClockConfig>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800390c:	f000 f9d4 	bl	8003cb8 <Error_Handler>
  }
}
 8003910:	bf00      	nop
 8003912:	3750      	adds	r7, #80	; 0x50
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	40007000 	.word	0x40007000

08003920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <MX_I2C1_Init+0x50>)
 8003926:	4a13      	ldr	r2, [pc, #76]	; (8003974 <MX_I2C1_Init+0x54>)
 8003928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <MX_I2C1_Init+0x50>)
 800392c:	4a12      	ldr	r2, [pc, #72]	; (8003978 <MX_I2C1_Init+0x58>)
 800392e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <MX_I2C1_Init+0x50>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <MX_I2C1_Init+0x50>)
 8003938:	2200      	movs	r2, #0
 800393a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <MX_I2C1_Init+0x50>)
 800393e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003942:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <MX_I2C1_Init+0x50>)
 8003946:	2200      	movs	r2, #0
 8003948:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <MX_I2C1_Init+0x50>)
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <MX_I2C1_Init+0x50>)
 8003952:	2200      	movs	r2, #0
 8003954:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <MX_I2C1_Init+0x50>)
 8003958:	2200      	movs	r2, #0
 800395a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800395c:	4804      	ldr	r0, [pc, #16]	; (8003970 <MX_I2C1_Init+0x50>)
 800395e:	f000 ffd3 	bl	8004908 <HAL_I2C_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003968:	f000 f9a6 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800396c:	bf00      	nop
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20004a0c 	.word	0x20004a0c
 8003974:	40005400 	.word	0x40005400
 8003978:	000186a0 	.word	0x000186a0

0800397c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003980:	4b12      	ldr	r3, [pc, #72]	; (80039cc <MX_I2C2_Init+0x50>)
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <MX_I2C2_Init+0x54>)
 8003984:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <MX_I2C2_Init+0x50>)
 8003988:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <MX_I2C2_Init+0x58>)
 800398a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800398c:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <MX_I2C2_Init+0x50>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003992:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <MX_I2C2_Init+0x50>)
 8003994:	2200      	movs	r2, #0
 8003996:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <MX_I2C2_Init+0x50>)
 800399a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800399e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <MX_I2C2_Init+0x50>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <MX_I2C2_Init+0x50>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039ac:	4b07      	ldr	r3, [pc, #28]	; (80039cc <MX_I2C2_Init+0x50>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <MX_I2C2_Init+0x50>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80039b8:	4804      	ldr	r0, [pc, #16]	; (80039cc <MX_I2C2_Init+0x50>)
 80039ba:	f000 ffa5 	bl	8004908 <HAL_I2C_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80039c4:	f000 f978 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20004b74 	.word	0x20004b74
 80039d0:	40005800 	.word	0x40005800
 80039d4:	000186a0 	.word	0x000186a0

080039d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <MX_I2C3_Init+0x50>)
 80039de:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <MX_I2C3_Init+0x54>)
 80039e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80039e2:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <MX_I2C3_Init+0x50>)
 80039e4:	4a12      	ldr	r2, [pc, #72]	; (8003a30 <MX_I2C3_Init+0x58>)
 80039e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <MX_I2C3_Init+0x50>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <MX_I2C3_Init+0x50>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <MX_I2C3_Init+0x50>)
 80039f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <MX_I2C3_Init+0x50>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <MX_I2C3_Init+0x50>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a08:	4b07      	ldr	r3, [pc, #28]	; (8003a28 <MX_I2C3_Init+0x50>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <MX_I2C3_Init+0x50>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003a14:	4804      	ldr	r0, [pc, #16]	; (8003a28 <MX_I2C3_Init+0x50>)
 8003a16:	f000 ff77 	bl	8004908 <HAL_I2C_Init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003a20:	f000 f94a 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003a24:	bf00      	nop
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200046f8 	.word	0x200046f8
 8003a2c:	40005c00 	.word	0x40005c00
 8003a30:	000186a0 	.word	0x000186a0

08003a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <MX_USART1_UART_Init+0x50>)
 8003a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9800;
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a40:	f242 6248 	movw	r2, #9800	; 0x2648
 8003a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a46:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a52:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <MX_USART1_UART_Init+0x4c>)
 8003a6c:	f003 f812 	bl	8006a94 <HAL_UART_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a76:	f000 f91f 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20004fb4 	.word	0x20004fb4
 8003a84:	40011000 	.word	0x40011000

08003a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <MX_USART2_UART_Init+0x4c>)
 8003a8e:	4a12      	ldr	r2, [pc, #72]	; (8003ad8 <MX_USART2_UART_Init+0x50>)
 8003a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a92:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <MX_USART2_UART_Init+0x4c>)
 8003a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <MX_USART2_UART_Init+0x4c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <MX_USART2_UART_Init+0x4c>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <MX_USART2_UART_Init+0x4c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <MX_USART2_UART_Init+0x4c>)
 8003aae:	220c      	movs	r2, #12
 8003ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <MX_USART2_UART_Init+0x4c>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <MX_USART2_UART_Init+0x4c>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003abe:	4805      	ldr	r0, [pc, #20]	; (8003ad4 <MX_USART2_UART_Init+0x4c>)
 8003ac0:	f002 ffe8 	bl	8006a94 <HAL_UART_Init>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003aca:	f000 f8f5 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20005238 	.word	0x20005238
 8003ad8:	40004400 	.word	0x40004400

08003adc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <MX_USART3_UART_Init+0x4c>)
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <MX_USART3_UART_Init+0x50>)
 8003ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <MX_USART3_UART_Init+0x4c>)
 8003ae8:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8003aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <MX_USART3_UART_Init+0x4c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <MX_USART3_UART_Init+0x4c>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <MX_USART3_UART_Init+0x4c>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <MX_USART3_UART_Init+0x4c>)
 8003b02:	220c      	movs	r2, #12
 8003b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <MX_USART3_UART_Init+0x4c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <MX_USART3_UART_Init+0x4c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b12:	4805      	ldr	r0, [pc, #20]	; (8003b28 <MX_USART3_UART_Init+0x4c>)
 8003b14:	f002 ffbe 	bl	8006a94 <HAL_UART_Init>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003b1e:	f000 f8cb 	bl	8003cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200049cc 	.word	0x200049cc
 8003b2c:	40004800 	.word	0x40004800

08003b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b36:	f107 0314 	add.w	r3, r7, #20
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	4b4e      	ldr	r3, [pc, #312]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a4d      	ldr	r2, [pc, #308]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b4b      	ldr	r3, [pc, #300]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a46      	ldr	r2, [pc, #280]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b44      	ldr	r3, [pc, #272]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	4b40      	ldr	r3, [pc, #256]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a3f      	ldr	r2, [pc, #252]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a38      	ldr	r2, [pc, #224]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <MX_GPIO_Init+0x154>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	607b      	str	r3, [r7, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPSNRST_Pin|FCCTXA_Pin|FCCTXB_Pin|FCCTXC_Pin 
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f244 01f0 	movw	r1, #16624	; 0x40f0
 8003bbc:	4832      	ldr	r0, [pc, #200]	; (8003c88 <MX_GPIO_Init+0x158>)
 8003bbe:	f000 fe6f 	bl	80048a0 <HAL_GPIO_WritePin>
                          |FCCTXD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BARNRST_GPIO_Port, BARNRST_Pin, GPIO_PIN_RESET);
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	4831      	ldr	r0, [pc, #196]	; (8003c8c <MX_GPIO_Init+0x15c>)
 8003bc8:	f000 fe6a 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin, GPIO_PIN_RESET);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003bd2:	482f      	ldr	r0, [pc, #188]	; (8003c90 <MX_GPIO_Init+0x160>)
 8003bd4:	f000 fe64 	bl	80048a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPSLNAEN_Pin FCCRXA_Pin FCCRXB_Pin FCCRXC_Pin 
                           FCCRXD_Pin GPSPPS_Pin */
  GPIO_InitStruct.Pin = GPSLNAEN_Pin|FCCRXA_Pin|FCCRXB_Pin|FCCRXC_Pin 
 8003bd8:	f243 030f 	movw	r3, #12303	; 0x300f
 8003bdc:	617b      	str	r3, [r7, #20]
                          |FCCRXD_Pin|GPSPPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be6:	f107 0314 	add.w	r3, r7, #20
 8003bea:	4619      	mov	r1, r3
 8003bec:	4826      	ldr	r0, [pc, #152]	; (8003c88 <MX_GPIO_Init+0x158>)
 8003bee:	f000 fca5 	bl	800453c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPSNRST_Pin FCCTXA_Pin FCCTXB_Pin FCCTXC_Pin 
                           FCCTXD_Pin */
  GPIO_InitStruct.Pin = GPSNRST_Pin|FCCTXA_Pin|FCCTXB_Pin|FCCTXC_Pin 
 8003bf2:	f244 03f0 	movw	r3, #16624	; 0x40f0
 8003bf6:	617b      	str	r3, [r7, #20]
                          |FCCTXD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c00:	2300      	movs	r3, #0
 8003c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4619      	mov	r1, r3
 8003c0a:	481f      	ldr	r0, [pc, #124]	; (8003c88 <MX_GPIO_Init+0x158>)
 8003c0c:	f000 fc96 	bl	800453c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTACC_Pin INTGYR_Pin INTMAG_Pin */
  GPIO_InitStruct.Pin = INTACC_Pin|INTGYR_Pin|INTMAG_Pin;
 8003c10:	2370      	movs	r3, #112	; 0x70
 8003c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	4619      	mov	r1, r3
 8003c22:	481a      	ldr	r0, [pc, #104]	; (8003c8c <MX_GPIO_Init+0x15c>)
 8003c24:	f000 fc8a 	bl	800453c <HAL_GPIO_Init>

  /*Configure GPIO pin : BARNRST_Pin */
  GPIO_InitStruct.Pin = BARNRST_Pin;
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c34:	2300      	movs	r3, #0
 8003c36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARNRST_GPIO_Port, &GPIO_InitStruct);
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4813      	ldr	r0, [pc, #76]	; (8003c8c <MX_GPIO_Init+0x15c>)
 8003c40:	f000 fc7c 	bl	800453c <HAL_GPIO_Init>

  /*Configure GPIO pin : INTBAR_Pin */
  GPIO_InitStruct.Pin = INTBAR_Pin;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTBAR_GPIO_Port, &GPIO_InitStruct);
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	4619      	mov	r1, r3
 8003c56:	480e      	ldr	r0, [pc, #56]	; (8003c90 <MX_GPIO_Init+0x160>)
 8003c58:	f000 fc70 	bl	800453c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin;
 8003c5c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c62:	2301      	movs	r3, #1
 8003c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6e:	f107 0314 	add.w	r3, r7, #20
 8003c72:	4619      	mov	r1, r3
 8003c74:	4806      	ldr	r0, [pc, #24]	; (8003c90 <MX_GPIO_Init+0x160>)
 8003c76:	f000 fc61 	bl	800453c <HAL_GPIO_Init>

}
 8003c7a:	bf00      	nop
 8003c7c:	3728      	adds	r7, #40	; 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40020800 	.word	0x40020800
 8003c8c:	40020000 	.word	0x40020000
 8003c90:	40020400 	.word	0x40020400

08003c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003ca6:	f000 fb03 	bl	80042b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000

08003cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cbc:	bf00      	nop
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <HAL_MspInit+0x54>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <HAL_MspInit+0x54>)
 8003cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cde:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <HAL_MspInit+0x54>)
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_MspInit+0x54>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <HAL_MspInit+0x54>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_MspInit+0x54>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d06:	2200      	movs	r2, #0
 8003d08:	210f      	movs	r1, #15
 8003d0a:	f06f 0001 	mvn.w	r0, #1
 8003d0e:	f000 fbc9 	bl	80044a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800

08003d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08e      	sub	sp, #56	; 0x38
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a5c      	ldr	r2, [pc, #368]	; (8003eb0 <HAL_I2C_MspInit+0x190>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d12d      	bne.n	8003d9e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	4b5b      	ldr	r3, [pc, #364]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4a5a      	ldr	r2, [pc, #360]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	6313      	str	r3, [r2, #48]	; 0x30
 8003d52:	4b58      	ldr	r3, [pc, #352]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d64:	2312      	movs	r3, #18
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d70:	2304      	movs	r3, #4
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d78:	4619      	mov	r1, r3
 8003d7a:	484f      	ldr	r0, [pc, #316]	; (8003eb8 <HAL_I2C_MspInit+0x198>)
 8003d7c:	f000 fbde 	bl	800453c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d80:	2300      	movs	r3, #0
 8003d82:	61fb      	str	r3, [r7, #28]
 8003d84:	4b4b      	ldr	r3, [pc, #300]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	4a4a      	ldr	r2, [pc, #296]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003d8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d90:	4b48      	ldr	r3, [pc, #288]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003d9c:	e083      	b.n	8003ea6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a46      	ldr	r2, [pc, #280]	; (8003ebc <HAL_I2C_MspInit+0x19c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d12d      	bne.n	8003e04 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da8:	2300      	movs	r3, #0
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	4a40      	ldr	r2, [pc, #256]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003db2:	f043 0302 	orr.w	r3, r3, #2
 8003db6:	6313      	str	r3, [r2, #48]	; 0x30
 8003db8:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003dc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dca:	2312      	movs	r3, #18
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dde:	4619      	mov	r1, r3
 8003de0:	4835      	ldr	r0, [pc, #212]	; (8003eb8 <HAL_I2C_MspInit+0x198>)
 8003de2:	f000 fbab 	bl	800453c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a31      	ldr	r2, [pc, #196]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003df0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
 8003df6:	4b2f      	ldr	r3, [pc, #188]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	697b      	ldr	r3, [r7, #20]
}
 8003e02:	e050      	b.n	8003ea6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2d      	ldr	r2, [pc, #180]	; (8003ec0 <HAL_I2C_MspInit+0x1a0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d14b      	bne.n	8003ea6 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	4b28      	ldr	r3, [pc, #160]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a27      	ldr	r2, [pc, #156]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a20      	ldr	r2, [pc, #128]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e4c:	2312      	movs	r3, #18
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e50:	2301      	movs	r3, #1
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e54:	2303      	movs	r3, #3
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e58:	2304      	movs	r3, #4
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e60:	4619      	mov	r1, r3
 8003e62:	4818      	ldr	r0, [pc, #96]	; (8003ec4 <HAL_I2C_MspInit+0x1a4>)
 8003e64:	f000 fb6a 	bl	800453c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e6e:	2312      	movs	r3, #18
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e72:	2301      	movs	r3, #1
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e76:	2303      	movs	r3, #3
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e82:	4619      	mov	r1, r3
 8003e84:	4810      	ldr	r0, [pc, #64]	; (8003ec8 <HAL_I2C_MspInit+0x1a8>)
 8003e86:	f000 fb59 	bl	800453c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e98:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_I2C_MspInit+0x194>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
}
 8003ea6:	bf00      	nop
 8003ea8:	3738      	adds	r7, #56	; 0x38
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40005400 	.word	0x40005400
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40020400 	.word	0x40020400
 8003ebc:	40005800 	.word	0x40005800
 8003ec0:	40005c00 	.word	0x40005c00
 8003ec4:	40020800 	.word	0x40020800
 8003ec8:	40020000 	.word	0x40020000

08003ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08e      	sub	sp, #56	; 0x38
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a4f      	ldr	r2, [pc, #316]	; (8004028 <HAL_UART_MspInit+0x15c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d134      	bne.n	8003f58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	4b4e      	ldr	r3, [pc, #312]	; (800402c <HAL_UART_MspInit+0x160>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	4a4d      	ldr	r2, [pc, #308]	; (800402c <HAL_UART_MspInit+0x160>)
 8003ef8:	f043 0310 	orr.w	r3, r3, #16
 8003efc:	6453      	str	r3, [r2, #68]	; 0x44
 8003efe:	4b4b      	ldr	r3, [pc, #300]	; (800402c <HAL_UART_MspInit+0x160>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	623b      	str	r3, [r7, #32]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <HAL_UART_MspInit+0x160>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4a46      	ldr	r2, [pc, #280]	; (800402c <HAL_UART_MspInit+0x160>)
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1a:	4b44      	ldr	r3, [pc, #272]	; (800402c <HAL_UART_MspInit+0x160>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f26:	23c0      	movs	r3, #192	; 0xc0
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f32:	2303      	movs	r3, #3
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f36:	2307      	movs	r3, #7
 8003f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f3e:	4619      	mov	r1, r3
 8003f40:	483b      	ldr	r0, [pc, #236]	; (8004030 <HAL_UART_MspInit+0x164>)
 8003f42:	f000 fafb 	bl	800453c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003f46:	2200      	movs	r2, #0
 8003f48:	2105      	movs	r1, #5
 8003f4a:	2025      	movs	r0, #37	; 0x25
 8003f4c:	f000 faaa 	bl	80044a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f50:	2025      	movs	r0, #37	; 0x25
 8003f52:	f000 fac3 	bl	80044dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f56:	e063      	b.n	8004020 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a35      	ldr	r2, [pc, #212]	; (8004034 <HAL_UART_MspInit+0x168>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d12c      	bne.n	8003fbc <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_UART_MspInit+0x160>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a30      	ldr	r2, [pc, #192]	; (800402c <HAL_UART_MspInit+0x160>)
 8003f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b2e      	ldr	r3, [pc, #184]	; (800402c <HAL_UART_MspInit+0x160>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	61bb      	str	r3, [r7, #24]
 8003f7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_UART_MspInit+0x160>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a29      	ldr	r2, [pc, #164]	; (800402c <HAL_UART_MspInit+0x160>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b27      	ldr	r3, [pc, #156]	; (800402c <HAL_UART_MspInit+0x160>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f9a:	230c      	movs	r3, #12
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003faa:	2307      	movs	r3, #7
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4820      	ldr	r0, [pc, #128]	; (8004038 <HAL_UART_MspInit+0x16c>)
 8003fb6:	f000 fac1 	bl	800453c <HAL_GPIO_Init>
}
 8003fba:	e031      	b.n	8004020 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1e      	ldr	r2, [pc, #120]	; (800403c <HAL_UART_MspInit+0x170>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d12c      	bne.n	8004020 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	4b18      	ldr	r3, [pc, #96]	; (800402c <HAL_UART_MspInit+0x160>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	4a17      	ldr	r2, [pc, #92]	; (800402c <HAL_UART_MspInit+0x160>)
 8003fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <HAL_UART_MspInit+0x160>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <HAL_UART_MspInit+0x160>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a10      	ldr	r2, [pc, #64]	; (800402c <HAL_UART_MspInit+0x160>)
 8003fec:	f043 0304 	orr.w	r3, r3, #4
 8003ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff2:	4b0e      	ldr	r3, [pc, #56]	; (800402c <HAL_UART_MspInit+0x160>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ffe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004008:	2301      	movs	r3, #1
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800400c:	2303      	movs	r3, #3
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004010:	2307      	movs	r3, #7
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004018:	4619      	mov	r1, r3
 800401a:	4809      	ldr	r0, [pc, #36]	; (8004040 <HAL_UART_MspInit+0x174>)
 800401c:	f000 fa8e 	bl	800453c <HAL_GPIO_Init>
}
 8004020:	bf00      	nop
 8004022:	3738      	adds	r7, #56	; 0x38
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40011000 	.word	0x40011000
 800402c:	40023800 	.word	0x40023800
 8004030:	40020400 	.word	0x40020400
 8004034:	40004400 	.word	0x40004400
 8004038:	40020000 	.word	0x40020000
 800403c:	40004800 	.word	0x40004800
 8004040:	40020800 	.word	0x40020800

08004044 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08c      	sub	sp, #48	; 0x30
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004054:	2200      	movs	r2, #0
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	2019      	movs	r0, #25
 800405a:	f000 fa23 	bl	80044a4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800405e:	2019      	movs	r0, #25
 8004060:	f000 fa3c 	bl	80044dc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	4b1f      	ldr	r3, [pc, #124]	; (80040e8 <HAL_InitTick+0xa4>)
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	4a1e      	ldr	r2, [pc, #120]	; (80040e8 <HAL_InitTick+0xa4>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6453      	str	r3, [r2, #68]	; 0x44
 8004074:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <HAL_InitTick+0xa4>)
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004080:	f107 0210 	add.w	r2, r7, #16
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f002 fa92 	bl	80065b4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004090:	f002 fa7c 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8004094:	4603      	mov	r3, r0
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409c:	4a13      	ldr	r2, [pc, #76]	; (80040ec <HAL_InitTick+0xa8>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	0c9b      	lsrs	r3, r3, #18
 80040a4:	3b01      	subs	r3, #1
 80040a6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <HAL_InitTick+0xac>)
 80040aa:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <HAL_InitTick+0xb0>)
 80040ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_InitTick+0xac>)
 80040b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80040b6:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <HAL_InitTick+0xac>)
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80040bc:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <HAL_InitTick+0xac>)
 80040be:	2200      	movs	r2, #0
 80040c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_InitTick+0xac>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80040c8:	4809      	ldr	r0, [pc, #36]	; (80040f0 <HAL_InitTick+0xac>)
 80040ca:	f002 faa5 	bl	8006618 <HAL_TIM_Base_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d104      	bne.n	80040de <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80040d4:	4806      	ldr	r0, [pc, #24]	; (80040f0 <HAL_InitTick+0xac>)
 80040d6:	f002 fad4 	bl	8006682 <HAL_TIM_Base_Start_IT>
 80040da:	4603      	mov	r3, r0
 80040dc:	e000      	b.n	80040e0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3730      	adds	r7, #48	; 0x30
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	431bde83 	.word	0x431bde83
 80040f0:	2000557c 	.word	0x2000557c
 80040f4:	40010000 	.word	0x40010000

080040f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800410a:	e7fe      	b.n	800410a <HardFault_Handler+0x4>

0800410c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004110:	e7fe      	b.n	8004110 <MemManage_Handler+0x4>

08004112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004116:	e7fe      	b.n	8004116 <BusFault_Handler+0x4>

08004118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800411c:	e7fe      	b.n	800411c <UsageFault_Handler+0x4>

0800411e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004130:	4802      	ldr	r0, [pc, #8]	; (800413c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004132:	f002 faca 	bl	80066ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	2000557c 	.word	0x2000557c

08004140 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <USART1_IRQHandler+0x10>)
 8004146:	f002 fe31 	bl	8006dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20004fb4 	.word	0x20004fb4

08004154 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <_sbrk+0x50>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <_sbrk+0x16>
		heap_end = &end;
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <_sbrk+0x50>)
 8004166:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <_sbrk+0x54>)
 8004168:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <_sbrk+0x50>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <_sbrk+0x50>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	466a      	mov	r2, sp
 800417a:	4293      	cmp	r3, r2
 800417c:	d907      	bls.n	800418e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800417e:	f006 f9a7 	bl	800a4d0 <__errno>
 8004182:	4602      	mov	r2, r0
 8004184:	230c      	movs	r3, #12
 8004186:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004188:	f04f 33ff 	mov.w	r3, #4294967295
 800418c:	e006      	b.n	800419c <_sbrk+0x48>
	}

	heap_end += incr;
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <_sbrk+0x50>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	4a03      	ldr	r2, [pc, #12]	; (80041a4 <_sbrk+0x50>)
 8004198:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	200008e0 	.word	0x200008e0
 80041a8:	200055c8 	.word	0x200055c8

080041ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041b0:	4b16      	ldr	r3, [pc, #88]	; (800420c <SystemInit+0x60>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <SystemInit+0x60>)
 80041b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <SystemInit+0x64>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a12      	ldr	r2, [pc, #72]	; (8004210 <SystemInit+0x64>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041cc:	4b10      	ldr	r3, [pc, #64]	; (8004210 <SystemInit+0x64>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <SystemInit+0x64>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <SystemInit+0x64>)
 80041d8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80041dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <SystemInit+0x64>)
 80041e4:	4a0b      	ldr	r2, [pc, #44]	; (8004214 <SystemInit+0x68>)
 80041e6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80041e8:	4b09      	ldr	r3, [pc, #36]	; (8004210 <SystemInit+0x64>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a08      	ldr	r2, [pc, #32]	; (8004210 <SystemInit+0x64>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <SystemInit+0x64>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041fa:	4b04      	ldr	r3, [pc, #16]	; (800420c <SystemInit+0x60>)
 80041fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004200:	609a      	str	r2, [r3, #8]
#endif
}
 8004202:	bf00      	nop
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00
 8004210:	40023800 	.word	0x40023800
 8004214:	24003010 	.word	0x24003010

08004218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004250 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800421c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800421e:	e003      	b.n	8004228 <LoopCopyDataInit>

08004220 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004222:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004224:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004226:	3104      	adds	r1, #4

08004228 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004228:	480b      	ldr	r0, [pc, #44]	; (8004258 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800422a:	4b0c      	ldr	r3, [pc, #48]	; (800425c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800422c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800422e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004230:	d3f6      	bcc.n	8004220 <CopyDataInit>
  ldr  r2, =_sbss
 8004232:	4a0b      	ldr	r2, [pc, #44]	; (8004260 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004234:	e002      	b.n	800423c <LoopFillZerobss>

08004236 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004236:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004238:	f842 3b04 	str.w	r3, [r2], #4

0800423c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800423e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004240:	d3f9      	bcc.n	8004236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004242:	f7ff ffb3 	bl	80041ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004246:	f006 f949 	bl	800a4dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800424a:	f7fe ff03 	bl	8003054 <main>
  bx  lr    
 800424e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004250:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004254:	0800dc00 	.word	0x0800dc00
  ldr  r0, =_sdata
 8004258:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800425c:	20000670 	.word	0x20000670
  ldr  r2, =_sbss
 8004260:	20000670 	.word	0x20000670
  ldr  r3, = _ebss
 8004264:	200055c4 	.word	0x200055c4

08004268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004268:	e7fe      	b.n	8004268 <ADC_IRQHandler>
	...

0800426c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_Init+0x40>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a0d      	ldr	r2, [pc, #52]	; (80042ac <HAL_Init+0x40>)
 8004276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800427a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800427c:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_Init+0x40>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a0a      	ldr	r2, [pc, #40]	; (80042ac <HAL_Init+0x40>)
 8004282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004288:	4b08      	ldr	r3, [pc, #32]	; (80042ac <HAL_Init+0x40>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a07      	ldr	r2, [pc, #28]	; (80042ac <HAL_Init+0x40>)
 800428e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004294:	2003      	movs	r0, #3
 8004296:	f000 f8fa 	bl	800448e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800429a:	2000      	movs	r0, #0
 800429c:	f7ff fed2 	bl	8004044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042a0:	f7ff fd12 	bl	8003cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023c00 	.word	0x40023c00

080042b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_IncTick+0x20>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_IncTick+0x24>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4413      	add	r3, r2
 80042c0:	4a04      	ldr	r2, [pc, #16]	; (80042d4 <HAL_IncTick+0x24>)
 80042c2:	6013      	str	r3, [r2, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000498 	.word	0x20000498
 80042d4:	200055bc 	.word	0x200055bc

080042d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return uwTick;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <HAL_GetTick+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	200055bc 	.word	0x200055bc

080042f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f8:	f7ff ffee 	bl	80042d8 <HAL_GetTick>
 80042fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d005      	beq.n	8004316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800430a:	4b09      	ldr	r3, [pc, #36]	; (8004330 <HAL_Delay+0x40>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004316:	bf00      	nop
 8004318:	f7ff ffde 	bl	80042d8 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	429a      	cmp	r2, r3
 8004326:	d8f7      	bhi.n	8004318 <HAL_Delay+0x28>
  {
  }
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	20000498 	.word	0x20000498

08004334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004344:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004350:	4013      	ands	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800435c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004366:	4a04      	ldr	r2, [pc, #16]	; (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	60d3      	str	r3, [r2, #12]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004380:	4b04      	ldr	r3, [pc, #16]	; (8004394 <__NVIC_GetPriorityGrouping+0x18>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	f003 0307 	and.w	r3, r3, #7
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db0b      	blt.n	80043c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	4907      	ldr	r1, [pc, #28]	; (80043d0 <__NVIC_EnableIRQ+0x38>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2001      	movs	r0, #1
 80043ba:	fa00 f202 	lsl.w	r2, r0, r2
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e100 	.word	0xe000e100

080043d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	db0a      	blt.n	80043fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	490c      	ldr	r1, [pc, #48]	; (8004420 <__NVIC_SetPriority+0x4c>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	440b      	add	r3, r1
 80043f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043fc:	e00a      	b.n	8004414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4908      	ldr	r1, [pc, #32]	; (8004424 <__NVIC_SetPriority+0x50>)
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	3b04      	subs	r3, #4
 800440c:	0112      	lsls	r2, r2, #4
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	440b      	add	r3, r1
 8004412:	761a      	strb	r2, [r3, #24]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000e100 	.word	0xe000e100
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	; 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f1c3 0307 	rsb	r3, r3, #7
 8004442:	2b04      	cmp	r3, #4
 8004444:	bf28      	it	cs
 8004446:	2304      	movcs	r3, #4
 8004448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3304      	adds	r3, #4
 800444e:	2b06      	cmp	r3, #6
 8004450:	d902      	bls.n	8004458 <NVIC_EncodePriority+0x30>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3b03      	subs	r3, #3
 8004456:	e000      	b.n	800445a <NVIC_EncodePriority+0x32>
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	f04f 32ff 	mov.w	r2, #4294967295
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	401a      	ands	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004470:	f04f 31ff 	mov.w	r1, #4294967295
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43d9      	mvns	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	4313      	orrs	r3, r2
         );
}
 8004482:	4618      	mov	r0, r3
 8004484:	3724      	adds	r7, #36	; 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff ff4c 	bl	8004334 <__NVIC_SetPriorityGrouping>
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b6:	f7ff ff61 	bl	800437c <__NVIC_GetPriorityGrouping>
 80044ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	6978      	ldr	r0, [r7, #20]
 80044c2:	f7ff ffb1 	bl	8004428 <NVIC_EncodePriority>
 80044c6:	4602      	mov	r2, r0
 80044c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044cc:	4611      	mov	r1, r2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ff80 	bl	80043d4 <__NVIC_SetPriority>
}
 80044d4:	bf00      	nop
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff54 	bl	8004398 <__NVIC_EnableIRQ>
}
 80044f0:	bf00      	nop
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d004      	beq.n	8004516 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2280      	movs	r2, #128	; 0x80
 8004510:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e00c      	b.n	8004530 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2205      	movs	r2, #5
 800451a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0201 	bic.w	r2, r2, #1
 800452c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	e16b      	b.n	8004830 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004558:	2201      	movs	r2, #1
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4013      	ands	r3, r2
 800456a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	f040 815a 	bne.w	800482a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x4a>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b12      	cmp	r3, #18
 8004584:	d123      	bne.n	80045ce <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	08da      	lsrs	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3208      	adds	r2, #8
 800458e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	220f      	movs	r2, #15
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	08da      	lsrs	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3208      	adds	r2, #8
 80045c8:	69b9      	ldr	r1, [r7, #24]
 80045ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2203      	movs	r2, #3
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0203 	and.w	r2, r3, #3
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d00b      	beq.n	8004622 <HAL_GPIO_Init+0xe6>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d007      	beq.n	8004622 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004616:	2b11      	cmp	r3, #17
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b12      	cmp	r3, #18
 8004620:	d130      	bne.n	8004684 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	2203      	movs	r2, #3
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4013      	ands	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4313      	orrs	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004658:	2201      	movs	r2, #1
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	43db      	mvns	r3, r3
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	4013      	ands	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 0201 	and.w	r2, r3, #1
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	2203      	movs	r2, #3
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80b4 	beq.w	800482a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	4b5f      	ldr	r3, [pc, #380]	; (8004844 <HAL_GPIO_Init+0x308>)
 80046c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ca:	4a5e      	ldr	r2, [pc, #376]	; (8004844 <HAL_GPIO_Init+0x308>)
 80046cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046d0:	6453      	str	r3, [r2, #68]	; 0x44
 80046d2:	4b5c      	ldr	r3, [pc, #368]	; (8004844 <HAL_GPIO_Init+0x308>)
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046de:	4a5a      	ldr	r2, [pc, #360]	; (8004848 <HAL_GPIO_Init+0x30c>)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	3302      	adds	r3, #2
 80046e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	220f      	movs	r2, #15
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	43db      	mvns	r3, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4013      	ands	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a51      	ldr	r2, [pc, #324]	; (800484c <HAL_GPIO_Init+0x310>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02b      	beq.n	8004762 <HAL_GPIO_Init+0x226>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a50      	ldr	r2, [pc, #320]	; (8004850 <HAL_GPIO_Init+0x314>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d025      	beq.n	800475e <HAL_GPIO_Init+0x222>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a4f      	ldr	r2, [pc, #316]	; (8004854 <HAL_GPIO_Init+0x318>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01f      	beq.n	800475a <HAL_GPIO_Init+0x21e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a4e      	ldr	r2, [pc, #312]	; (8004858 <HAL_GPIO_Init+0x31c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d019      	beq.n	8004756 <HAL_GPIO_Init+0x21a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a4d      	ldr	r2, [pc, #308]	; (800485c <HAL_GPIO_Init+0x320>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <HAL_GPIO_Init+0x216>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a4c      	ldr	r2, [pc, #304]	; (8004860 <HAL_GPIO_Init+0x324>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00d      	beq.n	800474e <HAL_GPIO_Init+0x212>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a4b      	ldr	r2, [pc, #300]	; (8004864 <HAL_GPIO_Init+0x328>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <HAL_GPIO_Init+0x20e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a4a      	ldr	r2, [pc, #296]	; (8004868 <HAL_GPIO_Init+0x32c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d101      	bne.n	8004746 <HAL_GPIO_Init+0x20a>
 8004742:	2307      	movs	r3, #7
 8004744:	e00e      	b.n	8004764 <HAL_GPIO_Init+0x228>
 8004746:	2308      	movs	r3, #8
 8004748:	e00c      	b.n	8004764 <HAL_GPIO_Init+0x228>
 800474a:	2306      	movs	r3, #6
 800474c:	e00a      	b.n	8004764 <HAL_GPIO_Init+0x228>
 800474e:	2305      	movs	r3, #5
 8004750:	e008      	b.n	8004764 <HAL_GPIO_Init+0x228>
 8004752:	2304      	movs	r3, #4
 8004754:	e006      	b.n	8004764 <HAL_GPIO_Init+0x228>
 8004756:	2303      	movs	r3, #3
 8004758:	e004      	b.n	8004764 <HAL_GPIO_Init+0x228>
 800475a:	2302      	movs	r3, #2
 800475c:	e002      	b.n	8004764 <HAL_GPIO_Init+0x228>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_GPIO_Init+0x228>
 8004762:	2300      	movs	r3, #0
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	f002 0203 	and.w	r2, r2, #3
 800476a:	0092      	lsls	r2, r2, #2
 800476c:	4093      	lsls	r3, r2
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004774:	4934      	ldr	r1, [pc, #208]	; (8004848 <HAL_GPIO_Init+0x30c>)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	089b      	lsrs	r3, r3, #2
 800477a:	3302      	adds	r3, #2
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004782:	4b3a      	ldr	r3, [pc, #232]	; (800486c <HAL_GPIO_Init+0x330>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047a6:	4a31      	ldr	r2, [pc, #196]	; (800486c <HAL_GPIO_Init+0x330>)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047ac:	4b2f      	ldr	r3, [pc, #188]	; (800486c <HAL_GPIO_Init+0x330>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4013      	ands	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047d0:	4a26      	ldr	r2, [pc, #152]	; (800486c <HAL_GPIO_Init+0x330>)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047d6:	4b25      	ldr	r3, [pc, #148]	; (800486c <HAL_GPIO_Init+0x330>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047fa:	4a1c      	ldr	r2, [pc, #112]	; (800486c <HAL_GPIO_Init+0x330>)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <HAL_GPIO_Init+0x330>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	43db      	mvns	r3, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4013      	ands	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004824:	4a11      	ldr	r2, [pc, #68]	; (800486c <HAL_GPIO_Init+0x330>)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3301      	adds	r3, #1
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b0f      	cmp	r3, #15
 8004834:	f67f ae90 	bls.w	8004558 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004838:	bf00      	nop
 800483a:	3724      	adds	r7, #36	; 0x24
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40023800 	.word	0x40023800
 8004848:	40013800 	.word	0x40013800
 800484c:	40020000 	.word	0x40020000
 8004850:	40020400 	.word	0x40020400
 8004854:	40020800 	.word	0x40020800
 8004858:	40020c00 	.word	0x40020c00
 800485c:	40021000 	.word	0x40021000
 8004860:	40021400 	.word	0x40021400
 8004864:	40021800 	.word	0x40021800
 8004868:	40021c00 	.word	0x40021c00
 800486c:	40013c00 	.word	0x40013c00

08004870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	887b      	ldrh	r3, [r7, #2]
 8004882:	4013      	ands	r3, r2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004888:	2301      	movs	r3, #1
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	e001      	b.n	8004892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800488e:	2300      	movs	r3, #0
 8004890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004892:	7bfb      	ldrb	r3, [r7, #15]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	807b      	strh	r3, [r7, #2]
 80048ac:	4613      	mov	r3, r2
 80048ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048b0:	787b      	ldrb	r3, [r7, #1]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048bc:	e003      	b.n	80048c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048be:	887b      	ldrh	r3, [r7, #2]
 80048c0:	041a      	lsls	r2, r3, #16
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	619a      	str	r2, [r3, #24]
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	887b      	ldrh	r3, [r7, #2]
 80048e4:	401a      	ands	r2, r3
 80048e6:	887b      	ldrh	r3, [r7, #2]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d104      	bne.n	80048f6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80048ec:	887b      	ldrh	r3, [r7, #2]
 80048ee:	041a      	lsls	r2, r3, #16
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80048f4:	e002      	b.n	80048fc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80048f6:	887a      	ldrh	r2, [r7, #2]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	619a      	str	r2, [r3, #24]
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e10f      	b.n	8004b3a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff f9f6 	bl	8003d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2224      	movs	r2, #36	; 0x24
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800494c:	f001 fe0a 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 8004950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4a7b      	ldr	r2, [pc, #492]	; (8004b44 <HAL_I2C_Init+0x23c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d807      	bhi.n	800496c <HAL_I2C_Init+0x64>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a7a      	ldr	r2, [pc, #488]	; (8004b48 <HAL_I2C_Init+0x240>)
 8004960:	4293      	cmp	r3, r2
 8004962:	bf94      	ite	ls
 8004964:	2301      	movls	r3, #1
 8004966:	2300      	movhi	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e006      	b.n	800497a <HAL_I2C_Init+0x72>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a77      	ldr	r2, [pc, #476]	; (8004b4c <HAL_I2C_Init+0x244>)
 8004970:	4293      	cmp	r3, r2
 8004972:	bf94      	ite	ls
 8004974:	2301      	movls	r3, #1
 8004976:	2300      	movhi	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0db      	b.n	8004b3a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a72      	ldr	r2, [pc, #456]	; (8004b50 <HAL_I2C_Init+0x248>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0c9b      	lsrs	r3, r3, #18
 800498c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a64      	ldr	r2, [pc, #400]	; (8004b44 <HAL_I2C_Init+0x23c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d802      	bhi.n	80049bc <HAL_I2C_Init+0xb4>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3301      	adds	r3, #1
 80049ba:	e009      	b.n	80049d0 <HAL_I2C_Init+0xc8>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	4a63      	ldr	r2, [pc, #396]	; (8004b54 <HAL_I2C_Init+0x24c>)
 80049c8:	fba2 2303 	umull	r2, r3, r2, r3
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	3301      	adds	r3, #1
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	4956      	ldr	r1, [pc, #344]	; (8004b44 <HAL_I2C_Init+0x23c>)
 80049ec:	428b      	cmp	r3, r1
 80049ee:	d80d      	bhi.n	8004a0c <HAL_I2C_Init+0x104>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e59      	subs	r1, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80049fe:	3301      	adds	r3, #1
 8004a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	bf38      	it	cc
 8004a08:	2304      	movcc	r3, #4
 8004a0a:	e04f      	b.n	8004aac <HAL_I2C_Init+0x1a4>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d111      	bne.n	8004a38 <HAL_I2C_Init+0x130>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	1e58      	subs	r0, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	440b      	add	r3, r1
 8004a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a26:	3301      	adds	r3, #1
 8004a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bf0c      	ite	eq
 8004a30:	2301      	moveq	r3, #1
 8004a32:	2300      	movne	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	e012      	b.n	8004a5e <HAL_I2C_Init+0x156>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	1e58      	subs	r0, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6859      	ldr	r1, [r3, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	0099      	lsls	r1, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a4e:	3301      	adds	r3, #1
 8004a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf0c      	ite	eq
 8004a58:	2301      	moveq	r3, #1
 8004a5a:	2300      	movne	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_I2C_Init+0x15e>
 8004a62:	2301      	movs	r3, #1
 8004a64:	e022      	b.n	8004aac <HAL_I2C_Init+0x1a4>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10e      	bne.n	8004a8c <HAL_I2C_Init+0x184>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1e58      	subs	r0, r3, #1
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	460b      	mov	r3, r1
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	440b      	add	r3, r1
 8004a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a80:	3301      	adds	r3, #1
 8004a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8a:	e00f      	b.n	8004aac <HAL_I2C_Init+0x1a4>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	1e58      	subs	r0, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6859      	ldr	r1, [r3, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	0099      	lsls	r1, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	6809      	ldr	r1, [r1, #0]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69da      	ldr	r2, [r3, #28]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ada:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6911      	ldr	r1, [r2, #16]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68d2      	ldr	r2, [r2, #12]
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	430b      	orrs	r3, r1
 8004aee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	000186a0 	.word	0x000186a0
 8004b48:	001e847f 	.word	0x001e847f
 8004b4c:	003d08ff 	.word	0x003d08ff
 8004b50:	431bde83 	.word	0x431bde83
 8004b54:	10624dd3 	.word	0x10624dd3

08004b58 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	461a      	mov	r2, r3
 8004b64:	460b      	mov	r3, r1
 8004b66:	817b      	strh	r3, [r7, #10]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b6c:	f7ff fbb4 	bl	80042d8 <HAL_GetTick>
 8004b70:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	f040 80e0 	bne.w	8004d40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	2319      	movs	r3, #25
 8004b86:	2201      	movs	r2, #1
 8004b88:	4970      	ldr	r1, [pc, #448]	; (8004d4c <HAL_I2C_Master_Transmit+0x1f4>)
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 ff2a 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0d3      	b.n	8004d42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_I2C_Master_Transmit+0x50>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e0cc      	b.n	8004d42 <HAL_I2C_Master_Transmit+0x1ea>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d007      	beq.n	8004bce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f042 0201 	orr.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2221      	movs	r2, #33	; 0x21
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2210      	movs	r2, #16
 8004bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	893a      	ldrh	r2, [r7, #8]
 8004bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4a50      	ldr	r2, [pc, #320]	; (8004d50 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c10:	8979      	ldrh	r1, [r7, #10]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	6a3a      	ldr	r2, [r7, #32]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fce8 	bl	80055ec <I2C_MasterRequestWrite>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e08d      	b.n	8004d42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c3c:	e066      	b.n	8004d0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	6a39      	ldr	r1, [r7, #32]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 ffa4 	bl	8005b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00d      	beq.n	8004c6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d107      	bne.n	8004c66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e06b      	b.n	8004d42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d11b      	bne.n	8004ce0 <HAL_I2C_Master_Transmit+0x188>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d017      	beq.n	8004ce0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	6a39      	ldr	r1, [r7, #32]
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 ff94 	bl	8005c12 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00d      	beq.n	8004d0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d107      	bne.n	8004d08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e01a      	b.n	8004d42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d194      	bne.n	8004c3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e000      	b.n	8004d42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
  }
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	00100002 	.word	0x00100002
 8004d50:	ffff0000 	.word	0xffff0000

08004d54 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08c      	sub	sp, #48	; 0x30
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	460b      	mov	r3, r1
 8004d62:	817b      	strh	r3, [r7, #10]
 8004d64:	4613      	mov	r3, r2
 8004d66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d68:	f7ff fab6 	bl	80042d8 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	f040 820b 	bne.w	8005192 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	2319      	movs	r3, #25
 8004d82:	2201      	movs	r2, #1
 8004d84:	497c      	ldr	r1, [pc, #496]	; (8004f78 <HAL_I2C_Master_Receive+0x224>)
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 fe2c 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
 8004d94:	e1fe      	b.n	8005194 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_I2C_Master_Receive+0x50>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e1f7      	b.n	8005194 <HAL_I2C_Master_Receive+0x440>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d007      	beq.n	8004dca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0201 	orr.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2222      	movs	r2, #34	; 0x22
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2210      	movs	r2, #16
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	893a      	ldrh	r2, [r7, #8]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4a5c      	ldr	r2, [pc, #368]	; (8004f7c <HAL_I2C_Master_Receive+0x228>)
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e0c:	8979      	ldrh	r1, [r7, #10]
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fc60 	bl	80056d8 <I2C_MasterRequestRead>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e1b8      	b.n	8005194 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d113      	bne.n	8004e52 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	623b      	str	r3, [r7, #32]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	623b      	str	r3, [r7, #32]
 8004e3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e18c      	b.n	800516c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d11b      	bne.n	8004e92 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e16c      	b.n	800516c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d11b      	bne.n	8004ed2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	e14c      	b.n	800516c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ee0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ef8:	e138      	b.n	800516c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	f200 80f1 	bhi.w	80050e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d123      	bne.n	8004f54 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 febf 	bl	8005c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e139      	b.n	8005194 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f52:	e10b      	b.n	800516c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d14e      	bne.n	8004ffa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	2200      	movs	r2, #0
 8004f64:	4906      	ldr	r1, [pc, #24]	; (8004f80 <HAL_I2C_Master_Receive+0x22c>)
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fd3c 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d008      	beq.n	8004f84 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e10e      	b.n	8005194 <HAL_I2C_Master_Receive+0x440>
 8004f76:	bf00      	nop
 8004f78:	00100002 	.word	0x00100002
 8004f7c:	ffff0000 	.word	0xffff0000
 8004f80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ff8:	e0b8      	b.n	800516c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005000:	2200      	movs	r2, #0
 8005002:	4966      	ldr	r1, [pc, #408]	; (800519c <HAL_I2C_Master_Receive+0x448>)
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 fced 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e0bf      	b.n	8005194 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	2200      	movs	r2, #0
 800505e:	494f      	ldr	r1, [pc, #316]	; (800519c <HAL_I2C_Master_Receive+0x448>)
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fcbf 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e091      	b.n	8005194 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050e4:	e042      	b.n	800516c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 fdd2 	bl	8005c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e04c      	b.n	8005194 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b04      	cmp	r3, #4
 8005138:	d118      	bne.n	800516c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691a      	ldr	r2, [r3, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005170:	2b00      	cmp	r3, #0
 8005172:	f47f aec2 	bne.w	8004efa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2220      	movs	r2, #32
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e000      	b.n	8005194 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005192:	2302      	movs	r3, #2
  }
}
 8005194:	4618      	mov	r0, r3
 8005196:	3728      	adds	r7, #40	; 0x28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	00010004 	.word	0x00010004

080051a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08c      	sub	sp, #48	; 0x30
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	4608      	mov	r0, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	461a      	mov	r2, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	817b      	strh	r3, [r7, #10]
 80051b2:	460b      	mov	r3, r1
 80051b4:	813b      	strh	r3, [r7, #8]
 80051b6:	4613      	mov	r3, r2
 80051b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051ba:	f7ff f88d 	bl	80042d8 <HAL_GetTick>
 80051be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	f040 8208 	bne.w	80055de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	2319      	movs	r3, #25
 80051d4:	2201      	movs	r2, #1
 80051d6:	497b      	ldr	r1, [pc, #492]	; (80053c4 <HAL_I2C_Mem_Read+0x224>)
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fc03 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
 80051e6:	e1fb      	b.n	80055e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d101      	bne.n	80051f6 <HAL_I2C_Mem_Read+0x56>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e1f4      	b.n	80055e0 <HAL_I2C_Mem_Read+0x440>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d007      	beq.n	800521c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f042 0201 	orr.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800522a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2222      	movs	r2, #34	; 0x22
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2240      	movs	r2, #64	; 0x40
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800524c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4a5b      	ldr	r2, [pc, #364]	; (80053c8 <HAL_I2C_Mem_Read+0x228>)
 800525c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800525e:	88f8      	ldrh	r0, [r7, #6]
 8005260:	893a      	ldrh	r2, [r7, #8]
 8005262:	8979      	ldrh	r1, [r7, #10]
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	9301      	str	r3, [sp, #4]
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	4603      	mov	r3, r0
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 fae8 	bl	8005844 <I2C_RequestMemoryRead>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e1b0      	b.n	80055e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	d113      	bne.n	80052ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005286:	2300      	movs	r3, #0
 8005288:	623b      	str	r3, [r7, #32]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	623b      	str	r3, [r7, #32]
 800529a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	e184      	b.n	80055b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d11b      	bne.n	80052ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e164      	b.n	80055b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d11b      	bne.n	800532e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005304:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005316:	2300      	movs	r3, #0
 8005318:	61bb      	str	r3, [r7, #24]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	e144      	b.n	80055b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005344:	e138      	b.n	80055b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534a:	2b03      	cmp	r3, #3
 800534c:	f200 80f1 	bhi.w	8005532 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005354:	2b01      	cmp	r3, #1
 8005356:	d123      	bne.n	80053a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fc99 	bl	8005c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e139      	b.n	80055e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691a      	ldr	r2, [r3, #16]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800539e:	e10b      	b.n	80055b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d14e      	bne.n	8005446 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	2200      	movs	r2, #0
 80053b0:	4906      	ldr	r1, [pc, #24]	; (80053cc <HAL_I2C_Mem_Read+0x22c>)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fb16 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e10e      	b.n	80055e0 <HAL_I2C_Mem_Read+0x440>
 80053c2:	bf00      	nop
 80053c4:	00100002 	.word	0x00100002
 80053c8:	ffff0000 	.word	0xffff0000
 80053cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	1c5a      	adds	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005444:	e0b8      	b.n	80055b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	2200      	movs	r2, #0
 800544e:	4966      	ldr	r1, [pc, #408]	; (80055e8 <HAL_I2C_Mem_Read+0x448>)
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 fac7 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0bf      	b.n	80055e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	b2d2      	uxtb	r2, r2
 800547c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548c:	3b01      	subs	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29b      	uxth	r3, r3
 800549a:	3b01      	subs	r3, #1
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a8:	2200      	movs	r2, #0
 80054aa:	494f      	ldr	r1, [pc, #316]	; (80055e8 <HAL_I2C_Mem_Read+0x448>)
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 fa99 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e091      	b.n	80055e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551a:	3b01      	subs	r3, #1
 800551c:	b29a      	uxth	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005530:	e042      	b.n	80055b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005534:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fbac 	bl	8005c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e04c      	b.n	80055e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b04      	cmp	r3, #4
 8005584:	d118      	bne.n	80055b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	b2d2      	uxtb	r2, r2
 8005592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f47f aec2 	bne.w	8005346 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e000      	b.n	80055e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80055de:	2302      	movs	r3, #2
  }
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3728      	adds	r7, #40	; 0x28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	00010004 	.word	0x00010004

080055ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	460b      	mov	r3, r1
 80055fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b08      	cmp	r3, #8
 8005606:	d006      	beq.n	8005616 <I2C_MasterRequestWrite+0x2a>
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d003      	beq.n	8005616 <I2C_MasterRequestWrite+0x2a>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005614:	d108      	bne.n	8005628 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e00b      	b.n	8005640 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	2b12      	cmp	r3, #18
 800562e:	d107      	bne.n	8005640 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800563e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f9c9 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e035      	b.n	80056c8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005664:	d108      	bne.n	8005678 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005666:	897b      	ldrh	r3, [r7, #10]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	e01b      	b.n	80056b0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005678:	897b      	ldrh	r3, [r7, #10]
 800567a:	11db      	asrs	r3, r3, #7
 800567c:	b2db      	uxtb	r3, r3
 800567e:	f003 0306 	and.w	r3, r3, #6
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f063 030f 	orn	r3, r3, #15
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	490e      	ldr	r1, [pc, #56]	; (80056d0 <I2C_MasterRequestWrite+0xe4>)
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f9fb 	bl	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e010      	b.n	80056c8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80056a6:	897b      	ldrh	r3, [r7, #10]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	4907      	ldr	r1, [pc, #28]	; (80056d4 <I2C_MasterRequestWrite+0xe8>)
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f9eb 	bl	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	00010008 	.word	0x00010008
 80056d4:	00010002 	.word	0x00010002

080056d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	607a      	str	r2, [r7, #4]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	460b      	mov	r3, r1
 80056e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d006      	beq.n	8005712 <I2C_MasterRequestRead+0x3a>
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d003      	beq.n	8005712 <I2C_MasterRequestRead+0x3a>
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005710:	d108      	bne.n	8005724 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e00b      	b.n	800573c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	2b11      	cmp	r3, #17
 800572a:	d107      	bne.n	800573c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800573a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f94b 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e06d      	b.n	8005834 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005760:	d108      	bne.n	8005774 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005762:	897b      	ldrh	r3, [r7, #10]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	b2da      	uxtb	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	611a      	str	r2, [r3, #16]
 8005772:	e053      	b.n	800581c <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005774:	897b      	ldrh	r3, [r7, #10]
 8005776:	11db      	asrs	r3, r3, #7
 8005778:	b2db      	uxtb	r3, r3
 800577a:	f003 0306 	and.w	r3, r3, #6
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f063 030f 	orn	r3, r3, #15
 8005784:	b2da      	uxtb	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	492a      	ldr	r1, [pc, #168]	; (800583c <I2C_MasterRequestRead+0x164>)
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 f97d 	bl	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e048      	b.n	8005834 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80057a2:	897b      	ldrh	r3, [r7, #10]
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	4923      	ldr	r1, [pc, #140]	; (8005840 <I2C_MasterRequestRead+0x168>)
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 f96d 	bl	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e038      	b.n	8005834 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c2:	2300      	movs	r3, #0
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	9300      	str	r3, [sp, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f8f5 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e017      	b.n	8005834 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005804:	897b      	ldrh	r3, [r7, #10]
 8005806:	11db      	asrs	r3, r3, #7
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f003 0306 	and.w	r3, r3, #6
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f063 030e 	orn	r3, r3, #14
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4907      	ldr	r1, [pc, #28]	; (8005840 <I2C_MasterRequestRead+0x168>)
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f935 	bl	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	00010008 	.word	0x00010008
 8005840:	00010002 	.word	0x00010002

08005844 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	461a      	mov	r2, r3
 8005852:	4603      	mov	r3, r0
 8005854:	817b      	strh	r3, [r7, #10]
 8005856:	460b      	mov	r3, r1
 8005858:	813b      	strh	r3, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800586c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800587c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	2200      	movs	r2, #0
 8005886:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	f000 f8aa 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e09e      	b.n	80059d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800589a:	897b      	ldrh	r3, [r7, #10]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	6a3a      	ldr	r2, [r7, #32]
 80058ae:	494c      	ldr	r1, [pc, #304]	; (80059e0 <I2C_RequestMemoryRead+0x19c>)
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f8ee 	bl	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e08b      	b.n	80059d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d8:	6a39      	ldr	r1, [r7, #32]
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f958 	bl	8005b90 <I2C_WaitOnTXEFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00d      	beq.n	8005902 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d107      	bne.n	80058fe <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e06a      	b.n	80059d8 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d105      	bne.n	8005914 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005908:	893b      	ldrh	r3, [r7, #8]
 800590a:	b2da      	uxtb	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	611a      	str	r2, [r3, #16]
 8005912:	e021      	b.n	8005958 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005914:	893b      	ldrh	r3, [r7, #8]
 8005916:	0a1b      	lsrs	r3, r3, #8
 8005918:	b29b      	uxth	r3, r3
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005924:	6a39      	ldr	r1, [r7, #32]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f932 	bl	8005b90 <I2C_WaitOnTXEFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00d      	beq.n	800594e <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	2b04      	cmp	r3, #4
 8005938:	d107      	bne.n	800594a <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005948:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e044      	b.n	80059d8 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800594e:	893b      	ldrh	r3, [r7, #8]
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595a:	6a39      	ldr	r1, [r7, #32]
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f917 	bl	8005b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00d      	beq.n	8005984 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596c:	2b04      	cmp	r3, #4
 800596e:	d107      	bne.n	8005980 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800597e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e029      	b.n	80059d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005992:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	2200      	movs	r2, #0
 800599c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f81f 	bl	80059e4 <I2C_WaitOnFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e013      	b.n	80059d8 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059b0:	897b      	ldrh	r3, [r7, #10]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	6a3a      	ldr	r2, [r7, #32]
 80059c4:	4906      	ldr	r1, [pc, #24]	; (80059e0 <I2C_RequestMemoryRead+0x19c>)
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f863 	bl	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	00010002 	.word	0x00010002

080059e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	4613      	mov	r3, r2
 80059f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f4:	e025      	b.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fc:	d021      	beq.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059fe:	f7fe fc6b 	bl	80042d8 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d302      	bcc.n	8005a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d116      	bne.n	8005a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	f043 0220 	orr.w	r2, r3, #32
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e023      	b.n	8005a8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	0c1b      	lsrs	r3, r3, #16
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d10d      	bne.n	8005a68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	43da      	mvns	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4013      	ands	r3, r2
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf0c      	ite	eq
 8005a5e:	2301      	moveq	r3, #1
 8005a60:	2300      	movne	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	e00c      	b.n	8005a82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	43da      	mvns	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4013      	ands	r3, r2
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	bf0c      	ite	eq
 8005a7a:	2301      	moveq	r3, #1
 8005a7c:	2300      	movne	r3, #0
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d0b6      	beq.n	80059f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	60f8      	str	r0, [r7, #12]
 8005a9a:	60b9      	str	r1, [r7, #8]
 8005a9c:	607a      	str	r2, [r7, #4]
 8005a9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005aa0:	e051      	b.n	8005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab0:	d123      	bne.n	8005afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ac0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f043 0204 	orr.w	r2, r3, #4
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e046      	b.n	8005b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b00:	d021      	beq.n	8005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b02:	f7fe fbe9 	bl	80042d8 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d302      	bcc.n	8005b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d116      	bne.n	8005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f043 0220 	orr.w	r2, r3, #32
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e020      	b.n	8005b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	0c1b      	lsrs	r3, r3, #16
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10c      	bne.n	8005b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	43da      	mvns	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	bf14      	ite	ne
 8005b62:	2301      	movne	r3, #1
 8005b64:	2300      	moveq	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	e00b      	b.n	8005b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	43da      	mvns	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4013      	ands	r3, r2
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bf14      	ite	ne
 8005b7c:	2301      	movne	r3, #1
 8005b7e:	2300      	moveq	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d18d      	bne.n	8005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b9c:	e02d      	b.n	8005bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 f8ce 	bl	8005d40 <I2C_IsAcknowledgeFailed>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e02d      	b.n	8005c0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb4:	d021      	beq.n	8005bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb6:	f7fe fb8f 	bl	80042d8 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d302      	bcc.n	8005bcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d116      	bne.n	8005bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f043 0220 	orr.w	r2, r3, #32
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e007      	b.n	8005c0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c04:	2b80      	cmp	r3, #128	; 0x80
 8005c06:	d1ca      	bne.n	8005b9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c1e:	e02d      	b.n	8005c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f88d 	bl	8005d40 <I2C_IsAcknowledgeFailed>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e02d      	b.n	8005c8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d021      	beq.n	8005c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c38:	f7fe fb4e 	bl	80042d8 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d302      	bcc.n	8005c4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d116      	bne.n	8005c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	f043 0220 	orr.w	r2, r3, #32
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e007      	b.n	8005c8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d1ca      	bne.n	8005c20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ca0:	e042      	b.n	8005d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0310 	and.w	r3, r3, #16
 8005cac:	2b10      	cmp	r3, #16
 8005cae:	d119      	bne.n	8005ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0210 	mvn.w	r2, #16
 8005cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e029      	b.n	8005d38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce4:	f7fe faf8 	bl	80042d8 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d302      	bcc.n	8005cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d116      	bne.n	8005d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	f043 0220 	orr.w	r2, r3, #32
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e007      	b.n	8005d38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d1b5      	bne.n	8005ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d56:	d11b      	bne.n	8005d90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	f043 0204 	orr.w	r2, r3, #4
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e000      	b.n	8005d92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
	...

08005da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e22d      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d075      	beq.n	8005eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dbe:	4ba3      	ldr	r3, [pc, #652]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d00c      	beq.n	8005de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dca:	4ba0      	ldr	r3, [pc, #640]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d112      	bne.n	8005dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dd6:	4b9d      	ldr	r3, [pc, #628]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005de2:	d10b      	bne.n	8005dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de4:	4b99      	ldr	r3, [pc, #612]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d05b      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x108>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d157      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e208      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d106      	bne.n	8005e14 <HAL_RCC_OscConfig+0x74>
 8005e06:	4b91      	ldr	r3, [pc, #580]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a90      	ldr	r2, [pc, #576]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e01d      	b.n	8005e50 <HAL_RCC_OscConfig+0xb0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x98>
 8005e1e:	4b8b      	ldr	r3, [pc, #556]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a8a      	ldr	r2, [pc, #552]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b88      	ldr	r3, [pc, #544]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a87      	ldr	r2, [pc, #540]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e00b      	b.n	8005e50 <HAL_RCC_OscConfig+0xb0>
 8005e38:	4b84      	ldr	r3, [pc, #528]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a83      	ldr	r2, [pc, #524]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	4b81      	ldr	r3, [pc, #516]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a80      	ldr	r2, [pc, #512]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d013      	beq.n	8005e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fe fa3e 	bl	80042d8 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e60:	f7fe fa3a 	bl	80042d8 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	; 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e1cd      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e72:	4b76      	ldr	r3, [pc, #472]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0xc0>
 8005e7e:	e014      	b.n	8005eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e80:	f7fe fa2a 	bl	80042d8 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e88:	f7fe fa26 	bl	80042d8 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b64      	cmp	r3, #100	; 0x64
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e1b9      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9a:	4b6c      	ldr	r3, [pc, #432]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0xe8>
 8005ea6:	e000      	b.n	8005eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d063      	beq.n	8005f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eb6:	4b65      	ldr	r3, [pc, #404]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00b      	beq.n	8005eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ec2:	4b62      	ldr	r3, [pc, #392]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d11c      	bne.n	8005f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ece:	4b5f      	ldr	r3, [pc, #380]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d116      	bne.n	8005f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eda:	4b5c      	ldr	r3, [pc, #368]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x152>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e18d      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef2:	4b56      	ldr	r3, [pc, #344]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	4952      	ldr	r1, [pc, #328]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f06:	e03a      	b.n	8005f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d020      	beq.n	8005f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f10:	4b4f      	ldr	r3, [pc, #316]	; (8006050 <HAL_RCC_OscConfig+0x2b0>)
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f16:	f7fe f9df 	bl	80042d8 <HAL_GetTick>
 8005f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f1e:	f7fe f9db 	bl	80042d8 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e16e      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f30:	4b46      	ldr	r3, [pc, #280]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f3c:	4b43      	ldr	r3, [pc, #268]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	4940      	ldr	r1, [pc, #256]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	600b      	str	r3, [r1, #0]
 8005f50:	e015      	b.n	8005f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f52:	4b3f      	ldr	r3, [pc, #252]	; (8006050 <HAL_RCC_OscConfig+0x2b0>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f58:	f7fe f9be 	bl	80042d8 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f60:	f7fe f9ba 	bl	80042d8 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e14d      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f72:	4b36      	ldr	r3, [pc, #216]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1f0      	bne.n	8005f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d030      	beq.n	8005fec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d016      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f92:	4b30      	ldr	r3, [pc, #192]	; (8006054 <HAL_RCC_OscConfig+0x2b4>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f98:	f7fe f99e 	bl	80042d8 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fa0:	f7fe f99a 	bl	80042d8 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e12d      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb2:	4b26      	ldr	r3, [pc, #152]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x200>
 8005fbe:	e015      	b.n	8005fec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fc0:	4b24      	ldr	r3, [pc, #144]	; (8006054 <HAL_RCC_OscConfig+0x2b4>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fc6:	f7fe f987 	bl	80042d8 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fce:	f7fe f983 	bl	80042d8 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e116      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe0:	4b1a      	ldr	r3, [pc, #104]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8005fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f0      	bne.n	8005fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80a0 	beq.w	800613a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10f      	bne.n	800602a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	4b0f      	ldr	r3, [pc, #60]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	4a0e      	ldr	r2, [pc, #56]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 8006014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006018:	6413      	str	r3, [r2, #64]	; 0x40
 800601a:	4b0c      	ldr	r3, [pc, #48]	; (800604c <HAL_RCC_OscConfig+0x2ac>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602a:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <HAL_RCC_OscConfig+0x2b8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d121      	bne.n	800607a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006036:	4b08      	ldr	r3, [pc, #32]	; (8006058 <HAL_RCC_OscConfig+0x2b8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a07      	ldr	r2, [pc, #28]	; (8006058 <HAL_RCC_OscConfig+0x2b8>)
 800603c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006042:	f7fe f949 	bl	80042d8 <HAL_GetTick>
 8006046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006048:	e011      	b.n	800606e <HAL_RCC_OscConfig+0x2ce>
 800604a:	bf00      	nop
 800604c:	40023800 	.word	0x40023800
 8006050:	42470000 	.word	0x42470000
 8006054:	42470e80 	.word	0x42470e80
 8006058:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605c:	f7fe f93c 	bl	80042d8 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e0cf      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606e:	4b6a      	ldr	r3, [pc, #424]	; (8006218 <HAL_RCC_OscConfig+0x478>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d106      	bne.n	8006090 <HAL_RCC_OscConfig+0x2f0>
 8006082:	4b66      	ldr	r3, [pc, #408]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 8006084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006086:	4a65      	ldr	r2, [pc, #404]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 8006088:	f043 0301 	orr.w	r3, r3, #1
 800608c:	6713      	str	r3, [r2, #112]	; 0x70
 800608e:	e01c      	b.n	80060ca <HAL_RCC_OscConfig+0x32a>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b05      	cmp	r3, #5
 8006096:	d10c      	bne.n	80060b2 <HAL_RCC_OscConfig+0x312>
 8006098:	4b60      	ldr	r3, [pc, #384]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 800609a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609c:	4a5f      	ldr	r2, [pc, #380]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 800609e:	f043 0304 	orr.w	r3, r3, #4
 80060a2:	6713      	str	r3, [r2, #112]	; 0x70
 80060a4:	4b5d      	ldr	r3, [pc, #372]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 80060a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a8:	4a5c      	ldr	r2, [pc, #368]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 80060aa:	f043 0301 	orr.w	r3, r3, #1
 80060ae:	6713      	str	r3, [r2, #112]	; 0x70
 80060b0:	e00b      	b.n	80060ca <HAL_RCC_OscConfig+0x32a>
 80060b2:	4b5a      	ldr	r3, [pc, #360]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	4a59      	ldr	r2, [pc, #356]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	6713      	str	r3, [r2, #112]	; 0x70
 80060be:	4b57      	ldr	r3, [pc, #348]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	4a56      	ldr	r2, [pc, #344]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 80060c4:	f023 0304 	bic.w	r3, r3, #4
 80060c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d015      	beq.n	80060fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d2:	f7fe f901 	bl	80042d8 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d8:	e00a      	b.n	80060f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060da:	f7fe f8fd 	bl	80042d8 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d901      	bls.n	80060f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e08e      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060f0:	4b4a      	ldr	r3, [pc, #296]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 80060f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d0ee      	beq.n	80060da <HAL_RCC_OscConfig+0x33a>
 80060fc:	e014      	b.n	8006128 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060fe:	f7fe f8eb 	bl	80042d8 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006104:	e00a      	b.n	800611c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006106:	f7fe f8e7 	bl	80042d8 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f241 3288 	movw	r2, #5000	; 0x1388
 8006114:	4293      	cmp	r3, r2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e078      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800611c:	4b3f      	ldr	r3, [pc, #252]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 800611e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1ee      	bne.n	8006106 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d105      	bne.n	800613a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612e:	4b3b      	ldr	r3, [pc, #236]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	4a3a      	ldr	r2, [pc, #232]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 8006134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006138:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d064      	beq.n	800620c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006142:	4b36      	ldr	r3, [pc, #216]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 030c 	and.w	r3, r3, #12
 800614a:	2b08      	cmp	r3, #8
 800614c:	d05c      	beq.n	8006208 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	2b02      	cmp	r3, #2
 8006154:	d141      	bne.n	80061da <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006156:	4b32      	ldr	r3, [pc, #200]	; (8006220 <HAL_RCC_OscConfig+0x480>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615c:	f7fe f8bc 	bl	80042d8 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006164:	f7fe f8b8 	bl	80042d8 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e04b      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006176:	4b29      	ldr	r3, [pc, #164]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69da      	ldr	r2, [r3, #28]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	019b      	lsls	r3, r3, #6
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006198:	085b      	lsrs	r3, r3, #1
 800619a:	3b01      	subs	r3, #1
 800619c:	041b      	lsls	r3, r3, #16
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	061b      	lsls	r3, r3, #24
 80061a6:	491d      	ldr	r1, [pc, #116]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061ac:	4b1c      	ldr	r3, [pc, #112]	; (8006220 <HAL_RCC_OscConfig+0x480>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b2:	f7fe f891 	bl	80042d8 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ba:	f7fe f88d 	bl	80042d8 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e020      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061cc:	4b13      	ldr	r3, [pc, #76]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x41a>
 80061d8:	e018      	b.n	800620c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <HAL_RCC_OscConfig+0x480>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e0:	f7fe f87a 	bl	80042d8 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061e8:	f7fe f876 	bl	80042d8 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e009      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061fa:	4b08      	ldr	r3, [pc, #32]	; (800621c <HAL_RCC_OscConfig+0x47c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f0      	bne.n	80061e8 <HAL_RCC_OscConfig+0x448>
 8006206:	e001      	b.n	800620c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40007000 	.word	0x40007000
 800621c:	40023800 	.word	0x40023800
 8006220:	42470060 	.word	0x42470060

08006224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0ca      	b.n	80063ce <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006238:	4b67      	ldr	r3, [pc, #412]	; (80063d8 <HAL_RCC_ClockConfig+0x1b4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d90c      	bls.n	8006260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006246:	4b64      	ldr	r3, [pc, #400]	; (80063d8 <HAL_RCC_ClockConfig+0x1b4>)
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800624e:	4b62      	ldr	r3, [pc, #392]	; (80063d8 <HAL_RCC_ClockConfig+0x1b4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d001      	beq.n	8006260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0b6      	b.n	80063ce <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d020      	beq.n	80062ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006278:	4b58      	ldr	r3, [pc, #352]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4a57      	ldr	r2, [pc, #348]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 800627e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006290:	4b52      	ldr	r3, [pc, #328]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4a51      	ldr	r2, [pc, #324]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800629a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800629c:	4b4f      	ldr	r3, [pc, #316]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	494c      	ldr	r1, [pc, #304]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d044      	beq.n	8006344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c2:	4b46      	ldr	r3, [pc, #280]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d119      	bne.n	8006302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e07d      	b.n	80063ce <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d003      	beq.n	80062e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d107      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062e2:	4b3e      	ldr	r3, [pc, #248]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e06d      	b.n	80063ce <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f2:	4b3a      	ldr	r3, [pc, #232]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e065      	b.n	80063ce <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006302:	4b36      	ldr	r3, [pc, #216]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f023 0203 	bic.w	r2, r3, #3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	4933      	ldr	r1, [pc, #204]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006310:	4313      	orrs	r3, r2
 8006312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006314:	f7fd ffe0 	bl	80042d8 <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631a:	e00a      	b.n	8006332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800631c:	f7fd ffdc 	bl	80042d8 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e04d      	b.n	80063ce <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006332:	4b2a      	ldr	r3, [pc, #168]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 020c 	and.w	r2, r3, #12
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	429a      	cmp	r2, r3
 8006342:	d1eb      	bne.n	800631c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006344:	4b24      	ldr	r3, [pc, #144]	; (80063d8 <HAL_RCC_ClockConfig+0x1b4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d20c      	bcs.n	800636c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006352:	4b21      	ldr	r3, [pc, #132]	; (80063d8 <HAL_RCC_ClockConfig+0x1b4>)
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800635a:	4b1f      	ldr	r3, [pc, #124]	; (80063d8 <HAL_RCC_ClockConfig+0x1b4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e030      	b.n	80063ce <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006378:	4b18      	ldr	r3, [pc, #96]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4915      	ldr	r1, [pc, #84]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006386:	4313      	orrs	r3, r2
 8006388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006396:	4b11      	ldr	r3, [pc, #68]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	490d      	ldr	r1, [pc, #52]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063aa:	f000 f81d 	bl	80063e8 <HAL_RCC_GetSysClockFreq>
 80063ae:	4601      	mov	r1, r0
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	4a09      	ldr	r2, [pc, #36]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063bc:	5cd3      	ldrb	r3, [r2, r3]
 80063be:	fa21 f303 	lsr.w	r3, r1, r3
 80063c2:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <HAL_RCC_ClockConfig+0x1c0>)
 80063c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80063c6:	2000      	movs	r0, #0
 80063c8:	f7fd fe3c 	bl	8004044 <HAL_InitTick>

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40023c00 	.word	0x40023c00
 80063dc:	40023800 	.word	0x40023800
 80063e0:	0800d740 	.word	0x0800d740
 80063e4:	20000494 	.word	0x20000494

080063e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	2300      	movs	r3, #0
 80063f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063fe:	4b50      	ldr	r3, [pc, #320]	; (8006540 <HAL_RCC_GetSysClockFreq+0x158>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 030c 	and.w	r3, r3, #12
 8006406:	2b04      	cmp	r3, #4
 8006408:	d007      	beq.n	800641a <HAL_RCC_GetSysClockFreq+0x32>
 800640a:	2b08      	cmp	r3, #8
 800640c:	d008      	beq.n	8006420 <HAL_RCC_GetSysClockFreq+0x38>
 800640e:	2b00      	cmp	r3, #0
 8006410:	f040 808d 	bne.w	800652e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006414:	4b4b      	ldr	r3, [pc, #300]	; (8006544 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006416:	60bb      	str	r3, [r7, #8]
       break;
 8006418:	e08c      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800641a:	4b4b      	ldr	r3, [pc, #300]	; (8006548 <HAL_RCC_GetSysClockFreq+0x160>)
 800641c:	60bb      	str	r3, [r7, #8]
      break;
 800641e:	e089      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006420:	4b47      	ldr	r3, [pc, #284]	; (8006540 <HAL_RCC_GetSysClockFreq+0x158>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006428:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800642a:	4b45      	ldr	r3, [pc, #276]	; (8006540 <HAL_RCC_GetSysClockFreq+0x158>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d023      	beq.n	800647e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006436:	4b42      	ldr	r3, [pc, #264]	; (8006540 <HAL_RCC_GetSysClockFreq+0x158>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	099b      	lsrs	r3, r3, #6
 800643c:	f04f 0400 	mov.w	r4, #0
 8006440:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	ea03 0501 	and.w	r5, r3, r1
 800644c:	ea04 0602 	and.w	r6, r4, r2
 8006450:	4a3d      	ldr	r2, [pc, #244]	; (8006548 <HAL_RCC_GetSysClockFreq+0x160>)
 8006452:	fb02 f106 	mul.w	r1, r2, r6
 8006456:	2200      	movs	r2, #0
 8006458:	fb02 f205 	mul.w	r2, r2, r5
 800645c:	440a      	add	r2, r1
 800645e:	493a      	ldr	r1, [pc, #232]	; (8006548 <HAL_RCC_GetSysClockFreq+0x160>)
 8006460:	fba5 0101 	umull	r0, r1, r5, r1
 8006464:	1853      	adds	r3, r2, r1
 8006466:	4619      	mov	r1, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f04f 0400 	mov.w	r4, #0
 800646e:	461a      	mov	r2, r3
 8006470:	4623      	mov	r3, r4
 8006472:	f7fa fbc3 	bl	8000bfc <__aeabi_uldivmod>
 8006476:	4603      	mov	r3, r0
 8006478:	460c      	mov	r4, r1
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e049      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800647e:	4b30      	ldr	r3, [pc, #192]	; (8006540 <HAL_RCC_GetSysClockFreq+0x158>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	099b      	lsrs	r3, r3, #6
 8006484:	f04f 0400 	mov.w	r4, #0
 8006488:	f240 11ff 	movw	r1, #511	; 0x1ff
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	ea03 0501 	and.w	r5, r3, r1
 8006494:	ea04 0602 	and.w	r6, r4, r2
 8006498:	4629      	mov	r1, r5
 800649a:	4632      	mov	r2, r6
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	f04f 0400 	mov.w	r4, #0
 80064a4:	0154      	lsls	r4, r2, #5
 80064a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80064aa:	014b      	lsls	r3, r1, #5
 80064ac:	4619      	mov	r1, r3
 80064ae:	4622      	mov	r2, r4
 80064b0:	1b49      	subs	r1, r1, r5
 80064b2:	eb62 0206 	sbc.w	r2, r2, r6
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	f04f 0400 	mov.w	r4, #0
 80064be:	0194      	lsls	r4, r2, #6
 80064c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80064c4:	018b      	lsls	r3, r1, #6
 80064c6:	1a5b      	subs	r3, r3, r1
 80064c8:	eb64 0402 	sbc.w	r4, r4, r2
 80064cc:	f04f 0100 	mov.w	r1, #0
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	00e2      	lsls	r2, r4, #3
 80064d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80064da:	00d9      	lsls	r1, r3, #3
 80064dc:	460b      	mov	r3, r1
 80064de:	4614      	mov	r4, r2
 80064e0:	195b      	adds	r3, r3, r5
 80064e2:	eb44 0406 	adc.w	r4, r4, r6
 80064e6:	f04f 0100 	mov.w	r1, #0
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	02a2      	lsls	r2, r4, #10
 80064f0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80064f4:	0299      	lsls	r1, r3, #10
 80064f6:	460b      	mov	r3, r1
 80064f8:	4614      	mov	r4, r2
 80064fa:	4618      	mov	r0, r3
 80064fc:	4621      	mov	r1, r4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f04f 0400 	mov.w	r4, #0
 8006504:	461a      	mov	r2, r3
 8006506:	4623      	mov	r3, r4
 8006508:	f7fa fb78 	bl	8000bfc <__aeabi_uldivmod>
 800650c:	4603      	mov	r3, r0
 800650e:	460c      	mov	r4, r1
 8006510:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006512:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <HAL_RCC_GetSysClockFreq+0x158>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	0c1b      	lsrs	r3, r3, #16
 8006518:	f003 0303 	and.w	r3, r3, #3
 800651c:	3301      	adds	r3, #1
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	fbb2 f3f3 	udiv	r3, r2, r3
 800652a:	60bb      	str	r3, [r7, #8]
      break;
 800652c:	e002      	b.n	8006534 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800652e:	4b05      	ldr	r3, [pc, #20]	; (8006544 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006530:	60bb      	str	r3, [r7, #8]
      break;
 8006532:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006534:	68bb      	ldr	r3, [r7, #8]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800653e:	bf00      	nop
 8006540:	40023800 	.word	0x40023800
 8006544:	00f42400 	.word	0x00f42400
 8006548:	017d7840 	.word	0x017d7840

0800654c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006550:	4b03      	ldr	r3, [pc, #12]	; (8006560 <HAL_RCC_GetHCLKFreq+0x14>)
 8006552:	681b      	ldr	r3, [r3, #0]
}
 8006554:	4618      	mov	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	20000494 	.word	0x20000494

08006564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006568:	f7ff fff0 	bl	800654c <HAL_RCC_GetHCLKFreq>
 800656c:	4601      	mov	r1, r0
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	0a9b      	lsrs	r3, r3, #10
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	4a03      	ldr	r2, [pc, #12]	; (8006588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800657a:	5cd3      	ldrb	r3, [r2, r3]
 800657c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40023800 	.word	0x40023800
 8006588:	0800d750 	.word	0x0800d750

0800658c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006590:	f7ff ffdc 	bl	800654c <HAL_RCC_GetHCLKFreq>
 8006594:	4601      	mov	r1, r0
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	0b5b      	lsrs	r3, r3, #13
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	4a03      	ldr	r2, [pc, #12]	; (80065b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a2:	5cd3      	ldrb	r3, [r2, r3]
 80065a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	0800d750 	.word	0x0800d750

080065b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	220f      	movs	r2, #15
 80065c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065c4:	4b12      	ldr	r3, [pc, #72]	; (8006610 <HAL_RCC_GetClockConfig+0x5c>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0203 	and.w	r2, r3, #3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065d0:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <HAL_RCC_GetClockConfig+0x5c>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065dc:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <HAL_RCC_GetClockConfig+0x5c>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80065e8:	4b09      	ldr	r3, [pc, #36]	; (8006610 <HAL_RCC_GetClockConfig+0x5c>)
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	08db      	lsrs	r3, r3, #3
 80065ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065f6:	4b07      	ldr	r3, [pc, #28]	; (8006614 <HAL_RCC_GetClockConfig+0x60>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 020f 	and.w	r2, r3, #15
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	601a      	str	r2, [r3, #0]
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40023800 	.word	0x40023800
 8006614:	40023c00 	.word	0x40023c00

08006618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e01d      	b.n	8006666 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f815 	bl	800666e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f000 f968 	bl	800692c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006676:	bf00      	nop
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0201 	orr.w	r2, r2, #1
 8006698:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b06      	cmp	r3, #6
 80066aa:	d007      	beq.n	80066bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d122      	bne.n	8006726 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d11b      	bne.n	8006726 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f06f 0202 	mvn.w	r2, #2
 80066f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d003      	beq.n	8006714 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f8ee 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 8006712:	e005      	b.n	8006720 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f8e0 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f8f1 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b04      	cmp	r3, #4
 8006732:	d122      	bne.n	800677a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d11b      	bne.n	800677a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f06f 0204 	mvn.w	r2, #4
 800674a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8c4 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 8006766:	e005      	b.n	8006774 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8b6 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f8c7 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b08      	cmp	r3, #8
 8006786:	d122      	bne.n	80067ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b08      	cmp	r3, #8
 8006794:	d11b      	bne.n	80067ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f06f 0208 	mvn.w	r2, #8
 800679e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2204      	movs	r2, #4
 80067a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f89a 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 80067ba:	e005      	b.n	80067c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f88c 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f89d 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0310 	and.w	r3, r3, #16
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d122      	bne.n	8006822 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d11b      	bne.n	8006822 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f06f 0210 	mvn.w	r2, #16
 80067f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2208      	movs	r2, #8
 80067f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f870 	bl	80068ee <HAL_TIM_IC_CaptureCallback>
 800680e:	e005      	b.n	800681c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f862 	bl	80068da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f873 	bl	8006902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b01      	cmp	r3, #1
 800682e:	d10e      	bne.n	800684e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b01      	cmp	r3, #1
 800683c:	d107      	bne.n	800684e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f06f 0201 	mvn.w	r2, #1
 8006846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7fd fa23 	bl	8003c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006858:	2b80      	cmp	r3, #128	; 0x80
 800685a:	d10e      	bne.n	800687a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006866:	2b80      	cmp	r3, #128	; 0x80
 8006868:	d107      	bne.n	800687a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f903 	bl	8006a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006884:	2b40      	cmp	r3, #64	; 0x40
 8006886:	d10e      	bne.n	80068a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006892:	2b40      	cmp	r3, #64	; 0x40
 8006894:	d107      	bne.n	80068a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800689e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f838 	bl	8006916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0320 	and.w	r3, r3, #32
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d10e      	bne.n	80068d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b20      	cmp	r3, #32
 80068c0:	d107      	bne.n	80068d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f06f 0220 	mvn.w	r2, #32
 80068ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f8cd 	bl	8006a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a40      	ldr	r2, [pc, #256]	; (8006a40 <TIM_Base_SetConfig+0x114>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d013      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694a:	d00f      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a3d      	ldr	r2, [pc, #244]	; (8006a44 <TIM_Base_SetConfig+0x118>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00b      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a3c      	ldr	r2, [pc, #240]	; (8006a48 <TIM_Base_SetConfig+0x11c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d007      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a3b      	ldr	r2, [pc, #236]	; (8006a4c <TIM_Base_SetConfig+0x120>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d003      	beq.n	800696c <TIM_Base_SetConfig+0x40>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a3a      	ldr	r2, [pc, #232]	; (8006a50 <TIM_Base_SetConfig+0x124>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d108      	bne.n	800697e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a2f      	ldr	r2, [pc, #188]	; (8006a40 <TIM_Base_SetConfig+0x114>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d02b      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698c:	d027      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a2c      	ldr	r2, [pc, #176]	; (8006a44 <TIM_Base_SetConfig+0x118>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d023      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a2b      	ldr	r2, [pc, #172]	; (8006a48 <TIM_Base_SetConfig+0x11c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d01f      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a2a      	ldr	r2, [pc, #168]	; (8006a4c <TIM_Base_SetConfig+0x120>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01b      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a29      	ldr	r2, [pc, #164]	; (8006a50 <TIM_Base_SetConfig+0x124>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d017      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a28      	ldr	r2, [pc, #160]	; (8006a54 <TIM_Base_SetConfig+0x128>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a27      	ldr	r2, [pc, #156]	; (8006a58 <TIM_Base_SetConfig+0x12c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00f      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a26      	ldr	r2, [pc, #152]	; (8006a5c <TIM_Base_SetConfig+0x130>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00b      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a25      	ldr	r2, [pc, #148]	; (8006a60 <TIM_Base_SetConfig+0x134>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d007      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a24      	ldr	r2, [pc, #144]	; (8006a64 <TIM_Base_SetConfig+0x138>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_Base_SetConfig+0xb2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a23      	ldr	r2, [pc, #140]	; (8006a68 <TIM_Base_SetConfig+0x13c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d108      	bne.n	80069f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a0a      	ldr	r2, [pc, #40]	; (8006a40 <TIM_Base_SetConfig+0x114>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_Base_SetConfig+0xf8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a0c      	ldr	r2, [pc, #48]	; (8006a50 <TIM_Base_SetConfig+0x124>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d103      	bne.n	8006a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	691a      	ldr	r2, [r3, #16]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	615a      	str	r2, [r3, #20]
}
 8006a32:	bf00      	nop
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40000800 	.word	0x40000800
 8006a4c:	40000c00 	.word	0x40000c00
 8006a50:	40010400 	.word	0x40010400
 8006a54:	40014000 	.word	0x40014000
 8006a58:	40014400 	.word	0x40014400
 8006a5c:	40014800 	.word	0x40014800
 8006a60:	40001800 	.word	0x40001800
 8006a64:	40001c00 	.word	0x40001c00
 8006a68:	40002000 	.word	0x40002000

08006a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e03f      	b.n	8006b26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fd fa06 	bl	8003ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2224      	movs	r2, #36	; 0x24
 8006ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fbed 	bl	80072b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691a      	ldr	r2, [r3, #16]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695a      	ldr	r2, [r3, #20]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b088      	sub	sp, #32
 8006b32:	af02      	add	r7, sp, #8
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	603b      	str	r3, [r7, #0]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	f040 8083 	bne.w	8006c56 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <HAL_UART_Transmit+0x2e>
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e07b      	b.n	8006c58 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_UART_Transmit+0x40>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e074      	b.n	8006c58 <HAL_UART_Transmit+0x12a>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2221      	movs	r2, #33	; 0x21
 8006b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006b84:	f7fd fba8 	bl	80042d8 <HAL_GetTick>
 8006b88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	88fa      	ldrh	r2, [r7, #6]
 8006b8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	88fa      	ldrh	r2, [r7, #6]
 8006b94:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b96:	e042      	b.n	8006c1e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bae:	d122      	bne.n	8006bf6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2180      	movs	r1, #128	; 0x80
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 fa10 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e046      	b.n	8006c58 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bdc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d103      	bne.n	8006bee <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	3302      	adds	r3, #2
 8006bea:	60bb      	str	r3, [r7, #8]
 8006bec:	e017      	b.n	8006c1e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	60bb      	str	r3, [r7, #8]
 8006bf4:	e013      	b.n	8006c1e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2180      	movs	r1, #128	; 0x80
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f9ed 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e023      	b.n	8006c58 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	60ba      	str	r2, [r7, #8]
 8006c16:	781a      	ldrb	r2, [r3, #0]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1b7      	bne.n	8006b98 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2140      	movs	r1, #64	; 0x40
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 f9d4 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e00a      	b.n	8006c58 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e000      	b.n	8006c58 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006c56:	2302      	movs	r3, #2
  }
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	f040 8090 	bne.w	8006da2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <HAL_UART_Receive+0x2e>
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e088      	b.n	8006da4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_UART_Receive+0x40>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e081      	b.n	8006da4 <HAL_UART_Receive+0x144>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2222      	movs	r2, #34	; 0x22
 8006cb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006cb6:	f7fd fb0f 	bl	80042d8 <HAL_GetTick>
 8006cba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	88fa      	ldrh	r2, [r7, #6]
 8006cc0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	88fa      	ldrh	r2, [r7, #6]
 8006cc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006cc8:	e05c      	b.n	8006d84 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce0:	d12b      	bne.n	8006d3a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2120      	movs	r1, #32
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 f977 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e053      	b.n	8006da4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10c      	bne.n	8006d22 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	3302      	adds	r3, #2
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	e030      	b.n	8006d84 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	e024      	b.n	8006d84 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2200      	movs	r2, #0
 8006d42:	2120      	movs	r1, #32
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f94b 	bl	8006fe0 <UART_WaitOnFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e027      	b.n	8006da4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d108      	bne.n	8006d6e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6859      	ldr	r1, [r3, #4]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	60ba      	str	r2, [r7, #8]
 8006d68:	b2ca      	uxtb	r2, r1
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	e00a      	b.n	8006d84 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	1c59      	adds	r1, r3, #1
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d19d      	bne.n	8006cca <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e000      	b.n	8006da4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006da2:	2302      	movs	r3, #2
  }
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10d      	bne.n	8006dfe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f003 0320 	and.w	r3, r3, #32
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d008      	beq.n	8006dfe <HAL_UART_IRQHandler+0x52>
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	f003 0320 	and.w	r3, r3, #32
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f9dc 	bl	80071b4 <UART_Receive_IT>
      return;
 8006dfc:	e0cc      	b.n	8006f98 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 80ab 	beq.w	8006f5c <HAL_UART_IRQHandler+0x1b0>
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d105      	bne.n	8006e1c <HAL_UART_IRQHandler+0x70>
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80a0 	beq.w	8006f5c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <HAL_UART_IRQHandler+0x90>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	f043 0201 	orr.w	r2, r3, #1
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <HAL_UART_IRQHandler+0xb0>
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e54:	f043 0202 	orr.w	r2, r3, #2
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <HAL_UART_IRQHandler+0xd0>
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e74:	f043 0204 	orr.w	r2, r3, #4
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <HAL_UART_IRQHandler+0xf0>
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e94:	f043 0208 	orr.w	r2, r3, #8
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d078      	beq.n	8006f96 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d007      	beq.n	8006ebe <HAL_UART_IRQHandler+0x112>
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f97b 	bl	80071b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec8:	2b40      	cmp	r3, #64	; 0x40
 8006eca:	bf0c      	ite	eq
 8006ecc:	2301      	moveq	r3, #1
 8006ece:	2300      	movne	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <HAL_UART_IRQHandler+0x13a>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d031      	beq.n	8006f4a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f8c4 	bl	8007074 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d123      	bne.n	8006f42 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f08:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d013      	beq.n	8006f3a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f16:	4a22      	ldr	r2, [pc, #136]	; (8006fa0 <HAL_UART_IRQHandler+0x1f4>)
 8006f18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fd faea 	bl	80044f8 <HAL_DMA_Abort_IT>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d016      	beq.n	8006f58 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f38:	e00e      	b.n	8006f58 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f846 	bl	8006fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f40:	e00a      	b.n	8006f58 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f842 	bl	8006fcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f48:	e006      	b.n	8006f58 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f83e 	bl	8006fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006f56:	e01e      	b.n	8006f96 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f58:	bf00      	nop
    return;
 8006f5a:	e01c      	b.n	8006f96 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <HAL_UART_IRQHandler+0x1cc>
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f8b1 	bl	80070d8 <UART_Transmit_IT>
    return;
 8006f76:	e00f      	b.n	8006f98 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <HAL_UART_IRQHandler+0x1ec>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f8f9 	bl	8007184 <UART_EndTransmit_IT>
    return;
 8006f92:	bf00      	nop
 8006f94:	e000      	b.n	8006f98 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006f96:	bf00      	nop
  }
}
 8006f98:	3720      	adds	r7, #32
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	080070b1 	.word	0x080070b1

08006fa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ff0:	e02c      	b.n	800704c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d028      	beq.n	800704c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <UART_WaitOnFlagUntilTimeout+0x30>
 8007000:	f7fd f96a 	bl	80042d8 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	429a      	cmp	r2, r3
 800700e:	d21d      	bcs.n	800704c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800701e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0201 	bic.w	r2, r2, #1
 800702e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e00f      	b.n	800706c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	4013      	ands	r3, r2
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	429a      	cmp	r2, r3
 800705a:	bf0c      	ite	eq
 800705c:	2301      	moveq	r3, #1
 800705e:	2300      	movne	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	461a      	mov	r2, r3
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	429a      	cmp	r2, r3
 8007068:	d0c3      	beq.n	8006ff2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800708a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695a      	ldr	r2, [r3, #20]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0201 	bic.w	r2, r2, #1
 800709a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff ff7e 	bl	8006fcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b21      	cmp	r3, #33	; 0x21
 80070ea:	d144      	bne.n	8007176 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f4:	d11a      	bne.n	800712c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800710a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	1c9a      	adds	r2, r3, #2
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	621a      	str	r2, [r3, #32]
 800711e:	e00e      	b.n	800713e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	621a      	str	r2, [r3, #32]
 800712a:	e008      	b.n	800713e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	1c59      	adds	r1, r3, #1
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6211      	str	r1, [r2, #32]
 8007136:	781a      	ldrb	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007142:	b29b      	uxth	r3, r3
 8007144:	3b01      	subs	r3, #1
 8007146:	b29b      	uxth	r3, r3
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	4619      	mov	r1, r3
 800714c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10f      	bne.n	8007172 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007160:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007170:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007172:	2300      	movs	r3, #0
 8007174:	e000      	b.n	8007178 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007176:	2302      	movs	r3, #2
  }
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800719a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7ff fefd 	bl	8006fa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b22      	cmp	r3, #34	; 0x22
 80071c6:	d171      	bne.n	80072ac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d0:	d123      	bne.n	800721a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10e      	bne.n	80071fe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f6:	1c9a      	adds	r2, r3, #2
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	629a      	str	r2, [r3, #40]	; 0x28
 80071fc:	e029      	b.n	8007252 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	b29b      	uxth	r3, r3
 8007206:	b2db      	uxtb	r3, r3
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	629a      	str	r2, [r3, #40]	; 0x28
 8007218:	e01b      	b.n	8007252 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6858      	ldr	r0, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722c:	1c59      	adds	r1, r3, #1
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6291      	str	r1, [r2, #40]	; 0x28
 8007232:	b2c2      	uxtb	r2, r0
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	e00c      	b.n	8007252 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	b2da      	uxtb	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	1c58      	adds	r0, r3, #1
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	6288      	str	r0, [r1, #40]	; 0x28
 800724a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007256:	b29b      	uxth	r3, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	b29b      	uxth	r3, r3
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4619      	mov	r1, r3
 8007260:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007262:	2b00      	cmp	r3, #0
 8007264:	d120      	bne.n	80072a8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0220 	bic.w	r2, r2, #32
 8007274:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0201 	bic.w	r2, r2, #1
 8007294:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff fe8a 	bl	8006fb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	e002      	b.n	80072ae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e000      	b.n	80072ae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80072ac:	2302      	movs	r3, #2
  }
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b8:	b5b0      	push	{r4, r5, r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80072f8:	f023 030c 	bic.w	r3, r3, #12
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	68f9      	ldr	r1, [r7, #12]
 8007302:	430b      	orrs	r3, r1
 8007304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	430a      	orrs	r2, r1
 800731a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007324:	f040 80e4 	bne.w	80074f0 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4aab      	ldr	r2, [pc, #684]	; (80075dc <UART_SetConfig+0x324>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <UART_SetConfig+0x84>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4aaa      	ldr	r2, [pc, #680]	; (80075e0 <UART_SetConfig+0x328>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d16c      	bne.n	8007416 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800733c:	f7ff f926 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8007340:	4602      	mov	r2, r0
 8007342:	4613      	mov	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4413      	add	r3, r2
 8007348:	009a      	lsls	r2, r3, #2
 800734a:	441a      	add	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	fbb2 f3f3 	udiv	r3, r2, r3
 8007356:	4aa3      	ldr	r2, [pc, #652]	; (80075e4 <UART_SetConfig+0x32c>)
 8007358:	fba2 2303 	umull	r2, r3, r2, r3
 800735c:	095b      	lsrs	r3, r3, #5
 800735e:	011c      	lsls	r4, r3, #4
 8007360:	f7ff f914 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8007364:	4602      	mov	r2, r0
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009a      	lsls	r2, r3, #2
 800736e:	441a      	add	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	fbb2 f5f3 	udiv	r5, r2, r3
 800737a:	f7ff f907 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 800737e:	4602      	mov	r2, r0
 8007380:	4613      	mov	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	009a      	lsls	r2, r3, #2
 8007388:	441a      	add	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	fbb2 f3f3 	udiv	r3, r2, r3
 8007394:	4a93      	ldr	r2, [pc, #588]	; (80075e4 <UART_SetConfig+0x32c>)
 8007396:	fba2 2303 	umull	r2, r3, r2, r3
 800739a:	095b      	lsrs	r3, r3, #5
 800739c:	2264      	movs	r2, #100	; 0x64
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	1aeb      	subs	r3, r5, r3
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	3332      	adds	r3, #50	; 0x32
 80073a8:	4a8e      	ldr	r2, [pc, #568]	; (80075e4 <UART_SetConfig+0x32c>)
 80073aa:	fba2 2303 	umull	r2, r3, r2, r3
 80073ae:	095b      	lsrs	r3, r3, #5
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073b6:	441c      	add	r4, r3
 80073b8:	f7ff f8e8 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 80073bc:	4602      	mov	r2, r0
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009a      	lsls	r2, r3, #2
 80073c6:	441a      	add	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	fbb2 f5f3 	udiv	r5, r2, r3
 80073d2:	f7ff f8db 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 80073d6:	4602      	mov	r2, r0
 80073d8:	4613      	mov	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4413      	add	r3, r2
 80073de:	009a      	lsls	r2, r3, #2
 80073e0:	441a      	add	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ec:	4a7d      	ldr	r2, [pc, #500]	; (80075e4 <UART_SetConfig+0x32c>)
 80073ee:	fba2 2303 	umull	r2, r3, r2, r3
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	2264      	movs	r2, #100	; 0x64
 80073f6:	fb02 f303 	mul.w	r3, r2, r3
 80073fa:	1aeb      	subs	r3, r5, r3
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	3332      	adds	r3, #50	; 0x32
 8007400:	4a78      	ldr	r2, [pc, #480]	; (80075e4 <UART_SetConfig+0x32c>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	095b      	lsrs	r3, r3, #5
 8007408:	f003 0207 	and.w	r2, r3, #7
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4422      	add	r2, r4
 8007412:	609a      	str	r2, [r3, #8]
 8007414:	e154      	b.n	80076c0 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007416:	f7ff f8a5 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 800741a:	4602      	mov	r2, r0
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009a      	lsls	r2, r3, #2
 8007424:	441a      	add	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007430:	4a6c      	ldr	r2, [pc, #432]	; (80075e4 <UART_SetConfig+0x32c>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	011c      	lsls	r4, r3, #4
 800743a:	f7ff f893 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 800743e:	4602      	mov	r2, r0
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	009a      	lsls	r2, r3, #2
 8007448:	441a      	add	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	fbb2 f5f3 	udiv	r5, r2, r3
 8007454:	f7ff f886 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 8007458:	4602      	mov	r2, r0
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009a      	lsls	r2, r3, #2
 8007462:	441a      	add	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	fbb2 f3f3 	udiv	r3, r2, r3
 800746e:	4a5d      	ldr	r2, [pc, #372]	; (80075e4 <UART_SetConfig+0x32c>)
 8007470:	fba2 2303 	umull	r2, r3, r2, r3
 8007474:	095b      	lsrs	r3, r3, #5
 8007476:	2264      	movs	r2, #100	; 0x64
 8007478:	fb02 f303 	mul.w	r3, r2, r3
 800747c:	1aeb      	subs	r3, r5, r3
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	3332      	adds	r3, #50	; 0x32
 8007482:	4a58      	ldr	r2, [pc, #352]	; (80075e4 <UART_SetConfig+0x32c>)
 8007484:	fba2 2303 	umull	r2, r3, r2, r3
 8007488:	095b      	lsrs	r3, r3, #5
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007490:	441c      	add	r4, r3
 8007492:	f7ff f867 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 8007496:	4602      	mov	r2, r0
 8007498:	4613      	mov	r3, r2
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	4413      	add	r3, r2
 800749e:	009a      	lsls	r2, r3, #2
 80074a0:	441a      	add	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	fbb2 f5f3 	udiv	r5, r2, r3
 80074ac:	f7ff f85a 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 80074b0:	4602      	mov	r2, r0
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	009a      	lsls	r2, r3, #2
 80074ba:	441a      	add	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c6:	4a47      	ldr	r2, [pc, #284]	; (80075e4 <UART_SetConfig+0x32c>)
 80074c8:	fba2 2303 	umull	r2, r3, r2, r3
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	2264      	movs	r2, #100	; 0x64
 80074d0:	fb02 f303 	mul.w	r3, r2, r3
 80074d4:	1aeb      	subs	r3, r5, r3
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	3332      	adds	r3, #50	; 0x32
 80074da:	4a42      	ldr	r2, [pc, #264]	; (80075e4 <UART_SetConfig+0x32c>)
 80074dc:	fba2 2303 	umull	r2, r3, r2, r3
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	f003 0207 	and.w	r2, r3, #7
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4422      	add	r2, r4
 80074ec:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80074ee:	e0e7      	b.n	80076c0 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a39      	ldr	r2, [pc, #228]	; (80075dc <UART_SetConfig+0x324>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d004      	beq.n	8007504 <UART_SetConfig+0x24c>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a38      	ldr	r2, [pc, #224]	; (80075e0 <UART_SetConfig+0x328>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d171      	bne.n	80075e8 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007504:	f7ff f842 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8007508:	4602      	mov	r2, r0
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009a      	lsls	r2, r3, #2
 8007512:	441a      	add	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	fbb2 f3f3 	udiv	r3, r2, r3
 800751e:	4a31      	ldr	r2, [pc, #196]	; (80075e4 <UART_SetConfig+0x32c>)
 8007520:	fba2 2303 	umull	r2, r3, r2, r3
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	011c      	lsls	r4, r3, #4
 8007528:	f7ff f830 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 800752c:	4602      	mov	r2, r0
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009a      	lsls	r2, r3, #2
 8007536:	441a      	add	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007542:	f7ff f823 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8007546:	4602      	mov	r2, r0
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009a      	lsls	r2, r3, #2
 8007550:	441a      	add	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	fbb2 f3f3 	udiv	r3, r2, r3
 800755c:	4a21      	ldr	r2, [pc, #132]	; (80075e4 <UART_SetConfig+0x32c>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	2264      	movs	r2, #100	; 0x64
 8007566:	fb02 f303 	mul.w	r3, r2, r3
 800756a:	1aeb      	subs	r3, r5, r3
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	3332      	adds	r3, #50	; 0x32
 8007570:	4a1c      	ldr	r2, [pc, #112]	; (80075e4 <UART_SetConfig+0x32c>)
 8007572:	fba2 2303 	umull	r2, r3, r2, r3
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800757c:	441c      	add	r4, r3
 800757e:	f7ff f805 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8007582:	4602      	mov	r2, r0
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	009a      	lsls	r2, r3, #2
 800758c:	441a      	add	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	fbb2 f5f3 	udiv	r5, r2, r3
 8007598:	f7fe fff8 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 800759c:	4602      	mov	r2, r0
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009a      	lsls	r2, r3, #2
 80075a6:	441a      	add	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b2:	4a0c      	ldr	r2, [pc, #48]	; (80075e4 <UART_SetConfig+0x32c>)
 80075b4:	fba2 2303 	umull	r2, r3, r2, r3
 80075b8:	095b      	lsrs	r3, r3, #5
 80075ba:	2264      	movs	r2, #100	; 0x64
 80075bc:	fb02 f303 	mul.w	r3, r2, r3
 80075c0:	1aeb      	subs	r3, r5, r3
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	3332      	adds	r3, #50	; 0x32
 80075c6:	4a07      	ldr	r2, [pc, #28]	; (80075e4 <UART_SetConfig+0x32c>)
 80075c8:	fba2 2303 	umull	r2, r3, r2, r3
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	f003 020f 	and.w	r2, r3, #15
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4422      	add	r2, r4
 80075d8:	609a      	str	r2, [r3, #8]
 80075da:	e071      	b.n	80076c0 <UART_SetConfig+0x408>
 80075dc:	40011000 	.word	0x40011000
 80075e0:	40011400 	.word	0x40011400
 80075e4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80075e8:	f7fe ffbc 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 80075ec:	4602      	mov	r2, r0
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009a      	lsls	r2, r3, #2
 80075f6:	441a      	add	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007602:	4a31      	ldr	r2, [pc, #196]	; (80076c8 <UART_SetConfig+0x410>)
 8007604:	fba2 2303 	umull	r2, r3, r2, r3
 8007608:	095b      	lsrs	r3, r3, #5
 800760a:	011c      	lsls	r4, r3, #4
 800760c:	f7fe ffaa 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 8007610:	4602      	mov	r2, r0
 8007612:	4613      	mov	r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	009a      	lsls	r2, r3, #2
 800761a:	441a      	add	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	fbb2 f5f3 	udiv	r5, r2, r3
 8007626:	f7fe ff9d 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 800762a:	4602      	mov	r2, r0
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	009a      	lsls	r2, r3, #2
 8007634:	441a      	add	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007640:	4a21      	ldr	r2, [pc, #132]	; (80076c8 <UART_SetConfig+0x410>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	2264      	movs	r2, #100	; 0x64
 800764a:	fb02 f303 	mul.w	r3, r2, r3
 800764e:	1aeb      	subs	r3, r5, r3
 8007650:	011b      	lsls	r3, r3, #4
 8007652:	3332      	adds	r3, #50	; 0x32
 8007654:	4a1c      	ldr	r2, [pc, #112]	; (80076c8 <UART_SetConfig+0x410>)
 8007656:	fba2 2303 	umull	r2, r3, r2, r3
 800765a:	095b      	lsrs	r3, r3, #5
 800765c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007660:	441c      	add	r4, r3
 8007662:	f7fe ff7f 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 8007666:	4602      	mov	r2, r0
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009a      	lsls	r2, r3, #2
 8007670:	441a      	add	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	fbb2 f5f3 	udiv	r5, r2, r3
 800767c:	f7fe ff72 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 8007680:	4602      	mov	r2, r0
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009a      	lsls	r2, r3, #2
 800768a:	441a      	add	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	fbb2 f3f3 	udiv	r3, r2, r3
 8007696:	4a0c      	ldr	r2, [pc, #48]	; (80076c8 <UART_SetConfig+0x410>)
 8007698:	fba2 2303 	umull	r2, r3, r2, r3
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	2264      	movs	r2, #100	; 0x64
 80076a0:	fb02 f303 	mul.w	r3, r2, r3
 80076a4:	1aeb      	subs	r3, r5, r3
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	3332      	adds	r3, #50	; 0x32
 80076aa:	4a07      	ldr	r2, [pc, #28]	; (80076c8 <UART_SetConfig+0x410>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	f003 020f 	and.w	r2, r3, #15
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4422      	add	r2, r4
 80076bc:	609a      	str	r2, [r3, #8]
}
 80076be:	e7ff      	b.n	80076c0 <UART_SetConfig+0x408>
 80076c0:	bf00      	nop
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bdb0      	pop	{r4, r5, r7, pc}
 80076c8:	51eb851f 	.word	0x51eb851f

080076cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80076da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076de:	2b84      	cmp	r3, #132	; 0x84
 80076e0:	d005      	beq.n	80076ee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80076e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4413      	add	r3, r2
 80076ea:	3303      	adds	r3, #3
 80076ec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80076ee:	68fb      	ldr	r3, [r7, #12]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007700:	f000 fad2 	bl	8007ca8 <vTaskStartScheduler>
  
  return osOK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	bd80      	pop	{r7, pc}

0800770a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800770a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800770c:	b089      	sub	sp, #36	; 0x24
 800770e:	af04      	add	r7, sp, #16
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d020      	beq.n	800775e <osThreadCreate+0x54>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01c      	beq.n	800775e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685c      	ldr	r4, [r3, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681d      	ldr	r5, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	691e      	ldr	r6, [r3, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff ffc8 	bl	80076cc <makeFreeRtosPriority>
 800773c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007746:	9202      	str	r2, [sp, #8]
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	9100      	str	r1, [sp, #0]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	4632      	mov	r2, r6
 8007750:	4629      	mov	r1, r5
 8007752:	4620      	mov	r0, r4
 8007754:	f000 f8ed 	bl	8007932 <xTaskCreateStatic>
 8007758:	4603      	mov	r3, r0
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	e01c      	b.n	8007798 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685c      	ldr	r4, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800776a:	b29e      	uxth	r6, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff ffaa 	bl	80076cc <makeFreeRtosPriority>
 8007778:	4602      	mov	r2, r0
 800777a:	f107 030c 	add.w	r3, r7, #12
 800777e:	9301      	str	r3, [sp, #4]
 8007780:	9200      	str	r2, [sp, #0]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	4632      	mov	r2, r6
 8007786:	4629      	mov	r1, r5
 8007788:	4620      	mov	r0, r4
 800778a:	f000 f92b 	bl	80079e4 <xTaskCreate>
 800778e:	4603      	mov	r3, r0
 8007790:	2b01      	cmp	r3, #1
 8007792:	d001      	beq.n	8007798 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007794:	2300      	movs	r3, #0
 8007796:	e000      	b.n	800779a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007798:	68fb      	ldr	r3, [r7, #12]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3714      	adds	r7, #20
 800779e:	46bd      	mov	sp, r7
 80077a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <osDelay+0x16>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	e000      	b.n	80077ba <osDelay+0x18>
 80077b8:	2301      	movs	r3, #1
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fa40 	bl	8007c40 <vTaskDelay>
  
  return osOK;
 80077c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f103 0208 	add.w	r2, r3, #8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f04f 32ff 	mov.w	r2, #4294967295
 80077e2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f103 0208 	add.w	r2, r3, #8
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f103 0208 	add.w	r2, r3, #8
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	601a      	str	r2, [r3, #0]
}
 8007860:	bf00      	nop
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d103      	bne.n	800788c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	e00c      	b.n	80078a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3308      	adds	r3, #8
 8007890:	60fb      	str	r3, [r7, #12]
 8007892:	e002      	b.n	800789a <vListInsert+0x2e>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d2f6      	bcs.n	8007894 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	601a      	str	r2, [r3, #0]
}
 80078d2:	bf00      	nop
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	6892      	ldr	r2, [r2, #8]
 80078f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6852      	ldr	r2, [r2, #4]
 80078fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	429a      	cmp	r2, r3
 8007908:	d103      	bne.n	8007912 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689a      	ldr	r2, [r3, #8]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	1e5a      	subs	r2, r3, #1
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3714      	adds	r7, #20
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007932:	b580      	push	{r7, lr}
 8007934:	b08e      	sub	sp, #56	; 0x38
 8007936:	af04      	add	r7, sp, #16
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	623b      	str	r3, [r7, #32]
 8007958:	e7fe      	b.n	8007958 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800795a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795c:	2b00      	cmp	r3, #0
 800795e:	d109      	bne.n	8007974 <xTaskCreateStatic+0x42>
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	61fb      	str	r3, [r7, #28]
 8007972:	e7fe      	b.n	8007972 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007974:	2354      	movs	r3, #84	; 0x54
 8007976:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	2b54      	cmp	r3, #84	; 0x54
 800797c:	d009      	beq.n	8007992 <xTaskCreateStatic+0x60>
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	61bb      	str	r3, [r7, #24]
 8007990:	e7fe      	b.n	8007990 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007994:	2b00      	cmp	r3, #0
 8007996:	d01e      	beq.n	80079d6 <xTaskCreateStatic+0xa4>
 8007998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01b      	beq.n	80079d6 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079a6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079b0:	2300      	movs	r3, #0
 80079b2:	9303      	str	r3, [sp, #12]
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	9302      	str	r3, [sp, #8]
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	68b9      	ldr	r1, [r7, #8]
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 f850 	bl	8007a6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079d0:	f000 f8cc 	bl	8007b6c <prvAddNewTaskToReadyList>
 80079d4:	e001      	b.n	80079da <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079da:	697b      	ldr	r3, [r7, #20]
	}
 80079dc:	4618      	mov	r0, r3
 80079de:	3728      	adds	r7, #40	; 0x28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b08c      	sub	sp, #48	; 0x30
 80079e8:	af04      	add	r7, sp, #16
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	4613      	mov	r3, r2
 80079f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 feb3 	bl	8008764 <pvPortMalloc>
 80079fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00e      	beq.n	8007a24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007a06:	2054      	movs	r0, #84	; 0x54
 8007a08:	f000 feac 	bl	8008764 <pvPortMalloc>
 8007a0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	631a      	str	r2, [r3, #48]	; 0x30
 8007a1a:	e005      	b.n	8007a28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a1c:	6978      	ldr	r0, [r7, #20]
 8007a1e:	f000 ff63 	bl	80088e8 <vPortFree>
 8007a22:	e001      	b.n	8007a28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a24:	2300      	movs	r3, #0
 8007a26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d017      	beq.n	8007a5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a36:	88fa      	ldrh	r2, [r7, #6]
 8007a38:	2300      	movs	r3, #0
 8007a3a:	9303      	str	r3, [sp, #12]
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f80e 	bl	8007a6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a52:	69f8      	ldr	r0, [r7, #28]
 8007a54:	f000 f88a 	bl	8007b6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	e002      	b.n	8007a64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a64:	69bb      	ldr	r3, [r7, #24]
	}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3720      	adds	r7, #32
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b088      	sub	sp, #32
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	607a      	str	r2, [r7, #4]
 8007a7a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a86:	3b01      	subs	r3, #1
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f023 0307 	bic.w	r3, r3, #7
 8007a94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <prvInitialiseNewTask+0x46>
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	e7fe      	b.n	8007ab2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	61fb      	str	r3, [r7, #28]
 8007ab8:	e012      	b.n	8007ae0 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	4413      	add	r3, r2
 8007ac0:	7819      	ldrb	r1, [r3, #0]
 8007ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	3334      	adds	r3, #52	; 0x34
 8007aca:	460a      	mov	r2, r1
 8007acc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d006      	beq.n	8007ae8 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	3301      	adds	r3, #1
 8007ade:	61fb      	str	r3, [r7, #28]
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	2b0f      	cmp	r3, #15
 8007ae4:	d9e9      	bls.n	8007aba <prvInitialiseNewTask+0x4c>
 8007ae6:	e000      	b.n	8007aea <prvInitialiseNewTask+0x7c>
		{
			break;
 8007ae8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	2b06      	cmp	r3, #6
 8007af6:	d901      	bls.n	8007afc <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007af8:	2306      	movs	r3, #6
 8007afa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b06:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	3304      	adds	r3, #4
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff fe79 	bl	800780a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1a:	3318      	adds	r3, #24
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fe74 	bl	800780a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	f1c3 0207 	rsb	r2, r3, #7
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	68f9      	ldr	r1, [r7, #12]
 8007b4a:	69b8      	ldr	r0, [r7, #24]
 8007b4c:	f000 fc08 	bl	8008360 <pxPortInitialiseStack>
 8007b50:	4602      	mov	r2, r0
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b62:	bf00      	nop
 8007b64:	3720      	adds	r7, #32
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
	...

08007b6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b74:	f000 fd1a 	bl	80085ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b78:	4b2a      	ldr	r3, [pc, #168]	; (8007c24 <prvAddNewTaskToReadyList+0xb8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	4a29      	ldr	r2, [pc, #164]	; (8007c24 <prvAddNewTaskToReadyList+0xb8>)
 8007b80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b82:	4b29      	ldr	r3, [pc, #164]	; (8007c28 <prvAddNewTaskToReadyList+0xbc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d109      	bne.n	8007b9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b8a:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <prvAddNewTaskToReadyList+0xbc>)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b90:	4b24      	ldr	r3, [pc, #144]	; (8007c24 <prvAddNewTaskToReadyList+0xb8>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d110      	bne.n	8007bba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b98:	f000 fabc 	bl	8008114 <prvInitialiseTaskLists>
 8007b9c:	e00d      	b.n	8007bba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b9e:	4b23      	ldr	r3, [pc, #140]	; (8007c2c <prvAddNewTaskToReadyList+0xc0>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ba6:	4b20      	ldr	r3, [pc, #128]	; (8007c28 <prvAddNewTaskToReadyList+0xbc>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d802      	bhi.n	8007bba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007bb4:	4a1c      	ldr	r2, [pc, #112]	; (8007c28 <prvAddNewTaskToReadyList+0xbc>)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007bba:	4b1d      	ldr	r3, [pc, #116]	; (8007c30 <prvAddNewTaskToReadyList+0xc4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	4a1b      	ldr	r2, [pc, #108]	; (8007c30 <prvAddNewTaskToReadyList+0xc4>)
 8007bc2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	2201      	movs	r2, #1
 8007bca:	409a      	lsls	r2, r3
 8007bcc:	4b19      	ldr	r3, [pc, #100]	; (8007c34 <prvAddNewTaskToReadyList+0xc8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	4a18      	ldr	r2, [pc, #96]	; (8007c34 <prvAddNewTaskToReadyList+0xc8>)
 8007bd4:	6013      	str	r3, [r2, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4a15      	ldr	r2, [pc, #84]	; (8007c38 <prvAddNewTaskToReadyList+0xcc>)
 8007be4:	441a      	add	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	3304      	adds	r3, #4
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f7ff fe19 	bl	8007824 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007bf2:	f000 fd09 	bl	8008608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <prvAddNewTaskToReadyList+0xc0>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00e      	beq.n	8007c1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <prvAddNewTaskToReadyList+0xbc>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d207      	bcs.n	8007c1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <prvAddNewTaskToReadyList+0xd0>)
 8007c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	200009e4 	.word	0x200009e4
 8007c28:	200008e4 	.word	0x200008e4
 8007c2c:	200009f0 	.word	0x200009f0
 8007c30:	20000a00 	.word	0x20000a00
 8007c34:	200009ec 	.word	0x200009ec
 8007c38:	200008e8 	.word	0x200008e8
 8007c3c:	e000ed04 	.word	0xe000ed04

08007c40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d016      	beq.n	8007c80 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c52:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <vTaskDelay+0x60>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d009      	beq.n	8007c6e <vTaskDelay+0x2e>
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	60bb      	str	r3, [r7, #8]
 8007c6c:	e7fe      	b.n	8007c6c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007c6e:	f000 f879 	bl	8007d64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c72:	2100      	movs	r1, #0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fb0d 	bl	8008294 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c7a:	f000 f881 	bl	8007d80 <xTaskResumeAll>
 8007c7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d107      	bne.n	8007c96 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007c86:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <vTaskDelay+0x64>)
 8007c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000a0c 	.word	0x20000a0c
 8007ca4:	e000ed04 	.word	0xe000ed04

08007ca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cb6:	463a      	mov	r2, r7
 8007cb8:	1d39      	adds	r1, r7, #4
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fb f922 	bl	8002f08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	9202      	str	r2, [sp, #8]
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	460a      	mov	r2, r1
 8007cd6:	491d      	ldr	r1, [pc, #116]	; (8007d4c <vTaskStartScheduler+0xa4>)
 8007cd8:	481d      	ldr	r0, [pc, #116]	; (8007d50 <vTaskStartScheduler+0xa8>)
 8007cda:	f7ff fe2a 	bl	8007932 <xTaskCreateStatic>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <vTaskStartScheduler+0xac>)
 8007ce2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ce4:	4b1b      	ldr	r3, [pc, #108]	; (8007d54 <vTaskStartScheduler+0xac>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cec:	2301      	movs	r3, #1
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	e001      	b.n	8007cf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d115      	bne.n	8007d28 <vTaskStartScheduler+0x80>
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d0e:	4b12      	ldr	r3, [pc, #72]	; (8007d58 <vTaskStartScheduler+0xb0>)
 8007d10:	f04f 32ff 	mov.w	r2, #4294967295
 8007d14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d16:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <vTaskStartScheduler+0xb4>)
 8007d18:	2201      	movs	r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007d1c:	4b10      	ldr	r3, [pc, #64]	; (8007d60 <vTaskStartScheduler+0xb8>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d22:	f000 fba5 	bl	8008470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d26:	e00d      	b.n	8007d44 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2e:	d109      	bne.n	8007d44 <vTaskStartScheduler+0x9c>
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	60fb      	str	r3, [r7, #12]
 8007d42:	e7fe      	b.n	8007d42 <vTaskStartScheduler+0x9a>
}
 8007d44:	bf00      	nop
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	0800d738 	.word	0x0800d738
 8007d50:	080080e5 	.word	0x080080e5
 8007d54:	20000a08 	.word	0x20000a08
 8007d58:	20000a04 	.word	0x20000a04
 8007d5c:	200009f0 	.word	0x200009f0
 8007d60:	200009e8 	.word	0x200009e8

08007d64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d68:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <vTaskSuspendAll+0x18>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	4a03      	ldr	r2, [pc, #12]	; (8007d7c <vTaskSuspendAll+0x18>)
 8007d70:	6013      	str	r3, [r2, #0]
}
 8007d72:	bf00      	nop
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	20000a0c 	.word	0x20000a0c

08007d80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d8e:	4b41      	ldr	r3, [pc, #260]	; (8007e94 <xTaskResumeAll+0x114>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d109      	bne.n	8007daa <xTaskResumeAll+0x2a>
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	603b      	str	r3, [r7, #0]
 8007da8:	e7fe      	b.n	8007da8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007daa:	f000 fbff 	bl	80085ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007dae:	4b39      	ldr	r3, [pc, #228]	; (8007e94 <xTaskResumeAll+0x114>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	4a37      	ldr	r2, [pc, #220]	; (8007e94 <xTaskResumeAll+0x114>)
 8007db6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db8:	4b36      	ldr	r3, [pc, #216]	; (8007e94 <xTaskResumeAll+0x114>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d161      	bne.n	8007e84 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dc0:	4b35      	ldr	r3, [pc, #212]	; (8007e98 <xTaskResumeAll+0x118>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d05d      	beq.n	8007e84 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dc8:	e02e      	b.n	8007e28 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007dca:	4b34      	ldr	r3, [pc, #208]	; (8007e9c <xTaskResumeAll+0x11c>)
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3318      	adds	r3, #24
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff fd81 	bl	80078de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3304      	adds	r3, #4
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fd7c 	bl	80078de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	2201      	movs	r2, #1
 8007dec:	409a      	lsls	r2, r3
 8007dee:	4b2c      	ldr	r3, [pc, #176]	; (8007ea0 <xTaskResumeAll+0x120>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	4a2a      	ldr	r2, [pc, #168]	; (8007ea0 <xTaskResumeAll+0x120>)
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4a27      	ldr	r2, [pc, #156]	; (8007ea4 <xTaskResumeAll+0x124>)
 8007e06:	441a      	add	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7ff fd08 	bl	8007824 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e18:	4b23      	ldr	r3, [pc, #140]	; (8007ea8 <xTaskResumeAll+0x128>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d302      	bcc.n	8007e28 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007e22:	4b22      	ldr	r3, [pc, #136]	; (8007eac <xTaskResumeAll+0x12c>)
 8007e24:	2201      	movs	r2, #1
 8007e26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e28:	4b1c      	ldr	r3, [pc, #112]	; (8007e9c <xTaskResumeAll+0x11c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1cc      	bne.n	8007dca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e36:	f000 fa07 	bl	8008248 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e3a:	4b1d      	ldr	r3, [pc, #116]	; (8007eb0 <xTaskResumeAll+0x130>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d010      	beq.n	8007e68 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e46:	f000 f837 	bl	8007eb8 <xTaskIncrementTick>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007e50:	4b16      	ldr	r3, [pc, #88]	; (8007eac <xTaskResumeAll+0x12c>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1f1      	bne.n	8007e46 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007e62:	4b13      	ldr	r3, [pc, #76]	; (8007eb0 <xTaskResumeAll+0x130>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e68:	4b10      	ldr	r3, [pc, #64]	; (8007eac <xTaskResumeAll+0x12c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d009      	beq.n	8007e84 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e74:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <xTaskResumeAll+0x134>)
 8007e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e84:	f000 fbc0 	bl	8008608 <vPortExitCritical>

	return xAlreadyYielded;
 8007e88:	68bb      	ldr	r3, [r7, #8]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000a0c 	.word	0x20000a0c
 8007e98:	200009e4 	.word	0x200009e4
 8007e9c:	200009a4 	.word	0x200009a4
 8007ea0:	200009ec 	.word	0x200009ec
 8007ea4:	200008e8 	.word	0x200008e8
 8007ea8:	200008e4 	.word	0x200008e4
 8007eac:	200009f8 	.word	0x200009f8
 8007eb0:	200009f4 	.word	0x200009f4
 8007eb4:	e000ed04 	.word	0xe000ed04

08007eb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ec2:	4b50      	ldr	r3, [pc, #320]	; (8008004 <xTaskIncrementTick+0x14c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f040 808c 	bne.w	8007fe4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ecc:	4b4e      	ldr	r3, [pc, #312]	; (8008008 <xTaskIncrementTick+0x150>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ed4:	4a4c      	ldr	r2, [pc, #304]	; (8008008 <xTaskIncrementTick+0x150>)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d11f      	bne.n	8007f20 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ee0:	4b4a      	ldr	r3, [pc, #296]	; (800800c <xTaskIncrementTick+0x154>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d009      	beq.n	8007efe <xTaskIncrementTick+0x46>
 8007eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	603b      	str	r3, [r7, #0]
 8007efc:	e7fe      	b.n	8007efc <xTaskIncrementTick+0x44>
 8007efe:	4b43      	ldr	r3, [pc, #268]	; (800800c <xTaskIncrementTick+0x154>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	4b42      	ldr	r3, [pc, #264]	; (8008010 <xTaskIncrementTick+0x158>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a40      	ldr	r2, [pc, #256]	; (800800c <xTaskIncrementTick+0x154>)
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	4a40      	ldr	r2, [pc, #256]	; (8008010 <xTaskIncrementTick+0x158>)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	4b40      	ldr	r3, [pc, #256]	; (8008014 <xTaskIncrementTick+0x15c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3301      	adds	r3, #1
 8007f18:	4a3e      	ldr	r2, [pc, #248]	; (8008014 <xTaskIncrementTick+0x15c>)
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	f000 f994 	bl	8008248 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f20:	4b3d      	ldr	r3, [pc, #244]	; (8008018 <xTaskIncrementTick+0x160>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d34d      	bcc.n	8007fc6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f2a:	4b38      	ldr	r3, [pc, #224]	; (800800c <xTaskIncrementTick+0x154>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <xTaskIncrementTick+0x80>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <xTaskIncrementTick+0x82>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d004      	beq.n	8007f48 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f3e:	4b36      	ldr	r3, [pc, #216]	; (8008018 <xTaskIncrementTick+0x160>)
 8007f40:	f04f 32ff 	mov.w	r2, #4294967295
 8007f44:	601a      	str	r2, [r3, #0]
					break;
 8007f46:	e03e      	b.n	8007fc6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f48:	4b30      	ldr	r3, [pc, #192]	; (800800c <xTaskIncrementTick+0x154>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f58:	693a      	ldr	r2, [r7, #16]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d203      	bcs.n	8007f68 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f60:	4a2d      	ldr	r2, [pc, #180]	; (8008018 <xTaskIncrementTick+0x160>)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6013      	str	r3, [r2, #0]
						break;
 8007f66:	e02e      	b.n	8007fc6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff fcb6 	bl	80078de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d004      	beq.n	8007f84 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	3318      	adds	r3, #24
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff fcad 	bl	80078de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f88:	2201      	movs	r2, #1
 8007f8a:	409a      	lsls	r2, r3
 8007f8c:	4b23      	ldr	r3, [pc, #140]	; (800801c <xTaskIncrementTick+0x164>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	4a22      	ldr	r2, [pc, #136]	; (800801c <xTaskIncrementTick+0x164>)
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4a1f      	ldr	r2, [pc, #124]	; (8008020 <xTaskIncrementTick+0x168>)
 8007fa4:	441a      	add	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	4619      	mov	r1, r3
 8007fac:	4610      	mov	r0, r2
 8007fae:	f7ff fc39 	bl	8007824 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb6:	4b1b      	ldr	r3, [pc, #108]	; (8008024 <xTaskIncrementTick+0x16c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d3b4      	bcc.n	8007f2a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fc4:	e7b1      	b.n	8007f2a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fc6:	4b17      	ldr	r3, [pc, #92]	; (8008024 <xTaskIncrementTick+0x16c>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fcc:	4914      	ldr	r1, [pc, #80]	; (8008020 <xTaskIncrementTick+0x168>)
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d907      	bls.n	8007fee <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	e004      	b.n	8007fee <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007fe4:	4b10      	ldr	r3, [pc, #64]	; (8008028 <xTaskIncrementTick+0x170>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	4a0f      	ldr	r2, [pc, #60]	; (8008028 <xTaskIncrementTick+0x170>)
 8007fec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007fee:	4b0f      	ldr	r3, [pc, #60]	; (800802c <xTaskIncrementTick+0x174>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ffa:	697b      	ldr	r3, [r7, #20]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000a0c 	.word	0x20000a0c
 8008008:	200009e8 	.word	0x200009e8
 800800c:	2000099c 	.word	0x2000099c
 8008010:	200009a0 	.word	0x200009a0
 8008014:	200009fc 	.word	0x200009fc
 8008018:	20000a04 	.word	0x20000a04
 800801c:	200009ec 	.word	0x200009ec
 8008020:	200008e8 	.word	0x200008e8
 8008024:	200008e4 	.word	0x200008e4
 8008028:	200009f4 	.word	0x200009f4
 800802c:	200009f8 	.word	0x200009f8

08008030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008036:	4b26      	ldr	r3, [pc, #152]	; (80080d0 <vTaskSwitchContext+0xa0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800803e:	4b25      	ldr	r3, [pc, #148]	; (80080d4 <vTaskSwitchContext+0xa4>)
 8008040:	2201      	movs	r2, #1
 8008042:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008044:	e03e      	b.n	80080c4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008046:	4b23      	ldr	r3, [pc, #140]	; (80080d4 <vTaskSwitchContext+0xa4>)
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800804c:	4b22      	ldr	r3, [pc, #136]	; (80080d8 <vTaskSwitchContext+0xa8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	fab3 f383 	clz	r3, r3
 8008058:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800805a:	7afb      	ldrb	r3, [r7, #11]
 800805c:	f1c3 031f 	rsb	r3, r3, #31
 8008060:	617b      	str	r3, [r7, #20]
 8008062:	491e      	ldr	r1, [pc, #120]	; (80080dc <vTaskSwitchContext+0xac>)
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <vTaskSwitchContext+0x5a>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	607b      	str	r3, [r7, #4]
 8008088:	e7fe      	b.n	8008088 <vTaskSwitchContext+0x58>
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4a11      	ldr	r2, [pc, #68]	; (80080dc <vTaskSwitchContext+0xac>)
 8008096:	4413      	add	r3, r2
 8008098:	613b      	str	r3, [r7, #16]
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	605a      	str	r2, [r3, #4]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	3308      	adds	r3, #8
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d104      	bne.n	80080ba <vTaskSwitchContext+0x8a>
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	605a      	str	r2, [r3, #4]
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	4a07      	ldr	r2, [pc, #28]	; (80080e0 <vTaskSwitchContext+0xb0>)
 80080c2:	6013      	str	r3, [r2, #0]
}
 80080c4:	bf00      	nop
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	20000a0c 	.word	0x20000a0c
 80080d4:	200009f8 	.word	0x200009f8
 80080d8:	200009ec 	.word	0x200009ec
 80080dc:	200008e8 	.word	0x200008e8
 80080e0:	200008e4 	.word	0x200008e4

080080e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080ec:	f000 f852 	bl	8008194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080f0:	4b06      	ldr	r3, [pc, #24]	; (800810c <prvIdleTask+0x28>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d9f9      	bls.n	80080ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80080f8:	4b05      	ldr	r3, [pc, #20]	; (8008110 <prvIdleTask+0x2c>)
 80080fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008108:	e7f0      	b.n	80080ec <prvIdleTask+0x8>
 800810a:	bf00      	nop
 800810c:	200008e8 	.word	0x200008e8
 8008110:	e000ed04 	.word	0xe000ed04

08008114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800811a:	2300      	movs	r3, #0
 800811c:	607b      	str	r3, [r7, #4]
 800811e:	e00c      	b.n	800813a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4a12      	ldr	r2, [pc, #72]	; (8008174 <prvInitialiseTaskLists+0x60>)
 800812c:	4413      	add	r3, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff fb4b 	bl	80077ca <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3301      	adds	r3, #1
 8008138:	607b      	str	r3, [r7, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b06      	cmp	r3, #6
 800813e:	d9ef      	bls.n	8008120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008140:	480d      	ldr	r0, [pc, #52]	; (8008178 <prvInitialiseTaskLists+0x64>)
 8008142:	f7ff fb42 	bl	80077ca <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008146:	480d      	ldr	r0, [pc, #52]	; (800817c <prvInitialiseTaskLists+0x68>)
 8008148:	f7ff fb3f 	bl	80077ca <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800814c:	480c      	ldr	r0, [pc, #48]	; (8008180 <prvInitialiseTaskLists+0x6c>)
 800814e:	f7ff fb3c 	bl	80077ca <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008152:	480c      	ldr	r0, [pc, #48]	; (8008184 <prvInitialiseTaskLists+0x70>)
 8008154:	f7ff fb39 	bl	80077ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008158:	480b      	ldr	r0, [pc, #44]	; (8008188 <prvInitialiseTaskLists+0x74>)
 800815a:	f7ff fb36 	bl	80077ca <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800815e:	4b0b      	ldr	r3, [pc, #44]	; (800818c <prvInitialiseTaskLists+0x78>)
 8008160:	4a05      	ldr	r2, [pc, #20]	; (8008178 <prvInitialiseTaskLists+0x64>)
 8008162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008164:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <prvInitialiseTaskLists+0x7c>)
 8008166:	4a05      	ldr	r2, [pc, #20]	; (800817c <prvInitialiseTaskLists+0x68>)
 8008168:	601a      	str	r2, [r3, #0]
}
 800816a:	bf00      	nop
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	200008e8 	.word	0x200008e8
 8008178:	20000974 	.word	0x20000974
 800817c:	20000988 	.word	0x20000988
 8008180:	200009a4 	.word	0x200009a4
 8008184:	200009b8 	.word	0x200009b8
 8008188:	200009d0 	.word	0x200009d0
 800818c:	2000099c 	.word	0x2000099c
 8008190:	200009a0 	.word	0x200009a0

08008194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800819a:	e019      	b.n	80081d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800819c:	f000 fa06 	bl	80085ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80081a0:	4b0f      	ldr	r3, [pc, #60]	; (80081e0 <prvCheckTasksWaitingTermination+0x4c>)
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3304      	adds	r3, #4
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff fb96 	bl	80078de <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081b2:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <prvCheckTasksWaitingTermination+0x50>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	4a0a      	ldr	r2, [pc, #40]	; (80081e4 <prvCheckTasksWaitingTermination+0x50>)
 80081ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <prvCheckTasksWaitingTermination+0x54>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	4a09      	ldr	r2, [pc, #36]	; (80081e8 <prvCheckTasksWaitingTermination+0x54>)
 80081c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081c6:	f000 fa1f 	bl	8008608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f80e 	bl	80081ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081d0:	4b05      	ldr	r3, [pc, #20]	; (80081e8 <prvCheckTasksWaitingTermination+0x54>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e1      	bne.n	800819c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	200009b8 	.word	0x200009b8
 80081e4:	200009e4 	.word	0x200009e4
 80081e8:	200009cc 	.word	0x200009cc

080081ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d108      	bne.n	8008210 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fb70 	bl	80088e8 <vPortFree>
				vPortFree( pxTCB );
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fb6d 	bl	80088e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800820e:	e017      	b.n	8008240 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008216:	2b01      	cmp	r3, #1
 8008218:	d103      	bne.n	8008222 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fb64 	bl	80088e8 <vPortFree>
	}
 8008220:	e00e      	b.n	8008240 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008228:	2b02      	cmp	r3, #2
 800822a:	d009      	beq.n	8008240 <prvDeleteTCB+0x54>
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	e7fe      	b.n	800823e <prvDeleteTCB+0x52>
	}
 8008240:	bf00      	nop
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800824e:	4b0f      	ldr	r3, [pc, #60]	; (800828c <prvResetNextTaskUnblockTime+0x44>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <prvResetNextTaskUnblockTime+0x14>
 8008258:	2301      	movs	r3, #1
 800825a:	e000      	b.n	800825e <prvResetNextTaskUnblockTime+0x16>
 800825c:	2300      	movs	r3, #0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d004      	beq.n	800826c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008262:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <prvResetNextTaskUnblockTime+0x48>)
 8008264:	f04f 32ff 	mov.w	r2, #4294967295
 8008268:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800826a:	e008      	b.n	800827e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800826c:	4b07      	ldr	r3, [pc, #28]	; (800828c <prvResetNextTaskUnblockTime+0x44>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	4a05      	ldr	r2, [pc, #20]	; (8008290 <prvResetNextTaskUnblockTime+0x48>)
 800827c:	6013      	str	r3, [r2, #0]
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	2000099c 	.word	0x2000099c
 8008290:	20000a04 	.word	0x20000a04

08008294 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800829e:	4b29      	ldr	r3, [pc, #164]	; (8008344 <prvAddCurrentTaskToDelayedList+0xb0>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082a4:	4b28      	ldr	r3, [pc, #160]	; (8008348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff fb17 	bl	80078de <uxListRemove>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10b      	bne.n	80082ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80082b6:	4b24      	ldr	r3, [pc, #144]	; (8008348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	2201      	movs	r2, #1
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	43da      	mvns	r2, r3
 80082c4:	4b21      	ldr	r3, [pc, #132]	; (800834c <prvAddCurrentTaskToDelayedList+0xb8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4013      	ands	r3, r2
 80082ca:	4a20      	ldr	r2, [pc, #128]	; (800834c <prvAddCurrentTaskToDelayedList+0xb8>)
 80082cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d4:	d10a      	bne.n	80082ec <prvAddCurrentTaskToDelayedList+0x58>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d007      	beq.n	80082ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082dc:	4b1a      	ldr	r3, [pc, #104]	; (8008348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3304      	adds	r3, #4
 80082e2:	4619      	mov	r1, r3
 80082e4:	481a      	ldr	r0, [pc, #104]	; (8008350 <prvAddCurrentTaskToDelayedList+0xbc>)
 80082e6:	f7ff fa9d 	bl	8007824 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082ea:	e026      	b.n	800833a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4413      	add	r3, r2
 80082f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082f4:	4b14      	ldr	r3, [pc, #80]	; (8008348 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	429a      	cmp	r2, r3
 8008302:	d209      	bcs.n	8008318 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008304:	4b13      	ldr	r3, [pc, #76]	; (8008354 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <prvAddCurrentTaskToDelayedList+0xb4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3304      	adds	r3, #4
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f7ff faab 	bl	800786c <vListInsert>
}
 8008316:	e010      	b.n	800833a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008318:	4b0f      	ldr	r3, [pc, #60]	; (8008358 <prvAddCurrentTaskToDelayedList+0xc4>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <prvAddCurrentTaskToDelayedList+0xb4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3304      	adds	r3, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f7ff faa1 	bl	800786c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800832a:	4b0c      	ldr	r3, [pc, #48]	; (800835c <prvAddCurrentTaskToDelayedList+0xc8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	429a      	cmp	r2, r3
 8008332:	d202      	bcs.n	800833a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008334:	4a09      	ldr	r2, [pc, #36]	; (800835c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6013      	str	r3, [r2, #0]
}
 800833a:	bf00      	nop
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	200009e8 	.word	0x200009e8
 8008348:	200008e4 	.word	0x200008e4
 800834c:	200009ec 	.word	0x200009ec
 8008350:	200009d0 	.word	0x200009d0
 8008354:	200009a0 	.word	0x200009a0
 8008358:	2000099c 	.word	0x2000099c
 800835c:	20000a04 	.word	0x20000a04

08008360 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3b04      	subs	r3, #4
 8008370:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3b04      	subs	r3, #4
 800837e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f023 0201 	bic.w	r2, r3, #1
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3b04      	subs	r3, #4
 800838e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008390:	4a0c      	ldr	r2, [pc, #48]	; (80083c4 <pxPortInitialiseStack+0x64>)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3b14      	subs	r3, #20
 800839a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3b04      	subs	r3, #4
 80083a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f06f 0202 	mvn.w	r2, #2
 80083ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	3b20      	subs	r3, #32
 80083b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083b6:	68fb      	ldr	r3, [r7, #12]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	080083c9 	.word	0x080083c9

080083c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083d2:	4b11      	ldr	r3, [pc, #68]	; (8008418 <prvTaskExitError+0x50>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083da:	d009      	beq.n	80083f0 <prvTaskExitError+0x28>
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	60fb      	str	r3, [r7, #12]
 80083ee:	e7fe      	b.n	80083ee <prvTaskExitError+0x26>
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008402:	bf00      	nop
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0fc      	beq.n	8008404 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	2000049c 	.word	0x2000049c
 800841c:	00000000 	.word	0x00000000

08008420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008420:	4b07      	ldr	r3, [pc, #28]	; (8008440 <pxCurrentTCBConst2>)
 8008422:	6819      	ldr	r1, [r3, #0]
 8008424:	6808      	ldr	r0, [r1, #0]
 8008426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	f380 8809 	msr	PSP, r0
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f04f 0000 	mov.w	r0, #0
 8008436:	f380 8811 	msr	BASEPRI, r0
 800843a:	4770      	bx	lr
 800843c:	f3af 8000 	nop.w

08008440 <pxCurrentTCBConst2>:
 8008440:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop

08008448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008448:	4808      	ldr	r0, [pc, #32]	; (800846c <prvPortStartFirstTask+0x24>)
 800844a:	6800      	ldr	r0, [r0, #0]
 800844c:	6800      	ldr	r0, [r0, #0]
 800844e:	f380 8808 	msr	MSP, r0
 8008452:	f04f 0000 	mov.w	r0, #0
 8008456:	f380 8814 	msr	CONTROL, r0
 800845a:	b662      	cpsie	i
 800845c:	b661      	cpsie	f
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	df00      	svc	0
 8008468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800846a:	bf00      	nop
 800846c:	e000ed08 	.word	0xe000ed08

08008470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008476:	4b44      	ldr	r3, [pc, #272]	; (8008588 <xPortStartScheduler+0x118>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a44      	ldr	r2, [pc, #272]	; (800858c <xPortStartScheduler+0x11c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d109      	bne.n	8008494 <xPortStartScheduler+0x24>
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	613b      	str	r3, [r7, #16]
 8008492:	e7fe      	b.n	8008492 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008494:	4b3c      	ldr	r3, [pc, #240]	; (8008588 <xPortStartScheduler+0x118>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a3d      	ldr	r2, [pc, #244]	; (8008590 <xPortStartScheduler+0x120>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d109      	bne.n	80084b2 <xPortStartScheduler+0x42>
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	e7fe      	b.n	80084b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084b2:	4b38      	ldr	r3, [pc, #224]	; (8008594 <xPortStartScheduler+0x124>)
 80084b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	22ff      	movs	r2, #255	; 0xff
 80084c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	4b30      	ldr	r3, [pc, #192]	; (8008598 <xPortStartScheduler+0x128>)
 80084d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084da:	4b30      	ldr	r3, [pc, #192]	; (800859c <xPortStartScheduler+0x12c>)
 80084dc:	2207      	movs	r2, #7
 80084de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084e0:	e009      	b.n	80084f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80084e2:	4b2e      	ldr	r3, [pc, #184]	; (800859c <xPortStartScheduler+0x12c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	4a2c      	ldr	r2, [pc, #176]	; (800859c <xPortStartScheduler+0x12c>)
 80084ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084fe:	2b80      	cmp	r3, #128	; 0x80
 8008500:	d0ef      	beq.n	80084e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008502:	4b26      	ldr	r3, [pc, #152]	; (800859c <xPortStartScheduler+0x12c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f1c3 0307 	rsb	r3, r3, #7
 800850a:	2b04      	cmp	r3, #4
 800850c:	d009      	beq.n	8008522 <xPortStartScheduler+0xb2>
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	60bb      	str	r3, [r7, #8]
 8008520:	e7fe      	b.n	8008520 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008522:	4b1e      	ldr	r3, [pc, #120]	; (800859c <xPortStartScheduler+0x12c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	021b      	lsls	r3, r3, #8
 8008528:	4a1c      	ldr	r2, [pc, #112]	; (800859c <xPortStartScheduler+0x12c>)
 800852a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800852c:	4b1b      	ldr	r3, [pc, #108]	; (800859c <xPortStartScheduler+0x12c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008534:	4a19      	ldr	r2, [pc, #100]	; (800859c <xPortStartScheduler+0x12c>)
 8008536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	b2da      	uxtb	r2, r3
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008540:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <xPortStartScheduler+0x130>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a16      	ldr	r2, [pc, #88]	; (80085a0 <xPortStartScheduler+0x130>)
 8008546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800854a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800854c:	4b14      	ldr	r3, [pc, #80]	; (80085a0 <xPortStartScheduler+0x130>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a13      	ldr	r2, [pc, #76]	; (80085a0 <xPortStartScheduler+0x130>)
 8008552:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008558:	f000 f8d6 	bl	8008708 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800855c:	4b11      	ldr	r3, [pc, #68]	; (80085a4 <xPortStartScheduler+0x134>)
 800855e:	2200      	movs	r2, #0
 8008560:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008562:	f000 f8f5 	bl	8008750 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008566:	4b10      	ldr	r3, [pc, #64]	; (80085a8 <xPortStartScheduler+0x138>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a0f      	ldr	r2, [pc, #60]	; (80085a8 <xPortStartScheduler+0x138>)
 800856c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008570:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008572:	f7ff ff69 	bl	8008448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008576:	f7ff fd5b 	bl	8008030 <vTaskSwitchContext>
	prvTaskExitError();
 800857a:	f7ff ff25 	bl	80083c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3718      	adds	r7, #24
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	e000ed00 	.word	0xe000ed00
 800858c:	410fc271 	.word	0x410fc271
 8008590:	410fc270 	.word	0x410fc270
 8008594:	e000e400 	.word	0xe000e400
 8008598:	20000a10 	.word	0x20000a10
 800859c:	20000a14 	.word	0x20000a14
 80085a0:	e000ed20 	.word	0xe000ed20
 80085a4:	2000049c 	.word	0x2000049c
 80085a8:	e000ef34 	.word	0xe000ef34

080085ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085c4:	4b0e      	ldr	r3, [pc, #56]	; (8008600 <vPortEnterCritical+0x54>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3301      	adds	r3, #1
 80085ca:	4a0d      	ldr	r2, [pc, #52]	; (8008600 <vPortEnterCritical+0x54>)
 80085cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085ce:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <vPortEnterCritical+0x54>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d10e      	bne.n	80085f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <vPortEnterCritical+0x58>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d009      	beq.n	80085f4 <vPortEnterCritical+0x48>
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	e7fe      	b.n	80085f2 <vPortEnterCritical+0x46>
	}
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	2000049c 	.word	0x2000049c
 8008604:	e000ed04 	.word	0xe000ed04

08008608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800860e:	4b11      	ldr	r3, [pc, #68]	; (8008654 <vPortExitCritical+0x4c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d109      	bne.n	800862a <vPortExitCritical+0x22>
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	607b      	str	r3, [r7, #4]
 8008628:	e7fe      	b.n	8008628 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <vPortExitCritical+0x4c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3b01      	subs	r3, #1
 8008630:	4a08      	ldr	r2, [pc, #32]	; (8008654 <vPortExitCritical+0x4c>)
 8008632:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <vPortExitCritical+0x4c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <vPortExitCritical+0x3e>
 800863c:	2300      	movs	r3, #0
 800863e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	2000049c 	.word	0x2000049c
	...

08008660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008660:	f3ef 8009 	mrs	r0, PSP
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	4b15      	ldr	r3, [pc, #84]	; (80086c0 <pxCurrentTCBConst>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	f01e 0f10 	tst.w	lr, #16
 8008670:	bf08      	it	eq
 8008672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867a:	6010      	str	r0, [r2, #0]
 800867c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008684:	f380 8811 	msr	BASEPRI, r0
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f7ff fcce 	bl	8008030 <vTaskSwitchContext>
 8008694:	f04f 0000 	mov.w	r0, #0
 8008698:	f380 8811 	msr	BASEPRI, r0
 800869c:	bc09      	pop	{r0, r3}
 800869e:	6819      	ldr	r1, [r3, #0]
 80086a0:	6808      	ldr	r0, [r1, #0]
 80086a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a6:	f01e 0f10 	tst.w	lr, #16
 80086aa:	bf08      	it	eq
 80086ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086b0:	f380 8809 	msr	PSP, r0
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	f3af 8000 	nop.w

080086c0 <pxCurrentTCBConst>:
 80086c0:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop

080086c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086e0:	f7ff fbea 	bl	8007eb8 <xTaskIncrementTick>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086ea:	4b06      	ldr	r3, [pc, #24]	; (8008704 <SysTick_Handler+0x3c>)
 80086ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	2300      	movs	r3, #0
 80086f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	e000ed04 	.word	0xe000ed04

08008708 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800870c:	4b0b      	ldr	r3, [pc, #44]	; (800873c <vPortSetupTimerInterrupt+0x34>)
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008712:	4b0b      	ldr	r3, [pc, #44]	; (8008740 <vPortSetupTimerInterrupt+0x38>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008718:	4b0a      	ldr	r3, [pc, #40]	; (8008744 <vPortSetupTimerInterrupt+0x3c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a0a      	ldr	r2, [pc, #40]	; (8008748 <vPortSetupTimerInterrupt+0x40>)
 800871e:	fba2 2303 	umull	r2, r3, r2, r3
 8008722:	099b      	lsrs	r3, r3, #6
 8008724:	4a09      	ldr	r2, [pc, #36]	; (800874c <vPortSetupTimerInterrupt+0x44>)
 8008726:	3b01      	subs	r3, #1
 8008728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800872a:	4b04      	ldr	r3, [pc, #16]	; (800873c <vPortSetupTimerInterrupt+0x34>)
 800872c:	2207      	movs	r2, #7
 800872e:	601a      	str	r2, [r3, #0]
}
 8008730:	bf00      	nop
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	e000e010 	.word	0xe000e010
 8008740:	e000e018 	.word	0xe000e018
 8008744:	20000494 	.word	0x20000494
 8008748:	10624dd3 	.word	0x10624dd3
 800874c:	e000e014 	.word	0xe000e014

08008750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008750:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008760 <vPortEnableVFP+0x10>
 8008754:	6801      	ldr	r1, [r0, #0]
 8008756:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800875a:	6001      	str	r1, [r0, #0]
 800875c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800875e:	bf00      	nop
 8008760:	e000ed88 	.word	0xe000ed88

08008764 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08a      	sub	sp, #40	; 0x28
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800876c:	2300      	movs	r3, #0
 800876e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008770:	f7ff faf8 	bl	8007d64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008774:	4b57      	ldr	r3, [pc, #348]	; (80088d4 <pvPortMalloc+0x170>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800877c:	f000 f90c 	bl	8008998 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008780:	4b55      	ldr	r3, [pc, #340]	; (80088d8 <pvPortMalloc+0x174>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4013      	ands	r3, r2
 8008788:	2b00      	cmp	r3, #0
 800878a:	f040 808c 	bne.w	80088a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d01c      	beq.n	80087ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008794:	2208      	movs	r2, #8
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4413      	add	r3, r2
 800879a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f003 0307 	and.w	r3, r3, #7
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d013      	beq.n	80087ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f023 0307 	bic.w	r3, r3, #7
 80087ac:	3308      	adds	r3, #8
 80087ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d009      	beq.n	80087ce <pvPortMalloc+0x6a>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e7fe      	b.n	80087cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d068      	beq.n	80088a6 <pvPortMalloc+0x142>
 80087d4:	4b41      	ldr	r3, [pc, #260]	; (80088dc <pvPortMalloc+0x178>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d863      	bhi.n	80088a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087de:	4b40      	ldr	r3, [pc, #256]	; (80088e0 <pvPortMalloc+0x17c>)
 80087e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087e2:	4b3f      	ldr	r3, [pc, #252]	; (80088e0 <pvPortMalloc+0x17c>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087e8:	e004      	b.n	80087f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d903      	bls.n	8008806 <pvPortMalloc+0xa2>
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f1      	bne.n	80087ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008806:	4b33      	ldr	r3, [pc, #204]	; (80088d4 <pvPortMalloc+0x170>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880c:	429a      	cmp	r2, r3
 800880e:	d04a      	beq.n	80088a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2208      	movs	r2, #8
 8008816:	4413      	add	r3, r2
 8008818:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	1ad2      	subs	r2, r2, r3
 800882a:	2308      	movs	r3, #8
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	429a      	cmp	r2, r3
 8008830:	d91e      	bls.n	8008870 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4413      	add	r3, r2
 8008838:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	f003 0307 	and.w	r3, r3, #7
 8008840:	2b00      	cmp	r3, #0
 8008842:	d009      	beq.n	8008858 <pvPortMalloc+0xf4>
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	613b      	str	r3, [r7, #16]
 8008856:	e7fe      	b.n	8008856 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800886a:	69b8      	ldr	r0, [r7, #24]
 800886c:	f000 f8f6 	bl	8008a5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008870:	4b1a      	ldr	r3, [pc, #104]	; (80088dc <pvPortMalloc+0x178>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	4a18      	ldr	r2, [pc, #96]	; (80088dc <pvPortMalloc+0x178>)
 800887c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800887e:	4b17      	ldr	r3, [pc, #92]	; (80088dc <pvPortMalloc+0x178>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	4b18      	ldr	r3, [pc, #96]	; (80088e4 <pvPortMalloc+0x180>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d203      	bcs.n	8008892 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800888a:	4b14      	ldr	r3, [pc, #80]	; (80088dc <pvPortMalloc+0x178>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a15      	ldr	r2, [pc, #84]	; (80088e4 <pvPortMalloc+0x180>)
 8008890:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	685a      	ldr	r2, [r3, #4]
 8008896:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <pvPortMalloc+0x174>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	431a      	orrs	r2, r3
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088a6:	f7ff fa6b 	bl	8007d80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	f003 0307 	and.w	r3, r3, #7
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <pvPortMalloc+0x164>
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	f383 8811 	msr	BASEPRI, r3
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	f3bf 8f4f 	dsb	sy
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e7fe      	b.n	80088c6 <pvPortMalloc+0x162>
	return pvReturn;
 80088c8:	69fb      	ldr	r3, [r7, #28]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3728      	adds	r7, #40	; 0x28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20004620 	.word	0x20004620
 80088d8:	2000462c 	.word	0x2000462c
 80088dc:	20004624 	.word	0x20004624
 80088e0:	20004618 	.word	0x20004618
 80088e4:	20004628 	.word	0x20004628

080088e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d046      	beq.n	8008988 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088fa:	2308      	movs	r3, #8
 80088fc:	425b      	negs	r3, r3
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	4413      	add	r3, r2
 8008902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	4b20      	ldr	r3, [pc, #128]	; (8008990 <vPortFree+0xa8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4013      	ands	r3, r2
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <vPortFree+0x42>
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	60fb      	str	r3, [r7, #12]
 8008928:	e7fe      	b.n	8008928 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d009      	beq.n	8008946 <vPortFree+0x5e>
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	60bb      	str	r3, [r7, #8]
 8008944:	e7fe      	b.n	8008944 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	4b11      	ldr	r3, [pc, #68]	; (8008990 <vPortFree+0xa8>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4013      	ands	r3, r2
 8008950:	2b00      	cmp	r3, #0
 8008952:	d019      	beq.n	8008988 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d115      	bne.n	8008988 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <vPortFree+0xa8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	43db      	mvns	r3, r3
 8008966:	401a      	ands	r2, r3
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800896c:	f7ff f9fa 	bl	8007d64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	4b07      	ldr	r3, [pc, #28]	; (8008994 <vPortFree+0xac>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4413      	add	r3, r2
 800897a:	4a06      	ldr	r2, [pc, #24]	; (8008994 <vPortFree+0xac>)
 800897c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800897e:	6938      	ldr	r0, [r7, #16]
 8008980:	f000 f86c 	bl	8008a5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008984:	f7ff f9fc 	bl	8007d80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008988:	bf00      	nop
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	2000462c 	.word	0x2000462c
 8008994:	20004624 	.word	0x20004624

08008998 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800899e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80089a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089a4:	4b27      	ldr	r3, [pc, #156]	; (8008a44 <prvHeapInit+0xac>)
 80089a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f003 0307 	and.w	r3, r3, #7
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00c      	beq.n	80089cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	3307      	adds	r3, #7
 80089b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0307 	bic.w	r3, r3, #7
 80089be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	4a1f      	ldr	r2, [pc, #124]	; (8008a44 <prvHeapInit+0xac>)
 80089c8:	4413      	add	r3, r2
 80089ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089d0:	4a1d      	ldr	r2, [pc, #116]	; (8008a48 <prvHeapInit+0xb0>)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089d6:	4b1c      	ldr	r3, [pc, #112]	; (8008a48 <prvHeapInit+0xb0>)
 80089d8:	2200      	movs	r2, #0
 80089da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	4413      	add	r3, r2
 80089e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089e4:	2208      	movs	r2, #8
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	1a9b      	subs	r3, r3, r2
 80089ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f023 0307 	bic.w	r3, r3, #7
 80089f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4a15      	ldr	r2, [pc, #84]	; (8008a4c <prvHeapInit+0xb4>)
 80089f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089fa:	4b14      	ldr	r3, [pc, #80]	; (8008a4c <prvHeapInit+0xb4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2200      	movs	r2, #0
 8008a00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a02:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <prvHeapInit+0xb4>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	1ad2      	subs	r2, r2, r3
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a18:	4b0c      	ldr	r3, [pc, #48]	; (8008a4c <prvHeapInit+0xb4>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	4a0a      	ldr	r2, [pc, #40]	; (8008a50 <prvHeapInit+0xb8>)
 8008a26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	4a09      	ldr	r2, [pc, #36]	; (8008a54 <prvHeapInit+0xbc>)
 8008a2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a30:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <prvHeapInit+0xc0>)
 8008a32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a36:	601a      	str	r2, [r3, #0]
}
 8008a38:	bf00      	nop
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	20000a18 	.word	0x20000a18
 8008a48:	20004618 	.word	0x20004618
 8008a4c:	20004620 	.word	0x20004620
 8008a50:	20004628 	.word	0x20004628
 8008a54:	20004624 	.word	0x20004624
 8008a58:	2000462c 	.word	0x2000462c

08008a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a64:	4b28      	ldr	r3, [pc, #160]	; (8008b08 <prvInsertBlockIntoFreeList+0xac>)
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	e002      	b.n	8008a70 <prvInsertBlockIntoFreeList+0x14>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d8f7      	bhi.n	8008a6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	4413      	add	r3, r2
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d108      	bne.n	8008a9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	441a      	add	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	441a      	add	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d118      	bne.n	8008ae4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	4b15      	ldr	r3, [pc, #84]	; (8008b0c <prvInsertBlockIntoFreeList+0xb0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d00d      	beq.n	8008ada <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	441a      	add	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	e008      	b.n	8008aec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ada:	4b0c      	ldr	r3, [pc, #48]	; (8008b0c <prvInsertBlockIntoFreeList+0xb0>)
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	e003      	b.n	8008aec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d002      	beq.n	8008afa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008afa:	bf00      	nop
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	20004618 	.word	0x20004618
 8008b0c:	20004620 	.word	0x20004620

08008b10 <cos>:
 8008b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b12:	ec51 0b10 	vmov	r0, r1, d0
 8008b16:	4a1e      	ldr	r2, [pc, #120]	; (8008b90 <cos+0x80>)
 8008b18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	dc06      	bgt.n	8008b2e <cos+0x1e>
 8008b20:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8008b88 <cos+0x78>
 8008b24:	f000 fb88 	bl	8009238 <__kernel_cos>
 8008b28:	ec51 0b10 	vmov	r0, r1, d0
 8008b2c:	e007      	b.n	8008b3e <cos+0x2e>
 8008b2e:	4a19      	ldr	r2, [pc, #100]	; (8008b94 <cos+0x84>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	dd09      	ble.n	8008b48 <cos+0x38>
 8008b34:	ee10 2a10 	vmov	r2, s0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	f7f7 fb5f 	bl	80001fc <__aeabi_dsub>
 8008b3e:	ec41 0b10 	vmov	d0, r0, r1
 8008b42:	b005      	add	sp, #20
 8008b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b48:	4668      	mov	r0, sp
 8008b4a:	f000 f981 	bl	8008e50 <__ieee754_rem_pio2>
 8008b4e:	f000 0003 	and.w	r0, r0, #3
 8008b52:	2801      	cmp	r0, #1
 8008b54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b58:	ed9d 0b00 	vldr	d0, [sp]
 8008b5c:	d007      	beq.n	8008b6e <cos+0x5e>
 8008b5e:	2802      	cmp	r0, #2
 8008b60:	d00e      	beq.n	8008b80 <cos+0x70>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d0de      	beq.n	8008b24 <cos+0x14>
 8008b66:	2001      	movs	r0, #1
 8008b68:	f000 ff6e 	bl	8009a48 <__kernel_sin>
 8008b6c:	e7dc      	b.n	8008b28 <cos+0x18>
 8008b6e:	f000 ff6b 	bl	8009a48 <__kernel_sin>
 8008b72:	ec53 2b10 	vmov	r2, r3, d0
 8008b76:	ee10 0a10 	vmov	r0, s0
 8008b7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008b7e:	e7de      	b.n	8008b3e <cos+0x2e>
 8008b80:	f000 fb5a 	bl	8009238 <__kernel_cos>
 8008b84:	e7f5      	b.n	8008b72 <cos+0x62>
 8008b86:	bf00      	nop
	...
 8008b90:	3fe921fb 	.word	0x3fe921fb
 8008b94:	7fefffff 	.word	0x7fefffff

08008b98 <sin>:
 8008b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b9a:	ec51 0b10 	vmov	r0, r1, d0
 8008b9e:	4a20      	ldr	r2, [pc, #128]	; (8008c20 <sin+0x88>)
 8008ba0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	dc07      	bgt.n	8008bb8 <sin+0x20>
 8008ba8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008c18 <sin+0x80>
 8008bac:	2000      	movs	r0, #0
 8008bae:	f000 ff4b 	bl	8009a48 <__kernel_sin>
 8008bb2:	ec51 0b10 	vmov	r0, r1, d0
 8008bb6:	e007      	b.n	8008bc8 <sin+0x30>
 8008bb8:	4a1a      	ldr	r2, [pc, #104]	; (8008c24 <sin+0x8c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	dd09      	ble.n	8008bd2 <sin+0x3a>
 8008bbe:	ee10 2a10 	vmov	r2, s0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	f7f7 fb1a 	bl	80001fc <__aeabi_dsub>
 8008bc8:	ec41 0b10 	vmov	d0, r0, r1
 8008bcc:	b005      	add	sp, #20
 8008bce:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bd2:	4668      	mov	r0, sp
 8008bd4:	f000 f93c 	bl	8008e50 <__ieee754_rem_pio2>
 8008bd8:	f000 0003 	and.w	r0, r0, #3
 8008bdc:	2801      	cmp	r0, #1
 8008bde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008be2:	ed9d 0b00 	vldr	d0, [sp]
 8008be6:	d004      	beq.n	8008bf2 <sin+0x5a>
 8008be8:	2802      	cmp	r0, #2
 8008bea:	d005      	beq.n	8008bf8 <sin+0x60>
 8008bec:	b970      	cbnz	r0, 8008c0c <sin+0x74>
 8008bee:	2001      	movs	r0, #1
 8008bf0:	e7dd      	b.n	8008bae <sin+0x16>
 8008bf2:	f000 fb21 	bl	8009238 <__kernel_cos>
 8008bf6:	e7dc      	b.n	8008bb2 <sin+0x1a>
 8008bf8:	2001      	movs	r0, #1
 8008bfa:	f000 ff25 	bl	8009a48 <__kernel_sin>
 8008bfe:	ec53 2b10 	vmov	r2, r3, d0
 8008c02:	ee10 0a10 	vmov	r0, s0
 8008c06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008c0a:	e7dd      	b.n	8008bc8 <sin+0x30>
 8008c0c:	f000 fb14 	bl	8009238 <__kernel_cos>
 8008c10:	e7f5      	b.n	8008bfe <sin+0x66>
 8008c12:	bf00      	nop
 8008c14:	f3af 8000 	nop.w
	...
 8008c20:	3fe921fb 	.word	0x3fe921fb
 8008c24:	7fefffff 	.word	0x7fefffff

08008c28 <tan>:
 8008c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c2a:	ec51 0b10 	vmov	r0, r1, d0
 8008c2e:	4a14      	ldr	r2, [pc, #80]	; (8008c80 <tan+0x58>)
 8008c30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c34:	4293      	cmp	r3, r2
 8008c36:	dc05      	bgt.n	8008c44 <tan+0x1c>
 8008c38:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8008c78 <tan+0x50>
 8008c3c:	2001      	movs	r0, #1
 8008c3e:	f000 ffbf 	bl	8009bc0 <__kernel_tan>
 8008c42:	e009      	b.n	8008c58 <tan+0x30>
 8008c44:	4a0f      	ldr	r2, [pc, #60]	; (8008c84 <tan+0x5c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	dd09      	ble.n	8008c5e <tan+0x36>
 8008c4a:	ee10 2a10 	vmov	r2, s0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	f7f7 fad4 	bl	80001fc <__aeabi_dsub>
 8008c54:	ec41 0b10 	vmov	d0, r0, r1
 8008c58:	b005      	add	sp, #20
 8008c5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c5e:	4668      	mov	r0, sp
 8008c60:	f000 f8f6 	bl	8008e50 <__ieee754_rem_pio2>
 8008c64:	0040      	lsls	r0, r0, #1
 8008c66:	f000 0002 	and.w	r0, r0, #2
 8008c6a:	f1c0 0001 	rsb	r0, r0, #1
 8008c6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c72:	ed9d 0b00 	vldr	d0, [sp]
 8008c76:	e7e2      	b.n	8008c3e <tan+0x16>
	...
 8008c80:	3fe921fb 	.word	0x3fe921fb
 8008c84:	7fefffff 	.word	0x7fefffff

08008c88 <atan2>:
 8008c88:	f000 b802 	b.w	8008c90 <__ieee754_atan2>
 8008c8c:	0000      	movs	r0, r0
	...

08008c90 <__ieee754_atan2>:
 8008c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c94:	ec57 6b11 	vmov	r6, r7, d1
 8008c98:	4273      	negs	r3, r6
 8008c9a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008c9e:	4333      	orrs	r3, r6
 8008ca0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008e48 <__ieee754_atan2+0x1b8>
 8008ca4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008ca8:	4573      	cmp	r3, lr
 8008caa:	ec51 0b10 	vmov	r0, r1, d0
 8008cae:	ee11 8a10 	vmov	r8, s2
 8008cb2:	d80a      	bhi.n	8008cca <__ieee754_atan2+0x3a>
 8008cb4:	4244      	negs	r4, r0
 8008cb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008cba:	4304      	orrs	r4, r0
 8008cbc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008cc0:	4574      	cmp	r4, lr
 8008cc2:	468c      	mov	ip, r1
 8008cc4:	ee10 9a10 	vmov	r9, s0
 8008cc8:	d907      	bls.n	8008cda <__ieee754_atan2+0x4a>
 8008cca:	4632      	mov	r2, r6
 8008ccc:	463b      	mov	r3, r7
 8008cce:	f7f7 fa97 	bl	8000200 <__adddf3>
 8008cd2:	ec41 0b10 	vmov	d0, r0, r1
 8008cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cda:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008cde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008ce2:	4334      	orrs	r4, r6
 8008ce4:	d103      	bne.n	8008cee <__ieee754_atan2+0x5e>
 8008ce6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cea:	f001 b935 	b.w	8009f58 <atan>
 8008cee:	17bc      	asrs	r4, r7, #30
 8008cf0:	f004 0402 	and.w	r4, r4, #2
 8008cf4:	ea53 0909 	orrs.w	r9, r3, r9
 8008cf8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008cfc:	d107      	bne.n	8008d0e <__ieee754_atan2+0x7e>
 8008cfe:	2c02      	cmp	r4, #2
 8008d00:	d073      	beq.n	8008dea <__ieee754_atan2+0x15a>
 8008d02:	2c03      	cmp	r4, #3
 8008d04:	d1e5      	bne.n	8008cd2 <__ieee754_atan2+0x42>
 8008d06:	a13e      	add	r1, pc, #248	; (adr r1, 8008e00 <__ieee754_atan2+0x170>)
 8008d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d0c:	e7e1      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008d0e:	ea52 0808 	orrs.w	r8, r2, r8
 8008d12:	d106      	bne.n	8008d22 <__ieee754_atan2+0x92>
 8008d14:	f1bc 0f00 	cmp.w	ip, #0
 8008d18:	da6b      	bge.n	8008df2 <__ieee754_atan2+0x162>
 8008d1a:	a13b      	add	r1, pc, #236	; (adr r1, 8008e08 <__ieee754_atan2+0x178>)
 8008d1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d20:	e7d7      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008d22:	4572      	cmp	r2, lr
 8008d24:	d120      	bne.n	8008d68 <__ieee754_atan2+0xd8>
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d111      	bne.n	8008d4e <__ieee754_atan2+0xbe>
 8008d2a:	2c02      	cmp	r4, #2
 8008d2c:	d007      	beq.n	8008d3e <__ieee754_atan2+0xae>
 8008d2e:	2c03      	cmp	r4, #3
 8008d30:	d009      	beq.n	8008d46 <__ieee754_atan2+0xb6>
 8008d32:	2c01      	cmp	r4, #1
 8008d34:	d155      	bne.n	8008de2 <__ieee754_atan2+0x152>
 8008d36:	a136      	add	r1, pc, #216	; (adr r1, 8008e10 <__ieee754_atan2+0x180>)
 8008d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d3c:	e7c9      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008d3e:	a136      	add	r1, pc, #216	; (adr r1, 8008e18 <__ieee754_atan2+0x188>)
 8008d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d44:	e7c5      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008d46:	a136      	add	r1, pc, #216	; (adr r1, 8008e20 <__ieee754_atan2+0x190>)
 8008d48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d4c:	e7c1      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008d4e:	2c02      	cmp	r4, #2
 8008d50:	d04b      	beq.n	8008dea <__ieee754_atan2+0x15a>
 8008d52:	2c03      	cmp	r4, #3
 8008d54:	d0d7      	beq.n	8008d06 <__ieee754_atan2+0x76>
 8008d56:	2c01      	cmp	r4, #1
 8008d58:	f04f 0000 	mov.w	r0, #0
 8008d5c:	d102      	bne.n	8008d64 <__ieee754_atan2+0xd4>
 8008d5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008d62:	e7b6      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008d64:	2100      	movs	r1, #0
 8008d66:	e7b4      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008d68:	4573      	cmp	r3, lr
 8008d6a:	d0d3      	beq.n	8008d14 <__ieee754_atan2+0x84>
 8008d6c:	1a9b      	subs	r3, r3, r2
 8008d6e:	151b      	asrs	r3, r3, #20
 8008d70:	2b3c      	cmp	r3, #60	; 0x3c
 8008d72:	dc1e      	bgt.n	8008db2 <__ieee754_atan2+0x122>
 8008d74:	2f00      	cmp	r7, #0
 8008d76:	da01      	bge.n	8008d7c <__ieee754_atan2+0xec>
 8008d78:	333c      	adds	r3, #60	; 0x3c
 8008d7a:	db1e      	blt.n	8008dba <__ieee754_atan2+0x12a>
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	f7f7 fd1e 	bl	80007c0 <__aeabi_ddiv>
 8008d84:	ec41 0b10 	vmov	d0, r0, r1
 8008d88:	f001 fa86 	bl	800a298 <fabs>
 8008d8c:	f001 f8e4 	bl	8009f58 <atan>
 8008d90:	ec51 0b10 	vmov	r0, r1, d0
 8008d94:	2c01      	cmp	r4, #1
 8008d96:	d013      	beq.n	8008dc0 <__ieee754_atan2+0x130>
 8008d98:	2c02      	cmp	r4, #2
 8008d9a:	d015      	beq.n	8008dc8 <__ieee754_atan2+0x138>
 8008d9c:	2c00      	cmp	r4, #0
 8008d9e:	d098      	beq.n	8008cd2 <__ieee754_atan2+0x42>
 8008da0:	a321      	add	r3, pc, #132	; (adr r3, 8008e28 <__ieee754_atan2+0x198>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fa29 	bl	80001fc <__aeabi_dsub>
 8008daa:	a321      	add	r3, pc, #132	; (adr r3, 8008e30 <__ieee754_atan2+0x1a0>)
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	e014      	b.n	8008ddc <__ieee754_atan2+0x14c>
 8008db2:	a121      	add	r1, pc, #132	; (adr r1, 8008e38 <__ieee754_atan2+0x1a8>)
 8008db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008db8:	e7ec      	b.n	8008d94 <__ieee754_atan2+0x104>
 8008dba:	2000      	movs	r0, #0
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	e7e9      	b.n	8008d94 <__ieee754_atan2+0x104>
 8008dc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	e784      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008dc8:	a317      	add	r3, pc, #92	; (adr r3, 8008e28 <__ieee754_atan2+0x198>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	f7f7 fa15 	bl	80001fc <__aeabi_dsub>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	a116      	add	r1, pc, #88	; (adr r1, 8008e30 <__ieee754_atan2+0x1a0>)
 8008dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ddc:	f7f7 fa0e 	bl	80001fc <__aeabi_dsub>
 8008de0:	e777      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008de2:	a117      	add	r1, pc, #92	; (adr r1, 8008e40 <__ieee754_atan2+0x1b0>)
 8008de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de8:	e773      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008dea:	a111      	add	r1, pc, #68	; (adr r1, 8008e30 <__ieee754_atan2+0x1a0>)
 8008dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df0:	e76f      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008df2:	a111      	add	r1, pc, #68	; (adr r1, 8008e38 <__ieee754_atan2+0x1a8>)
 8008df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df8:	e76b      	b.n	8008cd2 <__ieee754_atan2+0x42>
 8008dfa:	bf00      	nop
 8008dfc:	f3af 8000 	nop.w
 8008e00:	54442d18 	.word	0x54442d18
 8008e04:	c00921fb 	.word	0xc00921fb
 8008e08:	54442d18 	.word	0x54442d18
 8008e0c:	bff921fb 	.word	0xbff921fb
 8008e10:	54442d18 	.word	0x54442d18
 8008e14:	bfe921fb 	.word	0xbfe921fb
 8008e18:	7f3321d2 	.word	0x7f3321d2
 8008e1c:	4002d97c 	.word	0x4002d97c
 8008e20:	7f3321d2 	.word	0x7f3321d2
 8008e24:	c002d97c 	.word	0xc002d97c
 8008e28:	33145c07 	.word	0x33145c07
 8008e2c:	3ca1a626 	.word	0x3ca1a626
 8008e30:	54442d18 	.word	0x54442d18
 8008e34:	400921fb 	.word	0x400921fb
 8008e38:	54442d18 	.word	0x54442d18
 8008e3c:	3ff921fb 	.word	0x3ff921fb
 8008e40:	54442d18 	.word	0x54442d18
 8008e44:	3fe921fb 	.word	0x3fe921fb
 8008e48:	7ff00000 	.word	0x7ff00000
 8008e4c:	00000000 	.word	0x00000000

08008e50 <__ieee754_rem_pio2>:
 8008e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	ec57 6b10 	vmov	r6, r7, d0
 8008e58:	4bc3      	ldr	r3, [pc, #780]	; (8009168 <__ieee754_rem_pio2+0x318>)
 8008e5a:	b08d      	sub	sp, #52	; 0x34
 8008e5c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008e60:	4598      	cmp	r8, r3
 8008e62:	4604      	mov	r4, r0
 8008e64:	9704      	str	r7, [sp, #16]
 8008e66:	dc07      	bgt.n	8008e78 <__ieee754_rem_pio2+0x28>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	ed84 0b00 	vstr	d0, [r4]
 8008e70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008e74:	2500      	movs	r5, #0
 8008e76:	e027      	b.n	8008ec8 <__ieee754_rem_pio2+0x78>
 8008e78:	4bbc      	ldr	r3, [pc, #752]	; (800916c <__ieee754_rem_pio2+0x31c>)
 8008e7a:	4598      	cmp	r8, r3
 8008e7c:	dc75      	bgt.n	8008f6a <__ieee754_rem_pio2+0x11a>
 8008e7e:	9b04      	ldr	r3, [sp, #16]
 8008e80:	4dbb      	ldr	r5, [pc, #748]	; (8009170 <__ieee754_rem_pio2+0x320>)
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	ee10 0a10 	vmov	r0, s0
 8008e88:	a3a9      	add	r3, pc, #676	; (adr r3, 8009130 <__ieee754_rem_pio2+0x2e0>)
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	4639      	mov	r1, r7
 8008e90:	dd36      	ble.n	8008f00 <__ieee754_rem_pio2+0xb0>
 8008e92:	f7f7 f9b3 	bl	80001fc <__aeabi_dsub>
 8008e96:	45a8      	cmp	r8, r5
 8008e98:	4606      	mov	r6, r0
 8008e9a:	460f      	mov	r7, r1
 8008e9c:	d018      	beq.n	8008ed0 <__ieee754_rem_pio2+0x80>
 8008e9e:	a3a6      	add	r3, pc, #664	; (adr r3, 8009138 <__ieee754_rem_pio2+0x2e8>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 f9aa 	bl	80001fc <__aeabi_dsub>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	e9c4 2300 	strd	r2, r3, [r4]
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	f7f7 f9a2 	bl	80001fc <__aeabi_dsub>
 8008eb8:	a39f      	add	r3, pc, #636	; (adr r3, 8009138 <__ieee754_rem_pio2+0x2e8>)
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	f7f7 f99d 	bl	80001fc <__aeabi_dsub>
 8008ec2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ec6:	2501      	movs	r5, #1
 8008ec8:	4628      	mov	r0, r5
 8008eca:	b00d      	add	sp, #52	; 0x34
 8008ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed0:	a39b      	add	r3, pc, #620	; (adr r3, 8009140 <__ieee754_rem_pio2+0x2f0>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7f7 f991 	bl	80001fc <__aeabi_dsub>
 8008eda:	a39b      	add	r3, pc, #620	; (adr r3, 8009148 <__ieee754_rem_pio2+0x2f8>)
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	460f      	mov	r7, r1
 8008ee4:	f7f7 f98a 	bl	80001fc <__aeabi_dsub>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	e9c4 2300 	strd	r2, r3, [r4]
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	f7f7 f982 	bl	80001fc <__aeabi_dsub>
 8008ef8:	a393      	add	r3, pc, #588	; (adr r3, 8009148 <__ieee754_rem_pio2+0x2f8>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	e7de      	b.n	8008ebe <__ieee754_rem_pio2+0x6e>
 8008f00:	f7f7 f97e 	bl	8000200 <__adddf3>
 8008f04:	45a8      	cmp	r8, r5
 8008f06:	4606      	mov	r6, r0
 8008f08:	460f      	mov	r7, r1
 8008f0a:	d016      	beq.n	8008f3a <__ieee754_rem_pio2+0xea>
 8008f0c:	a38a      	add	r3, pc, #552	; (adr r3, 8009138 <__ieee754_rem_pio2+0x2e8>)
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	f7f7 f975 	bl	8000200 <__adddf3>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	e9c4 2300 	strd	r2, r3, [r4]
 8008f1e:	4630      	mov	r0, r6
 8008f20:	4639      	mov	r1, r7
 8008f22:	f7f7 f96b 	bl	80001fc <__aeabi_dsub>
 8008f26:	a384      	add	r3, pc, #528	; (adr r3, 8009138 <__ieee754_rem_pio2+0x2e8>)
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	f7f7 f968 	bl	8000200 <__adddf3>
 8008f30:	f04f 35ff 	mov.w	r5, #4294967295
 8008f34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f38:	e7c6      	b.n	8008ec8 <__ieee754_rem_pio2+0x78>
 8008f3a:	a381      	add	r3, pc, #516	; (adr r3, 8009140 <__ieee754_rem_pio2+0x2f0>)
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f7f7 f95e 	bl	8000200 <__adddf3>
 8008f44:	a380      	add	r3, pc, #512	; (adr r3, 8009148 <__ieee754_rem_pio2+0x2f8>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	f7f7 f957 	bl	8000200 <__adddf3>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	e9c4 2300 	strd	r2, r3, [r4]
 8008f5a:	4630      	mov	r0, r6
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	f7f7 f94d 	bl	80001fc <__aeabi_dsub>
 8008f62:	a379      	add	r3, pc, #484	; (adr r3, 8009148 <__ieee754_rem_pio2+0x2f8>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	e7e0      	b.n	8008f2c <__ieee754_rem_pio2+0xdc>
 8008f6a:	4b82      	ldr	r3, [pc, #520]	; (8009174 <__ieee754_rem_pio2+0x324>)
 8008f6c:	4598      	cmp	r8, r3
 8008f6e:	f300 80d0 	bgt.w	8009112 <__ieee754_rem_pio2+0x2c2>
 8008f72:	f001 f991 	bl	800a298 <fabs>
 8008f76:	ec57 6b10 	vmov	r6, r7, d0
 8008f7a:	ee10 0a10 	vmov	r0, s0
 8008f7e:	a374      	add	r3, pc, #464	; (adr r3, 8009150 <__ieee754_rem_pio2+0x300>)
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	4639      	mov	r1, r7
 8008f86:	f7f7 faf1 	bl	800056c <__aeabi_dmul>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	4b7a      	ldr	r3, [pc, #488]	; (8009178 <__ieee754_rem_pio2+0x328>)
 8008f8e:	f7f7 f937 	bl	8000200 <__adddf3>
 8008f92:	f7f7 fd9b 	bl	8000acc <__aeabi_d2iz>
 8008f96:	4605      	mov	r5, r0
 8008f98:	f7f7 fa7e 	bl	8000498 <__aeabi_i2d>
 8008f9c:	a364      	add	r3, pc, #400	; (adr r3, 8009130 <__ieee754_rem_pio2+0x2e0>)
 8008f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fa6:	f7f7 fae1 	bl	800056c <__aeabi_dmul>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4630      	mov	r0, r6
 8008fb0:	4639      	mov	r1, r7
 8008fb2:	f7f7 f923 	bl	80001fc <__aeabi_dsub>
 8008fb6:	a360      	add	r3, pc, #384	; (adr r3, 8009138 <__ieee754_rem_pio2+0x2e8>)
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	4682      	mov	sl, r0
 8008fbe:	468b      	mov	fp, r1
 8008fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fc4:	f7f7 fad2 	bl	800056c <__aeabi_dmul>
 8008fc8:	2d1f      	cmp	r5, #31
 8008fca:	4606      	mov	r6, r0
 8008fcc:	460f      	mov	r7, r1
 8008fce:	dc0c      	bgt.n	8008fea <__ieee754_rem_pio2+0x19a>
 8008fd0:	1e6a      	subs	r2, r5, #1
 8008fd2:	4b6a      	ldr	r3, [pc, #424]	; (800917c <__ieee754_rem_pio2+0x32c>)
 8008fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fd8:	4543      	cmp	r3, r8
 8008fda:	d006      	beq.n	8008fea <__ieee754_rem_pio2+0x19a>
 8008fdc:	4632      	mov	r2, r6
 8008fde:	463b      	mov	r3, r7
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	4659      	mov	r1, fp
 8008fe4:	f7f7 f90a 	bl	80001fc <__aeabi_dsub>
 8008fe8:	e00e      	b.n	8009008 <__ieee754_rem_pio2+0x1b8>
 8008fea:	4632      	mov	r2, r6
 8008fec:	463b      	mov	r3, r7
 8008fee:	4650      	mov	r0, sl
 8008ff0:	4659      	mov	r1, fp
 8008ff2:	f7f7 f903 	bl	80001fc <__aeabi_dsub>
 8008ff6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008ffa:	9305      	str	r3, [sp, #20]
 8008ffc:	9a05      	ldr	r2, [sp, #20]
 8008ffe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	2b10      	cmp	r3, #16
 8009006:	dc02      	bgt.n	800900e <__ieee754_rem_pio2+0x1be>
 8009008:	e9c4 0100 	strd	r0, r1, [r4]
 800900c:	e039      	b.n	8009082 <__ieee754_rem_pio2+0x232>
 800900e:	a34c      	add	r3, pc, #304	; (adr r3, 8009140 <__ieee754_rem_pio2+0x2f0>)
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009018:	f7f7 faa8 	bl	800056c <__aeabi_dmul>
 800901c:	4606      	mov	r6, r0
 800901e:	460f      	mov	r7, r1
 8009020:	4602      	mov	r2, r0
 8009022:	460b      	mov	r3, r1
 8009024:	4650      	mov	r0, sl
 8009026:	4659      	mov	r1, fp
 8009028:	f7f7 f8e8 	bl	80001fc <__aeabi_dsub>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4680      	mov	r8, r0
 8009032:	4689      	mov	r9, r1
 8009034:	4650      	mov	r0, sl
 8009036:	4659      	mov	r1, fp
 8009038:	f7f7 f8e0 	bl	80001fc <__aeabi_dsub>
 800903c:	4632      	mov	r2, r6
 800903e:	463b      	mov	r3, r7
 8009040:	f7f7 f8dc 	bl	80001fc <__aeabi_dsub>
 8009044:	a340      	add	r3, pc, #256	; (adr r3, 8009148 <__ieee754_rem_pio2+0x2f8>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	4606      	mov	r6, r0
 800904c:	460f      	mov	r7, r1
 800904e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009052:	f7f7 fa8b 	bl	800056c <__aeabi_dmul>
 8009056:	4632      	mov	r2, r6
 8009058:	463b      	mov	r3, r7
 800905a:	f7f7 f8cf 	bl	80001fc <__aeabi_dsub>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4606      	mov	r6, r0
 8009064:	460f      	mov	r7, r1
 8009066:	4640      	mov	r0, r8
 8009068:	4649      	mov	r1, r9
 800906a:	f7f7 f8c7 	bl	80001fc <__aeabi_dsub>
 800906e:	9a05      	ldr	r2, [sp, #20]
 8009070:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	2b31      	cmp	r3, #49	; 0x31
 8009078:	dc20      	bgt.n	80090bc <__ieee754_rem_pio2+0x26c>
 800907a:	e9c4 0100 	strd	r0, r1, [r4]
 800907e:	46c2      	mov	sl, r8
 8009080:	46cb      	mov	fp, r9
 8009082:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009086:	4650      	mov	r0, sl
 8009088:	4642      	mov	r2, r8
 800908a:	464b      	mov	r3, r9
 800908c:	4659      	mov	r1, fp
 800908e:	f7f7 f8b5 	bl	80001fc <__aeabi_dsub>
 8009092:	463b      	mov	r3, r7
 8009094:	4632      	mov	r2, r6
 8009096:	f7f7 f8b1 	bl	80001fc <__aeabi_dsub>
 800909a:	9b04      	ldr	r3, [sp, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80090a2:	f6bf af11 	bge.w	8008ec8 <__ieee754_rem_pio2+0x78>
 80090a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80090aa:	6063      	str	r3, [r4, #4]
 80090ac:	f8c4 8000 	str.w	r8, [r4]
 80090b0:	60a0      	str	r0, [r4, #8]
 80090b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090b6:	60e3      	str	r3, [r4, #12]
 80090b8:	426d      	negs	r5, r5
 80090ba:	e705      	b.n	8008ec8 <__ieee754_rem_pio2+0x78>
 80090bc:	a326      	add	r3, pc, #152	; (adr r3, 8009158 <__ieee754_rem_pio2+0x308>)
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090c6:	f7f7 fa51 	bl	800056c <__aeabi_dmul>
 80090ca:	4606      	mov	r6, r0
 80090cc:	460f      	mov	r7, r1
 80090ce:	4602      	mov	r2, r0
 80090d0:	460b      	mov	r3, r1
 80090d2:	4640      	mov	r0, r8
 80090d4:	4649      	mov	r1, r9
 80090d6:	f7f7 f891 	bl	80001fc <__aeabi_dsub>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4682      	mov	sl, r0
 80090e0:	468b      	mov	fp, r1
 80090e2:	4640      	mov	r0, r8
 80090e4:	4649      	mov	r1, r9
 80090e6:	f7f7 f889 	bl	80001fc <__aeabi_dsub>
 80090ea:	4632      	mov	r2, r6
 80090ec:	463b      	mov	r3, r7
 80090ee:	f7f7 f885 	bl	80001fc <__aeabi_dsub>
 80090f2:	a31b      	add	r3, pc, #108	; (adr r3, 8009160 <__ieee754_rem_pio2+0x310>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	4606      	mov	r6, r0
 80090fa:	460f      	mov	r7, r1
 80090fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009100:	f7f7 fa34 	bl	800056c <__aeabi_dmul>
 8009104:	4632      	mov	r2, r6
 8009106:	463b      	mov	r3, r7
 8009108:	f7f7 f878 	bl	80001fc <__aeabi_dsub>
 800910c:	4606      	mov	r6, r0
 800910e:	460f      	mov	r7, r1
 8009110:	e764      	b.n	8008fdc <__ieee754_rem_pio2+0x18c>
 8009112:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <__ieee754_rem_pio2+0x330>)
 8009114:	4598      	cmp	r8, r3
 8009116:	dd35      	ble.n	8009184 <__ieee754_rem_pio2+0x334>
 8009118:	ee10 2a10 	vmov	r2, s0
 800911c:	463b      	mov	r3, r7
 800911e:	4630      	mov	r0, r6
 8009120:	4639      	mov	r1, r7
 8009122:	f7f7 f86b 	bl	80001fc <__aeabi_dsub>
 8009126:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800912a:	e9c4 0100 	strd	r0, r1, [r4]
 800912e:	e6a1      	b.n	8008e74 <__ieee754_rem_pio2+0x24>
 8009130:	54400000 	.word	0x54400000
 8009134:	3ff921fb 	.word	0x3ff921fb
 8009138:	1a626331 	.word	0x1a626331
 800913c:	3dd0b461 	.word	0x3dd0b461
 8009140:	1a600000 	.word	0x1a600000
 8009144:	3dd0b461 	.word	0x3dd0b461
 8009148:	2e037073 	.word	0x2e037073
 800914c:	3ba3198a 	.word	0x3ba3198a
 8009150:	6dc9c883 	.word	0x6dc9c883
 8009154:	3fe45f30 	.word	0x3fe45f30
 8009158:	2e000000 	.word	0x2e000000
 800915c:	3ba3198a 	.word	0x3ba3198a
 8009160:	252049c1 	.word	0x252049c1
 8009164:	397b839a 	.word	0x397b839a
 8009168:	3fe921fb 	.word	0x3fe921fb
 800916c:	4002d97b 	.word	0x4002d97b
 8009170:	3ff921fb 	.word	0x3ff921fb
 8009174:	413921fb 	.word	0x413921fb
 8009178:	3fe00000 	.word	0x3fe00000
 800917c:	0800d758 	.word	0x0800d758
 8009180:	7fefffff 	.word	0x7fefffff
 8009184:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009188:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800918c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009190:	4630      	mov	r0, r6
 8009192:	460f      	mov	r7, r1
 8009194:	f7f7 fc9a 	bl	8000acc <__aeabi_d2iz>
 8009198:	f7f7 f97e 	bl	8000498 <__aeabi_i2d>
 800919c:	4602      	mov	r2, r0
 800919e:	460b      	mov	r3, r1
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80091a8:	f7f7 f828 	bl	80001fc <__aeabi_dsub>
 80091ac:	2200      	movs	r2, #0
 80091ae:	4b1f      	ldr	r3, [pc, #124]	; (800922c <__ieee754_rem_pio2+0x3dc>)
 80091b0:	f7f7 f9dc 	bl	800056c <__aeabi_dmul>
 80091b4:	460f      	mov	r7, r1
 80091b6:	4606      	mov	r6, r0
 80091b8:	f7f7 fc88 	bl	8000acc <__aeabi_d2iz>
 80091bc:	f7f7 f96c 	bl	8000498 <__aeabi_i2d>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4630      	mov	r0, r6
 80091c6:	4639      	mov	r1, r7
 80091c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80091cc:	f7f7 f816 	bl	80001fc <__aeabi_dsub>
 80091d0:	2200      	movs	r2, #0
 80091d2:	4b16      	ldr	r3, [pc, #88]	; (800922c <__ieee754_rem_pio2+0x3dc>)
 80091d4:	f7f7 f9ca 	bl	800056c <__aeabi_dmul>
 80091d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80091dc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80091e0:	f04f 0803 	mov.w	r8, #3
 80091e4:	2600      	movs	r6, #0
 80091e6:	2700      	movs	r7, #0
 80091e8:	4632      	mov	r2, r6
 80091ea:	463b      	mov	r3, r7
 80091ec:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80091f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80091f4:	f7f7 fc22 	bl	8000a3c <__aeabi_dcmpeq>
 80091f8:	b9b0      	cbnz	r0, 8009228 <__ieee754_rem_pio2+0x3d8>
 80091fa:	4b0d      	ldr	r3, [pc, #52]	; (8009230 <__ieee754_rem_pio2+0x3e0>)
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	2302      	movs	r3, #2
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	462a      	mov	r2, r5
 8009204:	4643      	mov	r3, r8
 8009206:	4621      	mov	r1, r4
 8009208:	a806      	add	r0, sp, #24
 800920a:	f000 f8dd 	bl	80093c8 <__kernel_rem_pio2>
 800920e:	9b04      	ldr	r3, [sp, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	4605      	mov	r5, r0
 8009214:	f6bf ae58 	bge.w	8008ec8 <__ieee754_rem_pio2+0x78>
 8009218:	6863      	ldr	r3, [r4, #4]
 800921a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800921e:	6063      	str	r3, [r4, #4]
 8009220:	68e3      	ldr	r3, [r4, #12]
 8009222:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009226:	e746      	b.n	80090b6 <__ieee754_rem_pio2+0x266>
 8009228:	46d0      	mov	r8, sl
 800922a:	e7dd      	b.n	80091e8 <__ieee754_rem_pio2+0x398>
 800922c:	41700000 	.word	0x41700000
 8009230:	0800d7d8 	.word	0x0800d7d8
 8009234:	00000000 	.word	0x00000000

08009238 <__kernel_cos>:
 8009238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	ec59 8b10 	vmov	r8, r9, d0
 8009240:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009244:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009248:	ed2d 8b02 	vpush	{d8}
 800924c:	eeb0 8a41 	vmov.f32	s16, s2
 8009250:	eef0 8a61 	vmov.f32	s17, s3
 8009254:	da07      	bge.n	8009266 <__kernel_cos+0x2e>
 8009256:	ee10 0a10 	vmov	r0, s0
 800925a:	4649      	mov	r1, r9
 800925c:	f7f7 fc36 	bl	8000acc <__aeabi_d2iz>
 8009260:	2800      	cmp	r0, #0
 8009262:	f000 8089 	beq.w	8009378 <__kernel_cos+0x140>
 8009266:	4642      	mov	r2, r8
 8009268:	464b      	mov	r3, r9
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 f97d 	bl	800056c <__aeabi_dmul>
 8009272:	2200      	movs	r2, #0
 8009274:	4b4e      	ldr	r3, [pc, #312]	; (80093b0 <__kernel_cos+0x178>)
 8009276:	4604      	mov	r4, r0
 8009278:	460d      	mov	r5, r1
 800927a:	f7f7 f977 	bl	800056c <__aeabi_dmul>
 800927e:	a340      	add	r3, pc, #256	; (adr r3, 8009380 <__kernel_cos+0x148>)
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	4682      	mov	sl, r0
 8009286:	468b      	mov	fp, r1
 8009288:	4620      	mov	r0, r4
 800928a:	4629      	mov	r1, r5
 800928c:	f7f7 f96e 	bl	800056c <__aeabi_dmul>
 8009290:	a33d      	add	r3, pc, #244	; (adr r3, 8009388 <__kernel_cos+0x150>)
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	f7f6 ffb3 	bl	8000200 <__adddf3>
 800929a:	4622      	mov	r2, r4
 800929c:	462b      	mov	r3, r5
 800929e:	f7f7 f965 	bl	800056c <__aeabi_dmul>
 80092a2:	a33b      	add	r3, pc, #236	; (adr r3, 8009390 <__kernel_cos+0x158>)
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f7f6 ffa8 	bl	80001fc <__aeabi_dsub>
 80092ac:	4622      	mov	r2, r4
 80092ae:	462b      	mov	r3, r5
 80092b0:	f7f7 f95c 	bl	800056c <__aeabi_dmul>
 80092b4:	a338      	add	r3, pc, #224	; (adr r3, 8009398 <__kernel_cos+0x160>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	f7f6 ffa1 	bl	8000200 <__adddf3>
 80092be:	4622      	mov	r2, r4
 80092c0:	462b      	mov	r3, r5
 80092c2:	f7f7 f953 	bl	800056c <__aeabi_dmul>
 80092c6:	a336      	add	r3, pc, #216	; (adr r3, 80093a0 <__kernel_cos+0x168>)
 80092c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092cc:	f7f6 ff96 	bl	80001fc <__aeabi_dsub>
 80092d0:	4622      	mov	r2, r4
 80092d2:	462b      	mov	r3, r5
 80092d4:	f7f7 f94a 	bl	800056c <__aeabi_dmul>
 80092d8:	a333      	add	r3, pc, #204	; (adr r3, 80093a8 <__kernel_cos+0x170>)
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	f7f6 ff8f 	bl	8000200 <__adddf3>
 80092e2:	4622      	mov	r2, r4
 80092e4:	462b      	mov	r3, r5
 80092e6:	f7f7 f941 	bl	800056c <__aeabi_dmul>
 80092ea:	4622      	mov	r2, r4
 80092ec:	462b      	mov	r3, r5
 80092ee:	f7f7 f93d 	bl	800056c <__aeabi_dmul>
 80092f2:	ec53 2b18 	vmov	r2, r3, d8
 80092f6:	4604      	mov	r4, r0
 80092f8:	460d      	mov	r5, r1
 80092fa:	4640      	mov	r0, r8
 80092fc:	4649      	mov	r1, r9
 80092fe:	f7f7 f935 	bl	800056c <__aeabi_dmul>
 8009302:	460b      	mov	r3, r1
 8009304:	4602      	mov	r2, r0
 8009306:	4629      	mov	r1, r5
 8009308:	4620      	mov	r0, r4
 800930a:	f7f6 ff77 	bl	80001fc <__aeabi_dsub>
 800930e:	4b29      	ldr	r3, [pc, #164]	; (80093b4 <__kernel_cos+0x17c>)
 8009310:	429e      	cmp	r6, r3
 8009312:	4680      	mov	r8, r0
 8009314:	4689      	mov	r9, r1
 8009316:	dc11      	bgt.n	800933c <__kernel_cos+0x104>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4650      	mov	r0, sl
 800931e:	4659      	mov	r1, fp
 8009320:	f7f6 ff6c 	bl	80001fc <__aeabi_dsub>
 8009324:	460b      	mov	r3, r1
 8009326:	4924      	ldr	r1, [pc, #144]	; (80093b8 <__kernel_cos+0x180>)
 8009328:	4602      	mov	r2, r0
 800932a:	2000      	movs	r0, #0
 800932c:	f7f6 ff66 	bl	80001fc <__aeabi_dsub>
 8009330:	ecbd 8b02 	vpop	{d8}
 8009334:	ec41 0b10 	vmov	d0, r0, r1
 8009338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933c:	4b1f      	ldr	r3, [pc, #124]	; (80093bc <__kernel_cos+0x184>)
 800933e:	491e      	ldr	r1, [pc, #120]	; (80093b8 <__kernel_cos+0x180>)
 8009340:	429e      	cmp	r6, r3
 8009342:	bfcc      	ite	gt
 8009344:	4d1e      	ldrgt	r5, [pc, #120]	; (80093c0 <__kernel_cos+0x188>)
 8009346:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800934a:	2400      	movs	r4, #0
 800934c:	4622      	mov	r2, r4
 800934e:	462b      	mov	r3, r5
 8009350:	2000      	movs	r0, #0
 8009352:	f7f6 ff53 	bl	80001fc <__aeabi_dsub>
 8009356:	4622      	mov	r2, r4
 8009358:	4606      	mov	r6, r0
 800935a:	460f      	mov	r7, r1
 800935c:	462b      	mov	r3, r5
 800935e:	4650      	mov	r0, sl
 8009360:	4659      	mov	r1, fp
 8009362:	f7f6 ff4b 	bl	80001fc <__aeabi_dsub>
 8009366:	4642      	mov	r2, r8
 8009368:	464b      	mov	r3, r9
 800936a:	f7f6 ff47 	bl	80001fc <__aeabi_dsub>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4630      	mov	r0, r6
 8009374:	4639      	mov	r1, r7
 8009376:	e7d9      	b.n	800932c <__kernel_cos+0xf4>
 8009378:	2000      	movs	r0, #0
 800937a:	490f      	ldr	r1, [pc, #60]	; (80093b8 <__kernel_cos+0x180>)
 800937c:	e7d8      	b.n	8009330 <__kernel_cos+0xf8>
 800937e:	bf00      	nop
 8009380:	be8838d4 	.word	0xbe8838d4
 8009384:	bda8fae9 	.word	0xbda8fae9
 8009388:	bdb4b1c4 	.word	0xbdb4b1c4
 800938c:	3e21ee9e 	.word	0x3e21ee9e
 8009390:	809c52ad 	.word	0x809c52ad
 8009394:	3e927e4f 	.word	0x3e927e4f
 8009398:	19cb1590 	.word	0x19cb1590
 800939c:	3efa01a0 	.word	0x3efa01a0
 80093a0:	16c15177 	.word	0x16c15177
 80093a4:	3f56c16c 	.word	0x3f56c16c
 80093a8:	5555554c 	.word	0x5555554c
 80093ac:	3fa55555 	.word	0x3fa55555
 80093b0:	3fe00000 	.word	0x3fe00000
 80093b4:	3fd33332 	.word	0x3fd33332
 80093b8:	3ff00000 	.word	0x3ff00000
 80093bc:	3fe90000 	.word	0x3fe90000
 80093c0:	3fd20000 	.word	0x3fd20000
 80093c4:	00000000 	.word	0x00000000

080093c8 <__kernel_rem_pio2>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	ed2d 8b02 	vpush	{d8}
 80093d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80093d4:	1ed4      	subs	r4, r2, #3
 80093d6:	9308      	str	r3, [sp, #32]
 80093d8:	9101      	str	r1, [sp, #4]
 80093da:	4bc5      	ldr	r3, [pc, #788]	; (80096f0 <__kernel_rem_pio2+0x328>)
 80093dc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80093de:	9009      	str	r0, [sp, #36]	; 0x24
 80093e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	9b08      	ldr	r3, [sp, #32]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	9307      	str	r3, [sp, #28]
 80093ec:	2318      	movs	r3, #24
 80093ee:	fb94 f4f3 	sdiv	r4, r4, r3
 80093f2:	f06f 0317 	mvn.w	r3, #23
 80093f6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80093fa:	fb04 3303 	mla	r3, r4, r3, r3
 80093fe:	eb03 0a02 	add.w	sl, r3, r2
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	9a07      	ldr	r2, [sp, #28]
 8009406:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80096e0 <__kernel_rem_pio2+0x318>
 800940a:	eb03 0802 	add.w	r8, r3, r2
 800940e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009410:	1aa7      	subs	r7, r4, r2
 8009412:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009416:	ae22      	add	r6, sp, #136	; 0x88
 8009418:	2500      	movs	r5, #0
 800941a:	4545      	cmp	r5, r8
 800941c:	dd13      	ble.n	8009446 <__kernel_rem_pio2+0x7e>
 800941e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80096e0 <__kernel_rem_pio2+0x318>
 8009422:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009426:	2600      	movs	r6, #0
 8009428:	9b04      	ldr	r3, [sp, #16]
 800942a:	429e      	cmp	r6, r3
 800942c:	dc32      	bgt.n	8009494 <__kernel_rem_pio2+0xcc>
 800942e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009430:	9302      	str	r3, [sp, #8]
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	199d      	adds	r5, r3, r6
 8009436:	ab22      	add	r3, sp, #136	; 0x88
 8009438:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800943c:	9306      	str	r3, [sp, #24]
 800943e:	ec59 8b18 	vmov	r8, r9, d8
 8009442:	2700      	movs	r7, #0
 8009444:	e01f      	b.n	8009486 <__kernel_rem_pio2+0xbe>
 8009446:	42ef      	cmn	r7, r5
 8009448:	d407      	bmi.n	800945a <__kernel_rem_pio2+0x92>
 800944a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800944e:	f7f7 f823 	bl	8000498 <__aeabi_i2d>
 8009452:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009456:	3501      	adds	r5, #1
 8009458:	e7df      	b.n	800941a <__kernel_rem_pio2+0x52>
 800945a:	ec51 0b18 	vmov	r0, r1, d8
 800945e:	e7f8      	b.n	8009452 <__kernel_rem_pio2+0x8a>
 8009460:	9906      	ldr	r1, [sp, #24]
 8009462:	9d02      	ldr	r5, [sp, #8]
 8009464:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009468:	9106      	str	r1, [sp, #24]
 800946a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800946e:	9502      	str	r5, [sp, #8]
 8009470:	f7f7 f87c 	bl	800056c <__aeabi_dmul>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4640      	mov	r0, r8
 800947a:	4649      	mov	r1, r9
 800947c:	f7f6 fec0 	bl	8000200 <__adddf3>
 8009480:	3701      	adds	r7, #1
 8009482:	4680      	mov	r8, r0
 8009484:	4689      	mov	r9, r1
 8009486:	9b07      	ldr	r3, [sp, #28]
 8009488:	429f      	cmp	r7, r3
 800948a:	dde9      	ble.n	8009460 <__kernel_rem_pio2+0x98>
 800948c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009490:	3601      	adds	r6, #1
 8009492:	e7c9      	b.n	8009428 <__kernel_rem_pio2+0x60>
 8009494:	9b04      	ldr	r3, [sp, #16]
 8009496:	aa0e      	add	r2, sp, #56	; 0x38
 8009498:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800949c:	930c      	str	r3, [sp, #48]	; 0x30
 800949e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80094a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80094a4:	9c04      	ldr	r4, [sp, #16]
 80094a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80094a8:	ab9a      	add	r3, sp, #616	; 0x268
 80094aa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80094ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094b6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80094ba:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80094be:	ab9a      	add	r3, sp, #616	; 0x268
 80094c0:	445b      	add	r3, fp
 80094c2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80094c6:	2500      	movs	r5, #0
 80094c8:	1b63      	subs	r3, r4, r5
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	dc78      	bgt.n	80095c0 <__kernel_rem_pio2+0x1f8>
 80094ce:	4650      	mov	r0, sl
 80094d0:	ec49 8b10 	vmov	d0, r8, r9
 80094d4:	f000 ff70 	bl	800a3b8 <scalbn>
 80094d8:	ec57 6b10 	vmov	r6, r7, d0
 80094dc:	2200      	movs	r2, #0
 80094de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80094e2:	ee10 0a10 	vmov	r0, s0
 80094e6:	4639      	mov	r1, r7
 80094e8:	f7f7 f840 	bl	800056c <__aeabi_dmul>
 80094ec:	ec41 0b10 	vmov	d0, r0, r1
 80094f0:	f000 fede 	bl	800a2b0 <floor>
 80094f4:	2200      	movs	r2, #0
 80094f6:	ec51 0b10 	vmov	r0, r1, d0
 80094fa:	4b7e      	ldr	r3, [pc, #504]	; (80096f4 <__kernel_rem_pio2+0x32c>)
 80094fc:	f7f7 f836 	bl	800056c <__aeabi_dmul>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	4630      	mov	r0, r6
 8009506:	4639      	mov	r1, r7
 8009508:	f7f6 fe78 	bl	80001fc <__aeabi_dsub>
 800950c:	460f      	mov	r7, r1
 800950e:	4606      	mov	r6, r0
 8009510:	f7f7 fadc 	bl	8000acc <__aeabi_d2iz>
 8009514:	9006      	str	r0, [sp, #24]
 8009516:	f7f6 ffbf 	bl	8000498 <__aeabi_i2d>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	4630      	mov	r0, r6
 8009520:	4639      	mov	r1, r7
 8009522:	f7f6 fe6b 	bl	80001fc <__aeabi_dsub>
 8009526:	f1ba 0f00 	cmp.w	sl, #0
 800952a:	4606      	mov	r6, r0
 800952c:	460f      	mov	r7, r1
 800952e:	dd6c      	ble.n	800960a <__kernel_rem_pio2+0x242>
 8009530:	1e62      	subs	r2, r4, #1
 8009532:	ab0e      	add	r3, sp, #56	; 0x38
 8009534:	f1ca 0118 	rsb	r1, sl, #24
 8009538:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800953c:	9d06      	ldr	r5, [sp, #24]
 800953e:	fa40 f301 	asr.w	r3, r0, r1
 8009542:	441d      	add	r5, r3
 8009544:	408b      	lsls	r3, r1
 8009546:	1ac0      	subs	r0, r0, r3
 8009548:	ab0e      	add	r3, sp, #56	; 0x38
 800954a:	9506      	str	r5, [sp, #24]
 800954c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009550:	f1ca 0317 	rsb	r3, sl, #23
 8009554:	fa40 f303 	asr.w	r3, r0, r3
 8009558:	9302      	str	r3, [sp, #8]
 800955a:	9b02      	ldr	r3, [sp, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	dd62      	ble.n	8009626 <__kernel_rem_pio2+0x25e>
 8009560:	9b06      	ldr	r3, [sp, #24]
 8009562:	2200      	movs	r2, #0
 8009564:	3301      	adds	r3, #1
 8009566:	9306      	str	r3, [sp, #24]
 8009568:	4615      	mov	r5, r2
 800956a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800956e:	4294      	cmp	r4, r2
 8009570:	f300 8095 	bgt.w	800969e <__kernel_rem_pio2+0x2d6>
 8009574:	f1ba 0f00 	cmp.w	sl, #0
 8009578:	dd07      	ble.n	800958a <__kernel_rem_pio2+0x1c2>
 800957a:	f1ba 0f01 	cmp.w	sl, #1
 800957e:	f000 80a2 	beq.w	80096c6 <__kernel_rem_pio2+0x2fe>
 8009582:	f1ba 0f02 	cmp.w	sl, #2
 8009586:	f000 80c1 	beq.w	800970c <__kernel_rem_pio2+0x344>
 800958a:	9b02      	ldr	r3, [sp, #8]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d14a      	bne.n	8009626 <__kernel_rem_pio2+0x25e>
 8009590:	4632      	mov	r2, r6
 8009592:	463b      	mov	r3, r7
 8009594:	2000      	movs	r0, #0
 8009596:	4958      	ldr	r1, [pc, #352]	; (80096f8 <__kernel_rem_pio2+0x330>)
 8009598:	f7f6 fe30 	bl	80001fc <__aeabi_dsub>
 800959c:	4606      	mov	r6, r0
 800959e:	460f      	mov	r7, r1
 80095a0:	2d00      	cmp	r5, #0
 80095a2:	d040      	beq.n	8009626 <__kernel_rem_pio2+0x25e>
 80095a4:	4650      	mov	r0, sl
 80095a6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80096e8 <__kernel_rem_pio2+0x320>
 80095aa:	f000 ff05 	bl	800a3b8 <scalbn>
 80095ae:	4630      	mov	r0, r6
 80095b0:	4639      	mov	r1, r7
 80095b2:	ec53 2b10 	vmov	r2, r3, d0
 80095b6:	f7f6 fe21 	bl	80001fc <__aeabi_dsub>
 80095ba:	4606      	mov	r6, r0
 80095bc:	460f      	mov	r7, r1
 80095be:	e032      	b.n	8009626 <__kernel_rem_pio2+0x25e>
 80095c0:	2200      	movs	r2, #0
 80095c2:	4b4e      	ldr	r3, [pc, #312]	; (80096fc <__kernel_rem_pio2+0x334>)
 80095c4:	4640      	mov	r0, r8
 80095c6:	4649      	mov	r1, r9
 80095c8:	f7f6 ffd0 	bl	800056c <__aeabi_dmul>
 80095cc:	f7f7 fa7e 	bl	8000acc <__aeabi_d2iz>
 80095d0:	f7f6 ff62 	bl	8000498 <__aeabi_i2d>
 80095d4:	2200      	movs	r2, #0
 80095d6:	4b4a      	ldr	r3, [pc, #296]	; (8009700 <__kernel_rem_pio2+0x338>)
 80095d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095dc:	f7f6 ffc6 	bl	800056c <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4640      	mov	r0, r8
 80095e6:	4649      	mov	r1, r9
 80095e8:	f7f6 fe08 	bl	80001fc <__aeabi_dsub>
 80095ec:	f7f7 fa6e 	bl	8000acc <__aeabi_d2iz>
 80095f0:	ab0e      	add	r3, sp, #56	; 0x38
 80095f2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80095f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80095fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095fe:	f7f6 fdff 	bl	8000200 <__adddf3>
 8009602:	3501      	adds	r5, #1
 8009604:	4680      	mov	r8, r0
 8009606:	4689      	mov	r9, r1
 8009608:	e75e      	b.n	80094c8 <__kernel_rem_pio2+0x100>
 800960a:	d105      	bne.n	8009618 <__kernel_rem_pio2+0x250>
 800960c:	1e63      	subs	r3, r4, #1
 800960e:	aa0e      	add	r2, sp, #56	; 0x38
 8009610:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009614:	15c3      	asrs	r3, r0, #23
 8009616:	e79f      	b.n	8009558 <__kernel_rem_pio2+0x190>
 8009618:	2200      	movs	r2, #0
 800961a:	4b3a      	ldr	r3, [pc, #232]	; (8009704 <__kernel_rem_pio2+0x33c>)
 800961c:	f7f7 fa2c 	bl	8000a78 <__aeabi_dcmpge>
 8009620:	2800      	cmp	r0, #0
 8009622:	d139      	bne.n	8009698 <__kernel_rem_pio2+0x2d0>
 8009624:	9002      	str	r0, [sp, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	2300      	movs	r3, #0
 800962a:	4630      	mov	r0, r6
 800962c:	4639      	mov	r1, r7
 800962e:	f7f7 fa05 	bl	8000a3c <__aeabi_dcmpeq>
 8009632:	2800      	cmp	r0, #0
 8009634:	f000 80c7 	beq.w	80097c6 <__kernel_rem_pio2+0x3fe>
 8009638:	1e65      	subs	r5, r4, #1
 800963a:	462b      	mov	r3, r5
 800963c:	2200      	movs	r2, #0
 800963e:	9904      	ldr	r1, [sp, #16]
 8009640:	428b      	cmp	r3, r1
 8009642:	da6a      	bge.n	800971a <__kernel_rem_pio2+0x352>
 8009644:	2a00      	cmp	r2, #0
 8009646:	f000 8088 	beq.w	800975a <__kernel_rem_pio2+0x392>
 800964a:	ab0e      	add	r3, sp, #56	; 0x38
 800964c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009650:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 80b4 	beq.w	80097c2 <__kernel_rem_pio2+0x3fa>
 800965a:	4650      	mov	r0, sl
 800965c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80096e8 <__kernel_rem_pio2+0x320>
 8009660:	f000 feaa 	bl	800a3b8 <scalbn>
 8009664:	00ec      	lsls	r4, r5, #3
 8009666:	ab72      	add	r3, sp, #456	; 0x1c8
 8009668:	191e      	adds	r6, r3, r4
 800966a:	ec59 8b10 	vmov	r8, r9, d0
 800966e:	f106 0a08 	add.w	sl, r6, #8
 8009672:	462f      	mov	r7, r5
 8009674:	2f00      	cmp	r7, #0
 8009676:	f280 80df 	bge.w	8009838 <__kernel_rem_pio2+0x470>
 800967a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80096e0 <__kernel_rem_pio2+0x318>
 800967e:	f04f 0a00 	mov.w	sl, #0
 8009682:	eba5 030a 	sub.w	r3, r5, sl
 8009686:	2b00      	cmp	r3, #0
 8009688:	f2c0 810a 	blt.w	80098a0 <__kernel_rem_pio2+0x4d8>
 800968c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009708 <__kernel_rem_pio2+0x340>
 8009690:	ec59 8b18 	vmov	r8, r9, d8
 8009694:	2700      	movs	r7, #0
 8009696:	e0f5      	b.n	8009884 <__kernel_rem_pio2+0x4bc>
 8009698:	2302      	movs	r3, #2
 800969a:	9302      	str	r3, [sp, #8]
 800969c:	e760      	b.n	8009560 <__kernel_rem_pio2+0x198>
 800969e:	ab0e      	add	r3, sp, #56	; 0x38
 80096a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a4:	b94d      	cbnz	r5, 80096ba <__kernel_rem_pio2+0x2f2>
 80096a6:	b12b      	cbz	r3, 80096b4 <__kernel_rem_pio2+0x2ec>
 80096a8:	a80e      	add	r0, sp, #56	; 0x38
 80096aa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80096ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80096b2:	2301      	movs	r3, #1
 80096b4:	3201      	adds	r2, #1
 80096b6:	461d      	mov	r5, r3
 80096b8:	e759      	b.n	800956e <__kernel_rem_pio2+0x1a6>
 80096ba:	a80e      	add	r0, sp, #56	; 0x38
 80096bc:	1acb      	subs	r3, r1, r3
 80096be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80096c2:	462b      	mov	r3, r5
 80096c4:	e7f6      	b.n	80096b4 <__kernel_rem_pio2+0x2ec>
 80096c6:	1e62      	subs	r2, r4, #1
 80096c8:	ab0e      	add	r3, sp, #56	; 0x38
 80096ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80096d2:	a90e      	add	r1, sp, #56	; 0x38
 80096d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80096d8:	e757      	b.n	800958a <__kernel_rem_pio2+0x1c2>
 80096da:	bf00      	nop
 80096dc:	f3af 8000 	nop.w
	...
 80096ec:	3ff00000 	.word	0x3ff00000
 80096f0:	0800d920 	.word	0x0800d920
 80096f4:	40200000 	.word	0x40200000
 80096f8:	3ff00000 	.word	0x3ff00000
 80096fc:	3e700000 	.word	0x3e700000
 8009700:	41700000 	.word	0x41700000
 8009704:	3fe00000 	.word	0x3fe00000
 8009708:	0800d8e0 	.word	0x0800d8e0
 800970c:	1e62      	subs	r2, r4, #1
 800970e:	ab0e      	add	r3, sp, #56	; 0x38
 8009710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009714:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009718:	e7db      	b.n	80096d2 <__kernel_rem_pio2+0x30a>
 800971a:	a90e      	add	r1, sp, #56	; 0x38
 800971c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009720:	3b01      	subs	r3, #1
 8009722:	430a      	orrs	r2, r1
 8009724:	e78b      	b.n	800963e <__kernel_rem_pio2+0x276>
 8009726:	3301      	adds	r3, #1
 8009728:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800972c:	2900      	cmp	r1, #0
 800972e:	d0fa      	beq.n	8009726 <__kernel_rem_pio2+0x35e>
 8009730:	9a08      	ldr	r2, [sp, #32]
 8009732:	4422      	add	r2, r4
 8009734:	00d2      	lsls	r2, r2, #3
 8009736:	a922      	add	r1, sp, #136	; 0x88
 8009738:	18e3      	adds	r3, r4, r3
 800973a:	9206      	str	r2, [sp, #24]
 800973c:	440a      	add	r2, r1
 800973e:	9302      	str	r3, [sp, #8]
 8009740:	f10b 0108 	add.w	r1, fp, #8
 8009744:	f102 0308 	add.w	r3, r2, #8
 8009748:	1c66      	adds	r6, r4, #1
 800974a:	910a      	str	r1, [sp, #40]	; 0x28
 800974c:	2500      	movs	r5, #0
 800974e:	930d      	str	r3, [sp, #52]	; 0x34
 8009750:	9b02      	ldr	r3, [sp, #8]
 8009752:	42b3      	cmp	r3, r6
 8009754:	da04      	bge.n	8009760 <__kernel_rem_pio2+0x398>
 8009756:	461c      	mov	r4, r3
 8009758:	e6a6      	b.n	80094a8 <__kernel_rem_pio2+0xe0>
 800975a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800975c:	2301      	movs	r3, #1
 800975e:	e7e3      	b.n	8009728 <__kernel_rem_pio2+0x360>
 8009760:	9b06      	ldr	r3, [sp, #24]
 8009762:	18ef      	adds	r7, r5, r3
 8009764:	ab22      	add	r3, sp, #136	; 0x88
 8009766:	441f      	add	r7, r3
 8009768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800976a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800976e:	f7f6 fe93 	bl	8000498 <__aeabi_i2d>
 8009772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009774:	461c      	mov	r4, r3
 8009776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009778:	e9c7 0100 	strd	r0, r1, [r7]
 800977c:	eb03 0b05 	add.w	fp, r3, r5
 8009780:	2700      	movs	r7, #0
 8009782:	f04f 0800 	mov.w	r8, #0
 8009786:	f04f 0900 	mov.w	r9, #0
 800978a:	9b07      	ldr	r3, [sp, #28]
 800978c:	429f      	cmp	r7, r3
 800978e:	dd08      	ble.n	80097a2 <__kernel_rem_pio2+0x3da>
 8009790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009792:	aa72      	add	r2, sp, #456	; 0x1c8
 8009794:	18eb      	adds	r3, r5, r3
 8009796:	4413      	add	r3, r2
 8009798:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800979c:	3601      	adds	r6, #1
 800979e:	3508      	adds	r5, #8
 80097a0:	e7d6      	b.n	8009750 <__kernel_rem_pio2+0x388>
 80097a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80097a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80097aa:	f7f6 fedf 	bl	800056c <__aeabi_dmul>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4640      	mov	r0, r8
 80097b4:	4649      	mov	r1, r9
 80097b6:	f7f6 fd23 	bl	8000200 <__adddf3>
 80097ba:	3701      	adds	r7, #1
 80097bc:	4680      	mov	r8, r0
 80097be:	4689      	mov	r9, r1
 80097c0:	e7e3      	b.n	800978a <__kernel_rem_pio2+0x3c2>
 80097c2:	3d01      	subs	r5, #1
 80097c4:	e741      	b.n	800964a <__kernel_rem_pio2+0x282>
 80097c6:	f1ca 0000 	rsb	r0, sl, #0
 80097ca:	ec47 6b10 	vmov	d0, r6, r7
 80097ce:	f000 fdf3 	bl	800a3b8 <scalbn>
 80097d2:	ec57 6b10 	vmov	r6, r7, d0
 80097d6:	2200      	movs	r2, #0
 80097d8:	4b99      	ldr	r3, [pc, #612]	; (8009a40 <__kernel_rem_pio2+0x678>)
 80097da:	ee10 0a10 	vmov	r0, s0
 80097de:	4639      	mov	r1, r7
 80097e0:	f7f7 f94a 	bl	8000a78 <__aeabi_dcmpge>
 80097e4:	b1f8      	cbz	r0, 8009826 <__kernel_rem_pio2+0x45e>
 80097e6:	2200      	movs	r2, #0
 80097e8:	4b96      	ldr	r3, [pc, #600]	; (8009a44 <__kernel_rem_pio2+0x67c>)
 80097ea:	4630      	mov	r0, r6
 80097ec:	4639      	mov	r1, r7
 80097ee:	f7f6 febd 	bl	800056c <__aeabi_dmul>
 80097f2:	f7f7 f96b 	bl	8000acc <__aeabi_d2iz>
 80097f6:	4680      	mov	r8, r0
 80097f8:	f7f6 fe4e 	bl	8000498 <__aeabi_i2d>
 80097fc:	2200      	movs	r2, #0
 80097fe:	4b90      	ldr	r3, [pc, #576]	; (8009a40 <__kernel_rem_pio2+0x678>)
 8009800:	f7f6 feb4 	bl	800056c <__aeabi_dmul>
 8009804:	460b      	mov	r3, r1
 8009806:	4602      	mov	r2, r0
 8009808:	4639      	mov	r1, r7
 800980a:	4630      	mov	r0, r6
 800980c:	f7f6 fcf6 	bl	80001fc <__aeabi_dsub>
 8009810:	f7f7 f95c 	bl	8000acc <__aeabi_d2iz>
 8009814:	1c65      	adds	r5, r4, #1
 8009816:	ab0e      	add	r3, sp, #56	; 0x38
 8009818:	f10a 0a18 	add.w	sl, sl, #24
 800981c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009820:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009824:	e719      	b.n	800965a <__kernel_rem_pio2+0x292>
 8009826:	4630      	mov	r0, r6
 8009828:	4639      	mov	r1, r7
 800982a:	f7f7 f94f 	bl	8000acc <__aeabi_d2iz>
 800982e:	ab0e      	add	r3, sp, #56	; 0x38
 8009830:	4625      	mov	r5, r4
 8009832:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009836:	e710      	b.n	800965a <__kernel_rem_pio2+0x292>
 8009838:	ab0e      	add	r3, sp, #56	; 0x38
 800983a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800983e:	f7f6 fe2b 	bl	8000498 <__aeabi_i2d>
 8009842:	4642      	mov	r2, r8
 8009844:	464b      	mov	r3, r9
 8009846:	f7f6 fe91 	bl	800056c <__aeabi_dmul>
 800984a:	2200      	movs	r2, #0
 800984c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009850:	4b7c      	ldr	r3, [pc, #496]	; (8009a44 <__kernel_rem_pio2+0x67c>)
 8009852:	4640      	mov	r0, r8
 8009854:	4649      	mov	r1, r9
 8009856:	f7f6 fe89 	bl	800056c <__aeabi_dmul>
 800985a:	3f01      	subs	r7, #1
 800985c:	4680      	mov	r8, r0
 800985e:	4689      	mov	r9, r1
 8009860:	e708      	b.n	8009674 <__kernel_rem_pio2+0x2ac>
 8009862:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8009866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800986e:	f7f6 fe7d 	bl	800056c <__aeabi_dmul>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4640      	mov	r0, r8
 8009878:	4649      	mov	r1, r9
 800987a:	f7f6 fcc1 	bl	8000200 <__adddf3>
 800987e:	3701      	adds	r7, #1
 8009880:	4680      	mov	r8, r0
 8009882:	4689      	mov	r9, r1
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	429f      	cmp	r7, r3
 8009888:	dc01      	bgt.n	800988e <__kernel_rem_pio2+0x4c6>
 800988a:	45ba      	cmp	sl, r7
 800988c:	dae9      	bge.n	8009862 <__kernel_rem_pio2+0x49a>
 800988e:	ab4a      	add	r3, sp, #296	; 0x128
 8009890:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009894:	e9c3 8900 	strd	r8, r9, [r3]
 8009898:	f10a 0a01 	add.w	sl, sl, #1
 800989c:	3e08      	subs	r6, #8
 800989e:	e6f0      	b.n	8009682 <__kernel_rem_pio2+0x2ba>
 80098a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d85b      	bhi.n	800995e <__kernel_rem_pio2+0x596>
 80098a6:	e8df f003 	tbb	[pc, r3]
 80098aa:	264a      	.short	0x264a
 80098ac:	0226      	.short	0x0226
 80098ae:	ab9a      	add	r3, sp, #616	; 0x268
 80098b0:	441c      	add	r4, r3
 80098b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80098b6:	46a2      	mov	sl, r4
 80098b8:	46ab      	mov	fp, r5
 80098ba:	f1bb 0f00 	cmp.w	fp, #0
 80098be:	dc6c      	bgt.n	800999a <__kernel_rem_pio2+0x5d2>
 80098c0:	46a2      	mov	sl, r4
 80098c2:	46ab      	mov	fp, r5
 80098c4:	f1bb 0f01 	cmp.w	fp, #1
 80098c8:	f300 8086 	bgt.w	80099d8 <__kernel_rem_pio2+0x610>
 80098cc:	2000      	movs	r0, #0
 80098ce:	2100      	movs	r1, #0
 80098d0:	2d01      	cmp	r5, #1
 80098d2:	f300 80a0 	bgt.w	8009a16 <__kernel_rem_pio2+0x64e>
 80098d6:	9b02      	ldr	r3, [sp, #8]
 80098d8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80098dc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f040 809e 	bne.w	8009a22 <__kernel_rem_pio2+0x65a>
 80098e6:	9b01      	ldr	r3, [sp, #4]
 80098e8:	e9c3 7800 	strd	r7, r8, [r3]
 80098ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80098f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80098f4:	e033      	b.n	800995e <__kernel_rem_pio2+0x596>
 80098f6:	3408      	adds	r4, #8
 80098f8:	ab4a      	add	r3, sp, #296	; 0x128
 80098fa:	441c      	add	r4, r3
 80098fc:	462e      	mov	r6, r5
 80098fe:	2000      	movs	r0, #0
 8009900:	2100      	movs	r1, #0
 8009902:	2e00      	cmp	r6, #0
 8009904:	da3a      	bge.n	800997c <__kernel_rem_pio2+0x5b4>
 8009906:	9b02      	ldr	r3, [sp, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d03d      	beq.n	8009988 <__kernel_rem_pio2+0x5c0>
 800990c:	4602      	mov	r2, r0
 800990e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009912:	9c01      	ldr	r4, [sp, #4]
 8009914:	e9c4 2300 	strd	r2, r3, [r4]
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009920:	f7f6 fc6c 	bl	80001fc <__aeabi_dsub>
 8009924:	ae4c      	add	r6, sp, #304	; 0x130
 8009926:	2401      	movs	r4, #1
 8009928:	42a5      	cmp	r5, r4
 800992a:	da30      	bge.n	800998e <__kernel_rem_pio2+0x5c6>
 800992c:	9b02      	ldr	r3, [sp, #8]
 800992e:	b113      	cbz	r3, 8009936 <__kernel_rem_pio2+0x56e>
 8009930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009934:	4619      	mov	r1, r3
 8009936:	9b01      	ldr	r3, [sp, #4]
 8009938:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800993c:	e00f      	b.n	800995e <__kernel_rem_pio2+0x596>
 800993e:	ab9a      	add	r3, sp, #616	; 0x268
 8009940:	441c      	add	r4, r3
 8009942:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009946:	2000      	movs	r0, #0
 8009948:	2100      	movs	r1, #0
 800994a:	2d00      	cmp	r5, #0
 800994c:	da10      	bge.n	8009970 <__kernel_rem_pio2+0x5a8>
 800994e:	9b02      	ldr	r3, [sp, #8]
 8009950:	b113      	cbz	r3, 8009958 <__kernel_rem_pio2+0x590>
 8009952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009956:	4619      	mov	r1, r3
 8009958:	9b01      	ldr	r3, [sp, #4]
 800995a:	e9c3 0100 	strd	r0, r1, [r3]
 800995e:	9b06      	ldr	r3, [sp, #24]
 8009960:	f003 0007 	and.w	r0, r3, #7
 8009964:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009968:	ecbd 8b02 	vpop	{d8}
 800996c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009970:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009974:	f7f6 fc44 	bl	8000200 <__adddf3>
 8009978:	3d01      	subs	r5, #1
 800997a:	e7e6      	b.n	800994a <__kernel_rem_pio2+0x582>
 800997c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009980:	f7f6 fc3e 	bl	8000200 <__adddf3>
 8009984:	3e01      	subs	r6, #1
 8009986:	e7bc      	b.n	8009902 <__kernel_rem_pio2+0x53a>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	e7c1      	b.n	8009912 <__kernel_rem_pio2+0x54a>
 800998e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009992:	f7f6 fc35 	bl	8000200 <__adddf3>
 8009996:	3401      	adds	r4, #1
 8009998:	e7c6      	b.n	8009928 <__kernel_rem_pio2+0x560>
 800999a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800999e:	ed3a 7b02 	vldmdb	sl!, {d7}
 80099a2:	4640      	mov	r0, r8
 80099a4:	ec53 2b17 	vmov	r2, r3, d7
 80099a8:	4649      	mov	r1, r9
 80099aa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80099ae:	f7f6 fc27 	bl	8000200 <__adddf3>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	4640      	mov	r0, r8
 80099bc:	4649      	mov	r1, r9
 80099be:	f7f6 fc1d 	bl	80001fc <__aeabi_dsub>
 80099c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099c6:	f7f6 fc1b 	bl	8000200 <__adddf3>
 80099ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099ce:	e9ca 0100 	strd	r0, r1, [sl]
 80099d2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80099d6:	e770      	b.n	80098ba <__kernel_rem_pio2+0x4f2>
 80099d8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80099dc:	ed3a 7b02 	vldmdb	sl!, {d7}
 80099e0:	4630      	mov	r0, r6
 80099e2:	ec53 2b17 	vmov	r2, r3, d7
 80099e6:	4639      	mov	r1, r7
 80099e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80099ec:	f7f6 fc08 	bl	8000200 <__adddf3>
 80099f0:	4602      	mov	r2, r0
 80099f2:	460b      	mov	r3, r1
 80099f4:	4680      	mov	r8, r0
 80099f6:	4689      	mov	r9, r1
 80099f8:	4630      	mov	r0, r6
 80099fa:	4639      	mov	r1, r7
 80099fc:	f7f6 fbfe 	bl	80001fc <__aeabi_dsub>
 8009a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a04:	f7f6 fbfc 	bl	8000200 <__adddf3>
 8009a08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a0c:	e9ca 0100 	strd	r0, r1, [sl]
 8009a10:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8009a14:	e756      	b.n	80098c4 <__kernel_rem_pio2+0x4fc>
 8009a16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009a1a:	f7f6 fbf1 	bl	8000200 <__adddf3>
 8009a1e:	3d01      	subs	r5, #1
 8009a20:	e756      	b.n	80098d0 <__kernel_rem_pio2+0x508>
 8009a22:	9b01      	ldr	r3, [sp, #4]
 8009a24:	9a01      	ldr	r2, [sp, #4]
 8009a26:	601f      	str	r7, [r3, #0]
 8009a28:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009a2c:	605c      	str	r4, [r3, #4]
 8009a2e:	609d      	str	r5, [r3, #8]
 8009a30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009a34:	60d3      	str	r3, [r2, #12]
 8009a36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a3a:	6110      	str	r0, [r2, #16]
 8009a3c:	6153      	str	r3, [r2, #20]
 8009a3e:	e78e      	b.n	800995e <__kernel_rem_pio2+0x596>
 8009a40:	41700000 	.word	0x41700000
 8009a44:	3e700000 	.word	0x3e700000

08009a48 <__kernel_sin>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	ec55 4b10 	vmov	r4, r5, d0
 8009a50:	b085      	sub	sp, #20
 8009a52:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009a56:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009a5a:	ed8d 1b00 	vstr	d1, [sp]
 8009a5e:	9002      	str	r0, [sp, #8]
 8009a60:	da06      	bge.n	8009a70 <__kernel_sin+0x28>
 8009a62:	ee10 0a10 	vmov	r0, s0
 8009a66:	4629      	mov	r1, r5
 8009a68:	f7f7 f830 	bl	8000acc <__aeabi_d2iz>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d051      	beq.n	8009b14 <__kernel_sin+0xcc>
 8009a70:	4622      	mov	r2, r4
 8009a72:	462b      	mov	r3, r5
 8009a74:	4620      	mov	r0, r4
 8009a76:	4629      	mov	r1, r5
 8009a78:	f7f6 fd78 	bl	800056c <__aeabi_dmul>
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	468b      	mov	fp, r1
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4620      	mov	r0, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	f7f6 fd70 	bl	800056c <__aeabi_dmul>
 8009a8c:	a341      	add	r3, pc, #260	; (adr r3, 8009b94 <__kernel_sin+0x14c>)
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	4680      	mov	r8, r0
 8009a94:	4689      	mov	r9, r1
 8009a96:	4650      	mov	r0, sl
 8009a98:	4659      	mov	r1, fp
 8009a9a:	f7f6 fd67 	bl	800056c <__aeabi_dmul>
 8009a9e:	a33f      	add	r3, pc, #252	; (adr r3, 8009b9c <__kernel_sin+0x154>)
 8009aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa4:	f7f6 fbaa 	bl	80001fc <__aeabi_dsub>
 8009aa8:	4652      	mov	r2, sl
 8009aaa:	465b      	mov	r3, fp
 8009aac:	f7f6 fd5e 	bl	800056c <__aeabi_dmul>
 8009ab0:	a33c      	add	r3, pc, #240	; (adr r3, 8009ba4 <__kernel_sin+0x15c>)
 8009ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab6:	f7f6 fba3 	bl	8000200 <__adddf3>
 8009aba:	4652      	mov	r2, sl
 8009abc:	465b      	mov	r3, fp
 8009abe:	f7f6 fd55 	bl	800056c <__aeabi_dmul>
 8009ac2:	a33a      	add	r3, pc, #232	; (adr r3, 8009bac <__kernel_sin+0x164>)
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	f7f6 fb98 	bl	80001fc <__aeabi_dsub>
 8009acc:	4652      	mov	r2, sl
 8009ace:	465b      	mov	r3, fp
 8009ad0:	f7f6 fd4c 	bl	800056c <__aeabi_dmul>
 8009ad4:	a337      	add	r3, pc, #220	; (adr r3, 8009bb4 <__kernel_sin+0x16c>)
 8009ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ada:	f7f6 fb91 	bl	8000200 <__adddf3>
 8009ade:	9b02      	ldr	r3, [sp, #8]
 8009ae0:	4606      	mov	r6, r0
 8009ae2:	460f      	mov	r7, r1
 8009ae4:	b9db      	cbnz	r3, 8009b1e <__kernel_sin+0xd6>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4650      	mov	r0, sl
 8009aec:	4659      	mov	r1, fp
 8009aee:	f7f6 fd3d 	bl	800056c <__aeabi_dmul>
 8009af2:	a325      	add	r3, pc, #148	; (adr r3, 8009b88 <__kernel_sin+0x140>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f7f6 fb80 	bl	80001fc <__aeabi_dsub>
 8009afc:	4642      	mov	r2, r8
 8009afe:	464b      	mov	r3, r9
 8009b00:	f7f6 fd34 	bl	800056c <__aeabi_dmul>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4620      	mov	r0, r4
 8009b0a:	4629      	mov	r1, r5
 8009b0c:	f7f6 fb78 	bl	8000200 <__adddf3>
 8009b10:	4604      	mov	r4, r0
 8009b12:	460d      	mov	r5, r1
 8009b14:	ec45 4b10 	vmov	d0, r4, r5
 8009b18:	b005      	add	sp, #20
 8009b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1e:	2200      	movs	r2, #0
 8009b20:	4b1b      	ldr	r3, [pc, #108]	; (8009b90 <__kernel_sin+0x148>)
 8009b22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b26:	f7f6 fd21 	bl	800056c <__aeabi_dmul>
 8009b2a:	4632      	mov	r2, r6
 8009b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b30:	463b      	mov	r3, r7
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f6 fd19 	bl	800056c <__aeabi_dmul>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b42:	f7f6 fb5b 	bl	80001fc <__aeabi_dsub>
 8009b46:	4652      	mov	r2, sl
 8009b48:	465b      	mov	r3, fp
 8009b4a:	f7f6 fd0f 	bl	800056c <__aeabi_dmul>
 8009b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b52:	f7f6 fb53 	bl	80001fc <__aeabi_dsub>
 8009b56:	a30c      	add	r3, pc, #48	; (adr r3, 8009b88 <__kernel_sin+0x140>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	460f      	mov	r7, r1
 8009b60:	4640      	mov	r0, r8
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7f6 fd02 	bl	800056c <__aeabi_dmul>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	4639      	mov	r1, r7
 8009b70:	f7f6 fb46 	bl	8000200 <__adddf3>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4620      	mov	r0, r4
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f7f6 fb3e 	bl	80001fc <__aeabi_dsub>
 8009b80:	e7c6      	b.n	8009b10 <__kernel_sin+0xc8>
 8009b82:	bf00      	nop
 8009b84:	f3af 8000 	nop.w
 8009b88:	55555549 	.word	0x55555549
 8009b8c:	3fc55555 	.word	0x3fc55555
 8009b90:	3fe00000 	.word	0x3fe00000
 8009b94:	5acfd57c 	.word	0x5acfd57c
 8009b98:	3de5d93a 	.word	0x3de5d93a
 8009b9c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009ba0:	3e5ae5e6 	.word	0x3e5ae5e6
 8009ba4:	57b1fe7d 	.word	0x57b1fe7d
 8009ba8:	3ec71de3 	.word	0x3ec71de3
 8009bac:	19c161d5 	.word	0x19c161d5
 8009bb0:	3f2a01a0 	.word	0x3f2a01a0
 8009bb4:	1110f8a6 	.word	0x1110f8a6
 8009bb8:	3f811111 	.word	0x3f811111
 8009bbc:	00000000 	.word	0x00000000

08009bc0 <__kernel_tan>:
 8009bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	ec5b ab10 	vmov	sl, fp, d0
 8009bc8:	4bbf      	ldr	r3, [pc, #764]	; (8009ec8 <__kernel_tan+0x308>)
 8009bca:	b089      	sub	sp, #36	; 0x24
 8009bcc:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009bd0:	429f      	cmp	r7, r3
 8009bd2:	ec59 8b11 	vmov	r8, r9, d1
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	f8cd b008 	str.w	fp, [sp, #8]
 8009bdc:	dc22      	bgt.n	8009c24 <__kernel_tan+0x64>
 8009bde:	ee10 0a10 	vmov	r0, s0
 8009be2:	4659      	mov	r1, fp
 8009be4:	f7f6 ff72 	bl	8000acc <__aeabi_d2iz>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d145      	bne.n	8009c78 <__kernel_tan+0xb8>
 8009bec:	1c73      	adds	r3, r6, #1
 8009bee:	4652      	mov	r2, sl
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	433b      	orrs	r3, r7
 8009bf4:	d110      	bne.n	8009c18 <__kernel_tan+0x58>
 8009bf6:	ec4b ab10 	vmov	d0, sl, fp
 8009bfa:	f000 fb4d 	bl	800a298 <fabs>
 8009bfe:	49b3      	ldr	r1, [pc, #716]	; (8009ecc <__kernel_tan+0x30c>)
 8009c00:	ec53 2b10 	vmov	r2, r3, d0
 8009c04:	2000      	movs	r0, #0
 8009c06:	f7f6 fddb 	bl	80007c0 <__aeabi_ddiv>
 8009c0a:	4682      	mov	sl, r0
 8009c0c:	468b      	mov	fp, r1
 8009c0e:	ec4b ab10 	vmov	d0, sl, fp
 8009c12:	b009      	add	sp, #36	; 0x24
 8009c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c18:	2e01      	cmp	r6, #1
 8009c1a:	d0f8      	beq.n	8009c0e <__kernel_tan+0x4e>
 8009c1c:	465b      	mov	r3, fp
 8009c1e:	2000      	movs	r0, #0
 8009c20:	49ab      	ldr	r1, [pc, #684]	; (8009ed0 <__kernel_tan+0x310>)
 8009c22:	e7f0      	b.n	8009c06 <__kernel_tan+0x46>
 8009c24:	4bab      	ldr	r3, [pc, #684]	; (8009ed4 <__kernel_tan+0x314>)
 8009c26:	429f      	cmp	r7, r3
 8009c28:	dd26      	ble.n	8009c78 <__kernel_tan+0xb8>
 8009c2a:	9b02      	ldr	r3, [sp, #8]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	da09      	bge.n	8009c44 <__kernel_tan+0x84>
 8009c30:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c34:	469b      	mov	fp, r3
 8009c36:	ee10 aa10 	vmov	sl, s0
 8009c3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009c3e:	ee11 8a10 	vmov	r8, s2
 8009c42:	4699      	mov	r9, r3
 8009c44:	4652      	mov	r2, sl
 8009c46:	465b      	mov	r3, fp
 8009c48:	a181      	add	r1, pc, #516	; (adr r1, 8009e50 <__kernel_tan+0x290>)
 8009c4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c4e:	f7f6 fad5 	bl	80001fc <__aeabi_dsub>
 8009c52:	4642      	mov	r2, r8
 8009c54:	464b      	mov	r3, r9
 8009c56:	4604      	mov	r4, r0
 8009c58:	460d      	mov	r5, r1
 8009c5a:	a17f      	add	r1, pc, #508	; (adr r1, 8009e58 <__kernel_tan+0x298>)
 8009c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c60:	f7f6 facc 	bl	80001fc <__aeabi_dsub>
 8009c64:	4622      	mov	r2, r4
 8009c66:	462b      	mov	r3, r5
 8009c68:	f7f6 faca 	bl	8000200 <__adddf3>
 8009c6c:	f04f 0800 	mov.w	r8, #0
 8009c70:	4682      	mov	sl, r0
 8009c72:	468b      	mov	fp, r1
 8009c74:	f04f 0900 	mov.w	r9, #0
 8009c78:	4652      	mov	r2, sl
 8009c7a:	465b      	mov	r3, fp
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	4659      	mov	r1, fp
 8009c80:	f7f6 fc74 	bl	800056c <__aeabi_dmul>
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	e9cd 0100 	strd	r0, r1, [sp]
 8009c8c:	f7f6 fc6e 	bl	800056c <__aeabi_dmul>
 8009c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c94:	4604      	mov	r4, r0
 8009c96:	460d      	mov	r5, r1
 8009c98:	4650      	mov	r0, sl
 8009c9a:	4659      	mov	r1, fp
 8009c9c:	f7f6 fc66 	bl	800056c <__aeabi_dmul>
 8009ca0:	a36f      	add	r3, pc, #444	; (adr r3, 8009e60 <__kernel_tan+0x2a0>)
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009caa:	4620      	mov	r0, r4
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7f6 fc5d 	bl	800056c <__aeabi_dmul>
 8009cb2:	a36d      	add	r3, pc, #436	; (adr r3, 8009e68 <__kernel_tan+0x2a8>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 faa2 	bl	8000200 <__adddf3>
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	f7f6 fc54 	bl	800056c <__aeabi_dmul>
 8009cc4:	a36a      	add	r3, pc, #424	; (adr r3, 8009e70 <__kernel_tan+0x2b0>)
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	f7f6 fa99 	bl	8000200 <__adddf3>
 8009cce:	4622      	mov	r2, r4
 8009cd0:	462b      	mov	r3, r5
 8009cd2:	f7f6 fc4b 	bl	800056c <__aeabi_dmul>
 8009cd6:	a368      	add	r3, pc, #416	; (adr r3, 8009e78 <__kernel_tan+0x2b8>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	f7f6 fa90 	bl	8000200 <__adddf3>
 8009ce0:	4622      	mov	r2, r4
 8009ce2:	462b      	mov	r3, r5
 8009ce4:	f7f6 fc42 	bl	800056c <__aeabi_dmul>
 8009ce8:	a365      	add	r3, pc, #404	; (adr r3, 8009e80 <__kernel_tan+0x2c0>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 fa87 	bl	8000200 <__adddf3>
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	462b      	mov	r3, r5
 8009cf6:	f7f6 fc39 	bl	800056c <__aeabi_dmul>
 8009cfa:	a363      	add	r3, pc, #396	; (adr r3, 8009e88 <__kernel_tan+0x2c8>)
 8009cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d00:	f7f6 fa7e 	bl	8000200 <__adddf3>
 8009d04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d08:	f7f6 fc30 	bl	800056c <__aeabi_dmul>
 8009d0c:	a360      	add	r3, pc, #384	; (adr r3, 8009e90 <__kernel_tan+0x2d0>)
 8009d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d12:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d16:	4620      	mov	r0, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7f6 fc27 	bl	800056c <__aeabi_dmul>
 8009d1e:	a35e      	add	r3, pc, #376	; (adr r3, 8009e98 <__kernel_tan+0x2d8>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 fa6c 	bl	8000200 <__adddf3>
 8009d28:	4622      	mov	r2, r4
 8009d2a:	462b      	mov	r3, r5
 8009d2c:	f7f6 fc1e 	bl	800056c <__aeabi_dmul>
 8009d30:	a35b      	add	r3, pc, #364	; (adr r3, 8009ea0 <__kernel_tan+0x2e0>)
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f7f6 fa63 	bl	8000200 <__adddf3>
 8009d3a:	4622      	mov	r2, r4
 8009d3c:	462b      	mov	r3, r5
 8009d3e:	f7f6 fc15 	bl	800056c <__aeabi_dmul>
 8009d42:	a359      	add	r3, pc, #356	; (adr r3, 8009ea8 <__kernel_tan+0x2e8>)
 8009d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d48:	f7f6 fa5a 	bl	8000200 <__adddf3>
 8009d4c:	4622      	mov	r2, r4
 8009d4e:	462b      	mov	r3, r5
 8009d50:	f7f6 fc0c 	bl	800056c <__aeabi_dmul>
 8009d54:	a356      	add	r3, pc, #344	; (adr r3, 8009eb0 <__kernel_tan+0x2f0>)
 8009d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5a:	f7f6 fa51 	bl	8000200 <__adddf3>
 8009d5e:	4622      	mov	r2, r4
 8009d60:	462b      	mov	r3, r5
 8009d62:	f7f6 fc03 	bl	800056c <__aeabi_dmul>
 8009d66:	a354      	add	r3, pc, #336	; (adr r3, 8009eb8 <__kernel_tan+0x2f8>)
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	f7f6 fa48 	bl	8000200 <__adddf3>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d78:	f7f6 fa42 	bl	8000200 <__adddf3>
 8009d7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d80:	f7f6 fbf4 	bl	800056c <__aeabi_dmul>
 8009d84:	4642      	mov	r2, r8
 8009d86:	464b      	mov	r3, r9
 8009d88:	f7f6 fa3a 	bl	8000200 <__adddf3>
 8009d8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d90:	f7f6 fbec 	bl	800056c <__aeabi_dmul>
 8009d94:	4642      	mov	r2, r8
 8009d96:	464b      	mov	r3, r9
 8009d98:	f7f6 fa32 	bl	8000200 <__adddf3>
 8009d9c:	a348      	add	r3, pc, #288	; (adr r3, 8009ec0 <__kernel_tan+0x300>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	4604      	mov	r4, r0
 8009da4:	460d      	mov	r5, r1
 8009da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009daa:	f7f6 fbdf 	bl	800056c <__aeabi_dmul>
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	f7f6 fa25 	bl	8000200 <__adddf3>
 8009db6:	e9cd 0100 	strd	r0, r1, [sp]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	4659      	mov	r1, fp
 8009dc0:	4650      	mov	r0, sl
 8009dc2:	f7f6 fa1d 	bl	8000200 <__adddf3>
 8009dc6:	4b43      	ldr	r3, [pc, #268]	; (8009ed4 <__kernel_tan+0x314>)
 8009dc8:	429f      	cmp	r7, r3
 8009dca:	4604      	mov	r4, r0
 8009dcc:	460d      	mov	r5, r1
 8009dce:	f340 8083 	ble.w	8009ed8 <__kernel_tan+0x318>
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7f6 fb60 	bl	8000498 <__aeabi_i2d>
 8009dd8:	4622      	mov	r2, r4
 8009dda:	4680      	mov	r8, r0
 8009ddc:	4689      	mov	r9, r1
 8009dde:	462b      	mov	r3, r5
 8009de0:	4620      	mov	r0, r4
 8009de2:	4629      	mov	r1, r5
 8009de4:	f7f6 fbc2 	bl	800056c <__aeabi_dmul>
 8009de8:	4642      	mov	r2, r8
 8009dea:	4606      	mov	r6, r0
 8009dec:	460f      	mov	r7, r1
 8009dee:	464b      	mov	r3, r9
 8009df0:	4620      	mov	r0, r4
 8009df2:	4629      	mov	r1, r5
 8009df4:	f7f6 fa04 	bl	8000200 <__adddf3>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 fcde 	bl	80007c0 <__aeabi_ddiv>
 8009e04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e08:	f7f6 f9f8 	bl	80001fc <__aeabi_dsub>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4650      	mov	r0, sl
 8009e12:	4659      	mov	r1, fp
 8009e14:	f7f6 f9f2 	bl	80001fc <__aeabi_dsub>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	f7f6 f9f0 	bl	8000200 <__adddf3>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4640      	mov	r0, r8
 8009e26:	4649      	mov	r1, r9
 8009e28:	f7f6 f9e8 	bl	80001fc <__aeabi_dsub>
 8009e2c:	9b02      	ldr	r3, [sp, #8]
 8009e2e:	4604      	mov	r4, r0
 8009e30:	1798      	asrs	r0, r3, #30
 8009e32:	f000 0002 	and.w	r0, r0, #2
 8009e36:	f1c0 0001 	rsb	r0, r0, #1
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	f7f6 fb2c 	bl	8000498 <__aeabi_i2d>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4620      	mov	r0, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	f7f6 fb90 	bl	800056c <__aeabi_dmul>
 8009e4c:	e6dd      	b.n	8009c0a <__kernel_tan+0x4a>
 8009e4e:	bf00      	nop
 8009e50:	54442d18 	.word	0x54442d18
 8009e54:	3fe921fb 	.word	0x3fe921fb
 8009e58:	33145c07 	.word	0x33145c07
 8009e5c:	3c81a626 	.word	0x3c81a626
 8009e60:	74bf7ad4 	.word	0x74bf7ad4
 8009e64:	3efb2a70 	.word	0x3efb2a70
 8009e68:	32f0a7e9 	.word	0x32f0a7e9
 8009e6c:	3f12b80f 	.word	0x3f12b80f
 8009e70:	1a8d1068 	.word	0x1a8d1068
 8009e74:	3f3026f7 	.word	0x3f3026f7
 8009e78:	fee08315 	.word	0xfee08315
 8009e7c:	3f57dbc8 	.word	0x3f57dbc8
 8009e80:	e96e8493 	.word	0xe96e8493
 8009e84:	3f8226e3 	.word	0x3f8226e3
 8009e88:	1bb341fe 	.word	0x1bb341fe
 8009e8c:	3faba1ba 	.word	0x3faba1ba
 8009e90:	db605373 	.word	0xdb605373
 8009e94:	bef375cb 	.word	0xbef375cb
 8009e98:	a03792a6 	.word	0xa03792a6
 8009e9c:	3f147e88 	.word	0x3f147e88
 8009ea0:	f2f26501 	.word	0xf2f26501
 8009ea4:	3f4344d8 	.word	0x3f4344d8
 8009ea8:	c9560328 	.word	0xc9560328
 8009eac:	3f6d6d22 	.word	0x3f6d6d22
 8009eb0:	8406d637 	.word	0x8406d637
 8009eb4:	3f9664f4 	.word	0x3f9664f4
 8009eb8:	1110fe7a 	.word	0x1110fe7a
 8009ebc:	3fc11111 	.word	0x3fc11111
 8009ec0:	55555563 	.word	0x55555563
 8009ec4:	3fd55555 	.word	0x3fd55555
 8009ec8:	3e2fffff 	.word	0x3e2fffff
 8009ecc:	3ff00000 	.word	0x3ff00000
 8009ed0:	bff00000 	.word	0xbff00000
 8009ed4:	3fe59427 	.word	0x3fe59427
 8009ed8:	2e01      	cmp	r6, #1
 8009eda:	d036      	beq.n	8009f4a <__kernel_tan+0x38a>
 8009edc:	460f      	mov	r7, r1
 8009ede:	4602      	mov	r2, r0
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	491a      	ldr	r1, [pc, #104]	; (8009f50 <__kernel_tan+0x390>)
 8009ee6:	f7f6 fc6b 	bl	80007c0 <__aeabi_ddiv>
 8009eea:	2600      	movs	r6, #0
 8009eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ef0:	4652      	mov	r2, sl
 8009ef2:	465b      	mov	r3, fp
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	f7f6 f980 	bl	80001fc <__aeabi_dsub>
 8009efc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f08:	f7f6 f978 	bl	80001fc <__aeabi_dsub>
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	462b      	mov	r3, r5
 8009f10:	f7f6 fb2c 	bl	800056c <__aeabi_dmul>
 8009f14:	4632      	mov	r2, r6
 8009f16:	4682      	mov	sl, r0
 8009f18:	468b      	mov	fp, r1
 8009f1a:	462b      	mov	r3, r5
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	4639      	mov	r1, r7
 8009f20:	f7f6 fb24 	bl	800056c <__aeabi_dmul>
 8009f24:	2200      	movs	r2, #0
 8009f26:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <__kernel_tan+0x394>)
 8009f28:	f7f6 f96a 	bl	8000200 <__adddf3>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4650      	mov	r0, sl
 8009f32:	4659      	mov	r1, fp
 8009f34:	f7f6 f964 	bl	8000200 <__adddf3>
 8009f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f3c:	f7f6 fb16 	bl	800056c <__aeabi_dmul>
 8009f40:	4632      	mov	r2, r6
 8009f42:	462b      	mov	r3, r5
 8009f44:	f7f6 f95c 	bl	8000200 <__adddf3>
 8009f48:	e65f      	b.n	8009c0a <__kernel_tan+0x4a>
 8009f4a:	4682      	mov	sl, r0
 8009f4c:	468b      	mov	fp, r1
 8009f4e:	e65e      	b.n	8009c0e <__kernel_tan+0x4e>
 8009f50:	bff00000 	.word	0xbff00000
 8009f54:	3ff00000 	.word	0x3ff00000

08009f58 <atan>:
 8009f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	ec55 4b10 	vmov	r4, r5, d0
 8009f60:	4bc3      	ldr	r3, [pc, #780]	; (800a270 <atan+0x318>)
 8009f62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f66:	429e      	cmp	r6, r3
 8009f68:	46ab      	mov	fp, r5
 8009f6a:	dd18      	ble.n	8009f9e <atan+0x46>
 8009f6c:	4bc1      	ldr	r3, [pc, #772]	; (800a274 <atan+0x31c>)
 8009f6e:	429e      	cmp	r6, r3
 8009f70:	dc01      	bgt.n	8009f76 <atan+0x1e>
 8009f72:	d109      	bne.n	8009f88 <atan+0x30>
 8009f74:	b144      	cbz	r4, 8009f88 <atan+0x30>
 8009f76:	4622      	mov	r2, r4
 8009f78:	462b      	mov	r3, r5
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	f7f6 f93f 	bl	8000200 <__adddf3>
 8009f82:	4604      	mov	r4, r0
 8009f84:	460d      	mov	r5, r1
 8009f86:	e006      	b.n	8009f96 <atan+0x3e>
 8009f88:	f1bb 0f00 	cmp.w	fp, #0
 8009f8c:	f340 8131 	ble.w	800a1f2 <atan+0x29a>
 8009f90:	a59b      	add	r5, pc, #620	; (adr r5, 800a200 <atan+0x2a8>)
 8009f92:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f96:	ec45 4b10 	vmov	d0, r4, r5
 8009f9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9e:	4bb6      	ldr	r3, [pc, #728]	; (800a278 <atan+0x320>)
 8009fa0:	429e      	cmp	r6, r3
 8009fa2:	dc14      	bgt.n	8009fce <atan+0x76>
 8009fa4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009fa8:	429e      	cmp	r6, r3
 8009faa:	dc0d      	bgt.n	8009fc8 <atan+0x70>
 8009fac:	a396      	add	r3, pc, #600	; (adr r3, 800a208 <atan+0x2b0>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	ee10 0a10 	vmov	r0, s0
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	f7f6 f922 	bl	8000200 <__adddf3>
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	4baf      	ldr	r3, [pc, #700]	; (800a27c <atan+0x324>)
 8009fc0:	f7f6 fd64 	bl	8000a8c <__aeabi_dcmpgt>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d1e6      	bne.n	8009f96 <atan+0x3e>
 8009fc8:	f04f 3aff 	mov.w	sl, #4294967295
 8009fcc:	e02b      	b.n	800a026 <atan+0xce>
 8009fce:	f000 f963 	bl	800a298 <fabs>
 8009fd2:	4bab      	ldr	r3, [pc, #684]	; (800a280 <atan+0x328>)
 8009fd4:	429e      	cmp	r6, r3
 8009fd6:	ec55 4b10 	vmov	r4, r5, d0
 8009fda:	f300 80bf 	bgt.w	800a15c <atan+0x204>
 8009fde:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009fe2:	429e      	cmp	r6, r3
 8009fe4:	f300 80a0 	bgt.w	800a128 <atan+0x1d0>
 8009fe8:	ee10 2a10 	vmov	r2, s0
 8009fec:	ee10 0a10 	vmov	r0, s0
 8009ff0:	462b      	mov	r3, r5
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f7f6 f904 	bl	8000200 <__adddf3>
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	4ba0      	ldr	r3, [pc, #640]	; (800a27c <atan+0x324>)
 8009ffc:	f7f6 f8fe 	bl	80001fc <__aeabi_dsub>
 800a000:	2200      	movs	r2, #0
 800a002:	4606      	mov	r6, r0
 800a004:	460f      	mov	r7, r1
 800a006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a00a:	4620      	mov	r0, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	f7f6 f8f7 	bl	8000200 <__adddf3>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	4630      	mov	r0, r6
 800a018:	4639      	mov	r1, r7
 800a01a:	f7f6 fbd1 	bl	80007c0 <__aeabi_ddiv>
 800a01e:	f04f 0a00 	mov.w	sl, #0
 800a022:	4604      	mov	r4, r0
 800a024:	460d      	mov	r5, r1
 800a026:	4622      	mov	r2, r4
 800a028:	462b      	mov	r3, r5
 800a02a:	4620      	mov	r0, r4
 800a02c:	4629      	mov	r1, r5
 800a02e:	f7f6 fa9d 	bl	800056c <__aeabi_dmul>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4680      	mov	r8, r0
 800a038:	4689      	mov	r9, r1
 800a03a:	f7f6 fa97 	bl	800056c <__aeabi_dmul>
 800a03e:	a374      	add	r3, pc, #464	; (adr r3, 800a210 <atan+0x2b8>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	4606      	mov	r6, r0
 800a046:	460f      	mov	r7, r1
 800a048:	f7f6 fa90 	bl	800056c <__aeabi_dmul>
 800a04c:	a372      	add	r3, pc, #456	; (adr r3, 800a218 <atan+0x2c0>)
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	f7f6 f8d5 	bl	8000200 <__adddf3>
 800a056:	4632      	mov	r2, r6
 800a058:	463b      	mov	r3, r7
 800a05a:	f7f6 fa87 	bl	800056c <__aeabi_dmul>
 800a05e:	a370      	add	r3, pc, #448	; (adr r3, 800a220 <atan+0x2c8>)
 800a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a064:	f7f6 f8cc 	bl	8000200 <__adddf3>
 800a068:	4632      	mov	r2, r6
 800a06a:	463b      	mov	r3, r7
 800a06c:	f7f6 fa7e 	bl	800056c <__aeabi_dmul>
 800a070:	a36d      	add	r3, pc, #436	; (adr r3, 800a228 <atan+0x2d0>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	f7f6 f8c3 	bl	8000200 <__adddf3>
 800a07a:	4632      	mov	r2, r6
 800a07c:	463b      	mov	r3, r7
 800a07e:	f7f6 fa75 	bl	800056c <__aeabi_dmul>
 800a082:	a36b      	add	r3, pc, #428	; (adr r3, 800a230 <atan+0x2d8>)
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	f7f6 f8ba 	bl	8000200 <__adddf3>
 800a08c:	4632      	mov	r2, r6
 800a08e:	463b      	mov	r3, r7
 800a090:	f7f6 fa6c 	bl	800056c <__aeabi_dmul>
 800a094:	a368      	add	r3, pc, #416	; (adr r3, 800a238 <atan+0x2e0>)
 800a096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09a:	f7f6 f8b1 	bl	8000200 <__adddf3>
 800a09e:	4642      	mov	r2, r8
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	f7f6 fa63 	bl	800056c <__aeabi_dmul>
 800a0a6:	a366      	add	r3, pc, #408	; (adr r3, 800a240 <atan+0x2e8>)
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	4680      	mov	r8, r0
 800a0ae:	4689      	mov	r9, r1
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f7f6 fa5a 	bl	800056c <__aeabi_dmul>
 800a0b8:	a363      	add	r3, pc, #396	; (adr r3, 800a248 <atan+0x2f0>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f7f6 f89d 	bl	80001fc <__aeabi_dsub>
 800a0c2:	4632      	mov	r2, r6
 800a0c4:	463b      	mov	r3, r7
 800a0c6:	f7f6 fa51 	bl	800056c <__aeabi_dmul>
 800a0ca:	a361      	add	r3, pc, #388	; (adr r3, 800a250 <atan+0x2f8>)
 800a0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d0:	f7f6 f894 	bl	80001fc <__aeabi_dsub>
 800a0d4:	4632      	mov	r2, r6
 800a0d6:	463b      	mov	r3, r7
 800a0d8:	f7f6 fa48 	bl	800056c <__aeabi_dmul>
 800a0dc:	a35e      	add	r3, pc, #376	; (adr r3, 800a258 <atan+0x300>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 f88b 	bl	80001fc <__aeabi_dsub>
 800a0e6:	4632      	mov	r2, r6
 800a0e8:	463b      	mov	r3, r7
 800a0ea:	f7f6 fa3f 	bl	800056c <__aeabi_dmul>
 800a0ee:	a35c      	add	r3, pc, #368	; (adr r3, 800a260 <atan+0x308>)
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f7f6 f882 	bl	80001fc <__aeabi_dsub>
 800a0f8:	4632      	mov	r2, r6
 800a0fa:	463b      	mov	r3, r7
 800a0fc:	f7f6 fa36 	bl	800056c <__aeabi_dmul>
 800a100:	4602      	mov	r2, r0
 800a102:	460b      	mov	r3, r1
 800a104:	4640      	mov	r0, r8
 800a106:	4649      	mov	r1, r9
 800a108:	f7f6 f87a 	bl	8000200 <__adddf3>
 800a10c:	4622      	mov	r2, r4
 800a10e:	462b      	mov	r3, r5
 800a110:	f7f6 fa2c 	bl	800056c <__aeabi_dmul>
 800a114:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	d14b      	bne.n	800a1b6 <atan+0x25e>
 800a11e:	4620      	mov	r0, r4
 800a120:	4629      	mov	r1, r5
 800a122:	f7f6 f86b 	bl	80001fc <__aeabi_dsub>
 800a126:	e72c      	b.n	8009f82 <atan+0x2a>
 800a128:	ee10 0a10 	vmov	r0, s0
 800a12c:	2200      	movs	r2, #0
 800a12e:	4b53      	ldr	r3, [pc, #332]	; (800a27c <atan+0x324>)
 800a130:	4629      	mov	r1, r5
 800a132:	f7f6 f863 	bl	80001fc <__aeabi_dsub>
 800a136:	2200      	movs	r2, #0
 800a138:	4606      	mov	r6, r0
 800a13a:	460f      	mov	r7, r1
 800a13c:	4b4f      	ldr	r3, [pc, #316]	; (800a27c <atan+0x324>)
 800a13e:	4620      	mov	r0, r4
 800a140:	4629      	mov	r1, r5
 800a142:	f7f6 f85d 	bl	8000200 <__adddf3>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4630      	mov	r0, r6
 800a14c:	4639      	mov	r1, r7
 800a14e:	f7f6 fb37 	bl	80007c0 <__aeabi_ddiv>
 800a152:	f04f 0a01 	mov.w	sl, #1
 800a156:	4604      	mov	r4, r0
 800a158:	460d      	mov	r5, r1
 800a15a:	e764      	b.n	800a026 <atan+0xce>
 800a15c:	4b49      	ldr	r3, [pc, #292]	; (800a284 <atan+0x32c>)
 800a15e:	429e      	cmp	r6, r3
 800a160:	dc1d      	bgt.n	800a19e <atan+0x246>
 800a162:	ee10 0a10 	vmov	r0, s0
 800a166:	2200      	movs	r2, #0
 800a168:	4b47      	ldr	r3, [pc, #284]	; (800a288 <atan+0x330>)
 800a16a:	4629      	mov	r1, r5
 800a16c:	f7f6 f846 	bl	80001fc <__aeabi_dsub>
 800a170:	2200      	movs	r2, #0
 800a172:	4606      	mov	r6, r0
 800a174:	460f      	mov	r7, r1
 800a176:	4b44      	ldr	r3, [pc, #272]	; (800a288 <atan+0x330>)
 800a178:	4620      	mov	r0, r4
 800a17a:	4629      	mov	r1, r5
 800a17c:	f7f6 f9f6 	bl	800056c <__aeabi_dmul>
 800a180:	2200      	movs	r2, #0
 800a182:	4b3e      	ldr	r3, [pc, #248]	; (800a27c <atan+0x324>)
 800a184:	f7f6 f83c 	bl	8000200 <__adddf3>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4630      	mov	r0, r6
 800a18e:	4639      	mov	r1, r7
 800a190:	f7f6 fb16 	bl	80007c0 <__aeabi_ddiv>
 800a194:	f04f 0a02 	mov.w	sl, #2
 800a198:	4604      	mov	r4, r0
 800a19a:	460d      	mov	r5, r1
 800a19c:	e743      	b.n	800a026 <atan+0xce>
 800a19e:	462b      	mov	r3, r5
 800a1a0:	ee10 2a10 	vmov	r2, s0
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	4939      	ldr	r1, [pc, #228]	; (800a28c <atan+0x334>)
 800a1a8:	f7f6 fb0a 	bl	80007c0 <__aeabi_ddiv>
 800a1ac:	f04f 0a03 	mov.w	sl, #3
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	e737      	b.n	800a026 <atan+0xce>
 800a1b6:	4b36      	ldr	r3, [pc, #216]	; (800a290 <atan+0x338>)
 800a1b8:	4e36      	ldr	r6, [pc, #216]	; (800a294 <atan+0x33c>)
 800a1ba:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a1be:	4456      	add	r6, sl
 800a1c0:	449a      	add	sl, r3
 800a1c2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a1c6:	f7f6 f819 	bl	80001fc <__aeabi_dsub>
 800a1ca:	4622      	mov	r2, r4
 800a1cc:	462b      	mov	r3, r5
 800a1ce:	f7f6 f815 	bl	80001fc <__aeabi_dsub>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a1da:	f7f6 f80f 	bl	80001fc <__aeabi_dsub>
 800a1de:	f1bb 0f00 	cmp.w	fp, #0
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	460d      	mov	r5, r1
 800a1e6:	f6bf aed6 	bge.w	8009f96 <atan+0x3e>
 800a1ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1ee:	461d      	mov	r5, r3
 800a1f0:	e6d1      	b.n	8009f96 <atan+0x3e>
 800a1f2:	a51d      	add	r5, pc, #116	; (adr r5, 800a268 <atan+0x310>)
 800a1f4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a1f8:	e6cd      	b.n	8009f96 <atan+0x3e>
 800a1fa:	bf00      	nop
 800a1fc:	f3af 8000 	nop.w
 800a200:	54442d18 	.word	0x54442d18
 800a204:	3ff921fb 	.word	0x3ff921fb
 800a208:	8800759c 	.word	0x8800759c
 800a20c:	7e37e43c 	.word	0x7e37e43c
 800a210:	e322da11 	.word	0xe322da11
 800a214:	3f90ad3a 	.word	0x3f90ad3a
 800a218:	24760deb 	.word	0x24760deb
 800a21c:	3fa97b4b 	.word	0x3fa97b4b
 800a220:	a0d03d51 	.word	0xa0d03d51
 800a224:	3fb10d66 	.word	0x3fb10d66
 800a228:	c54c206e 	.word	0xc54c206e
 800a22c:	3fb745cd 	.word	0x3fb745cd
 800a230:	920083ff 	.word	0x920083ff
 800a234:	3fc24924 	.word	0x3fc24924
 800a238:	5555550d 	.word	0x5555550d
 800a23c:	3fd55555 	.word	0x3fd55555
 800a240:	2c6a6c2f 	.word	0x2c6a6c2f
 800a244:	bfa2b444 	.word	0xbfa2b444
 800a248:	52defd9a 	.word	0x52defd9a
 800a24c:	3fadde2d 	.word	0x3fadde2d
 800a250:	af749a6d 	.word	0xaf749a6d
 800a254:	3fb3b0f2 	.word	0x3fb3b0f2
 800a258:	fe231671 	.word	0xfe231671
 800a25c:	3fbc71c6 	.word	0x3fbc71c6
 800a260:	9998ebc4 	.word	0x9998ebc4
 800a264:	3fc99999 	.word	0x3fc99999
 800a268:	54442d18 	.word	0x54442d18
 800a26c:	bff921fb 	.word	0xbff921fb
 800a270:	440fffff 	.word	0x440fffff
 800a274:	7ff00000 	.word	0x7ff00000
 800a278:	3fdbffff 	.word	0x3fdbffff
 800a27c:	3ff00000 	.word	0x3ff00000
 800a280:	3ff2ffff 	.word	0x3ff2ffff
 800a284:	40037fff 	.word	0x40037fff
 800a288:	3ff80000 	.word	0x3ff80000
 800a28c:	bff00000 	.word	0xbff00000
 800a290:	0800d950 	.word	0x0800d950
 800a294:	0800d930 	.word	0x0800d930

0800a298 <fabs>:
 800a298:	ec51 0b10 	vmov	r0, r1, d0
 800a29c:	ee10 2a10 	vmov	r2, s0
 800a2a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2a4:	ec43 2b10 	vmov	d0, r2, r3
 800a2a8:	4770      	bx	lr
 800a2aa:	0000      	movs	r0, r0
 800a2ac:	0000      	movs	r0, r0
	...

0800a2b0 <floor>:
 800a2b0:	ec51 0b10 	vmov	r0, r1, d0
 800a2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a2bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a2c0:	2e13      	cmp	r6, #19
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	ee10 5a10 	vmov	r5, s0
 800a2c8:	4680      	mov	r8, r0
 800a2ca:	dc34      	bgt.n	800a336 <floor+0x86>
 800a2cc:	2e00      	cmp	r6, #0
 800a2ce:	da16      	bge.n	800a2fe <floor+0x4e>
 800a2d0:	a335      	add	r3, pc, #212	; (adr r3, 800a3a8 <floor+0xf8>)
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	f7f5 ff93 	bl	8000200 <__adddf3>
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2300      	movs	r3, #0
 800a2de:	f7f6 fbd5 	bl	8000a8c <__aeabi_dcmpgt>
 800a2e2:	b148      	cbz	r0, 800a2f8 <floor+0x48>
 800a2e4:	2c00      	cmp	r4, #0
 800a2e6:	da59      	bge.n	800a39c <floor+0xec>
 800a2e8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a2ec:	4a30      	ldr	r2, [pc, #192]	; (800a3b0 <floor+0x100>)
 800a2ee:	432b      	orrs	r3, r5
 800a2f0:	2500      	movs	r5, #0
 800a2f2:	42ab      	cmp	r3, r5
 800a2f4:	bf18      	it	ne
 800a2f6:	4614      	movne	r4, r2
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	e025      	b.n	800a34a <floor+0x9a>
 800a2fe:	4f2d      	ldr	r7, [pc, #180]	; (800a3b4 <floor+0x104>)
 800a300:	4137      	asrs	r7, r6
 800a302:	ea01 0307 	and.w	r3, r1, r7
 800a306:	4303      	orrs	r3, r0
 800a308:	d01f      	beq.n	800a34a <floor+0x9a>
 800a30a:	a327      	add	r3, pc, #156	; (adr r3, 800a3a8 <floor+0xf8>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f7f5 ff76 	bl	8000200 <__adddf3>
 800a314:	2200      	movs	r2, #0
 800a316:	2300      	movs	r3, #0
 800a318:	f7f6 fbb8 	bl	8000a8c <__aeabi_dcmpgt>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d0eb      	beq.n	800a2f8 <floor+0x48>
 800a320:	2c00      	cmp	r4, #0
 800a322:	bfbe      	ittt	lt
 800a324:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a328:	fa43 f606 	asrlt.w	r6, r3, r6
 800a32c:	19a4      	addlt	r4, r4, r6
 800a32e:	ea24 0407 	bic.w	r4, r4, r7
 800a332:	2500      	movs	r5, #0
 800a334:	e7e0      	b.n	800a2f8 <floor+0x48>
 800a336:	2e33      	cmp	r6, #51	; 0x33
 800a338:	dd0b      	ble.n	800a352 <floor+0xa2>
 800a33a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a33e:	d104      	bne.n	800a34a <floor+0x9a>
 800a340:	ee10 2a10 	vmov	r2, s0
 800a344:	460b      	mov	r3, r1
 800a346:	f7f5 ff5b 	bl	8000200 <__adddf3>
 800a34a:	ec41 0b10 	vmov	d0, r0, r1
 800a34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a352:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a356:	f04f 33ff 	mov.w	r3, #4294967295
 800a35a:	fa23 f707 	lsr.w	r7, r3, r7
 800a35e:	4207      	tst	r7, r0
 800a360:	d0f3      	beq.n	800a34a <floor+0x9a>
 800a362:	a311      	add	r3, pc, #68	; (adr r3, 800a3a8 <floor+0xf8>)
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	f7f5 ff4a 	bl	8000200 <__adddf3>
 800a36c:	2200      	movs	r2, #0
 800a36e:	2300      	movs	r3, #0
 800a370:	f7f6 fb8c 	bl	8000a8c <__aeabi_dcmpgt>
 800a374:	2800      	cmp	r0, #0
 800a376:	d0bf      	beq.n	800a2f8 <floor+0x48>
 800a378:	2c00      	cmp	r4, #0
 800a37a:	da02      	bge.n	800a382 <floor+0xd2>
 800a37c:	2e14      	cmp	r6, #20
 800a37e:	d103      	bne.n	800a388 <floor+0xd8>
 800a380:	3401      	adds	r4, #1
 800a382:	ea25 0507 	bic.w	r5, r5, r7
 800a386:	e7b7      	b.n	800a2f8 <floor+0x48>
 800a388:	2301      	movs	r3, #1
 800a38a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a38e:	fa03 f606 	lsl.w	r6, r3, r6
 800a392:	4435      	add	r5, r6
 800a394:	4545      	cmp	r5, r8
 800a396:	bf38      	it	cc
 800a398:	18e4      	addcc	r4, r4, r3
 800a39a:	e7f2      	b.n	800a382 <floor+0xd2>
 800a39c:	2500      	movs	r5, #0
 800a39e:	462c      	mov	r4, r5
 800a3a0:	e7aa      	b.n	800a2f8 <floor+0x48>
 800a3a2:	bf00      	nop
 800a3a4:	f3af 8000 	nop.w
 800a3a8:	8800759c 	.word	0x8800759c
 800a3ac:	7e37e43c 	.word	0x7e37e43c
 800a3b0:	bff00000 	.word	0xbff00000
 800a3b4:	000fffff 	.word	0x000fffff

0800a3b8 <scalbn>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	ec55 4b10 	vmov	r4, r5, d0
 800a3be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	462b      	mov	r3, r5
 800a3c6:	b9aa      	cbnz	r2, 800a3f4 <scalbn+0x3c>
 800a3c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a3cc:	4323      	orrs	r3, r4
 800a3ce:	d03b      	beq.n	800a448 <scalbn+0x90>
 800a3d0:	4b31      	ldr	r3, [pc, #196]	; (800a498 <scalbn+0xe0>)
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	ee10 0a10 	vmov	r0, s0
 800a3da:	f7f6 f8c7 	bl	800056c <__aeabi_dmul>
 800a3de:	4b2f      	ldr	r3, [pc, #188]	; (800a49c <scalbn+0xe4>)
 800a3e0:	429e      	cmp	r6, r3
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	460d      	mov	r5, r1
 800a3e6:	da12      	bge.n	800a40e <scalbn+0x56>
 800a3e8:	a327      	add	r3, pc, #156	; (adr r3, 800a488 <scalbn+0xd0>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f7f6 f8bd 	bl	800056c <__aeabi_dmul>
 800a3f2:	e009      	b.n	800a408 <scalbn+0x50>
 800a3f4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a3f8:	428a      	cmp	r2, r1
 800a3fa:	d10c      	bne.n	800a416 <scalbn+0x5e>
 800a3fc:	ee10 2a10 	vmov	r2, s0
 800a400:	4620      	mov	r0, r4
 800a402:	4629      	mov	r1, r5
 800a404:	f7f5 fefc 	bl	8000200 <__adddf3>
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	e01c      	b.n	800a448 <scalbn+0x90>
 800a40e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a412:	460b      	mov	r3, r1
 800a414:	3a36      	subs	r2, #54	; 0x36
 800a416:	4432      	add	r2, r6
 800a418:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a41c:	428a      	cmp	r2, r1
 800a41e:	dd0b      	ble.n	800a438 <scalbn+0x80>
 800a420:	ec45 4b11 	vmov	d1, r4, r5
 800a424:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a490 <scalbn+0xd8>
 800a428:	f000 f83c 	bl	800a4a4 <copysign>
 800a42c:	a318      	add	r3, pc, #96	; (adr r3, 800a490 <scalbn+0xd8>)
 800a42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a432:	ec51 0b10 	vmov	r0, r1, d0
 800a436:	e7da      	b.n	800a3ee <scalbn+0x36>
 800a438:	2a00      	cmp	r2, #0
 800a43a:	dd08      	ble.n	800a44e <scalbn+0x96>
 800a43c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a440:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a444:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a448:	ec45 4b10 	vmov	d0, r4, r5
 800a44c:	bd70      	pop	{r4, r5, r6, pc}
 800a44e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a452:	da0d      	bge.n	800a470 <scalbn+0xb8>
 800a454:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a458:	429e      	cmp	r6, r3
 800a45a:	ec45 4b11 	vmov	d1, r4, r5
 800a45e:	dce1      	bgt.n	800a424 <scalbn+0x6c>
 800a460:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a488 <scalbn+0xd0>
 800a464:	f000 f81e 	bl	800a4a4 <copysign>
 800a468:	a307      	add	r3, pc, #28	; (adr r3, 800a488 <scalbn+0xd0>)
 800a46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46e:	e7e0      	b.n	800a432 <scalbn+0x7a>
 800a470:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a474:	3236      	adds	r2, #54	; 0x36
 800a476:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a47a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a47e:	4620      	mov	r0, r4
 800a480:	4629      	mov	r1, r5
 800a482:	2200      	movs	r2, #0
 800a484:	4b06      	ldr	r3, [pc, #24]	; (800a4a0 <scalbn+0xe8>)
 800a486:	e7b2      	b.n	800a3ee <scalbn+0x36>
 800a488:	c2f8f359 	.word	0xc2f8f359
 800a48c:	01a56e1f 	.word	0x01a56e1f
 800a490:	8800759c 	.word	0x8800759c
 800a494:	7e37e43c 	.word	0x7e37e43c
 800a498:	43500000 	.word	0x43500000
 800a49c:	ffff3cb0 	.word	0xffff3cb0
 800a4a0:	3c900000 	.word	0x3c900000

0800a4a4 <copysign>:
 800a4a4:	ec51 0b10 	vmov	r0, r1, d0
 800a4a8:	ee11 0a90 	vmov	r0, s3
 800a4ac:	ee10 2a10 	vmov	r2, s0
 800a4b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a4b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a4b8:	ea41 0300 	orr.w	r3, r1, r0
 800a4bc:	ec43 2b10 	vmov	d0, r2, r3
 800a4c0:	4770      	bx	lr

0800a4c2 <atof>:
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	f001 b99c 	b.w	800b800 <strtod>

0800a4c8 <atoi>:
 800a4c8:	220a      	movs	r2, #10
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	f001 ba28 	b.w	800b920 <strtol>

0800a4d0 <__errno>:
 800a4d0:	4b01      	ldr	r3, [pc, #4]	; (800a4d8 <__errno+0x8>)
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	200004a0 	.word	0x200004a0

0800a4dc <__libc_init_array>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	4e0d      	ldr	r6, [pc, #52]	; (800a514 <__libc_init_array+0x38>)
 800a4e0:	4c0d      	ldr	r4, [pc, #52]	; (800a518 <__libc_init_array+0x3c>)
 800a4e2:	1ba4      	subs	r4, r4, r6
 800a4e4:	10a4      	asrs	r4, r4, #2
 800a4e6:	2500      	movs	r5, #0
 800a4e8:	42a5      	cmp	r5, r4
 800a4ea:	d109      	bne.n	800a500 <__libc_init_array+0x24>
 800a4ec:	4e0b      	ldr	r6, [pc, #44]	; (800a51c <__libc_init_array+0x40>)
 800a4ee:	4c0c      	ldr	r4, [pc, #48]	; (800a520 <__libc_init_array+0x44>)
 800a4f0:	f003 f860 	bl	800d5b4 <_init>
 800a4f4:	1ba4      	subs	r4, r4, r6
 800a4f6:	10a4      	asrs	r4, r4, #2
 800a4f8:	2500      	movs	r5, #0
 800a4fa:	42a5      	cmp	r5, r4
 800a4fc:	d105      	bne.n	800a50a <__libc_init_array+0x2e>
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}
 800a500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a504:	4798      	blx	r3
 800a506:	3501      	adds	r5, #1
 800a508:	e7ee      	b.n	800a4e8 <__libc_init_array+0xc>
 800a50a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a50e:	4798      	blx	r3
 800a510:	3501      	adds	r5, #1
 800a512:	e7f2      	b.n	800a4fa <__libc_init_array+0x1e>
 800a514:	0800dbf8 	.word	0x0800dbf8
 800a518:	0800dbf8 	.word	0x0800dbf8
 800a51c:	0800dbf8 	.word	0x0800dbf8
 800a520:	0800dbfc 	.word	0x0800dbfc

0800a524 <memcpy>:
 800a524:	b510      	push	{r4, lr}
 800a526:	1e43      	subs	r3, r0, #1
 800a528:	440a      	add	r2, r1
 800a52a:	4291      	cmp	r1, r2
 800a52c:	d100      	bne.n	800a530 <memcpy+0xc>
 800a52e:	bd10      	pop	{r4, pc}
 800a530:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a534:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a538:	e7f7      	b.n	800a52a <memcpy+0x6>

0800a53a <memset>:
 800a53a:	4402      	add	r2, r0
 800a53c:	4603      	mov	r3, r0
 800a53e:	4293      	cmp	r3, r2
 800a540:	d100      	bne.n	800a544 <memset+0xa>
 800a542:	4770      	bx	lr
 800a544:	f803 1b01 	strb.w	r1, [r3], #1
 800a548:	e7f9      	b.n	800a53e <memset+0x4>

0800a54a <__cvt>:
 800a54a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a54e:	ec55 4b10 	vmov	r4, r5, d0
 800a552:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a554:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a558:	2d00      	cmp	r5, #0
 800a55a:	460e      	mov	r6, r1
 800a55c:	4691      	mov	r9, r2
 800a55e:	4619      	mov	r1, r3
 800a560:	bfb8      	it	lt
 800a562:	4622      	movlt	r2, r4
 800a564:	462b      	mov	r3, r5
 800a566:	f027 0720 	bic.w	r7, r7, #32
 800a56a:	bfbb      	ittet	lt
 800a56c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a570:	461d      	movlt	r5, r3
 800a572:	2300      	movge	r3, #0
 800a574:	232d      	movlt	r3, #45	; 0x2d
 800a576:	bfb8      	it	lt
 800a578:	4614      	movlt	r4, r2
 800a57a:	2f46      	cmp	r7, #70	; 0x46
 800a57c:	700b      	strb	r3, [r1, #0]
 800a57e:	d004      	beq.n	800a58a <__cvt+0x40>
 800a580:	2f45      	cmp	r7, #69	; 0x45
 800a582:	d100      	bne.n	800a586 <__cvt+0x3c>
 800a584:	3601      	adds	r6, #1
 800a586:	2102      	movs	r1, #2
 800a588:	e000      	b.n	800a58c <__cvt+0x42>
 800a58a:	2103      	movs	r1, #3
 800a58c:	ab03      	add	r3, sp, #12
 800a58e:	9301      	str	r3, [sp, #4]
 800a590:	ab02      	add	r3, sp, #8
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	4632      	mov	r2, r6
 800a596:	4653      	mov	r3, sl
 800a598:	ec45 4b10 	vmov	d0, r4, r5
 800a59c:	f001 fa64 	bl	800ba68 <_dtoa_r>
 800a5a0:	2f47      	cmp	r7, #71	; 0x47
 800a5a2:	4680      	mov	r8, r0
 800a5a4:	d102      	bne.n	800a5ac <__cvt+0x62>
 800a5a6:	f019 0f01 	tst.w	r9, #1
 800a5aa:	d026      	beq.n	800a5fa <__cvt+0xb0>
 800a5ac:	2f46      	cmp	r7, #70	; 0x46
 800a5ae:	eb08 0906 	add.w	r9, r8, r6
 800a5b2:	d111      	bne.n	800a5d8 <__cvt+0x8e>
 800a5b4:	f898 3000 	ldrb.w	r3, [r8]
 800a5b8:	2b30      	cmp	r3, #48	; 0x30
 800a5ba:	d10a      	bne.n	800a5d2 <__cvt+0x88>
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2300      	movs	r3, #0
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	4629      	mov	r1, r5
 800a5c4:	f7f6 fa3a 	bl	8000a3c <__aeabi_dcmpeq>
 800a5c8:	b918      	cbnz	r0, 800a5d2 <__cvt+0x88>
 800a5ca:	f1c6 0601 	rsb	r6, r6, #1
 800a5ce:	f8ca 6000 	str.w	r6, [sl]
 800a5d2:	f8da 3000 	ldr.w	r3, [sl]
 800a5d6:	4499      	add	r9, r3
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2300      	movs	r3, #0
 800a5dc:	4620      	mov	r0, r4
 800a5de:	4629      	mov	r1, r5
 800a5e0:	f7f6 fa2c 	bl	8000a3c <__aeabi_dcmpeq>
 800a5e4:	b938      	cbnz	r0, 800a5f6 <__cvt+0xac>
 800a5e6:	2230      	movs	r2, #48	; 0x30
 800a5e8:	9b03      	ldr	r3, [sp, #12]
 800a5ea:	454b      	cmp	r3, r9
 800a5ec:	d205      	bcs.n	800a5fa <__cvt+0xb0>
 800a5ee:	1c59      	adds	r1, r3, #1
 800a5f0:	9103      	str	r1, [sp, #12]
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	e7f8      	b.n	800a5e8 <__cvt+0x9e>
 800a5f6:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5fa:	9b03      	ldr	r3, [sp, #12]
 800a5fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5fe:	eba3 0308 	sub.w	r3, r3, r8
 800a602:	4640      	mov	r0, r8
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	b004      	add	sp, #16
 800a608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a60c <__exponent>:
 800a60c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a60e:	2900      	cmp	r1, #0
 800a610:	4604      	mov	r4, r0
 800a612:	bfba      	itte	lt
 800a614:	4249      	neglt	r1, r1
 800a616:	232d      	movlt	r3, #45	; 0x2d
 800a618:	232b      	movge	r3, #43	; 0x2b
 800a61a:	2909      	cmp	r1, #9
 800a61c:	f804 2b02 	strb.w	r2, [r4], #2
 800a620:	7043      	strb	r3, [r0, #1]
 800a622:	dd20      	ble.n	800a666 <__exponent+0x5a>
 800a624:	f10d 0307 	add.w	r3, sp, #7
 800a628:	461f      	mov	r7, r3
 800a62a:	260a      	movs	r6, #10
 800a62c:	fb91 f5f6 	sdiv	r5, r1, r6
 800a630:	fb06 1115 	mls	r1, r6, r5, r1
 800a634:	3130      	adds	r1, #48	; 0x30
 800a636:	2d09      	cmp	r5, #9
 800a638:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a63c:	f103 32ff 	add.w	r2, r3, #4294967295
 800a640:	4629      	mov	r1, r5
 800a642:	dc09      	bgt.n	800a658 <__exponent+0x4c>
 800a644:	3130      	adds	r1, #48	; 0x30
 800a646:	3b02      	subs	r3, #2
 800a648:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a64c:	42bb      	cmp	r3, r7
 800a64e:	4622      	mov	r2, r4
 800a650:	d304      	bcc.n	800a65c <__exponent+0x50>
 800a652:	1a10      	subs	r0, r2, r0
 800a654:	b003      	add	sp, #12
 800a656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a658:	4613      	mov	r3, r2
 800a65a:	e7e7      	b.n	800a62c <__exponent+0x20>
 800a65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a660:	f804 2b01 	strb.w	r2, [r4], #1
 800a664:	e7f2      	b.n	800a64c <__exponent+0x40>
 800a666:	2330      	movs	r3, #48	; 0x30
 800a668:	4419      	add	r1, r3
 800a66a:	7083      	strb	r3, [r0, #2]
 800a66c:	1d02      	adds	r2, r0, #4
 800a66e:	70c1      	strb	r1, [r0, #3]
 800a670:	e7ef      	b.n	800a652 <__exponent+0x46>
	...

0800a674 <_printf_float>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	b08d      	sub	sp, #52	; 0x34
 800a67a:	460c      	mov	r4, r1
 800a67c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a680:	4616      	mov	r6, r2
 800a682:	461f      	mov	r7, r3
 800a684:	4605      	mov	r5, r0
 800a686:	f002 fad3 	bl	800cc30 <_localeconv_r>
 800a68a:	6803      	ldr	r3, [r0, #0]
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	4618      	mov	r0, r3
 800a690:	f7f5 fda8 	bl	80001e4 <strlen>
 800a694:	2300      	movs	r3, #0
 800a696:	930a      	str	r3, [sp, #40]	; 0x28
 800a698:	f8d8 3000 	ldr.w	r3, [r8]
 800a69c:	9005      	str	r0, [sp, #20]
 800a69e:	3307      	adds	r3, #7
 800a6a0:	f023 0307 	bic.w	r3, r3, #7
 800a6a4:	f103 0208 	add.w	r2, r3, #8
 800a6a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a6ac:	f8d4 b000 	ldr.w	fp, [r4]
 800a6b0:	f8c8 2000 	str.w	r2, [r8]
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a6bc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a6c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6c4:	9307      	str	r3, [sp, #28]
 800a6c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ce:	4ba7      	ldr	r3, [pc, #668]	; (800a96c <_printf_float+0x2f8>)
 800a6d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6d4:	f7f6 f9e4 	bl	8000aa0 <__aeabi_dcmpun>
 800a6d8:	bb70      	cbnz	r0, 800a738 <_printf_float+0xc4>
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295
 800a6de:	4ba3      	ldr	r3, [pc, #652]	; (800a96c <_printf_float+0x2f8>)
 800a6e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6e4:	f7f6 f9be 	bl	8000a64 <__aeabi_dcmple>
 800a6e8:	bb30      	cbnz	r0, 800a738 <_printf_float+0xc4>
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	f7f6 f9ad 	bl	8000a50 <__aeabi_dcmplt>
 800a6f6:	b110      	cbz	r0, 800a6fe <_printf_float+0x8a>
 800a6f8:	232d      	movs	r3, #45	; 0x2d
 800a6fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6fe:	4a9c      	ldr	r2, [pc, #624]	; (800a970 <_printf_float+0x2fc>)
 800a700:	4b9c      	ldr	r3, [pc, #624]	; (800a974 <_printf_float+0x300>)
 800a702:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a706:	bf8c      	ite	hi
 800a708:	4690      	movhi	r8, r2
 800a70a:	4698      	movls	r8, r3
 800a70c:	2303      	movs	r3, #3
 800a70e:	f02b 0204 	bic.w	r2, fp, #4
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	6022      	str	r2, [r4, #0]
 800a716:	f04f 0900 	mov.w	r9, #0
 800a71a:	9700      	str	r7, [sp, #0]
 800a71c:	4633      	mov	r3, r6
 800a71e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a720:	4621      	mov	r1, r4
 800a722:	4628      	mov	r0, r5
 800a724:	f000 f9e6 	bl	800aaf4 <_printf_common>
 800a728:	3001      	adds	r0, #1
 800a72a:	f040 808d 	bne.w	800a848 <_printf_float+0x1d4>
 800a72e:	f04f 30ff 	mov.w	r0, #4294967295
 800a732:	b00d      	add	sp, #52	; 0x34
 800a734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a738:	4642      	mov	r2, r8
 800a73a:	464b      	mov	r3, r9
 800a73c:	4640      	mov	r0, r8
 800a73e:	4649      	mov	r1, r9
 800a740:	f7f6 f9ae 	bl	8000aa0 <__aeabi_dcmpun>
 800a744:	b110      	cbz	r0, 800a74c <_printf_float+0xd8>
 800a746:	4a8c      	ldr	r2, [pc, #560]	; (800a978 <_printf_float+0x304>)
 800a748:	4b8c      	ldr	r3, [pc, #560]	; (800a97c <_printf_float+0x308>)
 800a74a:	e7da      	b.n	800a702 <_printf_float+0x8e>
 800a74c:	6861      	ldr	r1, [r4, #4]
 800a74e:	1c4b      	adds	r3, r1, #1
 800a750:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a754:	a80a      	add	r0, sp, #40	; 0x28
 800a756:	d13e      	bne.n	800a7d6 <_printf_float+0x162>
 800a758:	2306      	movs	r3, #6
 800a75a:	6063      	str	r3, [r4, #4]
 800a75c:	2300      	movs	r3, #0
 800a75e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a762:	ab09      	add	r3, sp, #36	; 0x24
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	ec49 8b10 	vmov	d0, r8, r9
 800a76a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a76e:	6022      	str	r2, [r4, #0]
 800a770:	f8cd a004 	str.w	sl, [sp, #4]
 800a774:	6861      	ldr	r1, [r4, #4]
 800a776:	4628      	mov	r0, r5
 800a778:	f7ff fee7 	bl	800a54a <__cvt>
 800a77c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a780:	2b47      	cmp	r3, #71	; 0x47
 800a782:	4680      	mov	r8, r0
 800a784:	d109      	bne.n	800a79a <_printf_float+0x126>
 800a786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a788:	1cd8      	adds	r0, r3, #3
 800a78a:	db02      	blt.n	800a792 <_printf_float+0x11e>
 800a78c:	6862      	ldr	r2, [r4, #4]
 800a78e:	4293      	cmp	r3, r2
 800a790:	dd47      	ble.n	800a822 <_printf_float+0x1ae>
 800a792:	f1aa 0a02 	sub.w	sl, sl, #2
 800a796:	fa5f fa8a 	uxtb.w	sl, sl
 800a79a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a79e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7a0:	d824      	bhi.n	800a7ec <_printf_float+0x178>
 800a7a2:	3901      	subs	r1, #1
 800a7a4:	4652      	mov	r2, sl
 800a7a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a7aa:	9109      	str	r1, [sp, #36]	; 0x24
 800a7ac:	f7ff ff2e 	bl	800a60c <__exponent>
 800a7b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7b2:	1813      	adds	r3, r2, r0
 800a7b4:	2a01      	cmp	r2, #1
 800a7b6:	4681      	mov	r9, r0
 800a7b8:	6123      	str	r3, [r4, #16]
 800a7ba:	dc02      	bgt.n	800a7c2 <_printf_float+0x14e>
 800a7bc:	6822      	ldr	r2, [r4, #0]
 800a7be:	07d1      	lsls	r1, r2, #31
 800a7c0:	d501      	bpl.n	800a7c6 <_printf_float+0x152>
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	6123      	str	r3, [r4, #16]
 800a7c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d0a5      	beq.n	800a71a <_printf_float+0xa6>
 800a7ce:	232d      	movs	r3, #45	; 0x2d
 800a7d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7d4:	e7a1      	b.n	800a71a <_printf_float+0xa6>
 800a7d6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a7da:	f000 8177 	beq.w	800aacc <_printf_float+0x458>
 800a7de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a7e2:	d1bb      	bne.n	800a75c <_printf_float+0xe8>
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	d1b9      	bne.n	800a75c <_printf_float+0xe8>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e7b6      	b.n	800a75a <_printf_float+0xe6>
 800a7ec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a7f0:	d119      	bne.n	800a826 <_printf_float+0x1b2>
 800a7f2:	2900      	cmp	r1, #0
 800a7f4:	6863      	ldr	r3, [r4, #4]
 800a7f6:	dd0c      	ble.n	800a812 <_printf_float+0x19e>
 800a7f8:	6121      	str	r1, [r4, #16]
 800a7fa:	b913      	cbnz	r3, 800a802 <_printf_float+0x18e>
 800a7fc:	6822      	ldr	r2, [r4, #0]
 800a7fe:	07d2      	lsls	r2, r2, #31
 800a800:	d502      	bpl.n	800a808 <_printf_float+0x194>
 800a802:	3301      	adds	r3, #1
 800a804:	440b      	add	r3, r1
 800a806:	6123      	str	r3, [r4, #16]
 800a808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a80a:	65a3      	str	r3, [r4, #88]	; 0x58
 800a80c:	f04f 0900 	mov.w	r9, #0
 800a810:	e7d9      	b.n	800a7c6 <_printf_float+0x152>
 800a812:	b913      	cbnz	r3, 800a81a <_printf_float+0x1a6>
 800a814:	6822      	ldr	r2, [r4, #0]
 800a816:	07d0      	lsls	r0, r2, #31
 800a818:	d501      	bpl.n	800a81e <_printf_float+0x1aa>
 800a81a:	3302      	adds	r3, #2
 800a81c:	e7f3      	b.n	800a806 <_printf_float+0x192>
 800a81e:	2301      	movs	r3, #1
 800a820:	e7f1      	b.n	800a806 <_printf_float+0x192>
 800a822:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a826:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a82a:	4293      	cmp	r3, r2
 800a82c:	db05      	blt.n	800a83a <_printf_float+0x1c6>
 800a82e:	6822      	ldr	r2, [r4, #0]
 800a830:	6123      	str	r3, [r4, #16]
 800a832:	07d1      	lsls	r1, r2, #31
 800a834:	d5e8      	bpl.n	800a808 <_printf_float+0x194>
 800a836:	3301      	adds	r3, #1
 800a838:	e7e5      	b.n	800a806 <_printf_float+0x192>
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	bfd4      	ite	le
 800a83e:	f1c3 0302 	rsble	r3, r3, #2
 800a842:	2301      	movgt	r3, #1
 800a844:	4413      	add	r3, r2
 800a846:	e7de      	b.n	800a806 <_printf_float+0x192>
 800a848:	6823      	ldr	r3, [r4, #0]
 800a84a:	055a      	lsls	r2, r3, #21
 800a84c:	d407      	bmi.n	800a85e <_printf_float+0x1ea>
 800a84e:	6923      	ldr	r3, [r4, #16]
 800a850:	4642      	mov	r2, r8
 800a852:	4631      	mov	r1, r6
 800a854:	4628      	mov	r0, r5
 800a856:	47b8      	blx	r7
 800a858:	3001      	adds	r0, #1
 800a85a:	d12b      	bne.n	800a8b4 <_printf_float+0x240>
 800a85c:	e767      	b.n	800a72e <_printf_float+0xba>
 800a85e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a862:	f240 80dc 	bls.w	800aa1e <_printf_float+0x3aa>
 800a866:	2200      	movs	r2, #0
 800a868:	2300      	movs	r3, #0
 800a86a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a86e:	f7f6 f8e5 	bl	8000a3c <__aeabi_dcmpeq>
 800a872:	2800      	cmp	r0, #0
 800a874:	d033      	beq.n	800a8de <_printf_float+0x26a>
 800a876:	2301      	movs	r3, #1
 800a878:	4a41      	ldr	r2, [pc, #260]	; (800a980 <_printf_float+0x30c>)
 800a87a:	4631      	mov	r1, r6
 800a87c:	4628      	mov	r0, r5
 800a87e:	47b8      	blx	r7
 800a880:	3001      	adds	r0, #1
 800a882:	f43f af54 	beq.w	800a72e <_printf_float+0xba>
 800a886:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a88a:	429a      	cmp	r2, r3
 800a88c:	db02      	blt.n	800a894 <_printf_float+0x220>
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	07d8      	lsls	r0, r3, #31
 800a892:	d50f      	bpl.n	800a8b4 <_printf_float+0x240>
 800a894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a898:	4631      	mov	r1, r6
 800a89a:	4628      	mov	r0, r5
 800a89c:	47b8      	blx	r7
 800a89e:	3001      	adds	r0, #1
 800a8a0:	f43f af45 	beq.w	800a72e <_printf_float+0xba>
 800a8a4:	f04f 0800 	mov.w	r8, #0
 800a8a8:	f104 091a 	add.w	r9, r4, #26
 800a8ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	4543      	cmp	r3, r8
 800a8b2:	dc09      	bgt.n	800a8c8 <_printf_float+0x254>
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	079b      	lsls	r3, r3, #30
 800a8b8:	f100 8103 	bmi.w	800aac2 <_printf_float+0x44e>
 800a8bc:	68e0      	ldr	r0, [r4, #12]
 800a8be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8c0:	4298      	cmp	r0, r3
 800a8c2:	bfb8      	it	lt
 800a8c4:	4618      	movlt	r0, r3
 800a8c6:	e734      	b.n	800a732 <_printf_float+0xbe>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	464a      	mov	r2, r9
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	f43f af2b 	beq.w	800a72e <_printf_float+0xba>
 800a8d8:	f108 0801 	add.w	r8, r8, #1
 800a8dc:	e7e6      	b.n	800a8ac <_printf_float+0x238>
 800a8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	dc2b      	bgt.n	800a93c <_printf_float+0x2c8>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	4a26      	ldr	r2, [pc, #152]	; (800a980 <_printf_float+0x30c>)
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	47b8      	blx	r7
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	f43f af1d 	beq.w	800a72e <_printf_float+0xba>
 800a8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f6:	b923      	cbnz	r3, 800a902 <_printf_float+0x28e>
 800a8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8fa:	b913      	cbnz	r3, 800a902 <_printf_float+0x28e>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	07d9      	lsls	r1, r3, #31
 800a900:	d5d8      	bpl.n	800a8b4 <_printf_float+0x240>
 800a902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a906:	4631      	mov	r1, r6
 800a908:	4628      	mov	r0, r5
 800a90a:	47b8      	blx	r7
 800a90c:	3001      	adds	r0, #1
 800a90e:	f43f af0e 	beq.w	800a72e <_printf_float+0xba>
 800a912:	f04f 0900 	mov.w	r9, #0
 800a916:	f104 0a1a 	add.w	sl, r4, #26
 800a91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a91c:	425b      	negs	r3, r3
 800a91e:	454b      	cmp	r3, r9
 800a920:	dc01      	bgt.n	800a926 <_printf_float+0x2b2>
 800a922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a924:	e794      	b.n	800a850 <_printf_float+0x1dc>
 800a926:	2301      	movs	r3, #1
 800a928:	4652      	mov	r2, sl
 800a92a:	4631      	mov	r1, r6
 800a92c:	4628      	mov	r0, r5
 800a92e:	47b8      	blx	r7
 800a930:	3001      	adds	r0, #1
 800a932:	f43f aefc 	beq.w	800a72e <_printf_float+0xba>
 800a936:	f109 0901 	add.w	r9, r9, #1
 800a93a:	e7ee      	b.n	800a91a <_printf_float+0x2a6>
 800a93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a93e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a940:	429a      	cmp	r2, r3
 800a942:	bfa8      	it	ge
 800a944:	461a      	movge	r2, r3
 800a946:	2a00      	cmp	r2, #0
 800a948:	4691      	mov	r9, r2
 800a94a:	dd07      	ble.n	800a95c <_printf_float+0x2e8>
 800a94c:	4613      	mov	r3, r2
 800a94e:	4631      	mov	r1, r6
 800a950:	4642      	mov	r2, r8
 800a952:	4628      	mov	r0, r5
 800a954:	47b8      	blx	r7
 800a956:	3001      	adds	r0, #1
 800a958:	f43f aee9 	beq.w	800a72e <_printf_float+0xba>
 800a95c:	f104 031a 	add.w	r3, r4, #26
 800a960:	f04f 0b00 	mov.w	fp, #0
 800a964:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a968:	9306      	str	r3, [sp, #24]
 800a96a:	e015      	b.n	800a998 <_printf_float+0x324>
 800a96c:	7fefffff 	.word	0x7fefffff
 800a970:	0800d974 	.word	0x0800d974
 800a974:	0800d970 	.word	0x0800d970
 800a978:	0800d97c 	.word	0x0800d97c
 800a97c:	0800d978 	.word	0x0800d978
 800a980:	0800d980 	.word	0x0800d980
 800a984:	2301      	movs	r3, #1
 800a986:	9a06      	ldr	r2, [sp, #24]
 800a988:	4631      	mov	r1, r6
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b8      	blx	r7
 800a98e:	3001      	adds	r0, #1
 800a990:	f43f aecd 	beq.w	800a72e <_printf_float+0xba>
 800a994:	f10b 0b01 	add.w	fp, fp, #1
 800a998:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a99c:	ebaa 0309 	sub.w	r3, sl, r9
 800a9a0:	455b      	cmp	r3, fp
 800a9a2:	dcef      	bgt.n	800a984 <_printf_float+0x310>
 800a9a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	44d0      	add	r8, sl
 800a9ac:	db15      	blt.n	800a9da <_printf_float+0x366>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	07da      	lsls	r2, r3, #31
 800a9b2:	d412      	bmi.n	800a9da <_printf_float+0x366>
 800a9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9b8:	eba3 020a 	sub.w	r2, r3, sl
 800a9bc:	eba3 0a01 	sub.w	sl, r3, r1
 800a9c0:	4592      	cmp	sl, r2
 800a9c2:	bfa8      	it	ge
 800a9c4:	4692      	movge	sl, r2
 800a9c6:	f1ba 0f00 	cmp.w	sl, #0
 800a9ca:	dc0e      	bgt.n	800a9ea <_printf_float+0x376>
 800a9cc:	f04f 0800 	mov.w	r8, #0
 800a9d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9d4:	f104 091a 	add.w	r9, r4, #26
 800a9d8:	e019      	b.n	800aa0e <_printf_float+0x39a>
 800a9da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	47b8      	blx	r7
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d1e5      	bne.n	800a9b4 <_printf_float+0x340>
 800a9e8:	e6a1      	b.n	800a72e <_printf_float+0xba>
 800a9ea:	4653      	mov	r3, sl
 800a9ec:	4642      	mov	r2, r8
 800a9ee:	4631      	mov	r1, r6
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	47b8      	blx	r7
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	d1e9      	bne.n	800a9cc <_printf_float+0x358>
 800a9f8:	e699      	b.n	800a72e <_printf_float+0xba>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	464a      	mov	r2, r9
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4628      	mov	r0, r5
 800aa02:	47b8      	blx	r7
 800aa04:	3001      	adds	r0, #1
 800aa06:	f43f ae92 	beq.w	800a72e <_printf_float+0xba>
 800aa0a:	f108 0801 	add.w	r8, r8, #1
 800aa0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa12:	1a9b      	subs	r3, r3, r2
 800aa14:	eba3 030a 	sub.w	r3, r3, sl
 800aa18:	4543      	cmp	r3, r8
 800aa1a:	dcee      	bgt.n	800a9fa <_printf_float+0x386>
 800aa1c:	e74a      	b.n	800a8b4 <_printf_float+0x240>
 800aa1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa20:	2a01      	cmp	r2, #1
 800aa22:	dc01      	bgt.n	800aa28 <_printf_float+0x3b4>
 800aa24:	07db      	lsls	r3, r3, #31
 800aa26:	d53a      	bpl.n	800aa9e <_printf_float+0x42a>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	4642      	mov	r2, r8
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4628      	mov	r0, r5
 800aa30:	47b8      	blx	r7
 800aa32:	3001      	adds	r0, #1
 800aa34:	f43f ae7b 	beq.w	800a72e <_printf_float+0xba>
 800aa38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	4628      	mov	r0, r5
 800aa40:	47b8      	blx	r7
 800aa42:	3001      	adds	r0, #1
 800aa44:	f108 0801 	add.w	r8, r8, #1
 800aa48:	f43f ae71 	beq.w	800a72e <_printf_float+0xba>
 800aa4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f103 3aff 	add.w	sl, r3, #4294967295
 800aa54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f7f5 ffef 	bl	8000a3c <__aeabi_dcmpeq>
 800aa5e:	b9c8      	cbnz	r0, 800aa94 <_printf_float+0x420>
 800aa60:	4653      	mov	r3, sl
 800aa62:	4642      	mov	r2, r8
 800aa64:	4631      	mov	r1, r6
 800aa66:	4628      	mov	r0, r5
 800aa68:	47b8      	blx	r7
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	d10e      	bne.n	800aa8c <_printf_float+0x418>
 800aa6e:	e65e      	b.n	800a72e <_printf_float+0xba>
 800aa70:	2301      	movs	r3, #1
 800aa72:	4652      	mov	r2, sl
 800aa74:	4631      	mov	r1, r6
 800aa76:	4628      	mov	r0, r5
 800aa78:	47b8      	blx	r7
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	f43f ae57 	beq.w	800a72e <_printf_float+0xba>
 800aa80:	f108 0801 	add.w	r8, r8, #1
 800aa84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa86:	3b01      	subs	r3, #1
 800aa88:	4543      	cmp	r3, r8
 800aa8a:	dcf1      	bgt.n	800aa70 <_printf_float+0x3fc>
 800aa8c:	464b      	mov	r3, r9
 800aa8e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa92:	e6de      	b.n	800a852 <_printf_float+0x1de>
 800aa94:	f04f 0800 	mov.w	r8, #0
 800aa98:	f104 0a1a 	add.w	sl, r4, #26
 800aa9c:	e7f2      	b.n	800aa84 <_printf_float+0x410>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e7df      	b.n	800aa62 <_printf_float+0x3ee>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	464a      	mov	r2, r9
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	47b8      	blx	r7
 800aaac:	3001      	adds	r0, #1
 800aaae:	f43f ae3e 	beq.w	800a72e <_printf_float+0xba>
 800aab2:	f108 0801 	add.w	r8, r8, #1
 800aab6:	68e3      	ldr	r3, [r4, #12]
 800aab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	4543      	cmp	r3, r8
 800aabe:	dcf0      	bgt.n	800aaa2 <_printf_float+0x42e>
 800aac0:	e6fc      	b.n	800a8bc <_printf_float+0x248>
 800aac2:	f04f 0800 	mov.w	r8, #0
 800aac6:	f104 0919 	add.w	r9, r4, #25
 800aaca:	e7f4      	b.n	800aab6 <_printf_float+0x442>
 800aacc:	2900      	cmp	r1, #0
 800aace:	f43f ae8b 	beq.w	800a7e8 <_printf_float+0x174>
 800aad2:	2300      	movs	r3, #0
 800aad4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800aad8:	ab09      	add	r3, sp, #36	; 0x24
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	ec49 8b10 	vmov	d0, r8, r9
 800aae0:	6022      	str	r2, [r4, #0]
 800aae2:	f8cd a004 	str.w	sl, [sp, #4]
 800aae6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aaea:	4628      	mov	r0, r5
 800aaec:	f7ff fd2d 	bl	800a54a <__cvt>
 800aaf0:	4680      	mov	r8, r0
 800aaf2:	e648      	b.n	800a786 <_printf_float+0x112>

0800aaf4 <_printf_common>:
 800aaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf8:	4691      	mov	r9, r2
 800aafa:	461f      	mov	r7, r3
 800aafc:	688a      	ldr	r2, [r1, #8]
 800aafe:	690b      	ldr	r3, [r1, #16]
 800ab00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab04:	4293      	cmp	r3, r2
 800ab06:	bfb8      	it	lt
 800ab08:	4613      	movlt	r3, r2
 800ab0a:	f8c9 3000 	str.w	r3, [r9]
 800ab0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab12:	4606      	mov	r6, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	b112      	cbz	r2, 800ab1e <_printf_common+0x2a>
 800ab18:	3301      	adds	r3, #1
 800ab1a:	f8c9 3000 	str.w	r3, [r9]
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	0699      	lsls	r1, r3, #26
 800ab22:	bf42      	ittt	mi
 800ab24:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ab28:	3302      	addmi	r3, #2
 800ab2a:	f8c9 3000 	strmi.w	r3, [r9]
 800ab2e:	6825      	ldr	r5, [r4, #0]
 800ab30:	f015 0506 	ands.w	r5, r5, #6
 800ab34:	d107      	bne.n	800ab46 <_printf_common+0x52>
 800ab36:	f104 0a19 	add.w	sl, r4, #25
 800ab3a:	68e3      	ldr	r3, [r4, #12]
 800ab3c:	f8d9 2000 	ldr.w	r2, [r9]
 800ab40:	1a9b      	subs	r3, r3, r2
 800ab42:	42ab      	cmp	r3, r5
 800ab44:	dc28      	bgt.n	800ab98 <_printf_common+0xa4>
 800ab46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ab4a:	6822      	ldr	r2, [r4, #0]
 800ab4c:	3300      	adds	r3, #0
 800ab4e:	bf18      	it	ne
 800ab50:	2301      	movne	r3, #1
 800ab52:	0692      	lsls	r2, r2, #26
 800ab54:	d42d      	bmi.n	800abb2 <_printf_common+0xbe>
 800ab56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	47c0      	blx	r8
 800ab60:	3001      	adds	r0, #1
 800ab62:	d020      	beq.n	800aba6 <_printf_common+0xb2>
 800ab64:	6823      	ldr	r3, [r4, #0]
 800ab66:	68e5      	ldr	r5, [r4, #12]
 800ab68:	f8d9 2000 	ldr.w	r2, [r9]
 800ab6c:	f003 0306 	and.w	r3, r3, #6
 800ab70:	2b04      	cmp	r3, #4
 800ab72:	bf08      	it	eq
 800ab74:	1aad      	subeq	r5, r5, r2
 800ab76:	68a3      	ldr	r3, [r4, #8]
 800ab78:	6922      	ldr	r2, [r4, #16]
 800ab7a:	bf0c      	ite	eq
 800ab7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab80:	2500      	movne	r5, #0
 800ab82:	4293      	cmp	r3, r2
 800ab84:	bfc4      	itt	gt
 800ab86:	1a9b      	subgt	r3, r3, r2
 800ab88:	18ed      	addgt	r5, r5, r3
 800ab8a:	f04f 0900 	mov.w	r9, #0
 800ab8e:	341a      	adds	r4, #26
 800ab90:	454d      	cmp	r5, r9
 800ab92:	d11a      	bne.n	800abca <_printf_common+0xd6>
 800ab94:	2000      	movs	r0, #0
 800ab96:	e008      	b.n	800abaa <_printf_common+0xb6>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	4652      	mov	r2, sl
 800ab9c:	4639      	mov	r1, r7
 800ab9e:	4630      	mov	r0, r6
 800aba0:	47c0      	blx	r8
 800aba2:	3001      	adds	r0, #1
 800aba4:	d103      	bne.n	800abae <_printf_common+0xba>
 800aba6:	f04f 30ff 	mov.w	r0, #4294967295
 800abaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abae:	3501      	adds	r5, #1
 800abb0:	e7c3      	b.n	800ab3a <_printf_common+0x46>
 800abb2:	18e1      	adds	r1, r4, r3
 800abb4:	1c5a      	adds	r2, r3, #1
 800abb6:	2030      	movs	r0, #48	; 0x30
 800abb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800abbc:	4422      	add	r2, r4
 800abbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800abc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abc6:	3302      	adds	r3, #2
 800abc8:	e7c5      	b.n	800ab56 <_printf_common+0x62>
 800abca:	2301      	movs	r3, #1
 800abcc:	4622      	mov	r2, r4
 800abce:	4639      	mov	r1, r7
 800abd0:	4630      	mov	r0, r6
 800abd2:	47c0      	blx	r8
 800abd4:	3001      	adds	r0, #1
 800abd6:	d0e6      	beq.n	800aba6 <_printf_common+0xb2>
 800abd8:	f109 0901 	add.w	r9, r9, #1
 800abdc:	e7d8      	b.n	800ab90 <_printf_common+0x9c>

0800abde <sulp>:
 800abde:	b570      	push	{r4, r5, r6, lr}
 800abe0:	4604      	mov	r4, r0
 800abe2:	460d      	mov	r5, r1
 800abe4:	ec45 4b10 	vmov	d0, r4, r5
 800abe8:	4616      	mov	r6, r2
 800abea:	f002 fb15 	bl	800d218 <__ulp>
 800abee:	ec51 0b10 	vmov	r0, r1, d0
 800abf2:	b17e      	cbz	r6, 800ac14 <sulp+0x36>
 800abf4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800abf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	dd09      	ble.n	800ac14 <sulp+0x36>
 800ac00:	051b      	lsls	r3, r3, #20
 800ac02:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ac06:	2400      	movs	r4, #0
 800ac08:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	462b      	mov	r3, r5
 800ac10:	f7f5 fcac 	bl	800056c <__aeabi_dmul>
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac18 <_strtod_l>:
 800ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	461f      	mov	r7, r3
 800ac1e:	b0a1      	sub	sp, #132	; 0x84
 800ac20:	2300      	movs	r3, #0
 800ac22:	4681      	mov	r9, r0
 800ac24:	4638      	mov	r0, r7
 800ac26:	460e      	mov	r6, r1
 800ac28:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac2a:	931c      	str	r3, [sp, #112]	; 0x70
 800ac2c:	f001 fffd 	bl	800cc2a <__localeconv_l>
 800ac30:	4680      	mov	r8, r0
 800ac32:	6800      	ldr	r0, [r0, #0]
 800ac34:	f7f5 fad6 	bl	80001e4 <strlen>
 800ac38:	f04f 0a00 	mov.w	sl, #0
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	f04f 0b00 	mov.w	fp, #0
 800ac42:	961b      	str	r6, [sp, #108]	; 0x6c
 800ac44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac46:	781a      	ldrb	r2, [r3, #0]
 800ac48:	2a0d      	cmp	r2, #13
 800ac4a:	d832      	bhi.n	800acb2 <_strtod_l+0x9a>
 800ac4c:	2a09      	cmp	r2, #9
 800ac4e:	d236      	bcs.n	800acbe <_strtod_l+0xa6>
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	d03e      	beq.n	800acd2 <_strtod_l+0xba>
 800ac54:	2300      	movs	r3, #0
 800ac56:	930d      	str	r3, [sp, #52]	; 0x34
 800ac58:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ac5a:	782b      	ldrb	r3, [r5, #0]
 800ac5c:	2b30      	cmp	r3, #48	; 0x30
 800ac5e:	f040 80ac 	bne.w	800adba <_strtod_l+0x1a2>
 800ac62:	786b      	ldrb	r3, [r5, #1]
 800ac64:	2b58      	cmp	r3, #88	; 0x58
 800ac66:	d001      	beq.n	800ac6c <_strtod_l+0x54>
 800ac68:	2b78      	cmp	r3, #120	; 0x78
 800ac6a:	d167      	bne.n	800ad3c <_strtod_l+0x124>
 800ac6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac6e:	9301      	str	r3, [sp, #4]
 800ac70:	ab1c      	add	r3, sp, #112	; 0x70
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	9702      	str	r7, [sp, #8]
 800ac76:	ab1d      	add	r3, sp, #116	; 0x74
 800ac78:	4a88      	ldr	r2, [pc, #544]	; (800ae9c <_strtod_l+0x284>)
 800ac7a:	a91b      	add	r1, sp, #108	; 0x6c
 800ac7c:	4648      	mov	r0, r9
 800ac7e:	f001 fcfa 	bl	800c676 <__gethex>
 800ac82:	f010 0407 	ands.w	r4, r0, #7
 800ac86:	4606      	mov	r6, r0
 800ac88:	d005      	beq.n	800ac96 <_strtod_l+0x7e>
 800ac8a:	2c06      	cmp	r4, #6
 800ac8c:	d12b      	bne.n	800ace6 <_strtod_l+0xce>
 800ac8e:	3501      	adds	r5, #1
 800ac90:	2300      	movs	r3, #0
 800ac92:	951b      	str	r5, [sp, #108]	; 0x6c
 800ac94:	930d      	str	r3, [sp, #52]	; 0x34
 800ac96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f040 859a 	bne.w	800b7d2 <_strtod_l+0xbba>
 800ac9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aca0:	b1e3      	cbz	r3, 800acdc <_strtod_l+0xc4>
 800aca2:	4652      	mov	r2, sl
 800aca4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aca8:	ec43 2b10 	vmov	d0, r2, r3
 800acac:	b021      	add	sp, #132	; 0x84
 800acae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb2:	2a2b      	cmp	r2, #43	; 0x2b
 800acb4:	d015      	beq.n	800ace2 <_strtod_l+0xca>
 800acb6:	2a2d      	cmp	r2, #45	; 0x2d
 800acb8:	d004      	beq.n	800acc4 <_strtod_l+0xac>
 800acba:	2a20      	cmp	r2, #32
 800acbc:	d1ca      	bne.n	800ac54 <_strtod_l+0x3c>
 800acbe:	3301      	adds	r3, #1
 800acc0:	931b      	str	r3, [sp, #108]	; 0x6c
 800acc2:	e7bf      	b.n	800ac44 <_strtod_l+0x2c>
 800acc4:	2201      	movs	r2, #1
 800acc6:	920d      	str	r2, [sp, #52]	; 0x34
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	921b      	str	r2, [sp, #108]	; 0x6c
 800accc:	785b      	ldrb	r3, [r3, #1]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1c2      	bne.n	800ac58 <_strtod_l+0x40>
 800acd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acd4:	961b      	str	r6, [sp, #108]	; 0x6c
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f040 8579 	bne.w	800b7ce <_strtod_l+0xbb6>
 800acdc:	4652      	mov	r2, sl
 800acde:	465b      	mov	r3, fp
 800ace0:	e7e2      	b.n	800aca8 <_strtod_l+0x90>
 800ace2:	2200      	movs	r2, #0
 800ace4:	e7ef      	b.n	800acc6 <_strtod_l+0xae>
 800ace6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ace8:	b13a      	cbz	r2, 800acfa <_strtod_l+0xe2>
 800acea:	2135      	movs	r1, #53	; 0x35
 800acec:	a81e      	add	r0, sp, #120	; 0x78
 800acee:	f002 fb8b 	bl	800d408 <__copybits>
 800acf2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800acf4:	4648      	mov	r0, r9
 800acf6:	f001 fff7 	bl	800cce8 <_Bfree>
 800acfa:	3c01      	subs	r4, #1
 800acfc:	2c04      	cmp	r4, #4
 800acfe:	d806      	bhi.n	800ad0e <_strtod_l+0xf6>
 800ad00:	e8df f004 	tbb	[pc, r4]
 800ad04:	1714030a 	.word	0x1714030a
 800ad08:	0a          	.byte	0x0a
 800ad09:	00          	.byte	0x00
 800ad0a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800ad0e:	0730      	lsls	r0, r6, #28
 800ad10:	d5c1      	bpl.n	800ac96 <_strtod_l+0x7e>
 800ad12:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ad16:	e7be      	b.n	800ac96 <_strtod_l+0x7e>
 800ad18:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800ad1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ad1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ad22:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ad26:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ad2a:	e7f0      	b.n	800ad0e <_strtod_l+0xf6>
 800ad2c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800aea0 <_strtod_l+0x288>
 800ad30:	e7ed      	b.n	800ad0e <_strtod_l+0xf6>
 800ad32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ad36:	f04f 3aff 	mov.w	sl, #4294967295
 800ad3a:	e7e8      	b.n	800ad0e <_strtod_l+0xf6>
 800ad3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	921b      	str	r2, [sp, #108]	; 0x6c
 800ad42:	785b      	ldrb	r3, [r3, #1]
 800ad44:	2b30      	cmp	r3, #48	; 0x30
 800ad46:	d0f9      	beq.n	800ad3c <_strtod_l+0x124>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d0a4      	beq.n	800ac96 <_strtod_l+0x7e>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	2500      	movs	r5, #0
 800ad50:	9306      	str	r3, [sp, #24]
 800ad52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad54:	9308      	str	r3, [sp, #32]
 800ad56:	9507      	str	r5, [sp, #28]
 800ad58:	9505      	str	r5, [sp, #20]
 800ad5a:	220a      	movs	r2, #10
 800ad5c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ad5e:	7807      	ldrb	r7, [r0, #0]
 800ad60:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800ad64:	b2d9      	uxtb	r1, r3
 800ad66:	2909      	cmp	r1, #9
 800ad68:	d929      	bls.n	800adbe <_strtod_l+0x1a6>
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	f8d8 1000 	ldr.w	r1, [r8]
 800ad70:	f002 fbfe 	bl	800d570 <strncmp>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d031      	beq.n	800addc <_strtod_l+0x1c4>
 800ad78:	2000      	movs	r0, #0
 800ad7a:	9c05      	ldr	r4, [sp, #20]
 800ad7c:	9004      	str	r0, [sp, #16]
 800ad7e:	463b      	mov	r3, r7
 800ad80:	4602      	mov	r2, r0
 800ad82:	2b65      	cmp	r3, #101	; 0x65
 800ad84:	d001      	beq.n	800ad8a <_strtod_l+0x172>
 800ad86:	2b45      	cmp	r3, #69	; 0x45
 800ad88:	d114      	bne.n	800adb4 <_strtod_l+0x19c>
 800ad8a:	b924      	cbnz	r4, 800ad96 <_strtod_l+0x17e>
 800ad8c:	b910      	cbnz	r0, 800ad94 <_strtod_l+0x17c>
 800ad8e:	9b06      	ldr	r3, [sp, #24]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d09e      	beq.n	800acd2 <_strtod_l+0xba>
 800ad94:	2400      	movs	r4, #0
 800ad96:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ad98:	1c73      	adds	r3, r6, #1
 800ad9a:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad9c:	7873      	ldrb	r3, [r6, #1]
 800ad9e:	2b2b      	cmp	r3, #43	; 0x2b
 800ada0:	d078      	beq.n	800ae94 <_strtod_l+0x27c>
 800ada2:	2b2d      	cmp	r3, #45	; 0x2d
 800ada4:	d070      	beq.n	800ae88 <_strtod_l+0x270>
 800ada6:	f04f 0c00 	mov.w	ip, #0
 800adaa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800adae:	2f09      	cmp	r7, #9
 800adb0:	d97c      	bls.n	800aeac <_strtod_l+0x294>
 800adb2:	961b      	str	r6, [sp, #108]	; 0x6c
 800adb4:	f04f 0e00 	mov.w	lr, #0
 800adb8:	e09a      	b.n	800aef0 <_strtod_l+0x2d8>
 800adba:	2300      	movs	r3, #0
 800adbc:	e7c7      	b.n	800ad4e <_strtod_l+0x136>
 800adbe:	9905      	ldr	r1, [sp, #20]
 800adc0:	2908      	cmp	r1, #8
 800adc2:	bfdd      	ittte	le
 800adc4:	9907      	ldrle	r1, [sp, #28]
 800adc6:	fb02 3301 	mlale	r3, r2, r1, r3
 800adca:	9307      	strle	r3, [sp, #28]
 800adcc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800add0:	9b05      	ldr	r3, [sp, #20]
 800add2:	3001      	adds	r0, #1
 800add4:	3301      	adds	r3, #1
 800add6:	9305      	str	r3, [sp, #20]
 800add8:	901b      	str	r0, [sp, #108]	; 0x6c
 800adda:	e7bf      	b.n	800ad5c <_strtod_l+0x144>
 800addc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adde:	191a      	adds	r2, r3, r4
 800ade0:	921b      	str	r2, [sp, #108]	; 0x6c
 800ade2:	9a05      	ldr	r2, [sp, #20]
 800ade4:	5d1b      	ldrb	r3, [r3, r4]
 800ade6:	2a00      	cmp	r2, #0
 800ade8:	d037      	beq.n	800ae5a <_strtod_l+0x242>
 800adea:	9c05      	ldr	r4, [sp, #20]
 800adec:	4602      	mov	r2, r0
 800adee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800adf2:	2909      	cmp	r1, #9
 800adf4:	d913      	bls.n	800ae1e <_strtod_l+0x206>
 800adf6:	2101      	movs	r1, #1
 800adf8:	9104      	str	r1, [sp, #16]
 800adfa:	e7c2      	b.n	800ad82 <_strtod_l+0x16a>
 800adfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae02:	785b      	ldrb	r3, [r3, #1]
 800ae04:	3001      	adds	r0, #1
 800ae06:	2b30      	cmp	r3, #48	; 0x30
 800ae08:	d0f8      	beq.n	800adfc <_strtod_l+0x1e4>
 800ae0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ae0e:	2a08      	cmp	r2, #8
 800ae10:	f200 84e4 	bhi.w	800b7dc <_strtod_l+0xbc4>
 800ae14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ae16:	9208      	str	r2, [sp, #32]
 800ae18:	4602      	mov	r2, r0
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800ae22:	f100 0101 	add.w	r1, r0, #1
 800ae26:	d012      	beq.n	800ae4e <_strtod_l+0x236>
 800ae28:	440a      	add	r2, r1
 800ae2a:	eb00 0c04 	add.w	ip, r0, r4
 800ae2e:	4621      	mov	r1, r4
 800ae30:	270a      	movs	r7, #10
 800ae32:	458c      	cmp	ip, r1
 800ae34:	d113      	bne.n	800ae5e <_strtod_l+0x246>
 800ae36:	1821      	adds	r1, r4, r0
 800ae38:	2908      	cmp	r1, #8
 800ae3a:	f104 0401 	add.w	r4, r4, #1
 800ae3e:	4404      	add	r4, r0
 800ae40:	dc19      	bgt.n	800ae76 <_strtod_l+0x25e>
 800ae42:	9b07      	ldr	r3, [sp, #28]
 800ae44:	210a      	movs	r1, #10
 800ae46:	fb01 e303 	mla	r3, r1, r3, lr
 800ae4a:	9307      	str	r3, [sp, #28]
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae50:	1c58      	adds	r0, r3, #1
 800ae52:	901b      	str	r0, [sp, #108]	; 0x6c
 800ae54:	785b      	ldrb	r3, [r3, #1]
 800ae56:	4608      	mov	r0, r1
 800ae58:	e7c9      	b.n	800adee <_strtod_l+0x1d6>
 800ae5a:	9805      	ldr	r0, [sp, #20]
 800ae5c:	e7d3      	b.n	800ae06 <_strtod_l+0x1ee>
 800ae5e:	2908      	cmp	r1, #8
 800ae60:	f101 0101 	add.w	r1, r1, #1
 800ae64:	dc03      	bgt.n	800ae6e <_strtod_l+0x256>
 800ae66:	9b07      	ldr	r3, [sp, #28]
 800ae68:	437b      	muls	r3, r7
 800ae6a:	9307      	str	r3, [sp, #28]
 800ae6c:	e7e1      	b.n	800ae32 <_strtod_l+0x21a>
 800ae6e:	2910      	cmp	r1, #16
 800ae70:	bfd8      	it	le
 800ae72:	437d      	mulle	r5, r7
 800ae74:	e7dd      	b.n	800ae32 <_strtod_l+0x21a>
 800ae76:	2c10      	cmp	r4, #16
 800ae78:	bfdc      	itt	le
 800ae7a:	210a      	movle	r1, #10
 800ae7c:	fb01 e505 	mlale	r5, r1, r5, lr
 800ae80:	e7e4      	b.n	800ae4c <_strtod_l+0x234>
 800ae82:	2301      	movs	r3, #1
 800ae84:	9304      	str	r3, [sp, #16]
 800ae86:	e781      	b.n	800ad8c <_strtod_l+0x174>
 800ae88:	f04f 0c01 	mov.w	ip, #1
 800ae8c:	1cb3      	adds	r3, r6, #2
 800ae8e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae90:	78b3      	ldrb	r3, [r6, #2]
 800ae92:	e78a      	b.n	800adaa <_strtod_l+0x192>
 800ae94:	f04f 0c00 	mov.w	ip, #0
 800ae98:	e7f8      	b.n	800ae8c <_strtod_l+0x274>
 800ae9a:	bf00      	nop
 800ae9c:	0800d984 	.word	0x0800d984
 800aea0:	7ff00000 	.word	0x7ff00000
 800aea4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aea6:	1c5f      	adds	r7, r3, #1
 800aea8:	971b      	str	r7, [sp, #108]	; 0x6c
 800aeaa:	785b      	ldrb	r3, [r3, #1]
 800aeac:	2b30      	cmp	r3, #48	; 0x30
 800aeae:	d0f9      	beq.n	800aea4 <_strtod_l+0x28c>
 800aeb0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800aeb4:	2f08      	cmp	r7, #8
 800aeb6:	f63f af7d 	bhi.w	800adb4 <_strtod_l+0x19c>
 800aeba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800aebe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aec0:	930a      	str	r3, [sp, #40]	; 0x28
 800aec2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aec4:	1c5f      	adds	r7, r3, #1
 800aec6:	971b      	str	r7, [sp, #108]	; 0x6c
 800aec8:	785b      	ldrb	r3, [r3, #1]
 800aeca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800aece:	f1b8 0f09 	cmp.w	r8, #9
 800aed2:	d937      	bls.n	800af44 <_strtod_l+0x32c>
 800aed4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aed6:	1a7f      	subs	r7, r7, r1
 800aed8:	2f08      	cmp	r7, #8
 800aeda:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800aede:	dc37      	bgt.n	800af50 <_strtod_l+0x338>
 800aee0:	45be      	cmp	lr, r7
 800aee2:	bfa8      	it	ge
 800aee4:	46be      	movge	lr, r7
 800aee6:	f1bc 0f00 	cmp.w	ip, #0
 800aeea:	d001      	beq.n	800aef0 <_strtod_l+0x2d8>
 800aeec:	f1ce 0e00 	rsb	lr, lr, #0
 800aef0:	2c00      	cmp	r4, #0
 800aef2:	d151      	bne.n	800af98 <_strtod_l+0x380>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	f47f aece 	bne.w	800ac96 <_strtod_l+0x7e>
 800aefa:	9a06      	ldr	r2, [sp, #24]
 800aefc:	2a00      	cmp	r2, #0
 800aefe:	f47f aeca 	bne.w	800ac96 <_strtod_l+0x7e>
 800af02:	9a04      	ldr	r2, [sp, #16]
 800af04:	2a00      	cmp	r2, #0
 800af06:	f47f aee4 	bne.w	800acd2 <_strtod_l+0xba>
 800af0a:	2b4e      	cmp	r3, #78	; 0x4e
 800af0c:	d027      	beq.n	800af5e <_strtod_l+0x346>
 800af0e:	dc21      	bgt.n	800af54 <_strtod_l+0x33c>
 800af10:	2b49      	cmp	r3, #73	; 0x49
 800af12:	f47f aede 	bne.w	800acd2 <_strtod_l+0xba>
 800af16:	49a0      	ldr	r1, [pc, #640]	; (800b198 <_strtod_l+0x580>)
 800af18:	a81b      	add	r0, sp, #108	; 0x6c
 800af1a:	f001 fddf 	bl	800cadc <__match>
 800af1e:	2800      	cmp	r0, #0
 800af20:	f43f aed7 	beq.w	800acd2 <_strtod_l+0xba>
 800af24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af26:	499d      	ldr	r1, [pc, #628]	; (800b19c <_strtod_l+0x584>)
 800af28:	3b01      	subs	r3, #1
 800af2a:	a81b      	add	r0, sp, #108	; 0x6c
 800af2c:	931b      	str	r3, [sp, #108]	; 0x6c
 800af2e:	f001 fdd5 	bl	800cadc <__match>
 800af32:	b910      	cbnz	r0, 800af3a <_strtod_l+0x322>
 800af34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af36:	3301      	adds	r3, #1
 800af38:	931b      	str	r3, [sp, #108]	; 0x6c
 800af3a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b1b0 <_strtod_l+0x598>
 800af3e:	f04f 0a00 	mov.w	sl, #0
 800af42:	e6a8      	b.n	800ac96 <_strtod_l+0x7e>
 800af44:	210a      	movs	r1, #10
 800af46:	fb01 3e0e 	mla	lr, r1, lr, r3
 800af4a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800af4e:	e7b8      	b.n	800aec2 <_strtod_l+0x2aa>
 800af50:	46be      	mov	lr, r7
 800af52:	e7c8      	b.n	800aee6 <_strtod_l+0x2ce>
 800af54:	2b69      	cmp	r3, #105	; 0x69
 800af56:	d0de      	beq.n	800af16 <_strtod_l+0x2fe>
 800af58:	2b6e      	cmp	r3, #110	; 0x6e
 800af5a:	f47f aeba 	bne.w	800acd2 <_strtod_l+0xba>
 800af5e:	4990      	ldr	r1, [pc, #576]	; (800b1a0 <_strtod_l+0x588>)
 800af60:	a81b      	add	r0, sp, #108	; 0x6c
 800af62:	f001 fdbb 	bl	800cadc <__match>
 800af66:	2800      	cmp	r0, #0
 800af68:	f43f aeb3 	beq.w	800acd2 <_strtod_l+0xba>
 800af6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	2b28      	cmp	r3, #40	; 0x28
 800af72:	d10e      	bne.n	800af92 <_strtod_l+0x37a>
 800af74:	aa1e      	add	r2, sp, #120	; 0x78
 800af76:	498b      	ldr	r1, [pc, #556]	; (800b1a4 <_strtod_l+0x58c>)
 800af78:	a81b      	add	r0, sp, #108	; 0x6c
 800af7a:	f001 fdc3 	bl	800cb04 <__hexnan>
 800af7e:	2805      	cmp	r0, #5
 800af80:	d107      	bne.n	800af92 <_strtod_l+0x37a>
 800af82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800af84:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800af88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800af8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800af90:	e681      	b.n	800ac96 <_strtod_l+0x7e>
 800af92:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b1b8 <_strtod_l+0x5a0>
 800af96:	e7d2      	b.n	800af3e <_strtod_l+0x326>
 800af98:	ebae 0302 	sub.w	r3, lr, r2
 800af9c:	9306      	str	r3, [sp, #24]
 800af9e:	9b05      	ldr	r3, [sp, #20]
 800afa0:	9807      	ldr	r0, [sp, #28]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	bf08      	it	eq
 800afa6:	4623      	moveq	r3, r4
 800afa8:	2c10      	cmp	r4, #16
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	46a0      	mov	r8, r4
 800afae:	bfa8      	it	ge
 800afb0:	f04f 0810 	movge.w	r8, #16
 800afb4:	f7f5 fa60 	bl	8000478 <__aeabi_ui2d>
 800afb8:	2c09      	cmp	r4, #9
 800afba:	4682      	mov	sl, r0
 800afbc:	468b      	mov	fp, r1
 800afbe:	dc13      	bgt.n	800afe8 <_strtod_l+0x3d0>
 800afc0:	9b06      	ldr	r3, [sp, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f43f ae67 	beq.w	800ac96 <_strtod_l+0x7e>
 800afc8:	9b06      	ldr	r3, [sp, #24]
 800afca:	dd7a      	ble.n	800b0c2 <_strtod_l+0x4aa>
 800afcc:	2b16      	cmp	r3, #22
 800afce:	dc61      	bgt.n	800b094 <_strtod_l+0x47c>
 800afd0:	4a75      	ldr	r2, [pc, #468]	; (800b1a8 <_strtod_l+0x590>)
 800afd2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800afd6:	e9de 0100 	ldrd	r0, r1, [lr]
 800afda:	4652      	mov	r2, sl
 800afdc:	465b      	mov	r3, fp
 800afde:	f7f5 fac5 	bl	800056c <__aeabi_dmul>
 800afe2:	4682      	mov	sl, r0
 800afe4:	468b      	mov	fp, r1
 800afe6:	e656      	b.n	800ac96 <_strtod_l+0x7e>
 800afe8:	4b6f      	ldr	r3, [pc, #444]	; (800b1a8 <_strtod_l+0x590>)
 800afea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800afee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aff2:	f7f5 fabb 	bl	800056c <__aeabi_dmul>
 800aff6:	4606      	mov	r6, r0
 800aff8:	4628      	mov	r0, r5
 800affa:	460f      	mov	r7, r1
 800affc:	f7f5 fa3c 	bl	8000478 <__aeabi_ui2d>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4630      	mov	r0, r6
 800b006:	4639      	mov	r1, r7
 800b008:	f7f5 f8fa 	bl	8000200 <__adddf3>
 800b00c:	2c0f      	cmp	r4, #15
 800b00e:	4682      	mov	sl, r0
 800b010:	468b      	mov	fp, r1
 800b012:	ddd5      	ble.n	800afc0 <_strtod_l+0x3a8>
 800b014:	9b06      	ldr	r3, [sp, #24]
 800b016:	eba4 0808 	sub.w	r8, r4, r8
 800b01a:	4498      	add	r8, r3
 800b01c:	f1b8 0f00 	cmp.w	r8, #0
 800b020:	f340 8096 	ble.w	800b150 <_strtod_l+0x538>
 800b024:	f018 030f 	ands.w	r3, r8, #15
 800b028:	d00a      	beq.n	800b040 <_strtod_l+0x428>
 800b02a:	495f      	ldr	r1, [pc, #380]	; (800b1a8 <_strtod_l+0x590>)
 800b02c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b030:	4652      	mov	r2, sl
 800b032:	465b      	mov	r3, fp
 800b034:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b038:	f7f5 fa98 	bl	800056c <__aeabi_dmul>
 800b03c:	4682      	mov	sl, r0
 800b03e:	468b      	mov	fp, r1
 800b040:	f038 080f 	bics.w	r8, r8, #15
 800b044:	d073      	beq.n	800b12e <_strtod_l+0x516>
 800b046:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b04a:	dd47      	ble.n	800b0dc <_strtod_l+0x4c4>
 800b04c:	2400      	movs	r4, #0
 800b04e:	46a0      	mov	r8, r4
 800b050:	9407      	str	r4, [sp, #28]
 800b052:	9405      	str	r4, [sp, #20]
 800b054:	2322      	movs	r3, #34	; 0x22
 800b056:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b1b0 <_strtod_l+0x598>
 800b05a:	f8c9 3000 	str.w	r3, [r9]
 800b05e:	f04f 0a00 	mov.w	sl, #0
 800b062:	9b07      	ldr	r3, [sp, #28]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f43f ae16 	beq.w	800ac96 <_strtod_l+0x7e>
 800b06a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b06c:	4648      	mov	r0, r9
 800b06e:	f001 fe3b 	bl	800cce8 <_Bfree>
 800b072:	9905      	ldr	r1, [sp, #20]
 800b074:	4648      	mov	r0, r9
 800b076:	f001 fe37 	bl	800cce8 <_Bfree>
 800b07a:	4641      	mov	r1, r8
 800b07c:	4648      	mov	r0, r9
 800b07e:	f001 fe33 	bl	800cce8 <_Bfree>
 800b082:	9907      	ldr	r1, [sp, #28]
 800b084:	4648      	mov	r0, r9
 800b086:	f001 fe2f 	bl	800cce8 <_Bfree>
 800b08a:	4621      	mov	r1, r4
 800b08c:	4648      	mov	r0, r9
 800b08e:	f001 fe2b 	bl	800cce8 <_Bfree>
 800b092:	e600      	b.n	800ac96 <_strtod_l+0x7e>
 800b094:	9a06      	ldr	r2, [sp, #24]
 800b096:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b09a:	4293      	cmp	r3, r2
 800b09c:	dbba      	blt.n	800b014 <_strtod_l+0x3fc>
 800b09e:	4d42      	ldr	r5, [pc, #264]	; (800b1a8 <_strtod_l+0x590>)
 800b0a0:	f1c4 040f 	rsb	r4, r4, #15
 800b0a4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b0a8:	4652      	mov	r2, sl
 800b0aa:	465b      	mov	r3, fp
 800b0ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b0:	f7f5 fa5c 	bl	800056c <__aeabi_dmul>
 800b0b4:	9b06      	ldr	r3, [sp, #24]
 800b0b6:	1b1c      	subs	r4, r3, r4
 800b0b8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b0bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0c0:	e78d      	b.n	800afde <_strtod_l+0x3c6>
 800b0c2:	f113 0f16 	cmn.w	r3, #22
 800b0c6:	dba5      	blt.n	800b014 <_strtod_l+0x3fc>
 800b0c8:	4a37      	ldr	r2, [pc, #220]	; (800b1a8 <_strtod_l+0x590>)
 800b0ca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b0ce:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b0d2:	4650      	mov	r0, sl
 800b0d4:	4659      	mov	r1, fp
 800b0d6:	f7f5 fb73 	bl	80007c0 <__aeabi_ddiv>
 800b0da:	e782      	b.n	800afe2 <_strtod_l+0x3ca>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4e33      	ldr	r6, [pc, #204]	; (800b1ac <_strtod_l+0x594>)
 800b0e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b0e4:	4650      	mov	r0, sl
 800b0e6:	4659      	mov	r1, fp
 800b0e8:	461d      	mov	r5, r3
 800b0ea:	f1b8 0f01 	cmp.w	r8, #1
 800b0ee:	dc21      	bgt.n	800b134 <_strtod_l+0x51c>
 800b0f0:	b10b      	cbz	r3, 800b0f6 <_strtod_l+0x4de>
 800b0f2:	4682      	mov	sl, r0
 800b0f4:	468b      	mov	fp, r1
 800b0f6:	4b2d      	ldr	r3, [pc, #180]	; (800b1ac <_strtod_l+0x594>)
 800b0f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b0fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b100:	4652      	mov	r2, sl
 800b102:	465b      	mov	r3, fp
 800b104:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b108:	f7f5 fa30 	bl	800056c <__aeabi_dmul>
 800b10c:	4b28      	ldr	r3, [pc, #160]	; (800b1b0 <_strtod_l+0x598>)
 800b10e:	460a      	mov	r2, r1
 800b110:	400b      	ands	r3, r1
 800b112:	4928      	ldr	r1, [pc, #160]	; (800b1b4 <_strtod_l+0x59c>)
 800b114:	428b      	cmp	r3, r1
 800b116:	4682      	mov	sl, r0
 800b118:	d898      	bhi.n	800b04c <_strtod_l+0x434>
 800b11a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b11e:	428b      	cmp	r3, r1
 800b120:	bf86      	itte	hi
 800b122:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b1bc <_strtod_l+0x5a4>
 800b126:	f04f 3aff 	movhi.w	sl, #4294967295
 800b12a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b12e:	2300      	movs	r3, #0
 800b130:	9304      	str	r3, [sp, #16]
 800b132:	e077      	b.n	800b224 <_strtod_l+0x60c>
 800b134:	f018 0f01 	tst.w	r8, #1
 800b138:	d006      	beq.n	800b148 <_strtod_l+0x530>
 800b13a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	f7f5 fa13 	bl	800056c <__aeabi_dmul>
 800b146:	2301      	movs	r3, #1
 800b148:	3501      	adds	r5, #1
 800b14a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b14e:	e7cc      	b.n	800b0ea <_strtod_l+0x4d2>
 800b150:	d0ed      	beq.n	800b12e <_strtod_l+0x516>
 800b152:	f1c8 0800 	rsb	r8, r8, #0
 800b156:	f018 020f 	ands.w	r2, r8, #15
 800b15a:	d00a      	beq.n	800b172 <_strtod_l+0x55a>
 800b15c:	4b12      	ldr	r3, [pc, #72]	; (800b1a8 <_strtod_l+0x590>)
 800b15e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b162:	4650      	mov	r0, sl
 800b164:	4659      	mov	r1, fp
 800b166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16a:	f7f5 fb29 	bl	80007c0 <__aeabi_ddiv>
 800b16e:	4682      	mov	sl, r0
 800b170:	468b      	mov	fp, r1
 800b172:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b176:	d0da      	beq.n	800b12e <_strtod_l+0x516>
 800b178:	f1b8 0f1f 	cmp.w	r8, #31
 800b17c:	dd20      	ble.n	800b1c0 <_strtod_l+0x5a8>
 800b17e:	2400      	movs	r4, #0
 800b180:	46a0      	mov	r8, r4
 800b182:	9407      	str	r4, [sp, #28]
 800b184:	9405      	str	r4, [sp, #20]
 800b186:	2322      	movs	r3, #34	; 0x22
 800b188:	f04f 0a00 	mov.w	sl, #0
 800b18c:	f04f 0b00 	mov.w	fp, #0
 800b190:	f8c9 3000 	str.w	r3, [r9]
 800b194:	e765      	b.n	800b062 <_strtod_l+0x44a>
 800b196:	bf00      	nop
 800b198:	0800d975 	.word	0x0800d975
 800b19c:	0800d9db 	.word	0x0800d9db
 800b1a0:	0800d97d 	.word	0x0800d97d
 800b1a4:	0800d998 	.word	0x0800d998
 800b1a8:	0800da18 	.word	0x0800da18
 800b1ac:	0800d9f0 	.word	0x0800d9f0
 800b1b0:	7ff00000 	.word	0x7ff00000
 800b1b4:	7ca00000 	.word	0x7ca00000
 800b1b8:	fff80000 	.word	0xfff80000
 800b1bc:	7fefffff 	.word	0x7fefffff
 800b1c0:	f018 0310 	ands.w	r3, r8, #16
 800b1c4:	bf18      	it	ne
 800b1c6:	236a      	movne	r3, #106	; 0x6a
 800b1c8:	4da0      	ldr	r5, [pc, #640]	; (800b44c <_strtod_l+0x834>)
 800b1ca:	9304      	str	r3, [sp, #16]
 800b1cc:	4650      	mov	r0, sl
 800b1ce:	4659      	mov	r1, fp
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f1b8 0f00 	cmp.w	r8, #0
 800b1d6:	f300 810a 	bgt.w	800b3ee <_strtod_l+0x7d6>
 800b1da:	b10b      	cbz	r3, 800b1e0 <_strtod_l+0x5c8>
 800b1dc:	4682      	mov	sl, r0
 800b1de:	468b      	mov	fp, r1
 800b1e0:	9b04      	ldr	r3, [sp, #16]
 800b1e2:	b1bb      	cbz	r3, 800b214 <_strtod_l+0x5fc>
 800b1e4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b1e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	4659      	mov	r1, fp
 800b1f0:	dd10      	ble.n	800b214 <_strtod_l+0x5fc>
 800b1f2:	2b1f      	cmp	r3, #31
 800b1f4:	f340 8107 	ble.w	800b406 <_strtod_l+0x7ee>
 800b1f8:	2b34      	cmp	r3, #52	; 0x34
 800b1fa:	bfde      	ittt	le
 800b1fc:	3b20      	suble	r3, #32
 800b1fe:	f04f 32ff 	movle.w	r2, #4294967295
 800b202:	fa02 f303 	lslle.w	r3, r2, r3
 800b206:	f04f 0a00 	mov.w	sl, #0
 800b20a:	bfcc      	ite	gt
 800b20c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b210:	ea03 0b01 	andle.w	fp, r3, r1
 800b214:	2200      	movs	r2, #0
 800b216:	2300      	movs	r3, #0
 800b218:	4650      	mov	r0, sl
 800b21a:	4659      	mov	r1, fp
 800b21c:	f7f5 fc0e 	bl	8000a3c <__aeabi_dcmpeq>
 800b220:	2800      	cmp	r0, #0
 800b222:	d1ac      	bne.n	800b17e <_strtod_l+0x566>
 800b224:	9b07      	ldr	r3, [sp, #28]
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	9a05      	ldr	r2, [sp, #20]
 800b22a:	9908      	ldr	r1, [sp, #32]
 800b22c:	4623      	mov	r3, r4
 800b22e:	4648      	mov	r0, r9
 800b230:	f001 fdac 	bl	800cd8c <__s2b>
 800b234:	9007      	str	r0, [sp, #28]
 800b236:	2800      	cmp	r0, #0
 800b238:	f43f af08 	beq.w	800b04c <_strtod_l+0x434>
 800b23c:	9a06      	ldr	r2, [sp, #24]
 800b23e:	9b06      	ldr	r3, [sp, #24]
 800b240:	2a00      	cmp	r2, #0
 800b242:	f1c3 0300 	rsb	r3, r3, #0
 800b246:	bfa8      	it	ge
 800b248:	2300      	movge	r3, #0
 800b24a:	930e      	str	r3, [sp, #56]	; 0x38
 800b24c:	2400      	movs	r4, #0
 800b24e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b252:	9316      	str	r3, [sp, #88]	; 0x58
 800b254:	46a0      	mov	r8, r4
 800b256:	9b07      	ldr	r3, [sp, #28]
 800b258:	4648      	mov	r0, r9
 800b25a:	6859      	ldr	r1, [r3, #4]
 800b25c:	f001 fd10 	bl	800cc80 <_Balloc>
 800b260:	9005      	str	r0, [sp, #20]
 800b262:	2800      	cmp	r0, #0
 800b264:	f43f aef6 	beq.w	800b054 <_strtod_l+0x43c>
 800b268:	9b07      	ldr	r3, [sp, #28]
 800b26a:	691a      	ldr	r2, [r3, #16]
 800b26c:	3202      	adds	r2, #2
 800b26e:	f103 010c 	add.w	r1, r3, #12
 800b272:	0092      	lsls	r2, r2, #2
 800b274:	300c      	adds	r0, #12
 800b276:	f7ff f955 	bl	800a524 <memcpy>
 800b27a:	aa1e      	add	r2, sp, #120	; 0x78
 800b27c:	a91d      	add	r1, sp, #116	; 0x74
 800b27e:	ec4b ab10 	vmov	d0, sl, fp
 800b282:	4648      	mov	r0, r9
 800b284:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b288:	f002 f83c 	bl	800d304 <__d2b>
 800b28c:	901c      	str	r0, [sp, #112]	; 0x70
 800b28e:	2800      	cmp	r0, #0
 800b290:	f43f aee0 	beq.w	800b054 <_strtod_l+0x43c>
 800b294:	2101      	movs	r1, #1
 800b296:	4648      	mov	r0, r9
 800b298:	f001 fe04 	bl	800cea4 <__i2b>
 800b29c:	4680      	mov	r8, r0
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f43f aed8 	beq.w	800b054 <_strtod_l+0x43c>
 800b2a4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b2a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b2a8:	2e00      	cmp	r6, #0
 800b2aa:	bfab      	itete	ge
 800b2ac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b2ae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b2b0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b2b2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b2b4:	bfac      	ite	ge
 800b2b6:	18f7      	addge	r7, r6, r3
 800b2b8:	1b9d      	sublt	r5, r3, r6
 800b2ba:	9b04      	ldr	r3, [sp, #16]
 800b2bc:	1af6      	subs	r6, r6, r3
 800b2be:	4416      	add	r6, r2
 800b2c0:	4b63      	ldr	r3, [pc, #396]	; (800b450 <_strtod_l+0x838>)
 800b2c2:	3e01      	subs	r6, #1
 800b2c4:	429e      	cmp	r6, r3
 800b2c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b2ca:	f280 80af 	bge.w	800b42c <_strtod_l+0x814>
 800b2ce:	1b9b      	subs	r3, r3, r6
 800b2d0:	2b1f      	cmp	r3, #31
 800b2d2:	eba2 0203 	sub.w	r2, r2, r3
 800b2d6:	f04f 0101 	mov.w	r1, #1
 800b2da:	f300 809b 	bgt.w	800b414 <_strtod_l+0x7fc>
 800b2de:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2e8:	18be      	adds	r6, r7, r2
 800b2ea:	9b04      	ldr	r3, [sp, #16]
 800b2ec:	42b7      	cmp	r7, r6
 800b2ee:	4415      	add	r5, r2
 800b2f0:	441d      	add	r5, r3
 800b2f2:	463b      	mov	r3, r7
 800b2f4:	bfa8      	it	ge
 800b2f6:	4633      	movge	r3, r6
 800b2f8:	42ab      	cmp	r3, r5
 800b2fa:	bfa8      	it	ge
 800b2fc:	462b      	movge	r3, r5
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	bfc2      	ittt	gt
 800b302:	1af6      	subgt	r6, r6, r3
 800b304:	1aed      	subgt	r5, r5, r3
 800b306:	1aff      	subgt	r7, r7, r3
 800b308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b30a:	b1bb      	cbz	r3, 800b33c <_strtod_l+0x724>
 800b30c:	4641      	mov	r1, r8
 800b30e:	461a      	mov	r2, r3
 800b310:	4648      	mov	r0, r9
 800b312:	f001 fe67 	bl	800cfe4 <__pow5mult>
 800b316:	4680      	mov	r8, r0
 800b318:	2800      	cmp	r0, #0
 800b31a:	f43f ae9b 	beq.w	800b054 <_strtod_l+0x43c>
 800b31e:	4601      	mov	r1, r0
 800b320:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b322:	4648      	mov	r0, r9
 800b324:	f001 fdc7 	bl	800ceb6 <__multiply>
 800b328:	900c      	str	r0, [sp, #48]	; 0x30
 800b32a:	2800      	cmp	r0, #0
 800b32c:	f43f ae92 	beq.w	800b054 <_strtod_l+0x43c>
 800b330:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b332:	4648      	mov	r0, r9
 800b334:	f001 fcd8 	bl	800cce8 <_Bfree>
 800b338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b33a:	931c      	str	r3, [sp, #112]	; 0x70
 800b33c:	2e00      	cmp	r6, #0
 800b33e:	dc7a      	bgt.n	800b436 <_strtod_l+0x81e>
 800b340:	9b06      	ldr	r3, [sp, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	dd08      	ble.n	800b358 <_strtod_l+0x740>
 800b346:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b348:	9905      	ldr	r1, [sp, #20]
 800b34a:	4648      	mov	r0, r9
 800b34c:	f001 fe4a 	bl	800cfe4 <__pow5mult>
 800b350:	9005      	str	r0, [sp, #20]
 800b352:	2800      	cmp	r0, #0
 800b354:	f43f ae7e 	beq.w	800b054 <_strtod_l+0x43c>
 800b358:	2d00      	cmp	r5, #0
 800b35a:	dd08      	ble.n	800b36e <_strtod_l+0x756>
 800b35c:	462a      	mov	r2, r5
 800b35e:	9905      	ldr	r1, [sp, #20]
 800b360:	4648      	mov	r0, r9
 800b362:	f001 fe8d 	bl	800d080 <__lshift>
 800b366:	9005      	str	r0, [sp, #20]
 800b368:	2800      	cmp	r0, #0
 800b36a:	f43f ae73 	beq.w	800b054 <_strtod_l+0x43c>
 800b36e:	2f00      	cmp	r7, #0
 800b370:	dd08      	ble.n	800b384 <_strtod_l+0x76c>
 800b372:	4641      	mov	r1, r8
 800b374:	463a      	mov	r2, r7
 800b376:	4648      	mov	r0, r9
 800b378:	f001 fe82 	bl	800d080 <__lshift>
 800b37c:	4680      	mov	r8, r0
 800b37e:	2800      	cmp	r0, #0
 800b380:	f43f ae68 	beq.w	800b054 <_strtod_l+0x43c>
 800b384:	9a05      	ldr	r2, [sp, #20]
 800b386:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b388:	4648      	mov	r0, r9
 800b38a:	f001 fee7 	bl	800d15c <__mdiff>
 800b38e:	4604      	mov	r4, r0
 800b390:	2800      	cmp	r0, #0
 800b392:	f43f ae5f 	beq.w	800b054 <_strtod_l+0x43c>
 800b396:	68c3      	ldr	r3, [r0, #12]
 800b398:	930c      	str	r3, [sp, #48]	; 0x30
 800b39a:	2300      	movs	r3, #0
 800b39c:	60c3      	str	r3, [r0, #12]
 800b39e:	4641      	mov	r1, r8
 800b3a0:	f001 fec2 	bl	800d128 <__mcmp>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	da55      	bge.n	800b454 <_strtod_l+0x83c>
 800b3a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3aa:	b9e3      	cbnz	r3, 800b3e6 <_strtod_l+0x7ce>
 800b3ac:	f1ba 0f00 	cmp.w	sl, #0
 800b3b0:	d119      	bne.n	800b3e6 <_strtod_l+0x7ce>
 800b3b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3b6:	b9b3      	cbnz	r3, 800b3e6 <_strtod_l+0x7ce>
 800b3b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3bc:	0d1b      	lsrs	r3, r3, #20
 800b3be:	051b      	lsls	r3, r3, #20
 800b3c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b3c4:	d90f      	bls.n	800b3e6 <_strtod_l+0x7ce>
 800b3c6:	6963      	ldr	r3, [r4, #20]
 800b3c8:	b913      	cbnz	r3, 800b3d0 <_strtod_l+0x7b8>
 800b3ca:	6923      	ldr	r3, [r4, #16]
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	dd0a      	ble.n	800b3e6 <_strtod_l+0x7ce>
 800b3d0:	4621      	mov	r1, r4
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	4648      	mov	r0, r9
 800b3d6:	f001 fe53 	bl	800d080 <__lshift>
 800b3da:	4641      	mov	r1, r8
 800b3dc:	4604      	mov	r4, r0
 800b3de:	f001 fea3 	bl	800d128 <__mcmp>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	dc67      	bgt.n	800b4b6 <_strtod_l+0x89e>
 800b3e6:	9b04      	ldr	r3, [sp, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d171      	bne.n	800b4d0 <_strtod_l+0x8b8>
 800b3ec:	e63d      	b.n	800b06a <_strtod_l+0x452>
 800b3ee:	f018 0f01 	tst.w	r8, #1
 800b3f2:	d004      	beq.n	800b3fe <_strtod_l+0x7e6>
 800b3f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3f8:	f7f5 f8b8 	bl	800056c <__aeabi_dmul>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b402:	3508      	adds	r5, #8
 800b404:	e6e5      	b.n	800b1d2 <_strtod_l+0x5ba>
 800b406:	f04f 32ff 	mov.w	r2, #4294967295
 800b40a:	fa02 f303 	lsl.w	r3, r2, r3
 800b40e:	ea03 0a0a 	and.w	sl, r3, sl
 800b412:	e6ff      	b.n	800b214 <_strtod_l+0x5fc>
 800b414:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b418:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b41c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b420:	36e2      	adds	r6, #226	; 0xe2
 800b422:	fa01 f306 	lsl.w	r3, r1, r6
 800b426:	930a      	str	r3, [sp, #40]	; 0x28
 800b428:	910f      	str	r1, [sp, #60]	; 0x3c
 800b42a:	e75d      	b.n	800b2e8 <_strtod_l+0x6d0>
 800b42c:	2300      	movs	r3, #0
 800b42e:	930a      	str	r3, [sp, #40]	; 0x28
 800b430:	2301      	movs	r3, #1
 800b432:	930f      	str	r3, [sp, #60]	; 0x3c
 800b434:	e758      	b.n	800b2e8 <_strtod_l+0x6d0>
 800b436:	4632      	mov	r2, r6
 800b438:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b43a:	4648      	mov	r0, r9
 800b43c:	f001 fe20 	bl	800d080 <__lshift>
 800b440:	901c      	str	r0, [sp, #112]	; 0x70
 800b442:	2800      	cmp	r0, #0
 800b444:	f47f af7c 	bne.w	800b340 <_strtod_l+0x728>
 800b448:	e604      	b.n	800b054 <_strtod_l+0x43c>
 800b44a:	bf00      	nop
 800b44c:	0800d9b0 	.word	0x0800d9b0
 800b450:	fffffc02 	.word	0xfffffc02
 800b454:	465d      	mov	r5, fp
 800b456:	f040 8086 	bne.w	800b566 <_strtod_l+0x94e>
 800b45a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b45c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b460:	b32a      	cbz	r2, 800b4ae <_strtod_l+0x896>
 800b462:	4aaf      	ldr	r2, [pc, #700]	; (800b720 <_strtod_l+0xb08>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d153      	bne.n	800b510 <_strtod_l+0x8f8>
 800b468:	9b04      	ldr	r3, [sp, #16]
 800b46a:	4650      	mov	r0, sl
 800b46c:	b1d3      	cbz	r3, 800b4a4 <_strtod_l+0x88c>
 800b46e:	4aad      	ldr	r2, [pc, #692]	; (800b724 <_strtod_l+0xb0c>)
 800b470:	402a      	ands	r2, r5
 800b472:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b476:	f04f 31ff 	mov.w	r1, #4294967295
 800b47a:	d816      	bhi.n	800b4aa <_strtod_l+0x892>
 800b47c:	0d12      	lsrs	r2, r2, #20
 800b47e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b482:	fa01 f303 	lsl.w	r3, r1, r3
 800b486:	4298      	cmp	r0, r3
 800b488:	d142      	bne.n	800b510 <_strtod_l+0x8f8>
 800b48a:	4ba7      	ldr	r3, [pc, #668]	; (800b728 <_strtod_l+0xb10>)
 800b48c:	429d      	cmp	r5, r3
 800b48e:	d102      	bne.n	800b496 <_strtod_l+0x87e>
 800b490:	3001      	adds	r0, #1
 800b492:	f43f addf 	beq.w	800b054 <_strtod_l+0x43c>
 800b496:	4ba3      	ldr	r3, [pc, #652]	; (800b724 <_strtod_l+0xb0c>)
 800b498:	402b      	ands	r3, r5
 800b49a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b49e:	f04f 0a00 	mov.w	sl, #0
 800b4a2:	e7a0      	b.n	800b3e6 <_strtod_l+0x7ce>
 800b4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a8:	e7ed      	b.n	800b486 <_strtod_l+0x86e>
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	e7eb      	b.n	800b486 <_strtod_l+0x86e>
 800b4ae:	bb7b      	cbnz	r3, 800b510 <_strtod_l+0x8f8>
 800b4b0:	f1ba 0f00 	cmp.w	sl, #0
 800b4b4:	d12c      	bne.n	800b510 <_strtod_l+0x8f8>
 800b4b6:	9904      	ldr	r1, [sp, #16]
 800b4b8:	4a9a      	ldr	r2, [pc, #616]	; (800b724 <_strtod_l+0xb0c>)
 800b4ba:	465b      	mov	r3, fp
 800b4bc:	b1f1      	cbz	r1, 800b4fc <_strtod_l+0x8e4>
 800b4be:	ea02 010b 	and.w	r1, r2, fp
 800b4c2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b4c6:	dc19      	bgt.n	800b4fc <_strtod_l+0x8e4>
 800b4c8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b4cc:	f77f ae5b 	ble.w	800b186 <_strtod_l+0x56e>
 800b4d0:	4a96      	ldr	r2, [pc, #600]	; (800b72c <_strtod_l+0xb14>)
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b4d8:	4650      	mov	r0, sl
 800b4da:	4659      	mov	r1, fp
 800b4dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b4e0:	f7f5 f844 	bl	800056c <__aeabi_dmul>
 800b4e4:	4682      	mov	sl, r0
 800b4e6:	468b      	mov	fp, r1
 800b4e8:	2900      	cmp	r1, #0
 800b4ea:	f47f adbe 	bne.w	800b06a <_strtod_l+0x452>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	f47f adbb 	bne.w	800b06a <_strtod_l+0x452>
 800b4f4:	2322      	movs	r3, #34	; 0x22
 800b4f6:	f8c9 3000 	str.w	r3, [r9]
 800b4fa:	e5b6      	b.n	800b06a <_strtod_l+0x452>
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b502:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b506:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b50a:	f04f 3aff 	mov.w	sl, #4294967295
 800b50e:	e76a      	b.n	800b3e6 <_strtod_l+0x7ce>
 800b510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b512:	b193      	cbz	r3, 800b53a <_strtod_l+0x922>
 800b514:	422b      	tst	r3, r5
 800b516:	f43f af66 	beq.w	800b3e6 <_strtod_l+0x7ce>
 800b51a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b51c:	9a04      	ldr	r2, [sp, #16]
 800b51e:	4650      	mov	r0, sl
 800b520:	4659      	mov	r1, fp
 800b522:	b173      	cbz	r3, 800b542 <_strtod_l+0x92a>
 800b524:	f7ff fb5b 	bl	800abde <sulp>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b530:	f7f4 fe66 	bl	8000200 <__adddf3>
 800b534:	4682      	mov	sl, r0
 800b536:	468b      	mov	fp, r1
 800b538:	e755      	b.n	800b3e6 <_strtod_l+0x7ce>
 800b53a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b53c:	ea13 0f0a 	tst.w	r3, sl
 800b540:	e7e9      	b.n	800b516 <_strtod_l+0x8fe>
 800b542:	f7ff fb4c 	bl	800abde <sulp>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b54e:	f7f4 fe55 	bl	80001fc <__aeabi_dsub>
 800b552:	2200      	movs	r2, #0
 800b554:	2300      	movs	r3, #0
 800b556:	4682      	mov	sl, r0
 800b558:	468b      	mov	fp, r1
 800b55a:	f7f5 fa6f 	bl	8000a3c <__aeabi_dcmpeq>
 800b55e:	2800      	cmp	r0, #0
 800b560:	f47f ae11 	bne.w	800b186 <_strtod_l+0x56e>
 800b564:	e73f      	b.n	800b3e6 <_strtod_l+0x7ce>
 800b566:	4641      	mov	r1, r8
 800b568:	4620      	mov	r0, r4
 800b56a:	f001 ff1a 	bl	800d3a2 <__ratio>
 800b56e:	ec57 6b10 	vmov	r6, r7, d0
 800b572:	2200      	movs	r2, #0
 800b574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b578:	ee10 0a10 	vmov	r0, s0
 800b57c:	4639      	mov	r1, r7
 800b57e:	f7f5 fa71 	bl	8000a64 <__aeabi_dcmple>
 800b582:	2800      	cmp	r0, #0
 800b584:	d077      	beq.n	800b676 <_strtod_l+0xa5e>
 800b586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d04a      	beq.n	800b622 <_strtod_l+0xa0a>
 800b58c:	4b68      	ldr	r3, [pc, #416]	; (800b730 <_strtod_l+0xb18>)
 800b58e:	2200      	movs	r2, #0
 800b590:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b594:	4f66      	ldr	r7, [pc, #408]	; (800b730 <_strtod_l+0xb18>)
 800b596:	2600      	movs	r6, #0
 800b598:	4b62      	ldr	r3, [pc, #392]	; (800b724 <_strtod_l+0xb0c>)
 800b59a:	402b      	ands	r3, r5
 800b59c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b59e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b5a0:	4b64      	ldr	r3, [pc, #400]	; (800b734 <_strtod_l+0xb1c>)
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	f040 80ce 	bne.w	800b744 <_strtod_l+0xb2c>
 800b5a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b5ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b5b0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b5b4:	ec4b ab10 	vmov	d0, sl, fp
 800b5b8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b5bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b5c0:	f001 fe2a 	bl	800d218 <__ulp>
 800b5c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b5c8:	ec53 2b10 	vmov	r2, r3, d0
 800b5cc:	f7f4 ffce 	bl	800056c <__aeabi_dmul>
 800b5d0:	4652      	mov	r2, sl
 800b5d2:	465b      	mov	r3, fp
 800b5d4:	f7f4 fe14 	bl	8000200 <__adddf3>
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4952      	ldr	r1, [pc, #328]	; (800b724 <_strtod_l+0xb0c>)
 800b5dc:	4a56      	ldr	r2, [pc, #344]	; (800b738 <_strtod_l+0xb20>)
 800b5de:	4019      	ands	r1, r3
 800b5e0:	4291      	cmp	r1, r2
 800b5e2:	4682      	mov	sl, r0
 800b5e4:	d95b      	bls.n	800b69e <_strtod_l+0xa86>
 800b5e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d103      	bne.n	800b5f8 <_strtod_l+0x9e0>
 800b5f0:	9b08      	ldr	r3, [sp, #32]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	f43f ad2e 	beq.w	800b054 <_strtod_l+0x43c>
 800b5f8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b728 <_strtod_l+0xb10>
 800b5fc:	f04f 3aff 	mov.w	sl, #4294967295
 800b600:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b602:	4648      	mov	r0, r9
 800b604:	f001 fb70 	bl	800cce8 <_Bfree>
 800b608:	9905      	ldr	r1, [sp, #20]
 800b60a:	4648      	mov	r0, r9
 800b60c:	f001 fb6c 	bl	800cce8 <_Bfree>
 800b610:	4641      	mov	r1, r8
 800b612:	4648      	mov	r0, r9
 800b614:	f001 fb68 	bl	800cce8 <_Bfree>
 800b618:	4621      	mov	r1, r4
 800b61a:	4648      	mov	r0, r9
 800b61c:	f001 fb64 	bl	800cce8 <_Bfree>
 800b620:	e619      	b.n	800b256 <_strtod_l+0x63e>
 800b622:	f1ba 0f00 	cmp.w	sl, #0
 800b626:	d11a      	bne.n	800b65e <_strtod_l+0xa46>
 800b628:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b62c:	b9eb      	cbnz	r3, 800b66a <_strtod_l+0xa52>
 800b62e:	2200      	movs	r2, #0
 800b630:	4b3f      	ldr	r3, [pc, #252]	; (800b730 <_strtod_l+0xb18>)
 800b632:	4630      	mov	r0, r6
 800b634:	4639      	mov	r1, r7
 800b636:	f7f5 fa0b 	bl	8000a50 <__aeabi_dcmplt>
 800b63a:	b9c8      	cbnz	r0, 800b670 <_strtod_l+0xa58>
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	2200      	movs	r2, #0
 800b642:	4b3e      	ldr	r3, [pc, #248]	; (800b73c <_strtod_l+0xb24>)
 800b644:	f7f4 ff92 	bl	800056c <__aeabi_dmul>
 800b648:	4606      	mov	r6, r0
 800b64a:	460f      	mov	r7, r1
 800b64c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b650:	9618      	str	r6, [sp, #96]	; 0x60
 800b652:	9319      	str	r3, [sp, #100]	; 0x64
 800b654:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b658:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b65c:	e79c      	b.n	800b598 <_strtod_l+0x980>
 800b65e:	f1ba 0f01 	cmp.w	sl, #1
 800b662:	d102      	bne.n	800b66a <_strtod_l+0xa52>
 800b664:	2d00      	cmp	r5, #0
 800b666:	f43f ad8e 	beq.w	800b186 <_strtod_l+0x56e>
 800b66a:	2200      	movs	r2, #0
 800b66c:	4b34      	ldr	r3, [pc, #208]	; (800b740 <_strtod_l+0xb28>)
 800b66e:	e78f      	b.n	800b590 <_strtod_l+0x978>
 800b670:	2600      	movs	r6, #0
 800b672:	4f32      	ldr	r7, [pc, #200]	; (800b73c <_strtod_l+0xb24>)
 800b674:	e7ea      	b.n	800b64c <_strtod_l+0xa34>
 800b676:	4b31      	ldr	r3, [pc, #196]	; (800b73c <_strtod_l+0xb24>)
 800b678:	4630      	mov	r0, r6
 800b67a:	4639      	mov	r1, r7
 800b67c:	2200      	movs	r2, #0
 800b67e:	f7f4 ff75 	bl	800056c <__aeabi_dmul>
 800b682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b684:	4606      	mov	r6, r0
 800b686:	460f      	mov	r7, r1
 800b688:	b933      	cbnz	r3, 800b698 <_strtod_l+0xa80>
 800b68a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b68e:	9010      	str	r0, [sp, #64]	; 0x40
 800b690:	9311      	str	r3, [sp, #68]	; 0x44
 800b692:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b696:	e7df      	b.n	800b658 <_strtod_l+0xa40>
 800b698:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b69c:	e7f9      	b.n	800b692 <_strtod_l+0xa7a>
 800b69e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b6a2:	9b04      	ldr	r3, [sp, #16]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1ab      	bne.n	800b600 <_strtod_l+0x9e8>
 800b6a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6ac:	0d1b      	lsrs	r3, r3, #20
 800b6ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6b0:	051b      	lsls	r3, r3, #20
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	465d      	mov	r5, fp
 800b6b6:	d1a3      	bne.n	800b600 <_strtod_l+0x9e8>
 800b6b8:	4639      	mov	r1, r7
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f7f5 fa06 	bl	8000acc <__aeabi_d2iz>
 800b6c0:	f7f4 feea 	bl	8000498 <__aeabi_i2d>
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	f7f4 fd96 	bl	80001fc <__aeabi_dsub>
 800b6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	460f      	mov	r7, r1
 800b6d6:	b933      	cbnz	r3, 800b6e6 <_strtod_l+0xace>
 800b6d8:	f1ba 0f00 	cmp.w	sl, #0
 800b6dc:	d103      	bne.n	800b6e6 <_strtod_l+0xace>
 800b6de:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b6e2:	2d00      	cmp	r5, #0
 800b6e4:	d06d      	beq.n	800b7c2 <_strtod_l+0xbaa>
 800b6e6:	a30a      	add	r3, pc, #40	; (adr r3, 800b710 <_strtod_l+0xaf8>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	4639      	mov	r1, r7
 800b6f0:	f7f5 f9ae 	bl	8000a50 <__aeabi_dcmplt>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	f47f acb8 	bne.w	800b06a <_strtod_l+0x452>
 800b6fa:	a307      	add	r3, pc, #28	; (adr r3, 800b718 <_strtod_l+0xb00>)
 800b6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b700:	4630      	mov	r0, r6
 800b702:	4639      	mov	r1, r7
 800b704:	f7f5 f9c2 	bl	8000a8c <__aeabi_dcmpgt>
 800b708:	2800      	cmp	r0, #0
 800b70a:	f43f af79 	beq.w	800b600 <_strtod_l+0x9e8>
 800b70e:	e4ac      	b.n	800b06a <_strtod_l+0x452>
 800b710:	94a03595 	.word	0x94a03595
 800b714:	3fdfffff 	.word	0x3fdfffff
 800b718:	35afe535 	.word	0x35afe535
 800b71c:	3fe00000 	.word	0x3fe00000
 800b720:	000fffff 	.word	0x000fffff
 800b724:	7ff00000 	.word	0x7ff00000
 800b728:	7fefffff 	.word	0x7fefffff
 800b72c:	39500000 	.word	0x39500000
 800b730:	3ff00000 	.word	0x3ff00000
 800b734:	7fe00000 	.word	0x7fe00000
 800b738:	7c9fffff 	.word	0x7c9fffff
 800b73c:	3fe00000 	.word	0x3fe00000
 800b740:	bff00000 	.word	0xbff00000
 800b744:	9b04      	ldr	r3, [sp, #16]
 800b746:	b333      	cbz	r3, 800b796 <_strtod_l+0xb7e>
 800b748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b74a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b74e:	d822      	bhi.n	800b796 <_strtod_l+0xb7e>
 800b750:	a327      	add	r3, pc, #156	; (adr r3, 800b7f0 <_strtod_l+0xbd8>)
 800b752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b756:	4630      	mov	r0, r6
 800b758:	4639      	mov	r1, r7
 800b75a:	f7f5 f983 	bl	8000a64 <__aeabi_dcmple>
 800b75e:	b1a0      	cbz	r0, 800b78a <_strtod_l+0xb72>
 800b760:	4639      	mov	r1, r7
 800b762:	4630      	mov	r0, r6
 800b764:	f7f5 f9da 	bl	8000b1c <__aeabi_d2uiz>
 800b768:	2800      	cmp	r0, #0
 800b76a:	bf08      	it	eq
 800b76c:	2001      	moveq	r0, #1
 800b76e:	f7f4 fe83 	bl	8000478 <__aeabi_ui2d>
 800b772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b774:	4606      	mov	r6, r0
 800b776:	460f      	mov	r7, r1
 800b778:	bb03      	cbnz	r3, 800b7bc <_strtod_l+0xba4>
 800b77a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b77e:	9012      	str	r0, [sp, #72]	; 0x48
 800b780:	9313      	str	r3, [sp, #76]	; 0x4c
 800b782:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b786:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b78a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b78c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b78e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b792:	1a9b      	subs	r3, r3, r2
 800b794:	930b      	str	r3, [sp, #44]	; 0x2c
 800b796:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b79a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b79e:	f001 fd3b 	bl	800d218 <__ulp>
 800b7a2:	4650      	mov	r0, sl
 800b7a4:	ec53 2b10 	vmov	r2, r3, d0
 800b7a8:	4659      	mov	r1, fp
 800b7aa:	f7f4 fedf 	bl	800056c <__aeabi_dmul>
 800b7ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7b2:	f7f4 fd25 	bl	8000200 <__adddf3>
 800b7b6:	4682      	mov	sl, r0
 800b7b8:	468b      	mov	fp, r1
 800b7ba:	e772      	b.n	800b6a2 <_strtod_l+0xa8a>
 800b7bc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b7c0:	e7df      	b.n	800b782 <_strtod_l+0xb6a>
 800b7c2:	a30d      	add	r3, pc, #52	; (adr r3, 800b7f8 <_strtod_l+0xbe0>)
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	f7f5 f942 	bl	8000a50 <__aeabi_dcmplt>
 800b7cc:	e79c      	b.n	800b708 <_strtod_l+0xaf0>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	930d      	str	r3, [sp, #52]	; 0x34
 800b7d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b7d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	f7ff ba61 	b.w	800ac9e <_strtod_l+0x86>
 800b7dc:	2b65      	cmp	r3, #101	; 0x65
 800b7de:	f04f 0200 	mov.w	r2, #0
 800b7e2:	f43f ab4e 	beq.w	800ae82 <_strtod_l+0x26a>
 800b7e6:	2101      	movs	r1, #1
 800b7e8:	4614      	mov	r4, r2
 800b7ea:	9104      	str	r1, [sp, #16]
 800b7ec:	f7ff bacb 	b.w	800ad86 <_strtod_l+0x16e>
 800b7f0:	ffc00000 	.word	0xffc00000
 800b7f4:	41dfffff 	.word	0x41dfffff
 800b7f8:	94a03595 	.word	0x94a03595
 800b7fc:	3fcfffff 	.word	0x3fcfffff

0800b800 <strtod>:
 800b800:	4b07      	ldr	r3, [pc, #28]	; (800b820 <strtod+0x20>)
 800b802:	4a08      	ldr	r2, [pc, #32]	; (800b824 <strtod+0x24>)
 800b804:	b410      	push	{r4}
 800b806:	681c      	ldr	r4, [r3, #0]
 800b808:	6a23      	ldr	r3, [r4, #32]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	bf08      	it	eq
 800b80e:	4613      	moveq	r3, r2
 800b810:	460a      	mov	r2, r1
 800b812:	4601      	mov	r1, r0
 800b814:	4620      	mov	r0, r4
 800b816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b81a:	f7ff b9fd 	b.w	800ac18 <_strtod_l>
 800b81e:	bf00      	nop
 800b820:	200004a0 	.word	0x200004a0
 800b824:	20000504 	.word	0x20000504

0800b828 <_strtol_l.isra.0>:
 800b828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	4692      	mov	sl, r2
 800b832:	461e      	mov	r6, r3
 800b834:	460f      	mov	r7, r1
 800b836:	463d      	mov	r5, r7
 800b838:	9808      	ldr	r0, [sp, #32]
 800b83a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b83e:	f001 f9f1 	bl	800cc24 <__locale_ctype_ptr_l>
 800b842:	4420      	add	r0, r4
 800b844:	7843      	ldrb	r3, [r0, #1]
 800b846:	f013 0308 	ands.w	r3, r3, #8
 800b84a:	d132      	bne.n	800b8b2 <_strtol_l.isra.0+0x8a>
 800b84c:	2c2d      	cmp	r4, #45	; 0x2d
 800b84e:	d132      	bne.n	800b8b6 <_strtol_l.isra.0+0x8e>
 800b850:	787c      	ldrb	r4, [r7, #1]
 800b852:	1cbd      	adds	r5, r7, #2
 800b854:	2201      	movs	r2, #1
 800b856:	2e00      	cmp	r6, #0
 800b858:	d05d      	beq.n	800b916 <_strtol_l.isra.0+0xee>
 800b85a:	2e10      	cmp	r6, #16
 800b85c:	d109      	bne.n	800b872 <_strtol_l.isra.0+0x4a>
 800b85e:	2c30      	cmp	r4, #48	; 0x30
 800b860:	d107      	bne.n	800b872 <_strtol_l.isra.0+0x4a>
 800b862:	782b      	ldrb	r3, [r5, #0]
 800b864:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b868:	2b58      	cmp	r3, #88	; 0x58
 800b86a:	d14f      	bne.n	800b90c <_strtol_l.isra.0+0xe4>
 800b86c:	786c      	ldrb	r4, [r5, #1]
 800b86e:	2610      	movs	r6, #16
 800b870:	3502      	adds	r5, #2
 800b872:	2a00      	cmp	r2, #0
 800b874:	bf14      	ite	ne
 800b876:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b87a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b87e:	2700      	movs	r7, #0
 800b880:	fbb1 fcf6 	udiv	ip, r1, r6
 800b884:	4638      	mov	r0, r7
 800b886:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b88a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b88e:	2b09      	cmp	r3, #9
 800b890:	d817      	bhi.n	800b8c2 <_strtol_l.isra.0+0x9a>
 800b892:	461c      	mov	r4, r3
 800b894:	42a6      	cmp	r6, r4
 800b896:	dd23      	ble.n	800b8e0 <_strtol_l.isra.0+0xb8>
 800b898:	1c7b      	adds	r3, r7, #1
 800b89a:	d007      	beq.n	800b8ac <_strtol_l.isra.0+0x84>
 800b89c:	4584      	cmp	ip, r0
 800b89e:	d31c      	bcc.n	800b8da <_strtol_l.isra.0+0xb2>
 800b8a0:	d101      	bne.n	800b8a6 <_strtol_l.isra.0+0x7e>
 800b8a2:	45a6      	cmp	lr, r4
 800b8a4:	db19      	blt.n	800b8da <_strtol_l.isra.0+0xb2>
 800b8a6:	fb00 4006 	mla	r0, r0, r6, r4
 800b8aa:	2701      	movs	r7, #1
 800b8ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8b0:	e7eb      	b.n	800b88a <_strtol_l.isra.0+0x62>
 800b8b2:	462f      	mov	r7, r5
 800b8b4:	e7bf      	b.n	800b836 <_strtol_l.isra.0+0xe>
 800b8b6:	2c2b      	cmp	r4, #43	; 0x2b
 800b8b8:	bf04      	itt	eq
 800b8ba:	1cbd      	addeq	r5, r7, #2
 800b8bc:	787c      	ldrbeq	r4, [r7, #1]
 800b8be:	461a      	mov	r2, r3
 800b8c0:	e7c9      	b.n	800b856 <_strtol_l.isra.0+0x2e>
 800b8c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b8c6:	2b19      	cmp	r3, #25
 800b8c8:	d801      	bhi.n	800b8ce <_strtol_l.isra.0+0xa6>
 800b8ca:	3c37      	subs	r4, #55	; 0x37
 800b8cc:	e7e2      	b.n	800b894 <_strtol_l.isra.0+0x6c>
 800b8ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b8d2:	2b19      	cmp	r3, #25
 800b8d4:	d804      	bhi.n	800b8e0 <_strtol_l.isra.0+0xb8>
 800b8d6:	3c57      	subs	r4, #87	; 0x57
 800b8d8:	e7dc      	b.n	800b894 <_strtol_l.isra.0+0x6c>
 800b8da:	f04f 37ff 	mov.w	r7, #4294967295
 800b8de:	e7e5      	b.n	800b8ac <_strtol_l.isra.0+0x84>
 800b8e0:	1c7b      	adds	r3, r7, #1
 800b8e2:	d108      	bne.n	800b8f6 <_strtol_l.isra.0+0xce>
 800b8e4:	2322      	movs	r3, #34	; 0x22
 800b8e6:	f8c8 3000 	str.w	r3, [r8]
 800b8ea:	4608      	mov	r0, r1
 800b8ec:	f1ba 0f00 	cmp.w	sl, #0
 800b8f0:	d107      	bne.n	800b902 <_strtol_l.isra.0+0xda>
 800b8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f6:	b102      	cbz	r2, 800b8fa <_strtol_l.isra.0+0xd2>
 800b8f8:	4240      	negs	r0, r0
 800b8fa:	f1ba 0f00 	cmp.w	sl, #0
 800b8fe:	d0f8      	beq.n	800b8f2 <_strtol_l.isra.0+0xca>
 800b900:	b10f      	cbz	r7, 800b906 <_strtol_l.isra.0+0xde>
 800b902:	f105 39ff 	add.w	r9, r5, #4294967295
 800b906:	f8ca 9000 	str.w	r9, [sl]
 800b90a:	e7f2      	b.n	800b8f2 <_strtol_l.isra.0+0xca>
 800b90c:	2430      	movs	r4, #48	; 0x30
 800b90e:	2e00      	cmp	r6, #0
 800b910:	d1af      	bne.n	800b872 <_strtol_l.isra.0+0x4a>
 800b912:	2608      	movs	r6, #8
 800b914:	e7ad      	b.n	800b872 <_strtol_l.isra.0+0x4a>
 800b916:	2c30      	cmp	r4, #48	; 0x30
 800b918:	d0a3      	beq.n	800b862 <_strtol_l.isra.0+0x3a>
 800b91a:	260a      	movs	r6, #10
 800b91c:	e7a9      	b.n	800b872 <_strtol_l.isra.0+0x4a>
	...

0800b920 <strtol>:
 800b920:	4b08      	ldr	r3, [pc, #32]	; (800b944 <strtol+0x24>)
 800b922:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b924:	681c      	ldr	r4, [r3, #0]
 800b926:	4d08      	ldr	r5, [pc, #32]	; (800b948 <strtol+0x28>)
 800b928:	6a23      	ldr	r3, [r4, #32]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	bf08      	it	eq
 800b92e:	462b      	moveq	r3, r5
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	4613      	mov	r3, r2
 800b934:	460a      	mov	r2, r1
 800b936:	4601      	mov	r1, r0
 800b938:	4620      	mov	r0, r4
 800b93a:	f7ff ff75 	bl	800b828 <_strtol_l.isra.0>
 800b93e:	b003      	add	sp, #12
 800b940:	bd30      	pop	{r4, r5, pc}
 800b942:	bf00      	nop
 800b944:	200004a0 	.word	0x200004a0
 800b948:	20000504 	.word	0x20000504

0800b94c <quorem>:
 800b94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b950:	6903      	ldr	r3, [r0, #16]
 800b952:	690c      	ldr	r4, [r1, #16]
 800b954:	42a3      	cmp	r3, r4
 800b956:	4680      	mov	r8, r0
 800b958:	f2c0 8082 	blt.w	800ba60 <quorem+0x114>
 800b95c:	3c01      	subs	r4, #1
 800b95e:	f101 0714 	add.w	r7, r1, #20
 800b962:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b966:	f100 0614 	add.w	r6, r0, #20
 800b96a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b96e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b972:	eb06 030c 	add.w	r3, r6, ip
 800b976:	3501      	adds	r5, #1
 800b978:	eb07 090c 	add.w	r9, r7, ip
 800b97c:	9301      	str	r3, [sp, #4]
 800b97e:	fbb0 f5f5 	udiv	r5, r0, r5
 800b982:	b395      	cbz	r5, 800b9ea <quorem+0x9e>
 800b984:	f04f 0a00 	mov.w	sl, #0
 800b988:	4638      	mov	r0, r7
 800b98a:	46b6      	mov	lr, r6
 800b98c:	46d3      	mov	fp, sl
 800b98e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b992:	b293      	uxth	r3, r2
 800b994:	fb05 a303 	mla	r3, r5, r3, sl
 800b998:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	ebab 0303 	sub.w	r3, fp, r3
 800b9a2:	0c12      	lsrs	r2, r2, #16
 800b9a4:	f8de b000 	ldr.w	fp, [lr]
 800b9a8:	fb05 a202 	mla	r2, r5, r2, sl
 800b9ac:	fa13 f38b 	uxtah	r3, r3, fp
 800b9b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b9b4:	fa1f fb82 	uxth.w	fp, r2
 800b9b8:	f8de 2000 	ldr.w	r2, [lr]
 800b9bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b9c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9ca:	4581      	cmp	r9, r0
 800b9cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b9d0:	f84e 3b04 	str.w	r3, [lr], #4
 800b9d4:	d2db      	bcs.n	800b98e <quorem+0x42>
 800b9d6:	f856 300c 	ldr.w	r3, [r6, ip]
 800b9da:	b933      	cbnz	r3, 800b9ea <quorem+0x9e>
 800b9dc:	9b01      	ldr	r3, [sp, #4]
 800b9de:	3b04      	subs	r3, #4
 800b9e0:	429e      	cmp	r6, r3
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	d330      	bcc.n	800ba48 <quorem+0xfc>
 800b9e6:	f8c8 4010 	str.w	r4, [r8, #16]
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	f001 fb9c 	bl	800d128 <__mcmp>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	db25      	blt.n	800ba40 <quorem+0xf4>
 800b9f4:	3501      	adds	r5, #1
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	f04f 0c00 	mov.w	ip, #0
 800b9fc:	f857 2b04 	ldr.w	r2, [r7], #4
 800ba00:	f8d0 e000 	ldr.w	lr, [r0]
 800ba04:	b293      	uxth	r3, r2
 800ba06:	ebac 0303 	sub.w	r3, ip, r3
 800ba0a:	0c12      	lsrs	r2, r2, #16
 800ba0c:	fa13 f38e 	uxtah	r3, r3, lr
 800ba10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba1e:	45b9      	cmp	r9, r7
 800ba20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba24:	f840 3b04 	str.w	r3, [r0], #4
 800ba28:	d2e8      	bcs.n	800b9fc <quorem+0xb0>
 800ba2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ba2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ba32:	b92a      	cbnz	r2, 800ba40 <quorem+0xf4>
 800ba34:	3b04      	subs	r3, #4
 800ba36:	429e      	cmp	r6, r3
 800ba38:	461a      	mov	r2, r3
 800ba3a:	d30b      	bcc.n	800ba54 <quorem+0x108>
 800ba3c:	f8c8 4010 	str.w	r4, [r8, #16]
 800ba40:	4628      	mov	r0, r5
 800ba42:	b003      	add	sp, #12
 800ba44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba48:	6812      	ldr	r2, [r2, #0]
 800ba4a:	3b04      	subs	r3, #4
 800ba4c:	2a00      	cmp	r2, #0
 800ba4e:	d1ca      	bne.n	800b9e6 <quorem+0x9a>
 800ba50:	3c01      	subs	r4, #1
 800ba52:	e7c5      	b.n	800b9e0 <quorem+0x94>
 800ba54:	6812      	ldr	r2, [r2, #0]
 800ba56:	3b04      	subs	r3, #4
 800ba58:	2a00      	cmp	r2, #0
 800ba5a:	d1ef      	bne.n	800ba3c <quorem+0xf0>
 800ba5c:	3c01      	subs	r4, #1
 800ba5e:	e7ea      	b.n	800ba36 <quorem+0xea>
 800ba60:	2000      	movs	r0, #0
 800ba62:	e7ee      	b.n	800ba42 <quorem+0xf6>
 800ba64:	0000      	movs	r0, r0
	...

0800ba68 <_dtoa_r>:
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	ec57 6b10 	vmov	r6, r7, d0
 800ba70:	b097      	sub	sp, #92	; 0x5c
 800ba72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba74:	9106      	str	r1, [sp, #24]
 800ba76:	4604      	mov	r4, r0
 800ba78:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba7a:	9312      	str	r3, [sp, #72]	; 0x48
 800ba7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba80:	e9cd 6700 	strd	r6, r7, [sp]
 800ba84:	b93d      	cbnz	r5, 800ba96 <_dtoa_r+0x2e>
 800ba86:	2010      	movs	r0, #16
 800ba88:	f001 f8e0 	bl	800cc4c <malloc>
 800ba8c:	6260      	str	r0, [r4, #36]	; 0x24
 800ba8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ba92:	6005      	str	r5, [r0, #0]
 800ba94:	60c5      	str	r5, [r0, #12]
 800ba96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba98:	6819      	ldr	r1, [r3, #0]
 800ba9a:	b151      	cbz	r1, 800bab2 <_dtoa_r+0x4a>
 800ba9c:	685a      	ldr	r2, [r3, #4]
 800ba9e:	604a      	str	r2, [r1, #4]
 800baa0:	2301      	movs	r3, #1
 800baa2:	4093      	lsls	r3, r2
 800baa4:	608b      	str	r3, [r1, #8]
 800baa6:	4620      	mov	r0, r4
 800baa8:	f001 f91e 	bl	800cce8 <_Bfree>
 800baac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baae:	2200      	movs	r2, #0
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	1e3b      	subs	r3, r7, #0
 800bab4:	bfbb      	ittet	lt
 800bab6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800baba:	9301      	strlt	r3, [sp, #4]
 800babc:	2300      	movge	r3, #0
 800babe:	2201      	movlt	r2, #1
 800bac0:	bfac      	ite	ge
 800bac2:	f8c8 3000 	strge.w	r3, [r8]
 800bac6:	f8c8 2000 	strlt.w	r2, [r8]
 800baca:	4baf      	ldr	r3, [pc, #700]	; (800bd88 <_dtoa_r+0x320>)
 800bacc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bad0:	ea33 0308 	bics.w	r3, r3, r8
 800bad4:	d114      	bne.n	800bb00 <_dtoa_r+0x98>
 800bad6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bad8:	f242 730f 	movw	r3, #9999	; 0x270f
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	9b00      	ldr	r3, [sp, #0]
 800bae0:	b923      	cbnz	r3, 800baec <_dtoa_r+0x84>
 800bae2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bae6:	2800      	cmp	r0, #0
 800bae8:	f000 8542 	beq.w	800c570 <_dtoa_r+0xb08>
 800baec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800baee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bd9c <_dtoa_r+0x334>
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f000 8544 	beq.w	800c580 <_dtoa_r+0xb18>
 800baf8:	f10b 0303 	add.w	r3, fp, #3
 800bafc:	f000 bd3e 	b.w	800c57c <_dtoa_r+0xb14>
 800bb00:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bb04:	2200      	movs	r2, #0
 800bb06:	2300      	movs	r3, #0
 800bb08:	4630      	mov	r0, r6
 800bb0a:	4639      	mov	r1, r7
 800bb0c:	f7f4 ff96 	bl	8000a3c <__aeabi_dcmpeq>
 800bb10:	4681      	mov	r9, r0
 800bb12:	b168      	cbz	r0, 800bb30 <_dtoa_r+0xc8>
 800bb14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb16:	2301      	movs	r3, #1
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f000 8524 	beq.w	800c56a <_dtoa_r+0xb02>
 800bb22:	4b9a      	ldr	r3, [pc, #616]	; (800bd8c <_dtoa_r+0x324>)
 800bb24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb26:	f103 3bff 	add.w	fp, r3, #4294967295
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	f000 bd28 	b.w	800c580 <_dtoa_r+0xb18>
 800bb30:	aa14      	add	r2, sp, #80	; 0x50
 800bb32:	a915      	add	r1, sp, #84	; 0x54
 800bb34:	ec47 6b10 	vmov	d0, r6, r7
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f001 fbe3 	bl	800d304 <__d2b>
 800bb3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bb42:	9004      	str	r0, [sp, #16]
 800bb44:	2d00      	cmp	r5, #0
 800bb46:	d07c      	beq.n	800bc42 <_dtoa_r+0x1da>
 800bb48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bb50:	46b2      	mov	sl, r6
 800bb52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bb56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bb5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bb5e:	2200      	movs	r2, #0
 800bb60:	4b8b      	ldr	r3, [pc, #556]	; (800bd90 <_dtoa_r+0x328>)
 800bb62:	4650      	mov	r0, sl
 800bb64:	4659      	mov	r1, fp
 800bb66:	f7f4 fb49 	bl	80001fc <__aeabi_dsub>
 800bb6a:	a381      	add	r3, pc, #516	; (adr r3, 800bd70 <_dtoa_r+0x308>)
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	f7f4 fcfc 	bl	800056c <__aeabi_dmul>
 800bb74:	a380      	add	r3, pc, #512	; (adr r3, 800bd78 <_dtoa_r+0x310>)
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f7f4 fb41 	bl	8000200 <__adddf3>
 800bb7e:	4606      	mov	r6, r0
 800bb80:	4628      	mov	r0, r5
 800bb82:	460f      	mov	r7, r1
 800bb84:	f7f4 fc88 	bl	8000498 <__aeabi_i2d>
 800bb88:	a37d      	add	r3, pc, #500	; (adr r3, 800bd80 <_dtoa_r+0x318>)
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	f7f4 fced 	bl	800056c <__aeabi_dmul>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4630      	mov	r0, r6
 800bb98:	4639      	mov	r1, r7
 800bb9a:	f7f4 fb31 	bl	8000200 <__adddf3>
 800bb9e:	4606      	mov	r6, r0
 800bba0:	460f      	mov	r7, r1
 800bba2:	f7f4 ff93 	bl	8000acc <__aeabi_d2iz>
 800bba6:	2200      	movs	r2, #0
 800bba8:	4682      	mov	sl, r0
 800bbaa:	2300      	movs	r3, #0
 800bbac:	4630      	mov	r0, r6
 800bbae:	4639      	mov	r1, r7
 800bbb0:	f7f4 ff4e 	bl	8000a50 <__aeabi_dcmplt>
 800bbb4:	b148      	cbz	r0, 800bbca <_dtoa_r+0x162>
 800bbb6:	4650      	mov	r0, sl
 800bbb8:	f7f4 fc6e 	bl	8000498 <__aeabi_i2d>
 800bbbc:	4632      	mov	r2, r6
 800bbbe:	463b      	mov	r3, r7
 800bbc0:	f7f4 ff3c 	bl	8000a3c <__aeabi_dcmpeq>
 800bbc4:	b908      	cbnz	r0, 800bbca <_dtoa_r+0x162>
 800bbc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbca:	f1ba 0f16 	cmp.w	sl, #22
 800bbce:	d859      	bhi.n	800bc84 <_dtoa_r+0x21c>
 800bbd0:	4970      	ldr	r1, [pc, #448]	; (800bd94 <_dtoa_r+0x32c>)
 800bbd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bbd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbde:	f7f4 ff55 	bl	8000a8c <__aeabi_dcmpgt>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d050      	beq.n	800bc88 <_dtoa_r+0x220>
 800bbe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbea:	2300      	movs	r3, #0
 800bbec:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bbf0:	1b5d      	subs	r5, r3, r5
 800bbf2:	f1b5 0801 	subs.w	r8, r5, #1
 800bbf6:	bf49      	itett	mi
 800bbf8:	f1c5 0301 	rsbmi	r3, r5, #1
 800bbfc:	2300      	movpl	r3, #0
 800bbfe:	9305      	strmi	r3, [sp, #20]
 800bc00:	f04f 0800 	movmi.w	r8, #0
 800bc04:	bf58      	it	pl
 800bc06:	9305      	strpl	r3, [sp, #20]
 800bc08:	f1ba 0f00 	cmp.w	sl, #0
 800bc0c:	db3e      	blt.n	800bc8c <_dtoa_r+0x224>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	44d0      	add	r8, sl
 800bc12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bc16:	9307      	str	r3, [sp, #28]
 800bc18:	9b06      	ldr	r3, [sp, #24]
 800bc1a:	2b09      	cmp	r3, #9
 800bc1c:	f200 8090 	bhi.w	800bd40 <_dtoa_r+0x2d8>
 800bc20:	2b05      	cmp	r3, #5
 800bc22:	bfc4      	itt	gt
 800bc24:	3b04      	subgt	r3, #4
 800bc26:	9306      	strgt	r3, [sp, #24]
 800bc28:	9b06      	ldr	r3, [sp, #24]
 800bc2a:	f1a3 0302 	sub.w	r3, r3, #2
 800bc2e:	bfcc      	ite	gt
 800bc30:	2500      	movgt	r5, #0
 800bc32:	2501      	movle	r5, #1
 800bc34:	2b03      	cmp	r3, #3
 800bc36:	f200 808f 	bhi.w	800bd58 <_dtoa_r+0x2f0>
 800bc3a:	e8df f003 	tbb	[pc, r3]
 800bc3e:	7f7d      	.short	0x7f7d
 800bc40:	7131      	.short	0x7131
 800bc42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bc46:	441d      	add	r5, r3
 800bc48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bc4c:	2820      	cmp	r0, #32
 800bc4e:	dd13      	ble.n	800bc78 <_dtoa_r+0x210>
 800bc50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bc54:	9b00      	ldr	r3, [sp, #0]
 800bc56:	fa08 f800 	lsl.w	r8, r8, r0
 800bc5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bc5e:	fa23 f000 	lsr.w	r0, r3, r0
 800bc62:	ea48 0000 	orr.w	r0, r8, r0
 800bc66:	f7f4 fc07 	bl	8000478 <__aeabi_ui2d>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	4682      	mov	sl, r0
 800bc6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bc72:	3d01      	subs	r5, #1
 800bc74:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc76:	e772      	b.n	800bb5e <_dtoa_r+0xf6>
 800bc78:	9b00      	ldr	r3, [sp, #0]
 800bc7a:	f1c0 0020 	rsb	r0, r0, #32
 800bc7e:	fa03 f000 	lsl.w	r0, r3, r0
 800bc82:	e7f0      	b.n	800bc66 <_dtoa_r+0x1fe>
 800bc84:	2301      	movs	r3, #1
 800bc86:	e7b1      	b.n	800bbec <_dtoa_r+0x184>
 800bc88:	900f      	str	r0, [sp, #60]	; 0x3c
 800bc8a:	e7b0      	b.n	800bbee <_dtoa_r+0x186>
 800bc8c:	9b05      	ldr	r3, [sp, #20]
 800bc8e:	eba3 030a 	sub.w	r3, r3, sl
 800bc92:	9305      	str	r3, [sp, #20]
 800bc94:	f1ca 0300 	rsb	r3, sl, #0
 800bc98:	9307      	str	r3, [sp, #28]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	930e      	str	r3, [sp, #56]	; 0x38
 800bc9e:	e7bb      	b.n	800bc18 <_dtoa_r+0x1b0>
 800bca0:	2301      	movs	r3, #1
 800bca2:	930a      	str	r3, [sp, #40]	; 0x28
 800bca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	dd59      	ble.n	800bd5e <_dtoa_r+0x2f6>
 800bcaa:	9302      	str	r3, [sp, #8]
 800bcac:	4699      	mov	r9, r3
 800bcae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	6072      	str	r2, [r6, #4]
 800bcb4:	2204      	movs	r2, #4
 800bcb6:	f102 0014 	add.w	r0, r2, #20
 800bcba:	4298      	cmp	r0, r3
 800bcbc:	6871      	ldr	r1, [r6, #4]
 800bcbe:	d953      	bls.n	800bd68 <_dtoa_r+0x300>
 800bcc0:	4620      	mov	r0, r4
 800bcc2:	f000 ffdd 	bl	800cc80 <_Balloc>
 800bcc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcc8:	6030      	str	r0, [r6, #0]
 800bcca:	f1b9 0f0e 	cmp.w	r9, #14
 800bcce:	f8d3 b000 	ldr.w	fp, [r3]
 800bcd2:	f200 80e6 	bhi.w	800bea2 <_dtoa_r+0x43a>
 800bcd6:	2d00      	cmp	r5, #0
 800bcd8:	f000 80e3 	beq.w	800bea2 <_dtoa_r+0x43a>
 800bcdc:	ed9d 7b00 	vldr	d7, [sp]
 800bce0:	f1ba 0f00 	cmp.w	sl, #0
 800bce4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bce8:	dd74      	ble.n	800bdd4 <_dtoa_r+0x36c>
 800bcea:	4a2a      	ldr	r2, [pc, #168]	; (800bd94 <_dtoa_r+0x32c>)
 800bcec:	f00a 030f 	and.w	r3, sl, #15
 800bcf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bcf4:	ed93 7b00 	vldr	d7, [r3]
 800bcf8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bcfc:	06f0      	lsls	r0, r6, #27
 800bcfe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bd02:	d565      	bpl.n	800bdd0 <_dtoa_r+0x368>
 800bd04:	4b24      	ldr	r3, [pc, #144]	; (800bd98 <_dtoa_r+0x330>)
 800bd06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bd0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd0e:	f7f4 fd57 	bl	80007c0 <__aeabi_ddiv>
 800bd12:	e9cd 0100 	strd	r0, r1, [sp]
 800bd16:	f006 060f 	and.w	r6, r6, #15
 800bd1a:	2503      	movs	r5, #3
 800bd1c:	4f1e      	ldr	r7, [pc, #120]	; (800bd98 <_dtoa_r+0x330>)
 800bd1e:	e04c      	b.n	800bdba <_dtoa_r+0x352>
 800bd20:	2301      	movs	r3, #1
 800bd22:	930a      	str	r3, [sp, #40]	; 0x28
 800bd24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd26:	4453      	add	r3, sl
 800bd28:	f103 0901 	add.w	r9, r3, #1
 800bd2c:	9302      	str	r3, [sp, #8]
 800bd2e:	464b      	mov	r3, r9
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	bfb8      	it	lt
 800bd34:	2301      	movlt	r3, #1
 800bd36:	e7ba      	b.n	800bcae <_dtoa_r+0x246>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	e7b2      	b.n	800bca2 <_dtoa_r+0x23a>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	e7f0      	b.n	800bd22 <_dtoa_r+0x2ba>
 800bd40:	2501      	movs	r5, #1
 800bd42:	2300      	movs	r3, #0
 800bd44:	9306      	str	r3, [sp, #24]
 800bd46:	950a      	str	r5, [sp, #40]	; 0x28
 800bd48:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4c:	9302      	str	r3, [sp, #8]
 800bd4e:	4699      	mov	r9, r3
 800bd50:	2200      	movs	r2, #0
 800bd52:	2312      	movs	r3, #18
 800bd54:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd56:	e7aa      	b.n	800bcae <_dtoa_r+0x246>
 800bd58:	2301      	movs	r3, #1
 800bd5a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd5c:	e7f4      	b.n	800bd48 <_dtoa_r+0x2e0>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	9302      	str	r3, [sp, #8]
 800bd62:	4699      	mov	r9, r3
 800bd64:	461a      	mov	r2, r3
 800bd66:	e7f5      	b.n	800bd54 <_dtoa_r+0x2ec>
 800bd68:	3101      	adds	r1, #1
 800bd6a:	6071      	str	r1, [r6, #4]
 800bd6c:	0052      	lsls	r2, r2, #1
 800bd6e:	e7a2      	b.n	800bcb6 <_dtoa_r+0x24e>
 800bd70:	636f4361 	.word	0x636f4361
 800bd74:	3fd287a7 	.word	0x3fd287a7
 800bd78:	8b60c8b3 	.word	0x8b60c8b3
 800bd7c:	3fc68a28 	.word	0x3fc68a28
 800bd80:	509f79fb 	.word	0x509f79fb
 800bd84:	3fd34413 	.word	0x3fd34413
 800bd88:	7ff00000 	.word	0x7ff00000
 800bd8c:	0800d981 	.word	0x0800d981
 800bd90:	3ff80000 	.word	0x3ff80000
 800bd94:	0800da18 	.word	0x0800da18
 800bd98:	0800d9f0 	.word	0x0800d9f0
 800bd9c:	0800d9e1 	.word	0x0800d9e1
 800bda0:	07f1      	lsls	r1, r6, #31
 800bda2:	d508      	bpl.n	800bdb6 <_dtoa_r+0x34e>
 800bda4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bda8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdac:	f7f4 fbde 	bl	800056c <__aeabi_dmul>
 800bdb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bdb4:	3501      	adds	r5, #1
 800bdb6:	1076      	asrs	r6, r6, #1
 800bdb8:	3708      	adds	r7, #8
 800bdba:	2e00      	cmp	r6, #0
 800bdbc:	d1f0      	bne.n	800bda0 <_dtoa_r+0x338>
 800bdbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bdc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdc6:	f7f4 fcfb 	bl	80007c0 <__aeabi_ddiv>
 800bdca:	e9cd 0100 	strd	r0, r1, [sp]
 800bdce:	e01a      	b.n	800be06 <_dtoa_r+0x39e>
 800bdd0:	2502      	movs	r5, #2
 800bdd2:	e7a3      	b.n	800bd1c <_dtoa_r+0x2b4>
 800bdd4:	f000 80a0 	beq.w	800bf18 <_dtoa_r+0x4b0>
 800bdd8:	f1ca 0600 	rsb	r6, sl, #0
 800bddc:	4b9f      	ldr	r3, [pc, #636]	; (800c05c <_dtoa_r+0x5f4>)
 800bdde:	4fa0      	ldr	r7, [pc, #640]	; (800c060 <_dtoa_r+0x5f8>)
 800bde0:	f006 020f 	and.w	r2, r6, #15
 800bde4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bdf0:	f7f4 fbbc 	bl	800056c <__aeabi_dmul>
 800bdf4:	e9cd 0100 	strd	r0, r1, [sp]
 800bdf8:	1136      	asrs	r6, r6, #4
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	2502      	movs	r5, #2
 800bdfe:	2e00      	cmp	r6, #0
 800be00:	d17f      	bne.n	800bf02 <_dtoa_r+0x49a>
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1e1      	bne.n	800bdca <_dtoa_r+0x362>
 800be06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be08:	2b00      	cmp	r3, #0
 800be0a:	f000 8087 	beq.w	800bf1c <_dtoa_r+0x4b4>
 800be0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be12:	2200      	movs	r2, #0
 800be14:	4b93      	ldr	r3, [pc, #588]	; (800c064 <_dtoa_r+0x5fc>)
 800be16:	4630      	mov	r0, r6
 800be18:	4639      	mov	r1, r7
 800be1a:	f7f4 fe19 	bl	8000a50 <__aeabi_dcmplt>
 800be1e:	2800      	cmp	r0, #0
 800be20:	d07c      	beq.n	800bf1c <_dtoa_r+0x4b4>
 800be22:	f1b9 0f00 	cmp.w	r9, #0
 800be26:	d079      	beq.n	800bf1c <_dtoa_r+0x4b4>
 800be28:	9b02      	ldr	r3, [sp, #8]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	dd35      	ble.n	800be9a <_dtoa_r+0x432>
 800be2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800be32:	9308      	str	r3, [sp, #32]
 800be34:	4639      	mov	r1, r7
 800be36:	2200      	movs	r2, #0
 800be38:	4b8b      	ldr	r3, [pc, #556]	; (800c068 <_dtoa_r+0x600>)
 800be3a:	4630      	mov	r0, r6
 800be3c:	f7f4 fb96 	bl	800056c <__aeabi_dmul>
 800be40:	e9cd 0100 	strd	r0, r1, [sp]
 800be44:	9f02      	ldr	r7, [sp, #8]
 800be46:	3501      	adds	r5, #1
 800be48:	4628      	mov	r0, r5
 800be4a:	f7f4 fb25 	bl	8000498 <__aeabi_i2d>
 800be4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be52:	f7f4 fb8b 	bl	800056c <__aeabi_dmul>
 800be56:	2200      	movs	r2, #0
 800be58:	4b84      	ldr	r3, [pc, #528]	; (800c06c <_dtoa_r+0x604>)
 800be5a:	f7f4 f9d1 	bl	8000200 <__adddf3>
 800be5e:	4605      	mov	r5, r0
 800be60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800be64:	2f00      	cmp	r7, #0
 800be66:	d15d      	bne.n	800bf24 <_dtoa_r+0x4bc>
 800be68:	2200      	movs	r2, #0
 800be6a:	4b81      	ldr	r3, [pc, #516]	; (800c070 <_dtoa_r+0x608>)
 800be6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be70:	f7f4 f9c4 	bl	80001fc <__aeabi_dsub>
 800be74:	462a      	mov	r2, r5
 800be76:	4633      	mov	r3, r6
 800be78:	e9cd 0100 	strd	r0, r1, [sp]
 800be7c:	f7f4 fe06 	bl	8000a8c <__aeabi_dcmpgt>
 800be80:	2800      	cmp	r0, #0
 800be82:	f040 8288 	bne.w	800c396 <_dtoa_r+0x92e>
 800be86:	462a      	mov	r2, r5
 800be88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800be8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be90:	f7f4 fdde 	bl	8000a50 <__aeabi_dcmplt>
 800be94:	2800      	cmp	r0, #0
 800be96:	f040 827c 	bne.w	800c392 <_dtoa_r+0x92a>
 800be9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be9e:	e9cd 2300 	strd	r2, r3, [sp]
 800bea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	f2c0 8150 	blt.w	800c14a <_dtoa_r+0x6e2>
 800beaa:	f1ba 0f0e 	cmp.w	sl, #14
 800beae:	f300 814c 	bgt.w	800c14a <_dtoa_r+0x6e2>
 800beb2:	4b6a      	ldr	r3, [pc, #424]	; (800c05c <_dtoa_r+0x5f4>)
 800beb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800beb8:	ed93 7b00 	vldr	d7, [r3]
 800bebc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bec4:	f280 80d8 	bge.w	800c078 <_dtoa_r+0x610>
 800bec8:	f1b9 0f00 	cmp.w	r9, #0
 800becc:	f300 80d4 	bgt.w	800c078 <_dtoa_r+0x610>
 800bed0:	f040 825e 	bne.w	800c390 <_dtoa_r+0x928>
 800bed4:	2200      	movs	r2, #0
 800bed6:	4b66      	ldr	r3, [pc, #408]	; (800c070 <_dtoa_r+0x608>)
 800bed8:	ec51 0b17 	vmov	r0, r1, d7
 800bedc:	f7f4 fb46 	bl	800056c <__aeabi_dmul>
 800bee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bee4:	f7f4 fdc8 	bl	8000a78 <__aeabi_dcmpge>
 800bee8:	464f      	mov	r7, r9
 800beea:	464e      	mov	r6, r9
 800beec:	2800      	cmp	r0, #0
 800beee:	f040 8234 	bne.w	800c35a <_dtoa_r+0x8f2>
 800bef2:	2331      	movs	r3, #49	; 0x31
 800bef4:	f10b 0501 	add.w	r5, fp, #1
 800bef8:	f88b 3000 	strb.w	r3, [fp]
 800befc:	f10a 0a01 	add.w	sl, sl, #1
 800bf00:	e22f      	b.n	800c362 <_dtoa_r+0x8fa>
 800bf02:	07f2      	lsls	r2, r6, #31
 800bf04:	d505      	bpl.n	800bf12 <_dtoa_r+0x4aa>
 800bf06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf0a:	f7f4 fb2f 	bl	800056c <__aeabi_dmul>
 800bf0e:	3501      	adds	r5, #1
 800bf10:	2301      	movs	r3, #1
 800bf12:	1076      	asrs	r6, r6, #1
 800bf14:	3708      	adds	r7, #8
 800bf16:	e772      	b.n	800bdfe <_dtoa_r+0x396>
 800bf18:	2502      	movs	r5, #2
 800bf1a:	e774      	b.n	800be06 <_dtoa_r+0x39e>
 800bf1c:	f8cd a020 	str.w	sl, [sp, #32]
 800bf20:	464f      	mov	r7, r9
 800bf22:	e791      	b.n	800be48 <_dtoa_r+0x3e0>
 800bf24:	4b4d      	ldr	r3, [pc, #308]	; (800c05c <_dtoa_r+0x5f4>)
 800bf26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf2a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bf2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d047      	beq.n	800bfc4 <_dtoa_r+0x55c>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	2000      	movs	r0, #0
 800bf3a:	494e      	ldr	r1, [pc, #312]	; (800c074 <_dtoa_r+0x60c>)
 800bf3c:	f7f4 fc40 	bl	80007c0 <__aeabi_ddiv>
 800bf40:	462a      	mov	r2, r5
 800bf42:	4633      	mov	r3, r6
 800bf44:	f7f4 f95a 	bl	80001fc <__aeabi_dsub>
 800bf48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bf4c:	465d      	mov	r5, fp
 800bf4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf52:	f7f4 fdbb 	bl	8000acc <__aeabi_d2iz>
 800bf56:	4606      	mov	r6, r0
 800bf58:	f7f4 fa9e 	bl	8000498 <__aeabi_i2d>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf64:	f7f4 f94a 	bl	80001fc <__aeabi_dsub>
 800bf68:	3630      	adds	r6, #48	; 0x30
 800bf6a:	f805 6b01 	strb.w	r6, [r5], #1
 800bf6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bf72:	e9cd 0100 	strd	r0, r1, [sp]
 800bf76:	f7f4 fd6b 	bl	8000a50 <__aeabi_dcmplt>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d163      	bne.n	800c046 <_dtoa_r+0x5de>
 800bf7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf82:	2000      	movs	r0, #0
 800bf84:	4937      	ldr	r1, [pc, #220]	; (800c064 <_dtoa_r+0x5fc>)
 800bf86:	f7f4 f939 	bl	80001fc <__aeabi_dsub>
 800bf8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bf8e:	f7f4 fd5f 	bl	8000a50 <__aeabi_dcmplt>
 800bf92:	2800      	cmp	r0, #0
 800bf94:	f040 80b7 	bne.w	800c106 <_dtoa_r+0x69e>
 800bf98:	eba5 030b 	sub.w	r3, r5, fp
 800bf9c:	429f      	cmp	r7, r3
 800bf9e:	f77f af7c 	ble.w	800be9a <_dtoa_r+0x432>
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	4b30      	ldr	r3, [pc, #192]	; (800c068 <_dtoa_r+0x600>)
 800bfa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bfaa:	f7f4 fadf 	bl	800056c <__aeabi_dmul>
 800bfae:	2200      	movs	r2, #0
 800bfb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bfb4:	4b2c      	ldr	r3, [pc, #176]	; (800c068 <_dtoa_r+0x600>)
 800bfb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfba:	f7f4 fad7 	bl	800056c <__aeabi_dmul>
 800bfbe:	e9cd 0100 	strd	r0, r1, [sp]
 800bfc2:	e7c4      	b.n	800bf4e <_dtoa_r+0x4e6>
 800bfc4:	462a      	mov	r2, r5
 800bfc6:	4633      	mov	r3, r6
 800bfc8:	f7f4 fad0 	bl	800056c <__aeabi_dmul>
 800bfcc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bfd0:	eb0b 0507 	add.w	r5, fp, r7
 800bfd4:	465e      	mov	r6, fp
 800bfd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfda:	f7f4 fd77 	bl	8000acc <__aeabi_d2iz>
 800bfde:	4607      	mov	r7, r0
 800bfe0:	f7f4 fa5a 	bl	8000498 <__aeabi_i2d>
 800bfe4:	3730      	adds	r7, #48	; 0x30
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	460b      	mov	r3, r1
 800bfea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfee:	f7f4 f905 	bl	80001fc <__aeabi_dsub>
 800bff2:	f806 7b01 	strb.w	r7, [r6], #1
 800bff6:	42ae      	cmp	r6, r5
 800bff8:	e9cd 0100 	strd	r0, r1, [sp]
 800bffc:	f04f 0200 	mov.w	r2, #0
 800c000:	d126      	bne.n	800c050 <_dtoa_r+0x5e8>
 800c002:	4b1c      	ldr	r3, [pc, #112]	; (800c074 <_dtoa_r+0x60c>)
 800c004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c008:	f7f4 f8fa 	bl	8000200 <__adddf3>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c014:	f7f4 fd3a 	bl	8000a8c <__aeabi_dcmpgt>
 800c018:	2800      	cmp	r0, #0
 800c01a:	d174      	bne.n	800c106 <_dtoa_r+0x69e>
 800c01c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c020:	2000      	movs	r0, #0
 800c022:	4914      	ldr	r1, [pc, #80]	; (800c074 <_dtoa_r+0x60c>)
 800c024:	f7f4 f8ea 	bl	80001fc <__aeabi_dsub>
 800c028:	4602      	mov	r2, r0
 800c02a:	460b      	mov	r3, r1
 800c02c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c030:	f7f4 fd0e 	bl	8000a50 <__aeabi_dcmplt>
 800c034:	2800      	cmp	r0, #0
 800c036:	f43f af30 	beq.w	800be9a <_dtoa_r+0x432>
 800c03a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c03e:	2b30      	cmp	r3, #48	; 0x30
 800c040:	f105 32ff 	add.w	r2, r5, #4294967295
 800c044:	d002      	beq.n	800c04c <_dtoa_r+0x5e4>
 800c046:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c04a:	e04a      	b.n	800c0e2 <_dtoa_r+0x67a>
 800c04c:	4615      	mov	r5, r2
 800c04e:	e7f4      	b.n	800c03a <_dtoa_r+0x5d2>
 800c050:	4b05      	ldr	r3, [pc, #20]	; (800c068 <_dtoa_r+0x600>)
 800c052:	f7f4 fa8b 	bl	800056c <__aeabi_dmul>
 800c056:	e9cd 0100 	strd	r0, r1, [sp]
 800c05a:	e7bc      	b.n	800bfd6 <_dtoa_r+0x56e>
 800c05c:	0800da18 	.word	0x0800da18
 800c060:	0800d9f0 	.word	0x0800d9f0
 800c064:	3ff00000 	.word	0x3ff00000
 800c068:	40240000 	.word	0x40240000
 800c06c:	401c0000 	.word	0x401c0000
 800c070:	40140000 	.word	0x40140000
 800c074:	3fe00000 	.word	0x3fe00000
 800c078:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c07c:	465d      	mov	r5, fp
 800c07e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c082:	4630      	mov	r0, r6
 800c084:	4639      	mov	r1, r7
 800c086:	f7f4 fb9b 	bl	80007c0 <__aeabi_ddiv>
 800c08a:	f7f4 fd1f 	bl	8000acc <__aeabi_d2iz>
 800c08e:	4680      	mov	r8, r0
 800c090:	f7f4 fa02 	bl	8000498 <__aeabi_i2d>
 800c094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c098:	f7f4 fa68 	bl	800056c <__aeabi_dmul>
 800c09c:	4602      	mov	r2, r0
 800c09e:	460b      	mov	r3, r1
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	4639      	mov	r1, r7
 800c0a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c0a8:	f7f4 f8a8 	bl	80001fc <__aeabi_dsub>
 800c0ac:	f805 6b01 	strb.w	r6, [r5], #1
 800c0b0:	eba5 060b 	sub.w	r6, r5, fp
 800c0b4:	45b1      	cmp	r9, r6
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	d139      	bne.n	800c130 <_dtoa_r+0x6c8>
 800c0bc:	f7f4 f8a0 	bl	8000200 <__adddf3>
 800c0c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	460f      	mov	r7, r1
 800c0c8:	f7f4 fce0 	bl	8000a8c <__aeabi_dcmpgt>
 800c0cc:	b9c8      	cbnz	r0, 800c102 <_dtoa_r+0x69a>
 800c0ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	4639      	mov	r1, r7
 800c0d6:	f7f4 fcb1 	bl	8000a3c <__aeabi_dcmpeq>
 800c0da:	b110      	cbz	r0, 800c0e2 <_dtoa_r+0x67a>
 800c0dc:	f018 0f01 	tst.w	r8, #1
 800c0e0:	d10f      	bne.n	800c102 <_dtoa_r+0x69a>
 800c0e2:	9904      	ldr	r1, [sp, #16]
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f000 fdff 	bl	800cce8 <_Bfree>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c0ee:	702b      	strb	r3, [r5, #0]
 800c0f0:	f10a 0301 	add.w	r3, sl, #1
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f000 8241 	beq.w	800c580 <_dtoa_r+0xb18>
 800c0fe:	601d      	str	r5, [r3, #0]
 800c100:	e23e      	b.n	800c580 <_dtoa_r+0xb18>
 800c102:	f8cd a020 	str.w	sl, [sp, #32]
 800c106:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c10a:	2a39      	cmp	r2, #57	; 0x39
 800c10c:	f105 33ff 	add.w	r3, r5, #4294967295
 800c110:	d108      	bne.n	800c124 <_dtoa_r+0x6bc>
 800c112:	459b      	cmp	fp, r3
 800c114:	d10a      	bne.n	800c12c <_dtoa_r+0x6c4>
 800c116:	9b08      	ldr	r3, [sp, #32]
 800c118:	3301      	adds	r3, #1
 800c11a:	9308      	str	r3, [sp, #32]
 800c11c:	2330      	movs	r3, #48	; 0x30
 800c11e:	f88b 3000 	strb.w	r3, [fp]
 800c122:	465b      	mov	r3, fp
 800c124:	781a      	ldrb	r2, [r3, #0]
 800c126:	3201      	adds	r2, #1
 800c128:	701a      	strb	r2, [r3, #0]
 800c12a:	e78c      	b.n	800c046 <_dtoa_r+0x5de>
 800c12c:	461d      	mov	r5, r3
 800c12e:	e7ea      	b.n	800c106 <_dtoa_r+0x69e>
 800c130:	2200      	movs	r2, #0
 800c132:	4b9b      	ldr	r3, [pc, #620]	; (800c3a0 <_dtoa_r+0x938>)
 800c134:	f7f4 fa1a 	bl	800056c <__aeabi_dmul>
 800c138:	2200      	movs	r2, #0
 800c13a:	2300      	movs	r3, #0
 800c13c:	4606      	mov	r6, r0
 800c13e:	460f      	mov	r7, r1
 800c140:	f7f4 fc7c 	bl	8000a3c <__aeabi_dcmpeq>
 800c144:	2800      	cmp	r0, #0
 800c146:	d09a      	beq.n	800c07e <_dtoa_r+0x616>
 800c148:	e7cb      	b.n	800c0e2 <_dtoa_r+0x67a>
 800c14a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c14c:	2a00      	cmp	r2, #0
 800c14e:	f000 808b 	beq.w	800c268 <_dtoa_r+0x800>
 800c152:	9a06      	ldr	r2, [sp, #24]
 800c154:	2a01      	cmp	r2, #1
 800c156:	dc6e      	bgt.n	800c236 <_dtoa_r+0x7ce>
 800c158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c15a:	2a00      	cmp	r2, #0
 800c15c:	d067      	beq.n	800c22e <_dtoa_r+0x7c6>
 800c15e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c162:	9f07      	ldr	r7, [sp, #28]
 800c164:	9d05      	ldr	r5, [sp, #20]
 800c166:	9a05      	ldr	r2, [sp, #20]
 800c168:	2101      	movs	r1, #1
 800c16a:	441a      	add	r2, r3
 800c16c:	4620      	mov	r0, r4
 800c16e:	9205      	str	r2, [sp, #20]
 800c170:	4498      	add	r8, r3
 800c172:	f000 fe97 	bl	800cea4 <__i2b>
 800c176:	4606      	mov	r6, r0
 800c178:	2d00      	cmp	r5, #0
 800c17a:	dd0c      	ble.n	800c196 <_dtoa_r+0x72e>
 800c17c:	f1b8 0f00 	cmp.w	r8, #0
 800c180:	dd09      	ble.n	800c196 <_dtoa_r+0x72e>
 800c182:	4545      	cmp	r5, r8
 800c184:	9a05      	ldr	r2, [sp, #20]
 800c186:	462b      	mov	r3, r5
 800c188:	bfa8      	it	ge
 800c18a:	4643      	movge	r3, r8
 800c18c:	1ad2      	subs	r2, r2, r3
 800c18e:	9205      	str	r2, [sp, #20]
 800c190:	1aed      	subs	r5, r5, r3
 800c192:	eba8 0803 	sub.w	r8, r8, r3
 800c196:	9b07      	ldr	r3, [sp, #28]
 800c198:	b1eb      	cbz	r3, 800c1d6 <_dtoa_r+0x76e>
 800c19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d067      	beq.n	800c270 <_dtoa_r+0x808>
 800c1a0:	b18f      	cbz	r7, 800c1c6 <_dtoa_r+0x75e>
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	463a      	mov	r2, r7
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f000 ff1c 	bl	800cfe4 <__pow5mult>
 800c1ac:	9a04      	ldr	r2, [sp, #16]
 800c1ae:	4601      	mov	r1, r0
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 fe7f 	bl	800ceb6 <__multiply>
 800c1b8:	9904      	ldr	r1, [sp, #16]
 800c1ba:	9008      	str	r0, [sp, #32]
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f000 fd93 	bl	800cce8 <_Bfree>
 800c1c2:	9b08      	ldr	r3, [sp, #32]
 800c1c4:	9304      	str	r3, [sp, #16]
 800c1c6:	9b07      	ldr	r3, [sp, #28]
 800c1c8:	1bda      	subs	r2, r3, r7
 800c1ca:	d004      	beq.n	800c1d6 <_dtoa_r+0x76e>
 800c1cc:	9904      	ldr	r1, [sp, #16]
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f000 ff08 	bl	800cfe4 <__pow5mult>
 800c1d4:	9004      	str	r0, [sp, #16]
 800c1d6:	2101      	movs	r1, #1
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 fe63 	bl	800cea4 <__i2b>
 800c1de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1e0:	4607      	mov	r7, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 81d0 	beq.w	800c588 <_dtoa_r+0xb20>
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f000 fef9 	bl	800cfe4 <__pow5mult>
 800c1f2:	9b06      	ldr	r3, [sp, #24]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	4607      	mov	r7, r0
 800c1f8:	dc40      	bgt.n	800c27c <_dtoa_r+0x814>
 800c1fa:	9b00      	ldr	r3, [sp, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d139      	bne.n	800c274 <_dtoa_r+0x80c>
 800c200:	9b01      	ldr	r3, [sp, #4]
 800c202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c206:	2b00      	cmp	r3, #0
 800c208:	d136      	bne.n	800c278 <_dtoa_r+0x810>
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c210:	0d1b      	lsrs	r3, r3, #20
 800c212:	051b      	lsls	r3, r3, #20
 800c214:	b12b      	cbz	r3, 800c222 <_dtoa_r+0x7ba>
 800c216:	9b05      	ldr	r3, [sp, #20]
 800c218:	3301      	adds	r3, #1
 800c21a:	9305      	str	r3, [sp, #20]
 800c21c:	f108 0801 	add.w	r8, r8, #1
 800c220:	2301      	movs	r3, #1
 800c222:	9307      	str	r3, [sp, #28]
 800c224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c226:	2b00      	cmp	r3, #0
 800c228:	d12a      	bne.n	800c280 <_dtoa_r+0x818>
 800c22a:	2001      	movs	r0, #1
 800c22c:	e030      	b.n	800c290 <_dtoa_r+0x828>
 800c22e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c230:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c234:	e795      	b.n	800c162 <_dtoa_r+0x6fa>
 800c236:	9b07      	ldr	r3, [sp, #28]
 800c238:	f109 37ff 	add.w	r7, r9, #4294967295
 800c23c:	42bb      	cmp	r3, r7
 800c23e:	bfbf      	itttt	lt
 800c240:	9b07      	ldrlt	r3, [sp, #28]
 800c242:	9707      	strlt	r7, [sp, #28]
 800c244:	1afa      	sublt	r2, r7, r3
 800c246:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c248:	bfbb      	ittet	lt
 800c24a:	189b      	addlt	r3, r3, r2
 800c24c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c24e:	1bdf      	subge	r7, r3, r7
 800c250:	2700      	movlt	r7, #0
 800c252:	f1b9 0f00 	cmp.w	r9, #0
 800c256:	bfb5      	itete	lt
 800c258:	9b05      	ldrlt	r3, [sp, #20]
 800c25a:	9d05      	ldrge	r5, [sp, #20]
 800c25c:	eba3 0509 	sublt.w	r5, r3, r9
 800c260:	464b      	movge	r3, r9
 800c262:	bfb8      	it	lt
 800c264:	2300      	movlt	r3, #0
 800c266:	e77e      	b.n	800c166 <_dtoa_r+0x6fe>
 800c268:	9f07      	ldr	r7, [sp, #28]
 800c26a:	9d05      	ldr	r5, [sp, #20]
 800c26c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c26e:	e783      	b.n	800c178 <_dtoa_r+0x710>
 800c270:	9a07      	ldr	r2, [sp, #28]
 800c272:	e7ab      	b.n	800c1cc <_dtoa_r+0x764>
 800c274:	2300      	movs	r3, #0
 800c276:	e7d4      	b.n	800c222 <_dtoa_r+0x7ba>
 800c278:	9b00      	ldr	r3, [sp, #0]
 800c27a:	e7d2      	b.n	800c222 <_dtoa_r+0x7ba>
 800c27c:	2300      	movs	r3, #0
 800c27e:	9307      	str	r3, [sp, #28]
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c286:	6918      	ldr	r0, [r3, #16]
 800c288:	f000 fdbe 	bl	800ce08 <__hi0bits>
 800c28c:	f1c0 0020 	rsb	r0, r0, #32
 800c290:	4440      	add	r0, r8
 800c292:	f010 001f 	ands.w	r0, r0, #31
 800c296:	d047      	beq.n	800c328 <_dtoa_r+0x8c0>
 800c298:	f1c0 0320 	rsb	r3, r0, #32
 800c29c:	2b04      	cmp	r3, #4
 800c29e:	dd3b      	ble.n	800c318 <_dtoa_r+0x8b0>
 800c2a0:	9b05      	ldr	r3, [sp, #20]
 800c2a2:	f1c0 001c 	rsb	r0, r0, #28
 800c2a6:	4403      	add	r3, r0
 800c2a8:	9305      	str	r3, [sp, #20]
 800c2aa:	4405      	add	r5, r0
 800c2ac:	4480      	add	r8, r0
 800c2ae:	9b05      	ldr	r3, [sp, #20]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	dd05      	ble.n	800c2c0 <_dtoa_r+0x858>
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	9904      	ldr	r1, [sp, #16]
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f000 fee1 	bl	800d080 <__lshift>
 800c2be:	9004      	str	r0, [sp, #16]
 800c2c0:	f1b8 0f00 	cmp.w	r8, #0
 800c2c4:	dd05      	ble.n	800c2d2 <_dtoa_r+0x86a>
 800c2c6:	4639      	mov	r1, r7
 800c2c8:	4642      	mov	r2, r8
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 fed8 	bl	800d080 <__lshift>
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2d4:	b353      	cbz	r3, 800c32c <_dtoa_r+0x8c4>
 800c2d6:	4639      	mov	r1, r7
 800c2d8:	9804      	ldr	r0, [sp, #16]
 800c2da:	f000 ff25 	bl	800d128 <__mcmp>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	da24      	bge.n	800c32c <_dtoa_r+0x8c4>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	220a      	movs	r2, #10
 800c2e6:	9904      	ldr	r1, [sp, #16]
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f000 fd14 	bl	800cd16 <__multadd>
 800c2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2f0:	9004      	str	r0, [sp, #16]
 800c2f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 814d 	beq.w	800c596 <_dtoa_r+0xb2e>
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4631      	mov	r1, r6
 800c300:	220a      	movs	r2, #10
 800c302:	4620      	mov	r0, r4
 800c304:	f000 fd07 	bl	800cd16 <__multadd>
 800c308:	9b02      	ldr	r3, [sp, #8]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	4606      	mov	r6, r0
 800c30e:	dc4f      	bgt.n	800c3b0 <_dtoa_r+0x948>
 800c310:	9b06      	ldr	r3, [sp, #24]
 800c312:	2b02      	cmp	r3, #2
 800c314:	dd4c      	ble.n	800c3b0 <_dtoa_r+0x948>
 800c316:	e011      	b.n	800c33c <_dtoa_r+0x8d4>
 800c318:	d0c9      	beq.n	800c2ae <_dtoa_r+0x846>
 800c31a:	9a05      	ldr	r2, [sp, #20]
 800c31c:	331c      	adds	r3, #28
 800c31e:	441a      	add	r2, r3
 800c320:	9205      	str	r2, [sp, #20]
 800c322:	441d      	add	r5, r3
 800c324:	4498      	add	r8, r3
 800c326:	e7c2      	b.n	800c2ae <_dtoa_r+0x846>
 800c328:	4603      	mov	r3, r0
 800c32a:	e7f6      	b.n	800c31a <_dtoa_r+0x8b2>
 800c32c:	f1b9 0f00 	cmp.w	r9, #0
 800c330:	dc38      	bgt.n	800c3a4 <_dtoa_r+0x93c>
 800c332:	9b06      	ldr	r3, [sp, #24]
 800c334:	2b02      	cmp	r3, #2
 800c336:	dd35      	ble.n	800c3a4 <_dtoa_r+0x93c>
 800c338:	f8cd 9008 	str.w	r9, [sp, #8]
 800c33c:	9b02      	ldr	r3, [sp, #8]
 800c33e:	b963      	cbnz	r3, 800c35a <_dtoa_r+0x8f2>
 800c340:	4639      	mov	r1, r7
 800c342:	2205      	movs	r2, #5
 800c344:	4620      	mov	r0, r4
 800c346:	f000 fce6 	bl	800cd16 <__multadd>
 800c34a:	4601      	mov	r1, r0
 800c34c:	4607      	mov	r7, r0
 800c34e:	9804      	ldr	r0, [sp, #16]
 800c350:	f000 feea 	bl	800d128 <__mcmp>
 800c354:	2800      	cmp	r0, #0
 800c356:	f73f adcc 	bgt.w	800bef2 <_dtoa_r+0x48a>
 800c35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c35c:	465d      	mov	r5, fp
 800c35e:	ea6f 0a03 	mvn.w	sl, r3
 800c362:	f04f 0900 	mov.w	r9, #0
 800c366:	4639      	mov	r1, r7
 800c368:	4620      	mov	r0, r4
 800c36a:	f000 fcbd 	bl	800cce8 <_Bfree>
 800c36e:	2e00      	cmp	r6, #0
 800c370:	f43f aeb7 	beq.w	800c0e2 <_dtoa_r+0x67a>
 800c374:	f1b9 0f00 	cmp.w	r9, #0
 800c378:	d005      	beq.n	800c386 <_dtoa_r+0x91e>
 800c37a:	45b1      	cmp	r9, r6
 800c37c:	d003      	beq.n	800c386 <_dtoa_r+0x91e>
 800c37e:	4649      	mov	r1, r9
 800c380:	4620      	mov	r0, r4
 800c382:	f000 fcb1 	bl	800cce8 <_Bfree>
 800c386:	4631      	mov	r1, r6
 800c388:	4620      	mov	r0, r4
 800c38a:	f000 fcad 	bl	800cce8 <_Bfree>
 800c38e:	e6a8      	b.n	800c0e2 <_dtoa_r+0x67a>
 800c390:	2700      	movs	r7, #0
 800c392:	463e      	mov	r6, r7
 800c394:	e7e1      	b.n	800c35a <_dtoa_r+0x8f2>
 800c396:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c39a:	463e      	mov	r6, r7
 800c39c:	e5a9      	b.n	800bef2 <_dtoa_r+0x48a>
 800c39e:	bf00      	nop
 800c3a0:	40240000 	.word	0x40240000
 800c3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f000 80fa 	beq.w	800c5a4 <_dtoa_r+0xb3c>
 800c3b0:	2d00      	cmp	r5, #0
 800c3b2:	dd05      	ble.n	800c3c0 <_dtoa_r+0x958>
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	462a      	mov	r2, r5
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f000 fe61 	bl	800d080 <__lshift>
 800c3be:	4606      	mov	r6, r0
 800c3c0:	9b07      	ldr	r3, [sp, #28]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d04c      	beq.n	800c460 <_dtoa_r+0x9f8>
 800c3c6:	6871      	ldr	r1, [r6, #4]
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f000 fc59 	bl	800cc80 <_Balloc>
 800c3ce:	6932      	ldr	r2, [r6, #16]
 800c3d0:	3202      	adds	r2, #2
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	0092      	lsls	r2, r2, #2
 800c3d6:	f106 010c 	add.w	r1, r6, #12
 800c3da:	300c      	adds	r0, #12
 800c3dc:	f7fe f8a2 	bl	800a524 <memcpy>
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f000 fe4b 	bl	800d080 <__lshift>
 800c3ea:	9b00      	ldr	r3, [sp, #0]
 800c3ec:	f8cd b014 	str.w	fp, [sp, #20]
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	46b1      	mov	r9, r6
 800c3f6:	9307      	str	r3, [sp, #28]
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	9804      	ldr	r0, [sp, #16]
 800c3fe:	f7ff faa5 	bl	800b94c <quorem>
 800c402:	4649      	mov	r1, r9
 800c404:	4605      	mov	r5, r0
 800c406:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c40a:	9804      	ldr	r0, [sp, #16]
 800c40c:	f000 fe8c 	bl	800d128 <__mcmp>
 800c410:	4632      	mov	r2, r6
 800c412:	9000      	str	r0, [sp, #0]
 800c414:	4639      	mov	r1, r7
 800c416:	4620      	mov	r0, r4
 800c418:	f000 fea0 	bl	800d15c <__mdiff>
 800c41c:	68c3      	ldr	r3, [r0, #12]
 800c41e:	4602      	mov	r2, r0
 800c420:	bb03      	cbnz	r3, 800c464 <_dtoa_r+0x9fc>
 800c422:	4601      	mov	r1, r0
 800c424:	9008      	str	r0, [sp, #32]
 800c426:	9804      	ldr	r0, [sp, #16]
 800c428:	f000 fe7e 	bl	800d128 <__mcmp>
 800c42c:	9a08      	ldr	r2, [sp, #32]
 800c42e:	4603      	mov	r3, r0
 800c430:	4611      	mov	r1, r2
 800c432:	4620      	mov	r0, r4
 800c434:	9308      	str	r3, [sp, #32]
 800c436:	f000 fc57 	bl	800cce8 <_Bfree>
 800c43a:	9b08      	ldr	r3, [sp, #32]
 800c43c:	b9a3      	cbnz	r3, 800c468 <_dtoa_r+0xa00>
 800c43e:	9a06      	ldr	r2, [sp, #24]
 800c440:	b992      	cbnz	r2, 800c468 <_dtoa_r+0xa00>
 800c442:	9a07      	ldr	r2, [sp, #28]
 800c444:	b982      	cbnz	r2, 800c468 <_dtoa_r+0xa00>
 800c446:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c44a:	d029      	beq.n	800c4a0 <_dtoa_r+0xa38>
 800c44c:	9b00      	ldr	r3, [sp, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	dd01      	ble.n	800c456 <_dtoa_r+0x9ee>
 800c452:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c456:	9b05      	ldr	r3, [sp, #20]
 800c458:	1c5d      	adds	r5, r3, #1
 800c45a:	f883 8000 	strb.w	r8, [r3]
 800c45e:	e782      	b.n	800c366 <_dtoa_r+0x8fe>
 800c460:	4630      	mov	r0, r6
 800c462:	e7c2      	b.n	800c3ea <_dtoa_r+0x982>
 800c464:	2301      	movs	r3, #1
 800c466:	e7e3      	b.n	800c430 <_dtoa_r+0x9c8>
 800c468:	9a00      	ldr	r2, [sp, #0]
 800c46a:	2a00      	cmp	r2, #0
 800c46c:	db04      	blt.n	800c478 <_dtoa_r+0xa10>
 800c46e:	d125      	bne.n	800c4bc <_dtoa_r+0xa54>
 800c470:	9a06      	ldr	r2, [sp, #24]
 800c472:	bb1a      	cbnz	r2, 800c4bc <_dtoa_r+0xa54>
 800c474:	9a07      	ldr	r2, [sp, #28]
 800c476:	bb0a      	cbnz	r2, 800c4bc <_dtoa_r+0xa54>
 800c478:	2b00      	cmp	r3, #0
 800c47a:	ddec      	ble.n	800c456 <_dtoa_r+0x9ee>
 800c47c:	2201      	movs	r2, #1
 800c47e:	9904      	ldr	r1, [sp, #16]
 800c480:	4620      	mov	r0, r4
 800c482:	f000 fdfd 	bl	800d080 <__lshift>
 800c486:	4639      	mov	r1, r7
 800c488:	9004      	str	r0, [sp, #16]
 800c48a:	f000 fe4d 	bl	800d128 <__mcmp>
 800c48e:	2800      	cmp	r0, #0
 800c490:	dc03      	bgt.n	800c49a <_dtoa_r+0xa32>
 800c492:	d1e0      	bne.n	800c456 <_dtoa_r+0x9ee>
 800c494:	f018 0f01 	tst.w	r8, #1
 800c498:	d0dd      	beq.n	800c456 <_dtoa_r+0x9ee>
 800c49a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c49e:	d1d8      	bne.n	800c452 <_dtoa_r+0x9ea>
 800c4a0:	9b05      	ldr	r3, [sp, #20]
 800c4a2:	9a05      	ldr	r2, [sp, #20]
 800c4a4:	1c5d      	adds	r5, r3, #1
 800c4a6:	2339      	movs	r3, #57	; 0x39
 800c4a8:	7013      	strb	r3, [r2, #0]
 800c4aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c4ae:	2b39      	cmp	r3, #57	; 0x39
 800c4b0:	f105 32ff 	add.w	r2, r5, #4294967295
 800c4b4:	d04f      	beq.n	800c556 <_dtoa_r+0xaee>
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	7013      	strb	r3, [r2, #0]
 800c4ba:	e754      	b.n	800c366 <_dtoa_r+0x8fe>
 800c4bc:	9a05      	ldr	r2, [sp, #20]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f102 0501 	add.w	r5, r2, #1
 800c4c4:	dd06      	ble.n	800c4d4 <_dtoa_r+0xa6c>
 800c4c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c4ca:	d0e9      	beq.n	800c4a0 <_dtoa_r+0xa38>
 800c4cc:	f108 0801 	add.w	r8, r8, #1
 800c4d0:	9b05      	ldr	r3, [sp, #20]
 800c4d2:	e7c2      	b.n	800c45a <_dtoa_r+0x9f2>
 800c4d4:	9a02      	ldr	r2, [sp, #8]
 800c4d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c4da:	eba5 030b 	sub.w	r3, r5, fp
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d021      	beq.n	800c526 <_dtoa_r+0xabe>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	220a      	movs	r2, #10
 800c4e6:	9904      	ldr	r1, [sp, #16]
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 fc14 	bl	800cd16 <__multadd>
 800c4ee:	45b1      	cmp	r9, r6
 800c4f0:	9004      	str	r0, [sp, #16]
 800c4f2:	f04f 0300 	mov.w	r3, #0
 800c4f6:	f04f 020a 	mov.w	r2, #10
 800c4fa:	4649      	mov	r1, r9
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	d105      	bne.n	800c50c <_dtoa_r+0xaa4>
 800c500:	f000 fc09 	bl	800cd16 <__multadd>
 800c504:	4681      	mov	r9, r0
 800c506:	4606      	mov	r6, r0
 800c508:	9505      	str	r5, [sp, #20]
 800c50a:	e776      	b.n	800c3fa <_dtoa_r+0x992>
 800c50c:	f000 fc03 	bl	800cd16 <__multadd>
 800c510:	4631      	mov	r1, r6
 800c512:	4681      	mov	r9, r0
 800c514:	2300      	movs	r3, #0
 800c516:	220a      	movs	r2, #10
 800c518:	4620      	mov	r0, r4
 800c51a:	f000 fbfc 	bl	800cd16 <__multadd>
 800c51e:	4606      	mov	r6, r0
 800c520:	e7f2      	b.n	800c508 <_dtoa_r+0xaa0>
 800c522:	f04f 0900 	mov.w	r9, #0
 800c526:	2201      	movs	r2, #1
 800c528:	9904      	ldr	r1, [sp, #16]
 800c52a:	4620      	mov	r0, r4
 800c52c:	f000 fda8 	bl	800d080 <__lshift>
 800c530:	4639      	mov	r1, r7
 800c532:	9004      	str	r0, [sp, #16]
 800c534:	f000 fdf8 	bl	800d128 <__mcmp>
 800c538:	2800      	cmp	r0, #0
 800c53a:	dcb6      	bgt.n	800c4aa <_dtoa_r+0xa42>
 800c53c:	d102      	bne.n	800c544 <_dtoa_r+0xadc>
 800c53e:	f018 0f01 	tst.w	r8, #1
 800c542:	d1b2      	bne.n	800c4aa <_dtoa_r+0xa42>
 800c544:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c548:	2b30      	cmp	r3, #48	; 0x30
 800c54a:	f105 32ff 	add.w	r2, r5, #4294967295
 800c54e:	f47f af0a 	bne.w	800c366 <_dtoa_r+0x8fe>
 800c552:	4615      	mov	r5, r2
 800c554:	e7f6      	b.n	800c544 <_dtoa_r+0xadc>
 800c556:	4593      	cmp	fp, r2
 800c558:	d105      	bne.n	800c566 <_dtoa_r+0xafe>
 800c55a:	2331      	movs	r3, #49	; 0x31
 800c55c:	f10a 0a01 	add.w	sl, sl, #1
 800c560:	f88b 3000 	strb.w	r3, [fp]
 800c564:	e6ff      	b.n	800c366 <_dtoa_r+0x8fe>
 800c566:	4615      	mov	r5, r2
 800c568:	e79f      	b.n	800c4aa <_dtoa_r+0xa42>
 800c56a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c5d0 <_dtoa_r+0xb68>
 800c56e:	e007      	b.n	800c580 <_dtoa_r+0xb18>
 800c570:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c572:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c5d4 <_dtoa_r+0xb6c>
 800c576:	b11b      	cbz	r3, 800c580 <_dtoa_r+0xb18>
 800c578:	f10b 0308 	add.w	r3, fp, #8
 800c57c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	4658      	mov	r0, fp
 800c582:	b017      	add	sp, #92	; 0x5c
 800c584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c588:	9b06      	ldr	r3, [sp, #24]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	f77f ae35 	ble.w	800c1fa <_dtoa_r+0x792>
 800c590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c592:	9307      	str	r3, [sp, #28]
 800c594:	e649      	b.n	800c22a <_dtoa_r+0x7c2>
 800c596:	9b02      	ldr	r3, [sp, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	dc03      	bgt.n	800c5a4 <_dtoa_r+0xb3c>
 800c59c:	9b06      	ldr	r3, [sp, #24]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	f73f aecc 	bgt.w	800c33c <_dtoa_r+0x8d4>
 800c5a4:	465d      	mov	r5, fp
 800c5a6:	4639      	mov	r1, r7
 800c5a8:	9804      	ldr	r0, [sp, #16]
 800c5aa:	f7ff f9cf 	bl	800b94c <quorem>
 800c5ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c5b2:	f805 8b01 	strb.w	r8, [r5], #1
 800c5b6:	9a02      	ldr	r2, [sp, #8]
 800c5b8:	eba5 030b 	sub.w	r3, r5, fp
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	ddb0      	ble.n	800c522 <_dtoa_r+0xaba>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	220a      	movs	r2, #10
 800c5c4:	9904      	ldr	r1, [sp, #16]
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	f000 fba5 	bl	800cd16 <__multadd>
 800c5cc:	9004      	str	r0, [sp, #16]
 800c5ce:	e7ea      	b.n	800c5a6 <_dtoa_r+0xb3e>
 800c5d0:	0800d980 	.word	0x0800d980
 800c5d4:	0800d9d8 	.word	0x0800d9d8

0800c5d8 <rshift>:
 800c5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5da:	6906      	ldr	r6, [r0, #16]
 800c5dc:	114b      	asrs	r3, r1, #5
 800c5de:	429e      	cmp	r6, r3
 800c5e0:	f100 0414 	add.w	r4, r0, #20
 800c5e4:	dd30      	ble.n	800c648 <rshift+0x70>
 800c5e6:	f011 011f 	ands.w	r1, r1, #31
 800c5ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c5ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c5f2:	d108      	bne.n	800c606 <rshift+0x2e>
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	42b2      	cmp	r2, r6
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	d211      	bcs.n	800c620 <rshift+0x48>
 800c5fc:	f852 3b04 	ldr.w	r3, [r2], #4
 800c600:	f841 3b04 	str.w	r3, [r1], #4
 800c604:	e7f7      	b.n	800c5f6 <rshift+0x1e>
 800c606:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c60a:	f1c1 0c20 	rsb	ip, r1, #32
 800c60e:	40cd      	lsrs	r5, r1
 800c610:	3204      	adds	r2, #4
 800c612:	4623      	mov	r3, r4
 800c614:	42b2      	cmp	r2, r6
 800c616:	4617      	mov	r7, r2
 800c618:	d30c      	bcc.n	800c634 <rshift+0x5c>
 800c61a:	601d      	str	r5, [r3, #0]
 800c61c:	b105      	cbz	r5, 800c620 <rshift+0x48>
 800c61e:	3304      	adds	r3, #4
 800c620:	1b1a      	subs	r2, r3, r4
 800c622:	42a3      	cmp	r3, r4
 800c624:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c628:	bf08      	it	eq
 800c62a:	2300      	moveq	r3, #0
 800c62c:	6102      	str	r2, [r0, #16]
 800c62e:	bf08      	it	eq
 800c630:	6143      	streq	r3, [r0, #20]
 800c632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c634:	683f      	ldr	r7, [r7, #0]
 800c636:	fa07 f70c 	lsl.w	r7, r7, ip
 800c63a:	433d      	orrs	r5, r7
 800c63c:	f843 5b04 	str.w	r5, [r3], #4
 800c640:	f852 5b04 	ldr.w	r5, [r2], #4
 800c644:	40cd      	lsrs	r5, r1
 800c646:	e7e5      	b.n	800c614 <rshift+0x3c>
 800c648:	4623      	mov	r3, r4
 800c64a:	e7e9      	b.n	800c620 <rshift+0x48>

0800c64c <__hexdig_fun>:
 800c64c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c650:	2b09      	cmp	r3, #9
 800c652:	d802      	bhi.n	800c65a <__hexdig_fun+0xe>
 800c654:	3820      	subs	r0, #32
 800c656:	b2c0      	uxtb	r0, r0
 800c658:	4770      	bx	lr
 800c65a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c65e:	2b05      	cmp	r3, #5
 800c660:	d801      	bhi.n	800c666 <__hexdig_fun+0x1a>
 800c662:	3847      	subs	r0, #71	; 0x47
 800c664:	e7f7      	b.n	800c656 <__hexdig_fun+0xa>
 800c666:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c66a:	2b05      	cmp	r3, #5
 800c66c:	d801      	bhi.n	800c672 <__hexdig_fun+0x26>
 800c66e:	3827      	subs	r0, #39	; 0x27
 800c670:	e7f1      	b.n	800c656 <__hexdig_fun+0xa>
 800c672:	2000      	movs	r0, #0
 800c674:	4770      	bx	lr

0800c676 <__gethex>:
 800c676:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c67a:	b08b      	sub	sp, #44	; 0x2c
 800c67c:	468a      	mov	sl, r1
 800c67e:	9002      	str	r0, [sp, #8]
 800c680:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c682:	9306      	str	r3, [sp, #24]
 800c684:	4690      	mov	r8, r2
 800c686:	f000 fad0 	bl	800cc2a <__localeconv_l>
 800c68a:	6803      	ldr	r3, [r0, #0]
 800c68c:	9303      	str	r3, [sp, #12]
 800c68e:	4618      	mov	r0, r3
 800c690:	f7f3 fda8 	bl	80001e4 <strlen>
 800c694:	9b03      	ldr	r3, [sp, #12]
 800c696:	9001      	str	r0, [sp, #4]
 800c698:	4403      	add	r3, r0
 800c69a:	f04f 0b00 	mov.w	fp, #0
 800c69e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c6a2:	9307      	str	r3, [sp, #28]
 800c6a4:	f8da 3000 	ldr.w	r3, [sl]
 800c6a8:	3302      	adds	r3, #2
 800c6aa:	461f      	mov	r7, r3
 800c6ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c6b0:	2830      	cmp	r0, #48	; 0x30
 800c6b2:	d06c      	beq.n	800c78e <__gethex+0x118>
 800c6b4:	f7ff ffca 	bl	800c64c <__hexdig_fun>
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d16a      	bne.n	800c794 <__gethex+0x11e>
 800c6be:	9a01      	ldr	r2, [sp, #4]
 800c6c0:	9903      	ldr	r1, [sp, #12]
 800c6c2:	4638      	mov	r0, r7
 800c6c4:	f000 ff54 	bl	800d570 <strncmp>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d166      	bne.n	800c79a <__gethex+0x124>
 800c6cc:	9b01      	ldr	r3, [sp, #4]
 800c6ce:	5cf8      	ldrb	r0, [r7, r3]
 800c6d0:	18fe      	adds	r6, r7, r3
 800c6d2:	f7ff ffbb 	bl	800c64c <__hexdig_fun>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d062      	beq.n	800c7a0 <__gethex+0x12a>
 800c6da:	4633      	mov	r3, r6
 800c6dc:	7818      	ldrb	r0, [r3, #0]
 800c6de:	2830      	cmp	r0, #48	; 0x30
 800c6e0:	461f      	mov	r7, r3
 800c6e2:	f103 0301 	add.w	r3, r3, #1
 800c6e6:	d0f9      	beq.n	800c6dc <__gethex+0x66>
 800c6e8:	f7ff ffb0 	bl	800c64c <__hexdig_fun>
 800c6ec:	fab0 f580 	clz	r5, r0
 800c6f0:	096d      	lsrs	r5, r5, #5
 800c6f2:	4634      	mov	r4, r6
 800c6f4:	f04f 0b01 	mov.w	fp, #1
 800c6f8:	463a      	mov	r2, r7
 800c6fa:	4616      	mov	r6, r2
 800c6fc:	3201      	adds	r2, #1
 800c6fe:	7830      	ldrb	r0, [r6, #0]
 800c700:	f7ff ffa4 	bl	800c64c <__hexdig_fun>
 800c704:	2800      	cmp	r0, #0
 800c706:	d1f8      	bne.n	800c6fa <__gethex+0x84>
 800c708:	9a01      	ldr	r2, [sp, #4]
 800c70a:	9903      	ldr	r1, [sp, #12]
 800c70c:	4630      	mov	r0, r6
 800c70e:	f000 ff2f 	bl	800d570 <strncmp>
 800c712:	b950      	cbnz	r0, 800c72a <__gethex+0xb4>
 800c714:	b954      	cbnz	r4, 800c72c <__gethex+0xb6>
 800c716:	9b01      	ldr	r3, [sp, #4]
 800c718:	18f4      	adds	r4, r6, r3
 800c71a:	4622      	mov	r2, r4
 800c71c:	4616      	mov	r6, r2
 800c71e:	3201      	adds	r2, #1
 800c720:	7830      	ldrb	r0, [r6, #0]
 800c722:	f7ff ff93 	bl	800c64c <__hexdig_fun>
 800c726:	2800      	cmp	r0, #0
 800c728:	d1f8      	bne.n	800c71c <__gethex+0xa6>
 800c72a:	b10c      	cbz	r4, 800c730 <__gethex+0xba>
 800c72c:	1ba4      	subs	r4, r4, r6
 800c72e:	00a4      	lsls	r4, r4, #2
 800c730:	7833      	ldrb	r3, [r6, #0]
 800c732:	2b50      	cmp	r3, #80	; 0x50
 800c734:	d001      	beq.n	800c73a <__gethex+0xc4>
 800c736:	2b70      	cmp	r3, #112	; 0x70
 800c738:	d140      	bne.n	800c7bc <__gethex+0x146>
 800c73a:	7873      	ldrb	r3, [r6, #1]
 800c73c:	2b2b      	cmp	r3, #43	; 0x2b
 800c73e:	d031      	beq.n	800c7a4 <__gethex+0x12e>
 800c740:	2b2d      	cmp	r3, #45	; 0x2d
 800c742:	d033      	beq.n	800c7ac <__gethex+0x136>
 800c744:	1c71      	adds	r1, r6, #1
 800c746:	f04f 0900 	mov.w	r9, #0
 800c74a:	7808      	ldrb	r0, [r1, #0]
 800c74c:	f7ff ff7e 	bl	800c64c <__hexdig_fun>
 800c750:	1e43      	subs	r3, r0, #1
 800c752:	b2db      	uxtb	r3, r3
 800c754:	2b18      	cmp	r3, #24
 800c756:	d831      	bhi.n	800c7bc <__gethex+0x146>
 800c758:	f1a0 0210 	sub.w	r2, r0, #16
 800c75c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c760:	f7ff ff74 	bl	800c64c <__hexdig_fun>
 800c764:	1e43      	subs	r3, r0, #1
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b18      	cmp	r3, #24
 800c76a:	d922      	bls.n	800c7b2 <__gethex+0x13c>
 800c76c:	f1b9 0f00 	cmp.w	r9, #0
 800c770:	d000      	beq.n	800c774 <__gethex+0xfe>
 800c772:	4252      	negs	r2, r2
 800c774:	4414      	add	r4, r2
 800c776:	f8ca 1000 	str.w	r1, [sl]
 800c77a:	b30d      	cbz	r5, 800c7c0 <__gethex+0x14a>
 800c77c:	f1bb 0f00 	cmp.w	fp, #0
 800c780:	bf0c      	ite	eq
 800c782:	2706      	moveq	r7, #6
 800c784:	2700      	movne	r7, #0
 800c786:	4638      	mov	r0, r7
 800c788:	b00b      	add	sp, #44	; 0x2c
 800c78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78e:	f10b 0b01 	add.w	fp, fp, #1
 800c792:	e78a      	b.n	800c6aa <__gethex+0x34>
 800c794:	2500      	movs	r5, #0
 800c796:	462c      	mov	r4, r5
 800c798:	e7ae      	b.n	800c6f8 <__gethex+0x82>
 800c79a:	463e      	mov	r6, r7
 800c79c:	2501      	movs	r5, #1
 800c79e:	e7c7      	b.n	800c730 <__gethex+0xba>
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	e7fb      	b.n	800c79c <__gethex+0x126>
 800c7a4:	f04f 0900 	mov.w	r9, #0
 800c7a8:	1cb1      	adds	r1, r6, #2
 800c7aa:	e7ce      	b.n	800c74a <__gethex+0xd4>
 800c7ac:	f04f 0901 	mov.w	r9, #1
 800c7b0:	e7fa      	b.n	800c7a8 <__gethex+0x132>
 800c7b2:	230a      	movs	r3, #10
 800c7b4:	fb03 0202 	mla	r2, r3, r2, r0
 800c7b8:	3a10      	subs	r2, #16
 800c7ba:	e7cf      	b.n	800c75c <__gethex+0xe6>
 800c7bc:	4631      	mov	r1, r6
 800c7be:	e7da      	b.n	800c776 <__gethex+0x100>
 800c7c0:	1bf3      	subs	r3, r6, r7
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	2b07      	cmp	r3, #7
 800c7c8:	dc49      	bgt.n	800c85e <__gethex+0x1e8>
 800c7ca:	9802      	ldr	r0, [sp, #8]
 800c7cc:	f000 fa58 	bl	800cc80 <_Balloc>
 800c7d0:	9b01      	ldr	r3, [sp, #4]
 800c7d2:	f100 0914 	add.w	r9, r0, #20
 800c7d6:	f04f 0b00 	mov.w	fp, #0
 800c7da:	f1c3 0301 	rsb	r3, r3, #1
 800c7de:	4605      	mov	r5, r0
 800c7e0:	f8cd 9010 	str.w	r9, [sp, #16]
 800c7e4:	46da      	mov	sl, fp
 800c7e6:	9308      	str	r3, [sp, #32]
 800c7e8:	42b7      	cmp	r7, r6
 800c7ea:	d33b      	bcc.n	800c864 <__gethex+0x1ee>
 800c7ec:	9804      	ldr	r0, [sp, #16]
 800c7ee:	f840 ab04 	str.w	sl, [r0], #4
 800c7f2:	eba0 0009 	sub.w	r0, r0, r9
 800c7f6:	1080      	asrs	r0, r0, #2
 800c7f8:	6128      	str	r0, [r5, #16]
 800c7fa:	0147      	lsls	r7, r0, #5
 800c7fc:	4650      	mov	r0, sl
 800c7fe:	f000 fb03 	bl	800ce08 <__hi0bits>
 800c802:	f8d8 6000 	ldr.w	r6, [r8]
 800c806:	1a3f      	subs	r7, r7, r0
 800c808:	42b7      	cmp	r7, r6
 800c80a:	dd64      	ble.n	800c8d6 <__gethex+0x260>
 800c80c:	1bbf      	subs	r7, r7, r6
 800c80e:	4639      	mov	r1, r7
 800c810:	4628      	mov	r0, r5
 800c812:	f000 fe13 	bl	800d43c <__any_on>
 800c816:	4682      	mov	sl, r0
 800c818:	b178      	cbz	r0, 800c83a <__gethex+0x1c4>
 800c81a:	1e7b      	subs	r3, r7, #1
 800c81c:	1159      	asrs	r1, r3, #5
 800c81e:	f003 021f 	and.w	r2, r3, #31
 800c822:	f04f 0a01 	mov.w	sl, #1
 800c826:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c82a:	fa0a f202 	lsl.w	r2, sl, r2
 800c82e:	420a      	tst	r2, r1
 800c830:	d003      	beq.n	800c83a <__gethex+0x1c4>
 800c832:	4553      	cmp	r3, sl
 800c834:	dc46      	bgt.n	800c8c4 <__gethex+0x24e>
 800c836:	f04f 0a02 	mov.w	sl, #2
 800c83a:	4639      	mov	r1, r7
 800c83c:	4628      	mov	r0, r5
 800c83e:	f7ff fecb 	bl	800c5d8 <rshift>
 800c842:	443c      	add	r4, r7
 800c844:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c848:	42a3      	cmp	r3, r4
 800c84a:	da52      	bge.n	800c8f2 <__gethex+0x27c>
 800c84c:	4629      	mov	r1, r5
 800c84e:	9802      	ldr	r0, [sp, #8]
 800c850:	f000 fa4a 	bl	800cce8 <_Bfree>
 800c854:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c856:	2300      	movs	r3, #0
 800c858:	6013      	str	r3, [r2, #0]
 800c85a:	27a3      	movs	r7, #163	; 0xa3
 800c85c:	e793      	b.n	800c786 <__gethex+0x110>
 800c85e:	3101      	adds	r1, #1
 800c860:	105b      	asrs	r3, r3, #1
 800c862:	e7b0      	b.n	800c7c6 <__gethex+0x150>
 800c864:	1e73      	subs	r3, r6, #1
 800c866:	9305      	str	r3, [sp, #20]
 800c868:	9a07      	ldr	r2, [sp, #28]
 800c86a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c86e:	4293      	cmp	r3, r2
 800c870:	d018      	beq.n	800c8a4 <__gethex+0x22e>
 800c872:	f1bb 0f20 	cmp.w	fp, #32
 800c876:	d107      	bne.n	800c888 <__gethex+0x212>
 800c878:	9b04      	ldr	r3, [sp, #16]
 800c87a:	f8c3 a000 	str.w	sl, [r3]
 800c87e:	3304      	adds	r3, #4
 800c880:	f04f 0a00 	mov.w	sl, #0
 800c884:	9304      	str	r3, [sp, #16]
 800c886:	46d3      	mov	fp, sl
 800c888:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c88c:	f7ff fede 	bl	800c64c <__hexdig_fun>
 800c890:	f000 000f 	and.w	r0, r0, #15
 800c894:	fa00 f00b 	lsl.w	r0, r0, fp
 800c898:	ea4a 0a00 	orr.w	sl, sl, r0
 800c89c:	f10b 0b04 	add.w	fp, fp, #4
 800c8a0:	9b05      	ldr	r3, [sp, #20]
 800c8a2:	e00d      	b.n	800c8c0 <__gethex+0x24a>
 800c8a4:	9b05      	ldr	r3, [sp, #20]
 800c8a6:	9a08      	ldr	r2, [sp, #32]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	42bb      	cmp	r3, r7
 800c8ac:	d3e1      	bcc.n	800c872 <__gethex+0x1fc>
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	9a01      	ldr	r2, [sp, #4]
 800c8b2:	9903      	ldr	r1, [sp, #12]
 800c8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c8b6:	f000 fe5b 	bl	800d570 <strncmp>
 800c8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	d1d8      	bne.n	800c872 <__gethex+0x1fc>
 800c8c0:	461e      	mov	r6, r3
 800c8c2:	e791      	b.n	800c7e8 <__gethex+0x172>
 800c8c4:	1eb9      	subs	r1, r7, #2
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f000 fdb8 	bl	800d43c <__any_on>
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	d0b2      	beq.n	800c836 <__gethex+0x1c0>
 800c8d0:	f04f 0a03 	mov.w	sl, #3
 800c8d4:	e7b1      	b.n	800c83a <__gethex+0x1c4>
 800c8d6:	da09      	bge.n	800c8ec <__gethex+0x276>
 800c8d8:	1bf7      	subs	r7, r6, r7
 800c8da:	4629      	mov	r1, r5
 800c8dc:	463a      	mov	r2, r7
 800c8de:	9802      	ldr	r0, [sp, #8]
 800c8e0:	f000 fbce 	bl	800d080 <__lshift>
 800c8e4:	1be4      	subs	r4, r4, r7
 800c8e6:	4605      	mov	r5, r0
 800c8e8:	f100 0914 	add.w	r9, r0, #20
 800c8ec:	f04f 0a00 	mov.w	sl, #0
 800c8f0:	e7a8      	b.n	800c844 <__gethex+0x1ce>
 800c8f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c8f6:	42a0      	cmp	r0, r4
 800c8f8:	dd6a      	ble.n	800c9d0 <__gethex+0x35a>
 800c8fa:	1b04      	subs	r4, r0, r4
 800c8fc:	42a6      	cmp	r6, r4
 800c8fe:	dc2e      	bgt.n	800c95e <__gethex+0x2e8>
 800c900:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c904:	2b02      	cmp	r3, #2
 800c906:	d022      	beq.n	800c94e <__gethex+0x2d8>
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d024      	beq.n	800c956 <__gethex+0x2e0>
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d115      	bne.n	800c93c <__gethex+0x2c6>
 800c910:	42a6      	cmp	r6, r4
 800c912:	d113      	bne.n	800c93c <__gethex+0x2c6>
 800c914:	2e01      	cmp	r6, #1
 800c916:	dc0b      	bgt.n	800c930 <__gethex+0x2ba>
 800c918:	9a06      	ldr	r2, [sp, #24]
 800c91a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	2301      	movs	r3, #1
 800c922:	612b      	str	r3, [r5, #16]
 800c924:	f8c9 3000 	str.w	r3, [r9]
 800c928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c92a:	2762      	movs	r7, #98	; 0x62
 800c92c:	601d      	str	r5, [r3, #0]
 800c92e:	e72a      	b.n	800c786 <__gethex+0x110>
 800c930:	1e71      	subs	r1, r6, #1
 800c932:	4628      	mov	r0, r5
 800c934:	f000 fd82 	bl	800d43c <__any_on>
 800c938:	2800      	cmp	r0, #0
 800c93a:	d1ed      	bne.n	800c918 <__gethex+0x2a2>
 800c93c:	4629      	mov	r1, r5
 800c93e:	9802      	ldr	r0, [sp, #8]
 800c940:	f000 f9d2 	bl	800cce8 <_Bfree>
 800c944:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c946:	2300      	movs	r3, #0
 800c948:	6013      	str	r3, [r2, #0]
 800c94a:	2750      	movs	r7, #80	; 0x50
 800c94c:	e71b      	b.n	800c786 <__gethex+0x110>
 800c94e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c950:	2b00      	cmp	r3, #0
 800c952:	d0e1      	beq.n	800c918 <__gethex+0x2a2>
 800c954:	e7f2      	b.n	800c93c <__gethex+0x2c6>
 800c956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d1dd      	bne.n	800c918 <__gethex+0x2a2>
 800c95c:	e7ee      	b.n	800c93c <__gethex+0x2c6>
 800c95e:	1e67      	subs	r7, r4, #1
 800c960:	f1ba 0f00 	cmp.w	sl, #0
 800c964:	d131      	bne.n	800c9ca <__gethex+0x354>
 800c966:	b127      	cbz	r7, 800c972 <__gethex+0x2fc>
 800c968:	4639      	mov	r1, r7
 800c96a:	4628      	mov	r0, r5
 800c96c:	f000 fd66 	bl	800d43c <__any_on>
 800c970:	4682      	mov	sl, r0
 800c972:	117a      	asrs	r2, r7, #5
 800c974:	2301      	movs	r3, #1
 800c976:	f007 071f 	and.w	r7, r7, #31
 800c97a:	fa03 f707 	lsl.w	r7, r3, r7
 800c97e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800c982:	4621      	mov	r1, r4
 800c984:	421f      	tst	r7, r3
 800c986:	4628      	mov	r0, r5
 800c988:	bf18      	it	ne
 800c98a:	f04a 0a02 	orrne.w	sl, sl, #2
 800c98e:	1b36      	subs	r6, r6, r4
 800c990:	f7ff fe22 	bl	800c5d8 <rshift>
 800c994:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800c998:	2702      	movs	r7, #2
 800c99a:	f1ba 0f00 	cmp.w	sl, #0
 800c99e:	d048      	beq.n	800ca32 <__gethex+0x3bc>
 800c9a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d015      	beq.n	800c9d4 <__gethex+0x35e>
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d017      	beq.n	800c9dc <__gethex+0x366>
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	d109      	bne.n	800c9c4 <__gethex+0x34e>
 800c9b0:	f01a 0f02 	tst.w	sl, #2
 800c9b4:	d006      	beq.n	800c9c4 <__gethex+0x34e>
 800c9b6:	f8d9 3000 	ldr.w	r3, [r9]
 800c9ba:	ea4a 0a03 	orr.w	sl, sl, r3
 800c9be:	f01a 0f01 	tst.w	sl, #1
 800c9c2:	d10e      	bne.n	800c9e2 <__gethex+0x36c>
 800c9c4:	f047 0710 	orr.w	r7, r7, #16
 800c9c8:	e033      	b.n	800ca32 <__gethex+0x3bc>
 800c9ca:	f04f 0a01 	mov.w	sl, #1
 800c9ce:	e7d0      	b.n	800c972 <__gethex+0x2fc>
 800c9d0:	2701      	movs	r7, #1
 800c9d2:	e7e2      	b.n	800c99a <__gethex+0x324>
 800c9d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9d6:	f1c3 0301 	rsb	r3, r3, #1
 800c9da:	9315      	str	r3, [sp, #84]	; 0x54
 800c9dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0f0      	beq.n	800c9c4 <__gethex+0x34e>
 800c9e2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c9e6:	f105 0314 	add.w	r3, r5, #20
 800c9ea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800c9ee:	eb03 010a 	add.w	r1, r3, sl
 800c9f2:	f04f 0c00 	mov.w	ip, #0
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca00:	d01c      	beq.n	800ca3c <__gethex+0x3c6>
 800ca02:	3201      	adds	r2, #1
 800ca04:	6002      	str	r2, [r0, #0]
 800ca06:	2f02      	cmp	r7, #2
 800ca08:	f105 0314 	add.w	r3, r5, #20
 800ca0c:	d138      	bne.n	800ca80 <__gethex+0x40a>
 800ca0e:	f8d8 2000 	ldr.w	r2, [r8]
 800ca12:	3a01      	subs	r2, #1
 800ca14:	42b2      	cmp	r2, r6
 800ca16:	d10a      	bne.n	800ca2e <__gethex+0x3b8>
 800ca18:	1171      	asrs	r1, r6, #5
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f006 061f 	and.w	r6, r6, #31
 800ca20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca24:	fa02 f606 	lsl.w	r6, r2, r6
 800ca28:	421e      	tst	r6, r3
 800ca2a:	bf18      	it	ne
 800ca2c:	4617      	movne	r7, r2
 800ca2e:	f047 0720 	orr.w	r7, r7, #32
 800ca32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca34:	601d      	str	r5, [r3, #0]
 800ca36:	9b06      	ldr	r3, [sp, #24]
 800ca38:	601c      	str	r4, [r3, #0]
 800ca3a:	e6a4      	b.n	800c786 <__gethex+0x110>
 800ca3c:	4299      	cmp	r1, r3
 800ca3e:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca42:	d8d8      	bhi.n	800c9f6 <__gethex+0x380>
 800ca44:	68ab      	ldr	r3, [r5, #8]
 800ca46:	4599      	cmp	r9, r3
 800ca48:	db12      	blt.n	800ca70 <__gethex+0x3fa>
 800ca4a:	6869      	ldr	r1, [r5, #4]
 800ca4c:	9802      	ldr	r0, [sp, #8]
 800ca4e:	3101      	adds	r1, #1
 800ca50:	f000 f916 	bl	800cc80 <_Balloc>
 800ca54:	692a      	ldr	r2, [r5, #16]
 800ca56:	3202      	adds	r2, #2
 800ca58:	f105 010c 	add.w	r1, r5, #12
 800ca5c:	4683      	mov	fp, r0
 800ca5e:	0092      	lsls	r2, r2, #2
 800ca60:	300c      	adds	r0, #12
 800ca62:	f7fd fd5f 	bl	800a524 <memcpy>
 800ca66:	4629      	mov	r1, r5
 800ca68:	9802      	ldr	r0, [sp, #8]
 800ca6a:	f000 f93d 	bl	800cce8 <_Bfree>
 800ca6e:	465d      	mov	r5, fp
 800ca70:	692b      	ldr	r3, [r5, #16]
 800ca72:	1c5a      	adds	r2, r3, #1
 800ca74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ca78:	612a      	str	r2, [r5, #16]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	615a      	str	r2, [r3, #20]
 800ca7e:	e7c2      	b.n	800ca06 <__gethex+0x390>
 800ca80:	692a      	ldr	r2, [r5, #16]
 800ca82:	454a      	cmp	r2, r9
 800ca84:	dd0b      	ble.n	800ca9e <__gethex+0x428>
 800ca86:	2101      	movs	r1, #1
 800ca88:	4628      	mov	r0, r5
 800ca8a:	f7ff fda5 	bl	800c5d8 <rshift>
 800ca8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca92:	3401      	adds	r4, #1
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	f6ff aed9 	blt.w	800c84c <__gethex+0x1d6>
 800ca9a:	2701      	movs	r7, #1
 800ca9c:	e7c7      	b.n	800ca2e <__gethex+0x3b8>
 800ca9e:	f016 061f 	ands.w	r6, r6, #31
 800caa2:	d0fa      	beq.n	800ca9a <__gethex+0x424>
 800caa4:	449a      	add	sl, r3
 800caa6:	f1c6 0620 	rsb	r6, r6, #32
 800caaa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800caae:	f000 f9ab 	bl	800ce08 <__hi0bits>
 800cab2:	42b0      	cmp	r0, r6
 800cab4:	dbe7      	blt.n	800ca86 <__gethex+0x410>
 800cab6:	e7f0      	b.n	800ca9a <__gethex+0x424>

0800cab8 <L_shift>:
 800cab8:	f1c2 0208 	rsb	r2, r2, #8
 800cabc:	0092      	lsls	r2, r2, #2
 800cabe:	b570      	push	{r4, r5, r6, lr}
 800cac0:	f1c2 0620 	rsb	r6, r2, #32
 800cac4:	6843      	ldr	r3, [r0, #4]
 800cac6:	6804      	ldr	r4, [r0, #0]
 800cac8:	fa03 f506 	lsl.w	r5, r3, r6
 800cacc:	432c      	orrs	r4, r5
 800cace:	40d3      	lsrs	r3, r2
 800cad0:	6004      	str	r4, [r0, #0]
 800cad2:	f840 3f04 	str.w	r3, [r0, #4]!
 800cad6:	4288      	cmp	r0, r1
 800cad8:	d3f4      	bcc.n	800cac4 <L_shift+0xc>
 800cada:	bd70      	pop	{r4, r5, r6, pc}

0800cadc <__match>:
 800cadc:	b530      	push	{r4, r5, lr}
 800cade:	6803      	ldr	r3, [r0, #0]
 800cae0:	3301      	adds	r3, #1
 800cae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cae6:	b914      	cbnz	r4, 800caee <__match+0x12>
 800cae8:	6003      	str	r3, [r0, #0]
 800caea:	2001      	movs	r0, #1
 800caec:	bd30      	pop	{r4, r5, pc}
 800caee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800caf6:	2d19      	cmp	r5, #25
 800caf8:	bf98      	it	ls
 800cafa:	3220      	addls	r2, #32
 800cafc:	42a2      	cmp	r2, r4
 800cafe:	d0f0      	beq.n	800cae2 <__match+0x6>
 800cb00:	2000      	movs	r0, #0
 800cb02:	e7f3      	b.n	800caec <__match+0x10>

0800cb04 <__hexnan>:
 800cb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb08:	680b      	ldr	r3, [r1, #0]
 800cb0a:	6801      	ldr	r1, [r0, #0]
 800cb0c:	115f      	asrs	r7, r3, #5
 800cb0e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cb12:	f013 031f 	ands.w	r3, r3, #31
 800cb16:	b087      	sub	sp, #28
 800cb18:	bf18      	it	ne
 800cb1a:	3704      	addne	r7, #4
 800cb1c:	2500      	movs	r5, #0
 800cb1e:	1f3e      	subs	r6, r7, #4
 800cb20:	4682      	mov	sl, r0
 800cb22:	4690      	mov	r8, r2
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	f847 5c04 	str.w	r5, [r7, #-4]
 800cb2a:	46b1      	mov	r9, r6
 800cb2c:	4634      	mov	r4, r6
 800cb2e:	9502      	str	r5, [sp, #8]
 800cb30:	46ab      	mov	fp, r5
 800cb32:	784a      	ldrb	r2, [r1, #1]
 800cb34:	1c4b      	adds	r3, r1, #1
 800cb36:	9303      	str	r3, [sp, #12]
 800cb38:	b342      	cbz	r2, 800cb8c <__hexnan+0x88>
 800cb3a:	4610      	mov	r0, r2
 800cb3c:	9105      	str	r1, [sp, #20]
 800cb3e:	9204      	str	r2, [sp, #16]
 800cb40:	f7ff fd84 	bl	800c64c <__hexdig_fun>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d143      	bne.n	800cbd0 <__hexnan+0xcc>
 800cb48:	9a04      	ldr	r2, [sp, #16]
 800cb4a:	9905      	ldr	r1, [sp, #20]
 800cb4c:	2a20      	cmp	r2, #32
 800cb4e:	d818      	bhi.n	800cb82 <__hexnan+0x7e>
 800cb50:	9b02      	ldr	r3, [sp, #8]
 800cb52:	459b      	cmp	fp, r3
 800cb54:	dd13      	ble.n	800cb7e <__hexnan+0x7a>
 800cb56:	454c      	cmp	r4, r9
 800cb58:	d206      	bcs.n	800cb68 <__hexnan+0x64>
 800cb5a:	2d07      	cmp	r5, #7
 800cb5c:	dc04      	bgt.n	800cb68 <__hexnan+0x64>
 800cb5e:	462a      	mov	r2, r5
 800cb60:	4649      	mov	r1, r9
 800cb62:	4620      	mov	r0, r4
 800cb64:	f7ff ffa8 	bl	800cab8 <L_shift>
 800cb68:	4544      	cmp	r4, r8
 800cb6a:	d944      	bls.n	800cbf6 <__hexnan+0xf2>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f1a4 0904 	sub.w	r9, r4, #4
 800cb72:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb76:	f8cd b008 	str.w	fp, [sp, #8]
 800cb7a:	464c      	mov	r4, r9
 800cb7c:	461d      	mov	r5, r3
 800cb7e:	9903      	ldr	r1, [sp, #12]
 800cb80:	e7d7      	b.n	800cb32 <__hexnan+0x2e>
 800cb82:	2a29      	cmp	r2, #41	; 0x29
 800cb84:	d14a      	bne.n	800cc1c <__hexnan+0x118>
 800cb86:	3102      	adds	r1, #2
 800cb88:	f8ca 1000 	str.w	r1, [sl]
 800cb8c:	f1bb 0f00 	cmp.w	fp, #0
 800cb90:	d044      	beq.n	800cc1c <__hexnan+0x118>
 800cb92:	454c      	cmp	r4, r9
 800cb94:	d206      	bcs.n	800cba4 <__hexnan+0xa0>
 800cb96:	2d07      	cmp	r5, #7
 800cb98:	dc04      	bgt.n	800cba4 <__hexnan+0xa0>
 800cb9a:	462a      	mov	r2, r5
 800cb9c:	4649      	mov	r1, r9
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7ff ff8a 	bl	800cab8 <L_shift>
 800cba4:	4544      	cmp	r4, r8
 800cba6:	d928      	bls.n	800cbfa <__hexnan+0xf6>
 800cba8:	4643      	mov	r3, r8
 800cbaa:	f854 2b04 	ldr.w	r2, [r4], #4
 800cbae:	f843 2b04 	str.w	r2, [r3], #4
 800cbb2:	42a6      	cmp	r6, r4
 800cbb4:	d2f9      	bcs.n	800cbaa <__hexnan+0xa6>
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	f843 2b04 	str.w	r2, [r3], #4
 800cbbc:	429e      	cmp	r6, r3
 800cbbe:	d2fb      	bcs.n	800cbb8 <__hexnan+0xb4>
 800cbc0:	6833      	ldr	r3, [r6, #0]
 800cbc2:	b91b      	cbnz	r3, 800cbcc <__hexnan+0xc8>
 800cbc4:	4546      	cmp	r6, r8
 800cbc6:	d127      	bne.n	800cc18 <__hexnan+0x114>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	6033      	str	r3, [r6, #0]
 800cbcc:	2005      	movs	r0, #5
 800cbce:	e026      	b.n	800cc1e <__hexnan+0x11a>
 800cbd0:	3501      	adds	r5, #1
 800cbd2:	2d08      	cmp	r5, #8
 800cbd4:	f10b 0b01 	add.w	fp, fp, #1
 800cbd8:	dd06      	ble.n	800cbe8 <__hexnan+0xe4>
 800cbda:	4544      	cmp	r4, r8
 800cbdc:	d9cf      	bls.n	800cb7e <__hexnan+0x7a>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbe4:	2501      	movs	r5, #1
 800cbe6:	3c04      	subs	r4, #4
 800cbe8:	6822      	ldr	r2, [r4, #0]
 800cbea:	f000 000f 	and.w	r0, r0, #15
 800cbee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cbf2:	6020      	str	r0, [r4, #0]
 800cbf4:	e7c3      	b.n	800cb7e <__hexnan+0x7a>
 800cbf6:	2508      	movs	r5, #8
 800cbf8:	e7c1      	b.n	800cb7e <__hexnan+0x7a>
 800cbfa:	9b01      	ldr	r3, [sp, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d0df      	beq.n	800cbc0 <__hexnan+0xbc>
 800cc00:	f04f 32ff 	mov.w	r2, #4294967295
 800cc04:	f1c3 0320 	rsb	r3, r3, #32
 800cc08:	fa22 f303 	lsr.w	r3, r2, r3
 800cc0c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cc10:	401a      	ands	r2, r3
 800cc12:	f847 2c04 	str.w	r2, [r7, #-4]
 800cc16:	e7d3      	b.n	800cbc0 <__hexnan+0xbc>
 800cc18:	3e04      	subs	r6, #4
 800cc1a:	e7d1      	b.n	800cbc0 <__hexnan+0xbc>
 800cc1c:	2004      	movs	r0, #4
 800cc1e:	b007      	add	sp, #28
 800cc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc24 <__locale_ctype_ptr_l>:
 800cc24:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cc28:	4770      	bx	lr

0800cc2a <__localeconv_l>:
 800cc2a:	30f0      	adds	r0, #240	; 0xf0
 800cc2c:	4770      	bx	lr
	...

0800cc30 <_localeconv_r>:
 800cc30:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <_localeconv_r+0x14>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	6a18      	ldr	r0, [r3, #32]
 800cc36:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <_localeconv_r+0x18>)
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	bf08      	it	eq
 800cc3c:	4618      	moveq	r0, r3
 800cc3e:	30f0      	adds	r0, #240	; 0xf0
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	200004a0 	.word	0x200004a0
 800cc48:	20000504 	.word	0x20000504

0800cc4c <malloc>:
 800cc4c:	4b02      	ldr	r3, [pc, #8]	; (800cc58 <malloc+0xc>)
 800cc4e:	4601      	mov	r1, r0
 800cc50:	6818      	ldr	r0, [r3, #0]
 800cc52:	f000 bc23 	b.w	800d49c <_malloc_r>
 800cc56:	bf00      	nop
 800cc58:	200004a0 	.word	0x200004a0

0800cc5c <__ascii_mbtowc>:
 800cc5c:	b082      	sub	sp, #8
 800cc5e:	b901      	cbnz	r1, 800cc62 <__ascii_mbtowc+0x6>
 800cc60:	a901      	add	r1, sp, #4
 800cc62:	b142      	cbz	r2, 800cc76 <__ascii_mbtowc+0x1a>
 800cc64:	b14b      	cbz	r3, 800cc7a <__ascii_mbtowc+0x1e>
 800cc66:	7813      	ldrb	r3, [r2, #0]
 800cc68:	600b      	str	r3, [r1, #0]
 800cc6a:	7812      	ldrb	r2, [r2, #0]
 800cc6c:	1c10      	adds	r0, r2, #0
 800cc6e:	bf18      	it	ne
 800cc70:	2001      	movne	r0, #1
 800cc72:	b002      	add	sp, #8
 800cc74:	4770      	bx	lr
 800cc76:	4610      	mov	r0, r2
 800cc78:	e7fb      	b.n	800cc72 <__ascii_mbtowc+0x16>
 800cc7a:	f06f 0001 	mvn.w	r0, #1
 800cc7e:	e7f8      	b.n	800cc72 <__ascii_mbtowc+0x16>

0800cc80 <_Balloc>:
 800cc80:	b570      	push	{r4, r5, r6, lr}
 800cc82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc84:	4604      	mov	r4, r0
 800cc86:	460e      	mov	r6, r1
 800cc88:	b93d      	cbnz	r5, 800cc9a <_Balloc+0x1a>
 800cc8a:	2010      	movs	r0, #16
 800cc8c:	f7ff ffde 	bl	800cc4c <malloc>
 800cc90:	6260      	str	r0, [r4, #36]	; 0x24
 800cc92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc96:	6005      	str	r5, [r0, #0]
 800cc98:	60c5      	str	r5, [r0, #12]
 800cc9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cc9c:	68eb      	ldr	r3, [r5, #12]
 800cc9e:	b183      	cbz	r3, 800ccc2 <_Balloc+0x42>
 800cca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cca8:	b9b8      	cbnz	r0, 800ccda <_Balloc+0x5a>
 800ccaa:	2101      	movs	r1, #1
 800ccac:	fa01 f506 	lsl.w	r5, r1, r6
 800ccb0:	1d6a      	adds	r2, r5, #5
 800ccb2:	0092      	lsls	r2, r2, #2
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 fbe2 	bl	800d47e <_calloc_r>
 800ccba:	b160      	cbz	r0, 800ccd6 <_Balloc+0x56>
 800ccbc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ccc0:	e00e      	b.n	800cce0 <_Balloc+0x60>
 800ccc2:	2221      	movs	r2, #33	; 0x21
 800ccc4:	2104      	movs	r1, #4
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f000 fbd9 	bl	800d47e <_calloc_r>
 800cccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccce:	60e8      	str	r0, [r5, #12]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d1e4      	bne.n	800cca0 <_Balloc+0x20>
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	bd70      	pop	{r4, r5, r6, pc}
 800ccda:	6802      	ldr	r2, [r0, #0]
 800ccdc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cce0:	2300      	movs	r3, #0
 800cce2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cce6:	e7f7      	b.n	800ccd8 <_Balloc+0x58>

0800cce8 <_Bfree>:
 800cce8:	b570      	push	{r4, r5, r6, lr}
 800ccea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ccec:	4606      	mov	r6, r0
 800ccee:	460d      	mov	r5, r1
 800ccf0:	b93c      	cbnz	r4, 800cd02 <_Bfree+0x1a>
 800ccf2:	2010      	movs	r0, #16
 800ccf4:	f7ff ffaa 	bl	800cc4c <malloc>
 800ccf8:	6270      	str	r0, [r6, #36]	; 0x24
 800ccfa:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccfe:	6004      	str	r4, [r0, #0]
 800cd00:	60c4      	str	r4, [r0, #12]
 800cd02:	b13d      	cbz	r5, 800cd14 <_Bfree+0x2c>
 800cd04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cd06:	686a      	ldr	r2, [r5, #4]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd0e:	6029      	str	r1, [r5, #0]
 800cd10:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cd14:	bd70      	pop	{r4, r5, r6, pc}

0800cd16 <__multadd>:
 800cd16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1a:	690d      	ldr	r5, [r1, #16]
 800cd1c:	461f      	mov	r7, r3
 800cd1e:	4606      	mov	r6, r0
 800cd20:	460c      	mov	r4, r1
 800cd22:	f101 0c14 	add.w	ip, r1, #20
 800cd26:	2300      	movs	r3, #0
 800cd28:	f8dc 0000 	ldr.w	r0, [ip]
 800cd2c:	b281      	uxth	r1, r0
 800cd2e:	fb02 7101 	mla	r1, r2, r1, r7
 800cd32:	0c0f      	lsrs	r7, r1, #16
 800cd34:	0c00      	lsrs	r0, r0, #16
 800cd36:	fb02 7000 	mla	r0, r2, r0, r7
 800cd3a:	b289      	uxth	r1, r1
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cd42:	429d      	cmp	r5, r3
 800cd44:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cd48:	f84c 1b04 	str.w	r1, [ip], #4
 800cd4c:	dcec      	bgt.n	800cd28 <__multadd+0x12>
 800cd4e:	b1d7      	cbz	r7, 800cd86 <__multadd+0x70>
 800cd50:	68a3      	ldr	r3, [r4, #8]
 800cd52:	42ab      	cmp	r3, r5
 800cd54:	dc12      	bgt.n	800cd7c <__multadd+0x66>
 800cd56:	6861      	ldr	r1, [r4, #4]
 800cd58:	4630      	mov	r0, r6
 800cd5a:	3101      	adds	r1, #1
 800cd5c:	f7ff ff90 	bl	800cc80 <_Balloc>
 800cd60:	6922      	ldr	r2, [r4, #16]
 800cd62:	3202      	adds	r2, #2
 800cd64:	f104 010c 	add.w	r1, r4, #12
 800cd68:	4680      	mov	r8, r0
 800cd6a:	0092      	lsls	r2, r2, #2
 800cd6c:	300c      	adds	r0, #12
 800cd6e:	f7fd fbd9 	bl	800a524 <memcpy>
 800cd72:	4621      	mov	r1, r4
 800cd74:	4630      	mov	r0, r6
 800cd76:	f7ff ffb7 	bl	800cce8 <_Bfree>
 800cd7a:	4644      	mov	r4, r8
 800cd7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd80:	3501      	adds	r5, #1
 800cd82:	615f      	str	r7, [r3, #20]
 800cd84:	6125      	str	r5, [r4, #16]
 800cd86:	4620      	mov	r0, r4
 800cd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cd8c <__s2b>:
 800cd8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd90:	460c      	mov	r4, r1
 800cd92:	4615      	mov	r5, r2
 800cd94:	461f      	mov	r7, r3
 800cd96:	2209      	movs	r2, #9
 800cd98:	3308      	adds	r3, #8
 800cd9a:	4606      	mov	r6, r0
 800cd9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cda0:	2100      	movs	r1, #0
 800cda2:	2201      	movs	r2, #1
 800cda4:	429a      	cmp	r2, r3
 800cda6:	db20      	blt.n	800cdea <__s2b+0x5e>
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f7ff ff69 	bl	800cc80 <_Balloc>
 800cdae:	9b08      	ldr	r3, [sp, #32]
 800cdb0:	6143      	str	r3, [r0, #20]
 800cdb2:	2d09      	cmp	r5, #9
 800cdb4:	f04f 0301 	mov.w	r3, #1
 800cdb8:	6103      	str	r3, [r0, #16]
 800cdba:	dd19      	ble.n	800cdf0 <__s2b+0x64>
 800cdbc:	f104 0809 	add.w	r8, r4, #9
 800cdc0:	46c1      	mov	r9, r8
 800cdc2:	442c      	add	r4, r5
 800cdc4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cdc8:	4601      	mov	r1, r0
 800cdca:	3b30      	subs	r3, #48	; 0x30
 800cdcc:	220a      	movs	r2, #10
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f7ff ffa1 	bl	800cd16 <__multadd>
 800cdd4:	45a1      	cmp	r9, r4
 800cdd6:	d1f5      	bne.n	800cdc4 <__s2b+0x38>
 800cdd8:	eb08 0405 	add.w	r4, r8, r5
 800cddc:	3c08      	subs	r4, #8
 800cdde:	1b2d      	subs	r5, r5, r4
 800cde0:	1963      	adds	r3, r4, r5
 800cde2:	42bb      	cmp	r3, r7
 800cde4:	db07      	blt.n	800cdf6 <__s2b+0x6a>
 800cde6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdea:	0052      	lsls	r2, r2, #1
 800cdec:	3101      	adds	r1, #1
 800cdee:	e7d9      	b.n	800cda4 <__s2b+0x18>
 800cdf0:	340a      	adds	r4, #10
 800cdf2:	2509      	movs	r5, #9
 800cdf4:	e7f3      	b.n	800cdde <__s2b+0x52>
 800cdf6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cdfa:	4601      	mov	r1, r0
 800cdfc:	3b30      	subs	r3, #48	; 0x30
 800cdfe:	220a      	movs	r2, #10
 800ce00:	4630      	mov	r0, r6
 800ce02:	f7ff ff88 	bl	800cd16 <__multadd>
 800ce06:	e7eb      	b.n	800cde0 <__s2b+0x54>

0800ce08 <__hi0bits>:
 800ce08:	0c02      	lsrs	r2, r0, #16
 800ce0a:	0412      	lsls	r2, r2, #16
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	b9b2      	cbnz	r2, 800ce3e <__hi0bits+0x36>
 800ce10:	0403      	lsls	r3, r0, #16
 800ce12:	2010      	movs	r0, #16
 800ce14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ce18:	bf04      	itt	eq
 800ce1a:	021b      	lsleq	r3, r3, #8
 800ce1c:	3008      	addeq	r0, #8
 800ce1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ce22:	bf04      	itt	eq
 800ce24:	011b      	lsleq	r3, r3, #4
 800ce26:	3004      	addeq	r0, #4
 800ce28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ce2c:	bf04      	itt	eq
 800ce2e:	009b      	lsleq	r3, r3, #2
 800ce30:	3002      	addeq	r0, #2
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	db06      	blt.n	800ce44 <__hi0bits+0x3c>
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	d503      	bpl.n	800ce42 <__hi0bits+0x3a>
 800ce3a:	3001      	adds	r0, #1
 800ce3c:	4770      	bx	lr
 800ce3e:	2000      	movs	r0, #0
 800ce40:	e7e8      	b.n	800ce14 <__hi0bits+0xc>
 800ce42:	2020      	movs	r0, #32
 800ce44:	4770      	bx	lr

0800ce46 <__lo0bits>:
 800ce46:	6803      	ldr	r3, [r0, #0]
 800ce48:	f013 0207 	ands.w	r2, r3, #7
 800ce4c:	4601      	mov	r1, r0
 800ce4e:	d00b      	beq.n	800ce68 <__lo0bits+0x22>
 800ce50:	07da      	lsls	r2, r3, #31
 800ce52:	d423      	bmi.n	800ce9c <__lo0bits+0x56>
 800ce54:	0798      	lsls	r0, r3, #30
 800ce56:	bf49      	itett	mi
 800ce58:	085b      	lsrmi	r3, r3, #1
 800ce5a:	089b      	lsrpl	r3, r3, #2
 800ce5c:	2001      	movmi	r0, #1
 800ce5e:	600b      	strmi	r3, [r1, #0]
 800ce60:	bf5c      	itt	pl
 800ce62:	600b      	strpl	r3, [r1, #0]
 800ce64:	2002      	movpl	r0, #2
 800ce66:	4770      	bx	lr
 800ce68:	b298      	uxth	r0, r3
 800ce6a:	b9a8      	cbnz	r0, 800ce98 <__lo0bits+0x52>
 800ce6c:	0c1b      	lsrs	r3, r3, #16
 800ce6e:	2010      	movs	r0, #16
 800ce70:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ce74:	bf04      	itt	eq
 800ce76:	0a1b      	lsreq	r3, r3, #8
 800ce78:	3008      	addeq	r0, #8
 800ce7a:	071a      	lsls	r2, r3, #28
 800ce7c:	bf04      	itt	eq
 800ce7e:	091b      	lsreq	r3, r3, #4
 800ce80:	3004      	addeq	r0, #4
 800ce82:	079a      	lsls	r2, r3, #30
 800ce84:	bf04      	itt	eq
 800ce86:	089b      	lsreq	r3, r3, #2
 800ce88:	3002      	addeq	r0, #2
 800ce8a:	07da      	lsls	r2, r3, #31
 800ce8c:	d402      	bmi.n	800ce94 <__lo0bits+0x4e>
 800ce8e:	085b      	lsrs	r3, r3, #1
 800ce90:	d006      	beq.n	800cea0 <__lo0bits+0x5a>
 800ce92:	3001      	adds	r0, #1
 800ce94:	600b      	str	r3, [r1, #0]
 800ce96:	4770      	bx	lr
 800ce98:	4610      	mov	r0, r2
 800ce9a:	e7e9      	b.n	800ce70 <__lo0bits+0x2a>
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	4770      	bx	lr
 800cea0:	2020      	movs	r0, #32
 800cea2:	4770      	bx	lr

0800cea4 <__i2b>:
 800cea4:	b510      	push	{r4, lr}
 800cea6:	460c      	mov	r4, r1
 800cea8:	2101      	movs	r1, #1
 800ceaa:	f7ff fee9 	bl	800cc80 <_Balloc>
 800ceae:	2201      	movs	r2, #1
 800ceb0:	6144      	str	r4, [r0, #20]
 800ceb2:	6102      	str	r2, [r0, #16]
 800ceb4:	bd10      	pop	{r4, pc}

0800ceb6 <__multiply>:
 800ceb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceba:	4614      	mov	r4, r2
 800cebc:	690a      	ldr	r2, [r1, #16]
 800cebe:	6923      	ldr	r3, [r4, #16]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	bfb8      	it	lt
 800cec4:	460b      	movlt	r3, r1
 800cec6:	4688      	mov	r8, r1
 800cec8:	bfbc      	itt	lt
 800ceca:	46a0      	movlt	r8, r4
 800cecc:	461c      	movlt	r4, r3
 800cece:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ced2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ced6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ceda:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cede:	eb07 0609 	add.w	r6, r7, r9
 800cee2:	42b3      	cmp	r3, r6
 800cee4:	bfb8      	it	lt
 800cee6:	3101      	addlt	r1, #1
 800cee8:	f7ff feca 	bl	800cc80 <_Balloc>
 800ceec:	f100 0514 	add.w	r5, r0, #20
 800cef0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800cef4:	462b      	mov	r3, r5
 800cef6:	2200      	movs	r2, #0
 800cef8:	4573      	cmp	r3, lr
 800cefa:	d316      	bcc.n	800cf2a <__multiply+0x74>
 800cefc:	f104 0214 	add.w	r2, r4, #20
 800cf00:	f108 0114 	add.w	r1, r8, #20
 800cf04:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800cf08:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	9b00      	ldr	r3, [sp, #0]
 800cf10:	9201      	str	r2, [sp, #4]
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d80c      	bhi.n	800cf30 <__multiply+0x7a>
 800cf16:	2e00      	cmp	r6, #0
 800cf18:	dd03      	ble.n	800cf22 <__multiply+0x6c>
 800cf1a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d05d      	beq.n	800cfde <__multiply+0x128>
 800cf22:	6106      	str	r6, [r0, #16]
 800cf24:	b003      	add	sp, #12
 800cf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2a:	f843 2b04 	str.w	r2, [r3], #4
 800cf2e:	e7e3      	b.n	800cef8 <__multiply+0x42>
 800cf30:	f8b2 b000 	ldrh.w	fp, [r2]
 800cf34:	f1bb 0f00 	cmp.w	fp, #0
 800cf38:	d023      	beq.n	800cf82 <__multiply+0xcc>
 800cf3a:	4689      	mov	r9, r1
 800cf3c:	46ac      	mov	ip, r5
 800cf3e:	f04f 0800 	mov.w	r8, #0
 800cf42:	f859 4b04 	ldr.w	r4, [r9], #4
 800cf46:	f8dc a000 	ldr.w	sl, [ip]
 800cf4a:	b2a3      	uxth	r3, r4
 800cf4c:	fa1f fa8a 	uxth.w	sl, sl
 800cf50:	fb0b a303 	mla	r3, fp, r3, sl
 800cf54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cf58:	f8dc 4000 	ldr.w	r4, [ip]
 800cf5c:	4443      	add	r3, r8
 800cf5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cf62:	fb0b 840a 	mla	r4, fp, sl, r8
 800cf66:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800cf6a:	46e2      	mov	sl, ip
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cf72:	454f      	cmp	r7, r9
 800cf74:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cf78:	f84a 3b04 	str.w	r3, [sl], #4
 800cf7c:	d82b      	bhi.n	800cfd6 <__multiply+0x120>
 800cf7e:	f8cc 8004 	str.w	r8, [ip, #4]
 800cf82:	9b01      	ldr	r3, [sp, #4]
 800cf84:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cf88:	3204      	adds	r2, #4
 800cf8a:	f1ba 0f00 	cmp.w	sl, #0
 800cf8e:	d020      	beq.n	800cfd2 <__multiply+0x11c>
 800cf90:	682b      	ldr	r3, [r5, #0]
 800cf92:	4689      	mov	r9, r1
 800cf94:	46a8      	mov	r8, r5
 800cf96:	f04f 0b00 	mov.w	fp, #0
 800cf9a:	f8b9 c000 	ldrh.w	ip, [r9]
 800cf9e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cfa2:	fb0a 440c 	mla	r4, sl, ip, r4
 800cfa6:	445c      	add	r4, fp
 800cfa8:	46c4      	mov	ip, r8
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cfb0:	f84c 3b04 	str.w	r3, [ip], #4
 800cfb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cfb8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cfbc:	0c1b      	lsrs	r3, r3, #16
 800cfbe:	fb0a b303 	mla	r3, sl, r3, fp
 800cfc2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cfc6:	454f      	cmp	r7, r9
 800cfc8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cfcc:	d805      	bhi.n	800cfda <__multiply+0x124>
 800cfce:	f8c8 3004 	str.w	r3, [r8, #4]
 800cfd2:	3504      	adds	r5, #4
 800cfd4:	e79b      	b.n	800cf0e <__multiply+0x58>
 800cfd6:	46d4      	mov	ip, sl
 800cfd8:	e7b3      	b.n	800cf42 <__multiply+0x8c>
 800cfda:	46e0      	mov	r8, ip
 800cfdc:	e7dd      	b.n	800cf9a <__multiply+0xe4>
 800cfde:	3e01      	subs	r6, #1
 800cfe0:	e799      	b.n	800cf16 <__multiply+0x60>
	...

0800cfe4 <__pow5mult>:
 800cfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfe8:	4615      	mov	r5, r2
 800cfea:	f012 0203 	ands.w	r2, r2, #3
 800cfee:	4606      	mov	r6, r0
 800cff0:	460f      	mov	r7, r1
 800cff2:	d007      	beq.n	800d004 <__pow5mult+0x20>
 800cff4:	3a01      	subs	r2, #1
 800cff6:	4c21      	ldr	r4, [pc, #132]	; (800d07c <__pow5mult+0x98>)
 800cff8:	2300      	movs	r3, #0
 800cffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cffe:	f7ff fe8a 	bl	800cd16 <__multadd>
 800d002:	4607      	mov	r7, r0
 800d004:	10ad      	asrs	r5, r5, #2
 800d006:	d035      	beq.n	800d074 <__pow5mult+0x90>
 800d008:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d00a:	b93c      	cbnz	r4, 800d01c <__pow5mult+0x38>
 800d00c:	2010      	movs	r0, #16
 800d00e:	f7ff fe1d 	bl	800cc4c <malloc>
 800d012:	6270      	str	r0, [r6, #36]	; 0x24
 800d014:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d018:	6004      	str	r4, [r0, #0]
 800d01a:	60c4      	str	r4, [r0, #12]
 800d01c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d020:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d024:	b94c      	cbnz	r4, 800d03a <__pow5mult+0x56>
 800d026:	f240 2171 	movw	r1, #625	; 0x271
 800d02a:	4630      	mov	r0, r6
 800d02c:	f7ff ff3a 	bl	800cea4 <__i2b>
 800d030:	2300      	movs	r3, #0
 800d032:	f8c8 0008 	str.w	r0, [r8, #8]
 800d036:	4604      	mov	r4, r0
 800d038:	6003      	str	r3, [r0, #0]
 800d03a:	f04f 0800 	mov.w	r8, #0
 800d03e:	07eb      	lsls	r3, r5, #31
 800d040:	d50a      	bpl.n	800d058 <__pow5mult+0x74>
 800d042:	4639      	mov	r1, r7
 800d044:	4622      	mov	r2, r4
 800d046:	4630      	mov	r0, r6
 800d048:	f7ff ff35 	bl	800ceb6 <__multiply>
 800d04c:	4639      	mov	r1, r7
 800d04e:	4681      	mov	r9, r0
 800d050:	4630      	mov	r0, r6
 800d052:	f7ff fe49 	bl	800cce8 <_Bfree>
 800d056:	464f      	mov	r7, r9
 800d058:	106d      	asrs	r5, r5, #1
 800d05a:	d00b      	beq.n	800d074 <__pow5mult+0x90>
 800d05c:	6820      	ldr	r0, [r4, #0]
 800d05e:	b938      	cbnz	r0, 800d070 <__pow5mult+0x8c>
 800d060:	4622      	mov	r2, r4
 800d062:	4621      	mov	r1, r4
 800d064:	4630      	mov	r0, r6
 800d066:	f7ff ff26 	bl	800ceb6 <__multiply>
 800d06a:	6020      	str	r0, [r4, #0]
 800d06c:	f8c0 8000 	str.w	r8, [r0]
 800d070:	4604      	mov	r4, r0
 800d072:	e7e4      	b.n	800d03e <__pow5mult+0x5a>
 800d074:	4638      	mov	r0, r7
 800d076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d07a:	bf00      	nop
 800d07c:	0800dae0 	.word	0x0800dae0

0800d080 <__lshift>:
 800d080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d084:	460c      	mov	r4, r1
 800d086:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d08a:	6923      	ldr	r3, [r4, #16]
 800d08c:	6849      	ldr	r1, [r1, #4]
 800d08e:	eb0a 0903 	add.w	r9, sl, r3
 800d092:	68a3      	ldr	r3, [r4, #8]
 800d094:	4607      	mov	r7, r0
 800d096:	4616      	mov	r6, r2
 800d098:	f109 0501 	add.w	r5, r9, #1
 800d09c:	42ab      	cmp	r3, r5
 800d09e:	db32      	blt.n	800d106 <__lshift+0x86>
 800d0a0:	4638      	mov	r0, r7
 800d0a2:	f7ff fded 	bl	800cc80 <_Balloc>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	4680      	mov	r8, r0
 800d0aa:	f100 0114 	add.w	r1, r0, #20
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	4553      	cmp	r3, sl
 800d0b2:	db2b      	blt.n	800d10c <__lshift+0x8c>
 800d0b4:	6920      	ldr	r0, [r4, #16]
 800d0b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0ba:	f104 0314 	add.w	r3, r4, #20
 800d0be:	f016 021f 	ands.w	r2, r6, #31
 800d0c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0ca:	d025      	beq.n	800d118 <__lshift+0x98>
 800d0cc:	f1c2 0e20 	rsb	lr, r2, #32
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	681e      	ldr	r6, [r3, #0]
 800d0d4:	468a      	mov	sl, r1
 800d0d6:	4096      	lsls	r6, r2
 800d0d8:	4330      	orrs	r0, r6
 800d0da:	f84a 0b04 	str.w	r0, [sl], #4
 800d0de:	f853 0b04 	ldr.w	r0, [r3], #4
 800d0e2:	459c      	cmp	ip, r3
 800d0e4:	fa20 f00e 	lsr.w	r0, r0, lr
 800d0e8:	d814      	bhi.n	800d114 <__lshift+0x94>
 800d0ea:	6048      	str	r0, [r1, #4]
 800d0ec:	b108      	cbz	r0, 800d0f2 <__lshift+0x72>
 800d0ee:	f109 0502 	add.w	r5, r9, #2
 800d0f2:	3d01      	subs	r5, #1
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	f8c8 5010 	str.w	r5, [r8, #16]
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	f7ff fdf4 	bl	800cce8 <_Bfree>
 800d100:	4640      	mov	r0, r8
 800d102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d106:	3101      	adds	r1, #1
 800d108:	005b      	lsls	r3, r3, #1
 800d10a:	e7c7      	b.n	800d09c <__lshift+0x1c>
 800d10c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d110:	3301      	adds	r3, #1
 800d112:	e7cd      	b.n	800d0b0 <__lshift+0x30>
 800d114:	4651      	mov	r1, sl
 800d116:	e7dc      	b.n	800d0d2 <__lshift+0x52>
 800d118:	3904      	subs	r1, #4
 800d11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d11e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d122:	459c      	cmp	ip, r3
 800d124:	d8f9      	bhi.n	800d11a <__lshift+0x9a>
 800d126:	e7e4      	b.n	800d0f2 <__lshift+0x72>

0800d128 <__mcmp>:
 800d128:	6903      	ldr	r3, [r0, #16]
 800d12a:	690a      	ldr	r2, [r1, #16]
 800d12c:	1a9b      	subs	r3, r3, r2
 800d12e:	b530      	push	{r4, r5, lr}
 800d130:	d10c      	bne.n	800d14c <__mcmp+0x24>
 800d132:	0092      	lsls	r2, r2, #2
 800d134:	3014      	adds	r0, #20
 800d136:	3114      	adds	r1, #20
 800d138:	1884      	adds	r4, r0, r2
 800d13a:	4411      	add	r1, r2
 800d13c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d144:	4295      	cmp	r5, r2
 800d146:	d003      	beq.n	800d150 <__mcmp+0x28>
 800d148:	d305      	bcc.n	800d156 <__mcmp+0x2e>
 800d14a:	2301      	movs	r3, #1
 800d14c:	4618      	mov	r0, r3
 800d14e:	bd30      	pop	{r4, r5, pc}
 800d150:	42a0      	cmp	r0, r4
 800d152:	d3f3      	bcc.n	800d13c <__mcmp+0x14>
 800d154:	e7fa      	b.n	800d14c <__mcmp+0x24>
 800d156:	f04f 33ff 	mov.w	r3, #4294967295
 800d15a:	e7f7      	b.n	800d14c <__mcmp+0x24>

0800d15c <__mdiff>:
 800d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d160:	460d      	mov	r5, r1
 800d162:	4607      	mov	r7, r0
 800d164:	4611      	mov	r1, r2
 800d166:	4628      	mov	r0, r5
 800d168:	4614      	mov	r4, r2
 800d16a:	f7ff ffdd 	bl	800d128 <__mcmp>
 800d16e:	1e06      	subs	r6, r0, #0
 800d170:	d108      	bne.n	800d184 <__mdiff+0x28>
 800d172:	4631      	mov	r1, r6
 800d174:	4638      	mov	r0, r7
 800d176:	f7ff fd83 	bl	800cc80 <_Balloc>
 800d17a:	2301      	movs	r3, #1
 800d17c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d184:	bfa4      	itt	ge
 800d186:	4623      	movge	r3, r4
 800d188:	462c      	movge	r4, r5
 800d18a:	4638      	mov	r0, r7
 800d18c:	6861      	ldr	r1, [r4, #4]
 800d18e:	bfa6      	itte	ge
 800d190:	461d      	movge	r5, r3
 800d192:	2600      	movge	r6, #0
 800d194:	2601      	movlt	r6, #1
 800d196:	f7ff fd73 	bl	800cc80 <_Balloc>
 800d19a:	692b      	ldr	r3, [r5, #16]
 800d19c:	60c6      	str	r6, [r0, #12]
 800d19e:	6926      	ldr	r6, [r4, #16]
 800d1a0:	f105 0914 	add.w	r9, r5, #20
 800d1a4:	f104 0214 	add.w	r2, r4, #20
 800d1a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d1ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d1b0:	f100 0514 	add.w	r5, r0, #20
 800d1b4:	f04f 0e00 	mov.w	lr, #0
 800d1b8:	f852 ab04 	ldr.w	sl, [r2], #4
 800d1bc:	f859 4b04 	ldr.w	r4, [r9], #4
 800d1c0:	fa1e f18a 	uxtah	r1, lr, sl
 800d1c4:	b2a3      	uxth	r3, r4
 800d1c6:	1ac9      	subs	r1, r1, r3
 800d1c8:	0c23      	lsrs	r3, r4, #16
 800d1ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d1ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d1d2:	b289      	uxth	r1, r1
 800d1d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d1d8:	45c8      	cmp	r8, r9
 800d1da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d1de:	4694      	mov	ip, r2
 800d1e0:	f845 3b04 	str.w	r3, [r5], #4
 800d1e4:	d8e8      	bhi.n	800d1b8 <__mdiff+0x5c>
 800d1e6:	45bc      	cmp	ip, r7
 800d1e8:	d304      	bcc.n	800d1f4 <__mdiff+0x98>
 800d1ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d1ee:	b183      	cbz	r3, 800d212 <__mdiff+0xb6>
 800d1f0:	6106      	str	r6, [r0, #16]
 800d1f2:	e7c5      	b.n	800d180 <__mdiff+0x24>
 800d1f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d1f8:	fa1e f381 	uxtah	r3, lr, r1
 800d1fc:	141a      	asrs	r2, r3, #16
 800d1fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d202:	b29b      	uxth	r3, r3
 800d204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d208:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d20c:	f845 3b04 	str.w	r3, [r5], #4
 800d210:	e7e9      	b.n	800d1e6 <__mdiff+0x8a>
 800d212:	3e01      	subs	r6, #1
 800d214:	e7e9      	b.n	800d1ea <__mdiff+0x8e>
	...

0800d218 <__ulp>:
 800d218:	4b12      	ldr	r3, [pc, #72]	; (800d264 <__ulp+0x4c>)
 800d21a:	ee10 2a90 	vmov	r2, s1
 800d21e:	401a      	ands	r2, r3
 800d220:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d224:	2b00      	cmp	r3, #0
 800d226:	dd04      	ble.n	800d232 <__ulp+0x1a>
 800d228:	2000      	movs	r0, #0
 800d22a:	4619      	mov	r1, r3
 800d22c:	ec41 0b10 	vmov	d0, r0, r1
 800d230:	4770      	bx	lr
 800d232:	425b      	negs	r3, r3
 800d234:	151b      	asrs	r3, r3, #20
 800d236:	2b13      	cmp	r3, #19
 800d238:	f04f 0000 	mov.w	r0, #0
 800d23c:	f04f 0100 	mov.w	r1, #0
 800d240:	dc04      	bgt.n	800d24c <__ulp+0x34>
 800d242:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d246:	fa42 f103 	asr.w	r1, r2, r3
 800d24a:	e7ef      	b.n	800d22c <__ulp+0x14>
 800d24c:	3b14      	subs	r3, #20
 800d24e:	2b1e      	cmp	r3, #30
 800d250:	f04f 0201 	mov.w	r2, #1
 800d254:	bfda      	itte	le
 800d256:	f1c3 031f 	rsble	r3, r3, #31
 800d25a:	fa02 f303 	lslle.w	r3, r2, r3
 800d25e:	4613      	movgt	r3, r2
 800d260:	4618      	mov	r0, r3
 800d262:	e7e3      	b.n	800d22c <__ulp+0x14>
 800d264:	7ff00000 	.word	0x7ff00000

0800d268 <__b2d>:
 800d268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26a:	6905      	ldr	r5, [r0, #16]
 800d26c:	f100 0714 	add.w	r7, r0, #20
 800d270:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d274:	1f2e      	subs	r6, r5, #4
 800d276:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d27a:	4620      	mov	r0, r4
 800d27c:	f7ff fdc4 	bl	800ce08 <__hi0bits>
 800d280:	f1c0 0320 	rsb	r3, r0, #32
 800d284:	280a      	cmp	r0, #10
 800d286:	600b      	str	r3, [r1, #0]
 800d288:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d300 <__b2d+0x98>
 800d28c:	dc14      	bgt.n	800d2b8 <__b2d+0x50>
 800d28e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d292:	fa24 f10e 	lsr.w	r1, r4, lr
 800d296:	42b7      	cmp	r7, r6
 800d298:	ea41 030c 	orr.w	r3, r1, ip
 800d29c:	bf34      	ite	cc
 800d29e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d2a2:	2100      	movcs	r1, #0
 800d2a4:	3015      	adds	r0, #21
 800d2a6:	fa04 f000 	lsl.w	r0, r4, r0
 800d2aa:	fa21 f10e 	lsr.w	r1, r1, lr
 800d2ae:	ea40 0201 	orr.w	r2, r0, r1
 800d2b2:	ec43 2b10 	vmov	d0, r2, r3
 800d2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b8:	42b7      	cmp	r7, r6
 800d2ba:	bf3a      	itte	cc
 800d2bc:	f1a5 0608 	subcc.w	r6, r5, #8
 800d2c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d2c4:	2100      	movcs	r1, #0
 800d2c6:	380b      	subs	r0, #11
 800d2c8:	d015      	beq.n	800d2f6 <__b2d+0x8e>
 800d2ca:	4084      	lsls	r4, r0
 800d2cc:	f1c0 0520 	rsb	r5, r0, #32
 800d2d0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d2d4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d2d8:	42be      	cmp	r6, r7
 800d2da:	fa21 fc05 	lsr.w	ip, r1, r5
 800d2de:	ea44 030c 	orr.w	r3, r4, ip
 800d2e2:	bf8c      	ite	hi
 800d2e4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d2e8:	2400      	movls	r4, #0
 800d2ea:	fa01 f000 	lsl.w	r0, r1, r0
 800d2ee:	40ec      	lsrs	r4, r5
 800d2f0:	ea40 0204 	orr.w	r2, r0, r4
 800d2f4:	e7dd      	b.n	800d2b2 <__b2d+0x4a>
 800d2f6:	ea44 030c 	orr.w	r3, r4, ip
 800d2fa:	460a      	mov	r2, r1
 800d2fc:	e7d9      	b.n	800d2b2 <__b2d+0x4a>
 800d2fe:	bf00      	nop
 800d300:	3ff00000 	.word	0x3ff00000

0800d304 <__d2b>:
 800d304:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d308:	460e      	mov	r6, r1
 800d30a:	2101      	movs	r1, #1
 800d30c:	ec59 8b10 	vmov	r8, r9, d0
 800d310:	4615      	mov	r5, r2
 800d312:	f7ff fcb5 	bl	800cc80 <_Balloc>
 800d316:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d31a:	4607      	mov	r7, r0
 800d31c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d320:	bb34      	cbnz	r4, 800d370 <__d2b+0x6c>
 800d322:	9301      	str	r3, [sp, #4]
 800d324:	f1b8 0300 	subs.w	r3, r8, #0
 800d328:	d027      	beq.n	800d37a <__d2b+0x76>
 800d32a:	a802      	add	r0, sp, #8
 800d32c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d330:	f7ff fd89 	bl	800ce46 <__lo0bits>
 800d334:	9900      	ldr	r1, [sp, #0]
 800d336:	b1f0      	cbz	r0, 800d376 <__d2b+0x72>
 800d338:	9a01      	ldr	r2, [sp, #4]
 800d33a:	f1c0 0320 	rsb	r3, r0, #32
 800d33e:	fa02 f303 	lsl.w	r3, r2, r3
 800d342:	430b      	orrs	r3, r1
 800d344:	40c2      	lsrs	r2, r0
 800d346:	617b      	str	r3, [r7, #20]
 800d348:	9201      	str	r2, [sp, #4]
 800d34a:	9b01      	ldr	r3, [sp, #4]
 800d34c:	61bb      	str	r3, [r7, #24]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	bf14      	ite	ne
 800d352:	2102      	movne	r1, #2
 800d354:	2101      	moveq	r1, #1
 800d356:	6139      	str	r1, [r7, #16]
 800d358:	b1c4      	cbz	r4, 800d38c <__d2b+0x88>
 800d35a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d35e:	4404      	add	r4, r0
 800d360:	6034      	str	r4, [r6, #0]
 800d362:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d366:	6028      	str	r0, [r5, #0]
 800d368:	4638      	mov	r0, r7
 800d36a:	b003      	add	sp, #12
 800d36c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d374:	e7d5      	b.n	800d322 <__d2b+0x1e>
 800d376:	6179      	str	r1, [r7, #20]
 800d378:	e7e7      	b.n	800d34a <__d2b+0x46>
 800d37a:	a801      	add	r0, sp, #4
 800d37c:	f7ff fd63 	bl	800ce46 <__lo0bits>
 800d380:	9b01      	ldr	r3, [sp, #4]
 800d382:	617b      	str	r3, [r7, #20]
 800d384:	2101      	movs	r1, #1
 800d386:	6139      	str	r1, [r7, #16]
 800d388:	3020      	adds	r0, #32
 800d38a:	e7e5      	b.n	800d358 <__d2b+0x54>
 800d38c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d390:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d394:	6030      	str	r0, [r6, #0]
 800d396:	6918      	ldr	r0, [r3, #16]
 800d398:	f7ff fd36 	bl	800ce08 <__hi0bits>
 800d39c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d3a0:	e7e1      	b.n	800d366 <__d2b+0x62>

0800d3a2 <__ratio>:
 800d3a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a6:	4688      	mov	r8, r1
 800d3a8:	4669      	mov	r1, sp
 800d3aa:	4681      	mov	r9, r0
 800d3ac:	f7ff ff5c 	bl	800d268 <__b2d>
 800d3b0:	a901      	add	r1, sp, #4
 800d3b2:	4640      	mov	r0, r8
 800d3b4:	ec57 6b10 	vmov	r6, r7, d0
 800d3b8:	f7ff ff56 	bl	800d268 <__b2d>
 800d3bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d3c4:	eba3 0c02 	sub.w	ip, r3, r2
 800d3c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d3cc:	1a9b      	subs	r3, r3, r2
 800d3ce:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d3d2:	ec5b ab10 	vmov	sl, fp, d0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	bfce      	itee	gt
 800d3da:	463a      	movgt	r2, r7
 800d3dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3e0:	465a      	movle	r2, fp
 800d3e2:	4659      	mov	r1, fp
 800d3e4:	463d      	mov	r5, r7
 800d3e6:	bfd4      	ite	le
 800d3e8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d3ec:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	ee10 2a10 	vmov	r2, s0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	f7f3 f9e1 	bl	80007c0 <__aeabi_ddiv>
 800d3fe:	ec41 0b10 	vmov	d0, r0, r1
 800d402:	b003      	add	sp, #12
 800d404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d408 <__copybits>:
 800d408:	3901      	subs	r1, #1
 800d40a:	b510      	push	{r4, lr}
 800d40c:	1149      	asrs	r1, r1, #5
 800d40e:	6914      	ldr	r4, [r2, #16]
 800d410:	3101      	adds	r1, #1
 800d412:	f102 0314 	add.w	r3, r2, #20
 800d416:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d41a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d41e:	42a3      	cmp	r3, r4
 800d420:	4602      	mov	r2, r0
 800d422:	d303      	bcc.n	800d42c <__copybits+0x24>
 800d424:	2300      	movs	r3, #0
 800d426:	428a      	cmp	r2, r1
 800d428:	d305      	bcc.n	800d436 <__copybits+0x2e>
 800d42a:	bd10      	pop	{r4, pc}
 800d42c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d430:	f840 2b04 	str.w	r2, [r0], #4
 800d434:	e7f3      	b.n	800d41e <__copybits+0x16>
 800d436:	f842 3b04 	str.w	r3, [r2], #4
 800d43a:	e7f4      	b.n	800d426 <__copybits+0x1e>

0800d43c <__any_on>:
 800d43c:	f100 0214 	add.w	r2, r0, #20
 800d440:	6900      	ldr	r0, [r0, #16]
 800d442:	114b      	asrs	r3, r1, #5
 800d444:	4298      	cmp	r0, r3
 800d446:	b510      	push	{r4, lr}
 800d448:	db11      	blt.n	800d46e <__any_on+0x32>
 800d44a:	dd0a      	ble.n	800d462 <__any_on+0x26>
 800d44c:	f011 011f 	ands.w	r1, r1, #31
 800d450:	d007      	beq.n	800d462 <__any_on+0x26>
 800d452:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d456:	fa24 f001 	lsr.w	r0, r4, r1
 800d45a:	fa00 f101 	lsl.w	r1, r0, r1
 800d45e:	428c      	cmp	r4, r1
 800d460:	d10b      	bne.n	800d47a <__any_on+0x3e>
 800d462:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d466:	4293      	cmp	r3, r2
 800d468:	d803      	bhi.n	800d472 <__any_on+0x36>
 800d46a:	2000      	movs	r0, #0
 800d46c:	bd10      	pop	{r4, pc}
 800d46e:	4603      	mov	r3, r0
 800d470:	e7f7      	b.n	800d462 <__any_on+0x26>
 800d472:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d476:	2900      	cmp	r1, #0
 800d478:	d0f5      	beq.n	800d466 <__any_on+0x2a>
 800d47a:	2001      	movs	r0, #1
 800d47c:	e7f6      	b.n	800d46c <__any_on+0x30>

0800d47e <_calloc_r>:
 800d47e:	b538      	push	{r3, r4, r5, lr}
 800d480:	fb02 f401 	mul.w	r4, r2, r1
 800d484:	4621      	mov	r1, r4
 800d486:	f000 f809 	bl	800d49c <_malloc_r>
 800d48a:	4605      	mov	r5, r0
 800d48c:	b118      	cbz	r0, 800d496 <_calloc_r+0x18>
 800d48e:	4622      	mov	r2, r4
 800d490:	2100      	movs	r1, #0
 800d492:	f7fd f852 	bl	800a53a <memset>
 800d496:	4628      	mov	r0, r5
 800d498:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d49c <_malloc_r>:
 800d49c:	b570      	push	{r4, r5, r6, lr}
 800d49e:	1ccd      	adds	r5, r1, #3
 800d4a0:	f025 0503 	bic.w	r5, r5, #3
 800d4a4:	3508      	adds	r5, #8
 800d4a6:	2d0c      	cmp	r5, #12
 800d4a8:	bf38      	it	cc
 800d4aa:	250c      	movcc	r5, #12
 800d4ac:	2d00      	cmp	r5, #0
 800d4ae:	4606      	mov	r6, r0
 800d4b0:	db01      	blt.n	800d4b6 <_malloc_r+0x1a>
 800d4b2:	42a9      	cmp	r1, r5
 800d4b4:	d903      	bls.n	800d4be <_malloc_r+0x22>
 800d4b6:	230c      	movs	r3, #12
 800d4b8:	6033      	str	r3, [r6, #0]
 800d4ba:	2000      	movs	r0, #0
 800d4bc:	bd70      	pop	{r4, r5, r6, pc}
 800d4be:	f000 f876 	bl	800d5ae <__malloc_lock>
 800d4c2:	4a21      	ldr	r2, [pc, #132]	; (800d548 <_malloc_r+0xac>)
 800d4c4:	6814      	ldr	r4, [r2, #0]
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	b991      	cbnz	r1, 800d4f0 <_malloc_r+0x54>
 800d4ca:	4c20      	ldr	r4, [pc, #128]	; (800d54c <_malloc_r+0xb0>)
 800d4cc:	6823      	ldr	r3, [r4, #0]
 800d4ce:	b91b      	cbnz	r3, 800d4d8 <_malloc_r+0x3c>
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f000 f83d 	bl	800d550 <_sbrk_r>
 800d4d6:	6020      	str	r0, [r4, #0]
 800d4d8:	4629      	mov	r1, r5
 800d4da:	4630      	mov	r0, r6
 800d4dc:	f000 f838 	bl	800d550 <_sbrk_r>
 800d4e0:	1c43      	adds	r3, r0, #1
 800d4e2:	d124      	bne.n	800d52e <_malloc_r+0x92>
 800d4e4:	230c      	movs	r3, #12
 800d4e6:	6033      	str	r3, [r6, #0]
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f000 f861 	bl	800d5b0 <__malloc_unlock>
 800d4ee:	e7e4      	b.n	800d4ba <_malloc_r+0x1e>
 800d4f0:	680b      	ldr	r3, [r1, #0]
 800d4f2:	1b5b      	subs	r3, r3, r5
 800d4f4:	d418      	bmi.n	800d528 <_malloc_r+0x8c>
 800d4f6:	2b0b      	cmp	r3, #11
 800d4f8:	d90f      	bls.n	800d51a <_malloc_r+0x7e>
 800d4fa:	600b      	str	r3, [r1, #0]
 800d4fc:	50cd      	str	r5, [r1, r3]
 800d4fe:	18cc      	adds	r4, r1, r3
 800d500:	4630      	mov	r0, r6
 800d502:	f000 f855 	bl	800d5b0 <__malloc_unlock>
 800d506:	f104 000b 	add.w	r0, r4, #11
 800d50a:	1d23      	adds	r3, r4, #4
 800d50c:	f020 0007 	bic.w	r0, r0, #7
 800d510:	1ac3      	subs	r3, r0, r3
 800d512:	d0d3      	beq.n	800d4bc <_malloc_r+0x20>
 800d514:	425a      	negs	r2, r3
 800d516:	50e2      	str	r2, [r4, r3]
 800d518:	e7d0      	b.n	800d4bc <_malloc_r+0x20>
 800d51a:	428c      	cmp	r4, r1
 800d51c:	684b      	ldr	r3, [r1, #4]
 800d51e:	bf16      	itet	ne
 800d520:	6063      	strne	r3, [r4, #4]
 800d522:	6013      	streq	r3, [r2, #0]
 800d524:	460c      	movne	r4, r1
 800d526:	e7eb      	b.n	800d500 <_malloc_r+0x64>
 800d528:	460c      	mov	r4, r1
 800d52a:	6849      	ldr	r1, [r1, #4]
 800d52c:	e7cc      	b.n	800d4c8 <_malloc_r+0x2c>
 800d52e:	1cc4      	adds	r4, r0, #3
 800d530:	f024 0403 	bic.w	r4, r4, #3
 800d534:	42a0      	cmp	r0, r4
 800d536:	d005      	beq.n	800d544 <_malloc_r+0xa8>
 800d538:	1a21      	subs	r1, r4, r0
 800d53a:	4630      	mov	r0, r6
 800d53c:	f000 f808 	bl	800d550 <_sbrk_r>
 800d540:	3001      	adds	r0, #1
 800d542:	d0cf      	beq.n	800d4e4 <_malloc_r+0x48>
 800d544:	6025      	str	r5, [r4, #0]
 800d546:	e7db      	b.n	800d500 <_malloc_r+0x64>
 800d548:	20004630 	.word	0x20004630
 800d54c:	20004634 	.word	0x20004634

0800d550 <_sbrk_r>:
 800d550:	b538      	push	{r3, r4, r5, lr}
 800d552:	4c06      	ldr	r4, [pc, #24]	; (800d56c <_sbrk_r+0x1c>)
 800d554:	2300      	movs	r3, #0
 800d556:	4605      	mov	r5, r0
 800d558:	4608      	mov	r0, r1
 800d55a:	6023      	str	r3, [r4, #0]
 800d55c:	f7f6 fdfa 	bl	8004154 <_sbrk>
 800d560:	1c43      	adds	r3, r0, #1
 800d562:	d102      	bne.n	800d56a <_sbrk_r+0x1a>
 800d564:	6823      	ldr	r3, [r4, #0]
 800d566:	b103      	cbz	r3, 800d56a <_sbrk_r+0x1a>
 800d568:	602b      	str	r3, [r5, #0]
 800d56a:	bd38      	pop	{r3, r4, r5, pc}
 800d56c:	200055c0 	.word	0x200055c0

0800d570 <strncmp>:
 800d570:	b510      	push	{r4, lr}
 800d572:	b16a      	cbz	r2, 800d590 <strncmp+0x20>
 800d574:	3901      	subs	r1, #1
 800d576:	1884      	adds	r4, r0, r2
 800d578:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d57c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d580:	4293      	cmp	r3, r2
 800d582:	d103      	bne.n	800d58c <strncmp+0x1c>
 800d584:	42a0      	cmp	r0, r4
 800d586:	d001      	beq.n	800d58c <strncmp+0x1c>
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d1f5      	bne.n	800d578 <strncmp+0x8>
 800d58c:	1a98      	subs	r0, r3, r2
 800d58e:	bd10      	pop	{r4, pc}
 800d590:	4610      	mov	r0, r2
 800d592:	e7fc      	b.n	800d58e <strncmp+0x1e>

0800d594 <__ascii_wctomb>:
 800d594:	b149      	cbz	r1, 800d5aa <__ascii_wctomb+0x16>
 800d596:	2aff      	cmp	r2, #255	; 0xff
 800d598:	bf85      	ittet	hi
 800d59a:	238a      	movhi	r3, #138	; 0x8a
 800d59c:	6003      	strhi	r3, [r0, #0]
 800d59e:	700a      	strbls	r2, [r1, #0]
 800d5a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d5a4:	bf98      	it	ls
 800d5a6:	2001      	movls	r0, #1
 800d5a8:	4770      	bx	lr
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	4770      	bx	lr

0800d5ae <__malloc_lock>:
 800d5ae:	4770      	bx	lr

0800d5b0 <__malloc_unlock>:
 800d5b0:	4770      	bx	lr
	...

0800d5b4 <_init>:
 800d5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b6:	bf00      	nop
 800d5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ba:	bc08      	pop	{r3}
 800d5bc:	469e      	mov	lr, r3
 800d5be:	4770      	bx	lr

0800d5c0 <_fini>:
 800d5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5c2:	bf00      	nop
 800d5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5c6:	bc08      	pop	{r3}
 800d5c8:	469e      	mov	lr, r3
 800d5ca:	4770      	bx	lr
