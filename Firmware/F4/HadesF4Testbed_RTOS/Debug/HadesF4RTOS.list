
HadesF4RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b278  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800b408  0800b408  0001b408  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b960  0800b960  00020674  2**0
                  CONTENTS
  4 .ARM          00000008  0800b960  0800b960  0001b960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b968  0800b968  00020674  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b968  0800b968  0001b968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b96c  0800b96c  0001b96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000674  20000000  0800b970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f48  20000674  0800bfe4  00020674  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055bc  0800bfe4  000255bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001930d  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000381d  00000000  00000000  000399b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014e8  00000000  00000000  0003d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001340  00000000  00000000  0003e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022157  00000000  00000000  0003f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ce3  00000000  00000000  00061b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca87d  00000000  00000000  00073832  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e0af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000617c  00000000  00000000  0013e12c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000674 	.word	0x20000674
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3f0 	.word	0x0800b3f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000678 	.word	0x20000678
 80001cc:	0800b3f0 	.word	0x0800b3f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <BMI088_Init>:
#include "BMI088.h"

uint8_t BMI088_Init(BMI088IMU *imu, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intAccPinBank, uint16_t intAccPin, GPIO_TypeDef *intGyrPinBank, uint16_t intGyrPin) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af04      	add	r7, sp, #16
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	807b      	strh	r3, [r7, #2]
	imu->I2Chandle     = I2Chandle;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	601a      	str	r2, [r3, #0]
	imu->intAccPinBank = intAccPinBank;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	605a      	str	r2, [r3, #4]
	imu->intAccPin     = intAccPin;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	811a      	strh	r2, [r3, #8]
	imu->intGyrPinBank = intGyrPinBank;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ecc:	60da      	str	r2, [r3, #12]
	imu->intGyrPin     = intGyrPin;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000ed2:	821a      	strh	r2, [r3, #16]
	imu->acc[0] = 0.0f;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	615a      	str	r2, [r3, #20]
	imu->acc[1] = 0.0f;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f04f 0200 	mov.w	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
	imu->acc[2] = 0.0f;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
	imu->gyr[0] = 0.0f;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
	imu->gyr[1] = 0.0f;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
	imu->gyr[2] = 0.0f;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
	 * ACCELEROMETER
	 */

	/* Check chip ID */
	uint8_t chipID;
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6818      	ldr	r0, [r3, #0]
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	f107 0317 	add.w	r3, r7, #23
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2301      	movs	r3, #1
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2132      	movs	r1, #50	; 0x32
 8000f1c:	f003 fd96 	bl	8004a4c <HAL_I2C_Mem_Read>

	if (chipID != 0x1E) {
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b1e      	cmp	r3, #30
 8000f24:	d001      	beq.n	8000f2a <BMI088_Init+0x82>
		return 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e0ca      	b.n	80010c0 <BMI088_Init+0x218>
	} else {
		/* Configure accelerometer LPF bandwidth (Normal, 1010) and ODR (100 Hz, 1000) --> Actual bandwidth = 40 Hz */
		uint8_t accConf = 0xA8;
 8000f2a:	23a8      	movs	r3, #168	; 0xa8
 8000f2c:	77fb      	strb	r3, [r7, #31]
		txBuf[0] = BMI088_ACC_CONF; txBuf[1] = accConf;
 8000f2e:	2340      	movs	r3, #64	; 0x40
 8000f30:	763b      	strb	r3, [r7, #24]
 8000f32:	7ffb      	ldrb	r3, [r7, #31]
 8000f34:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	f107 0218 	add.w	r2, r7, #24
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2302      	movs	r3, #2
 8000f44:	2132      	movs	r1, #50	; 0x32
 8000f46:	f003 fa5d 	bl	8004404 <HAL_I2C_Master_Transmit>

		/* Accelerometer range (+-6G = 0x01) */
		uint8_t accRange = 0x01;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	77bb      	strb	r3, [r7, #30]
		txBuf[0] = BMI088_ACC_RANGE; txBuf[1] = accRange;
 8000f4e:	2341      	movs	r3, #65	; 0x41
 8000f50:	763b      	strb	r3, [r7, #24]
 8000f52:	7fbb      	ldrb	r3, [r7, #30]
 8000f54:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	f107 0218 	add.w	r2, r7, #24
 8000f5e:	2364      	movs	r3, #100	; 0x64
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2302      	movs	r3, #2
 8000f64:	2132      	movs	r1, #50	; 0x32
 8000f66:	f003 fa4d 	bl	8004404 <HAL_I2C_Master_Transmit>

		/* Configure INT1 and INT2 pin */
		uint8_t intConf = 0x0A;
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	777b      	strb	r3, [r7, #29]
		txBuf[0] = BMI088_INT1_IO_CONF; txBuf[1] = intConf;
 8000f6e:	2353      	movs	r3, #83	; 0x53
 8000f70:	763b      	strb	r3, [r7, #24]
 8000f72:	7f7b      	ldrb	r3, [r7, #29]
 8000f74:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	f107 0218 	add.w	r2, r7, #24
 8000f7e:	2364      	movs	r3, #100	; 0x64
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2302      	movs	r3, #2
 8000f84:	2132      	movs	r1, #50	; 0x32
 8000f86:	f003 fa3d 	bl	8004404 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_INT2_IO_CONF;
 8000f8a:	2354      	movs	r3, #84	; 0x54
 8000f8c:	763b      	strb	r3, [r7, #24]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	f107 0218 	add.w	r2, r7, #24
 8000f96:	2364      	movs	r3, #100	; 0x64
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	2132      	movs	r1, #50	; 0x32
 8000f9e:	f003 fa31 	bl	8004404 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_INT1_INT2_MAP_DATA; txBuf[1] = 0x44;
 8000fa2:	2358      	movs	r3, #88	; 0x58
 8000fa4:	763b      	strb	r3, [r7, #24]
 8000fa6:	2344      	movs	r3, #68	; 0x44
 8000fa8:	767b      	strb	r3, [r7, #25]

		/* Set accelerometer to active mode */
		txBuf[0] = BMI088_ACC_PWR_CONF; txBuf[1] = 0x00;
 8000faa:	237c      	movs	r3, #124	; 0x7c
 8000fac:	763b      	strb	r3, [r7, #24]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	f107 0218 	add.w	r2, r7, #24
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	2132      	movs	r1, #50	; 0x32
 8000fc2:	f003 fa1f 	bl	8004404 <HAL_I2C_Master_Transmit>

		/* Switch accelerometer on */
		txBuf[0] = BMI088_ACC_PWR_CTRL; txBuf[1] = 0x04;
 8000fc6:	237d      	movs	r3, #125	; 0x7d
 8000fc8:	763b      	strb	r3, [r7, #24]
 8000fca:	2304      	movs	r3, #4
 8000fcc:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	f107 0218 	add.w	r2, r7, #24
 8000fd6:	2364      	movs	r3, #100	; 0x64
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2302      	movs	r3, #2
 8000fdc:	2132      	movs	r1, #50	; 0x32
 8000fde:	f003 fa11 	bl	8004404 <HAL_I2C_Master_Transmit>
		HAL_Delay(5);
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f002 fdda 	bl	8003b9c <HAL_Delay>
	/*
	 * GYROSCOPE
	 */

	/* Check chip ID */
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_GYR_I2C_ADDR, BMI088_GYR_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	f107 0317 	add.w	r3, r7, #23
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	21d2      	movs	r1, #210	; 0xd2
 8001000:	f003 fd24 	bl	8004a4c <HAL_I2C_Mem_Read>

	if (chipID != 0x0F) {
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b0f      	cmp	r3, #15
 8001008:	d001      	beq.n	800100e <BMI088_Init+0x166>
		return 0;
 800100a:	2300      	movs	r3, #0
 800100c:	e058      	b.n	80010c0 <BMI088_Init+0x218>
	} else {
		/* Gyro range (+- 500deg/s) */
		uint8_t gyrRange = 0x02;
 800100e:	2302      	movs	r3, #2
 8001010:	773b      	strb	r3, [r7, #28]
		txBuf[0] = BMI088_GYR_RANGE; txBuf[1] = gyrRange;
 8001012:	230f      	movs	r3, #15
 8001014:	763b      	strb	r3, [r7, #24]
 8001016:	7f3b      	ldrb	r3, [r7, #28]
 8001018:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	f107 0218 	add.w	r2, r7, #24
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2302      	movs	r3, #2
 8001028:	21d2      	movs	r1, #210	; 0xd2
 800102a:	f003 f9eb 	bl	8004404 <HAL_I2C_Master_Transmit>

		/* Gyro bandwidth/ODR (ODR = 200 Hz --> Filter bandwidth = 47 Hz) */
		uint8_t gyrBandwidth = 0x83;
 800102e:	2383      	movs	r3, #131	; 0x83
 8001030:	76fb      	strb	r3, [r7, #27]
		txBuf[0] = BMI088_GYR_BANDWIDTH; txBuf[1] = gyrBandwidth;
 8001032:	2310      	movs	r3, #16
 8001034:	763b      	strb	r3, [r7, #24]
 8001036:	7efb      	ldrb	r3, [r7, #27]
 8001038:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f107 0218 	add.w	r2, r7, #24
 8001042:	2364      	movs	r3, #100	; 0x64
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2302      	movs	r3, #2
 8001048:	21d2      	movs	r1, #210	; 0xd2
 800104a:	f003 f9db 	bl	8004404 <HAL_I2C_Master_Transmit>

		/* Gyro power mode */
		txBuf[0] = BMI088_GYR_LPM1; txBuf[1] = 0x00;
 800104e:	2311      	movs	r3, #17
 8001050:	763b      	strb	r3, [r7, #24]
 8001052:	2300      	movs	r3, #0
 8001054:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	f107 0218 	add.w	r2, r7, #24
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2302      	movs	r3, #2
 8001064:	21d2      	movs	r1, #210	; 0xd2
 8001066:	f003 f9cd 	bl	8004404 <HAL_I2C_Master_Transmit>

		/* Enable gyro interrupt and map to pins */
		txBuf[0] = BMI088_GYR_INT_CTRL; txBuf[1] = 0x80;
 800106a:	2315      	movs	r3, #21
 800106c:	763b      	strb	r3, [r7, #24]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	f107 0218 	add.w	r2, r7, #24
 800107a:	2364      	movs	r3, #100	; 0x64
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2302      	movs	r3, #2
 8001080:	21d2      	movs	r1, #210	; 0xd2
 8001082:	f003 f9bf 	bl	8004404 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_GYR_INT3_INT4_IO_CONF; txBuf[1] = 0x05;
 8001086:	2316      	movs	r3, #22
 8001088:	763b      	strb	r3, [r7, #24]
 800108a:	2305      	movs	r3, #5
 800108c:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	f107 0218 	add.w	r2, r7, #24
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2302      	movs	r3, #2
 800109c:	21d2      	movs	r1, #210	; 0xd2
 800109e:	f003 f9b1 	bl	8004404 <HAL_I2C_Master_Transmit>

		txBuf[0] = BMI088_GYR_INT3_INT4_IO_MAP; txBuf[1] = 0x81;
 80010a2:	2318      	movs	r3, #24
 80010a4:	763b      	strb	r3, [r7, #24]
 80010a6:	2381      	movs	r3, #129	; 0x81
 80010a8:	767b      	strb	r3, [r7, #25]
		HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	f107 0218 	add.w	r2, r7, #24
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2302      	movs	r3, #2
 80010b8:	21d2      	movs	r1, #210	; 0xd2
 80010ba:	f003 f9a3 	bl	8004404 <HAL_I2C_Master_Transmit>
	}

	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <BMI088_ReadAcc>:
	uint8_t txBuf[] = {BMI088_GYR_SOFTRESET, 0xB6};
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
	HAL_Delay(1);
}

void BMI088_ReadAcc(BMI088IMU *imu) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[6];
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_DATA, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, BMI088_I2C_TIMEOUT);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	2364      	movs	r3, #100	; 0x64
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	2306      	movs	r3, #6
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	2212      	movs	r2, #18
 80010e6:	2132      	movs	r1, #50	; 0x32
 80010e8:	f003 fcb0 	bl	8004a4c <HAL_I2C_Mem_Read>

	int16_t accX = rxBuf[1];
 80010ec:	7b7b      	ldrb	r3, [r7, #13]
 80010ee:	82fb      	strh	r3, [r7, #22]
			accX <<= 8;
 80010f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	82fb      	strh	r3, [r7, #22]
			accX |= rxBuf[0];
 80010f8:	7b3b      	ldrb	r3, [r7, #12]
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	8afb      	ldrh	r3, [r7, #22]
 80010fe:	4313      	orrs	r3, r2
 8001100:	82fb      	strh	r3, [r7, #22]

	int16_t accY = rxBuf[3];
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	82bb      	strh	r3, [r7, #20]
			accY <<= 8;
 8001106:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	82bb      	strh	r3, [r7, #20]
			accY |= rxBuf[2];
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	b21a      	sxth	r2, r3
 8001112:	8abb      	ldrh	r3, [r7, #20]
 8001114:	4313      	orrs	r3, r2
 8001116:	82bb      	strh	r3, [r7, #20]

	int16_t accZ = rxBuf[5];
 8001118:	7c7b      	ldrb	r3, [r7, #17]
 800111a:	827b      	strh	r3, [r7, #18]
			accZ <<= 8;
 800111c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	827b      	strh	r3, [r7, #18]
			accZ |= rxBuf[4];
 8001124:	7c3b      	ldrb	r3, [r7, #16]
 8001126:	b21a      	sxth	r2, r3
 8001128:	8a7b      	ldrh	r3, [r7, #18]
 800112a:	4313      	orrs	r3, r2
 800112c:	827b      	strh	r3, [r7, #18]

	/* Scale (to m/s^2) and re-map axes */
	imu->acc[0] = -accY * 0.00179626456f;
 800112e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001132:	425b      	negs	r3, r3
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800118c <BMI088_ReadAcc+0xc4>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->acc[1] = -accX * 0.00179626456f;
 800114a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800114e:	425b      	negs	r3, r3
 8001150:	ee07 3a90 	vmov	s15, r3
 8001154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001158:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800118c <BMI088_ReadAcc+0xc4>
 800115c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->acc[2] = -accZ * 0.00179626456f;
 8001166:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800116a:	425b      	negs	r3, r3
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001174:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800118c <BMI088_ReadAcc+0xc4>
 8001178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	3aeb70a3 	.word	0x3aeb70a3

08001190 <BMI088_ReadGyr>:

void BMI088_ReadGyr(BMI088IMU *imu) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[6];
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_GYR_I2C_ADDR, BMI088_GYR_DATA, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, BMI088_I2C_TIMEOUT);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2306      	movs	r3, #6
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	2202      	movs	r2, #2
 80011ae:	21d2      	movs	r1, #210	; 0xd2
 80011b0:	f003 fc4c 	bl	8004a4c <HAL_I2C_Mem_Read>

	int16_t gyrX = rxBuf[1];
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	82fb      	strh	r3, [r7, #22]
			gyrX <<= 8;
 80011b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	82fb      	strh	r3, [r7, #22]
			gyrX |= rxBuf[0];
 80011c0:	7b3b      	ldrb	r3, [r7, #12]
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	8afb      	ldrh	r3, [r7, #22]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	82fb      	strh	r3, [r7, #22]

	int16_t gyrY = rxBuf[3];
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	82bb      	strh	r3, [r7, #20]
			gyrY <<= 8;
 80011ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	82bb      	strh	r3, [r7, #20]
			gyrY |= rxBuf[2];
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
 80011d8:	b21a      	sxth	r2, r3
 80011da:	8abb      	ldrh	r3, [r7, #20]
 80011dc:	4313      	orrs	r3, r2
 80011de:	82bb      	strh	r3, [r7, #20]

	int16_t gyrZ = rxBuf[5];
 80011e0:	7c7b      	ldrb	r3, [r7, #17]
 80011e2:	827b      	strh	r3, [r7, #18]
			gyrZ <<= 8;
 80011e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	827b      	strh	r3, [r7, #18]
			gyrZ |= rxBuf[4];
 80011ec:	7c3b      	ldrb	r3, [r7, #16]
 80011ee:	b21a      	sxth	r2, r3
 80011f0:	8a7b      	ldrh	r3, [r7, #18]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	827b      	strh	r3, [r7, #18]

	/* Scale (to rad/s) and re-map axes */
	imu->gyr[0] = -gyrY * 0.00026632423f;
 80011f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80011fa:	425b      	negs	r3, r3
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001204:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001254 <BMI088_ReadGyr+0xc4>
 8001208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->gyr[1] = -gyrX * 0.00026632423f;
 8001212:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001216:	425b      	negs	r3, r3
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001220:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001254 <BMI088_ReadGyr+0xc4>
 8001224:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu->gyr[2] = -gyrZ * 0.00026632423f;
 800122e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001232:	425b      	negs	r3, r3
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001254 <BMI088_ReadGyr+0xc4>
 8001240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	398ba16f 	.word	0x398ba16f

08001258 <IISMagnetometer_Init>:
#include "IIS2MDC.h"

uint8_t IISMagnetometer_Init(IISMagnetometer *mag, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intPinBank, uint16_t intPin) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af04      	add	r7, sp, #16
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
 8001264:	807b      	strh	r3, [r7, #2]
	mag->I2Chandle  = I2Chandle;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	601a      	str	r2, [r3, #0]
	mag->intPinBank = intPinBank;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	605a      	str	r2, [r3, #4]
	mag->intPin     = intPin;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	887a      	ldrh	r2, [r7, #2]
 8001276:	811a      	strh	r2, [r3, #8]
	mag->xyz[0]     = 0;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
	mag->xyz[1]     = 0;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
	mag->xyz[2]     = 0;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	615a      	str	r2, [r3, #20]
	mag->tempC      = 0.0f;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	619a      	str	r2, [r3, #24]

	/* Check device ID register */
	uint8_t whoAmI;
	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_WHOAMI_REG, I2C_MEMADD_SIZE_8BIT, &whoAmI, 1, IIS_I2C_TIMEOUT);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	2364      	movs	r3, #100	; 0x64
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	224f      	movs	r2, #79	; 0x4f
 80012ae:	213c      	movs	r1, #60	; 0x3c
 80012b0:	f003 fbcc 	bl	8004a4c <HAL_I2C_Mem_Read>

	if (whoAmI != IIS_WHOAMI) {
 80012b4:	7d3b      	ldrb	r3, [r7, #20]
 80012b6:	2b40      	cmp	r3, #64	; 0x40
 80012b8:	d001      	beq.n	80012be <IISMagnetometer_Init+0x66>
		return 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e030      	b.n	8001320 <IISMagnetometer_Init+0xc8>

	/* Configure sensor */
	uint8_t txBuf[2];

	/* Temperature compensation = 1, Reboot = 0, Soft_Rst = 0, Low Power = 0, ODR 100 Hz = 11, MODE CONTINUOUS 00 */
	uint8_t cfgRegA = 0x8C;
 80012be:	238c      	movs	r3, #140	; 0x8c
 80012c0:	75fb      	strb	r3, [r7, #23]
	txBuf[0] = IIS_CFG_REG_A; txBuf[1] = cfgRegA;
 80012c2:	2360      	movs	r3, #96	; 0x60
 80012c4:	743b      	strb	r3, [r7, #16]
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	f107 0210 	add.w	r2, r7, #16
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2302      	movs	r3, #2
 80012d8:	213c      	movs	r1, #60	; 0x3c
 80012da:	f003 f893 	bl	8004404 <HAL_I2C_Master_Transmit>

	/* 0 0 0, Offset cancellation = 0, INT_on_DataOff = 0, Set_Freq = 0, Offset cancellation = 0, Low-pass filter = 1 */
	uint8_t cfgRegB = 0x01;
 80012de:	2301      	movs	r3, #1
 80012e0:	75bb      	strb	r3, [r7, #22]
	txBuf[0] = IIS_CFG_REG_B; txBuf[1] = cfgRegB;
 80012e2:	2361      	movs	r3, #97	; 0x61
 80012e4:	743b      	strb	r3, [r7, #16]
 80012e6:	7dbb      	ldrb	r3, [r7, #22]
 80012e8:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f107 0210 	add.w	r2, r7, #16
 80012f2:	2364      	movs	r3, #100	; 0x64
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	2302      	movs	r3, #2
 80012f8:	213c      	movs	r1, #60	; 0x3c
 80012fa:	f003 f883 	bl	8004404 <HAL_I2C_Master_Transmit>

	/* 0, INT_on_PIN = 0, I2C_DIS = 0, BDU = 0, BLE = 0, 0, Self_test = 0, DRDY_on_PIN = 1 */
	uint8_t cfgRegC = 0x01;
 80012fe:	2301      	movs	r3, #1
 8001300:	757b      	strb	r3, [r7, #21]
	txBuf[0] = IIS_CFG_REG_C; txBuf[1] = cfgRegC;
 8001302:	2362      	movs	r3, #98	; 0x62
 8001304:	743b      	strb	r3, [r7, #16]
 8001306:	7d7b      	ldrb	r3, [r7, #21]
 8001308:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	f107 0210 	add.w	r2, r7, #16
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2302      	movs	r3, #2
 8001318:	213c      	movs	r1, #60	; 0x3c
 800131a:	f003 f873 	bl	8004404 <HAL_I2C_Master_Transmit>

	return 1;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <IISMagnetometer_Read>:
	uint8_t txBuf[] = {IIS_CFG_REG_A, 0x60};
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
	HAL_Delay(50);
}

void IISMagnetometer_Read(IISMagnetometer *mag) {
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b08b      	sub	sp, #44	; 0x2c
 800132c:	af04      	add	r7, sp, #16
 800132e:	6078      	str	r0, [r7, #4]
	/* Wait until DRDY pin is set */
	while (!HAL_GPIO_ReadPin(mag->intPinBank, mag->intPin)) {
 8001330:	e002      	b.n	8001338 <IISMagnetometer_Read+0x10>
		HAL_Delay(5);
 8001332:	2005      	movs	r0, #5
 8001334:	f002 fc32 	bl	8003b9c <HAL_Delay>
	while (!HAL_GPIO_ReadPin(mag->intPinBank, mag->intPin)) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	891b      	ldrh	r3, [r3, #8]
 8001340:	4619      	mov	r1, r3
 8001342:	4610      	mov	r0, r2
 8001344:	f002 feea 	bl	800411c <HAL_GPIO_ReadPin>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0f1      	beq.n	8001332 <IISMagnetometer_Read+0xa>

	/* Read raw X, Y, and Z values */
	uint8_t rxBuf[2];
	int16_t magRaw[3];

	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_OUTX_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	2364      	movs	r3, #100	; 0x64
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	2302      	movs	r3, #2
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	2268      	movs	r2, #104	; 0x68
 8001364:	213c      	movs	r1, #60	; 0x3c
 8001366:	f003 fb71 	bl	8004a4c <HAL_I2C_Mem_Read>
	magRaw[0] = ((rxBuf[1] << 8) | rxBuf[0]);
 800136a:	7c7b      	ldrb	r3, [r7, #17]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7c3b      	ldrb	r3, [r7, #16]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	813b      	strh	r3, [r7, #8]

	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_OUTY_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	2364      	movs	r3, #100	; 0x64
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2302      	movs	r3, #2
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	226a      	movs	r2, #106	; 0x6a
 8001390:	213c      	movs	r1, #60	; 0x3c
 8001392:	f003 fb5b 	bl	8004a4c <HAL_I2C_Mem_Read>
	magRaw[1] = ((rxBuf[1] << 8) | rxBuf[0]);
 8001396:	7c7b      	ldrb	r3, [r7, #17]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	7c3b      	ldrb	r3, [r7, #16]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	817b      	strh	r3, [r7, #10]

	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_OUTZ_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2302      	movs	r3, #2
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	226c      	movs	r2, #108	; 0x6c
 80013bc:	213c      	movs	r1, #60	; 0x3c
 80013be:	f003 fb45 	bl	8004a4c <HAL_I2C_Mem_Read>
	magRaw[2] = ((rxBuf[1] << 8) | rxBuf[0]);
 80013c2:	7c7b      	ldrb	r3, [r7, #17]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	7c3b      	ldrb	r3, [r7, #16]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	81bb      	strh	r3, [r7, #12]

	/* Convert to unit vector and re-map axes */
	float inorm = 1.0f / ((float) (magRaw[0] * magRaw[0] + magRaw[1] * magRaw[1] + magRaw[2] * magRaw[2]));
 80013d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013d6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013da:	fb02 f203 	mul.w	r2, r2, r3
 80013de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013e2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80013e6:	fb01 f303 	mul.w	r3, r1, r3
 80013ea:	441a      	add	r2, r3
 80013ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013f0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80013f4:	fb01 f303 	mul.w	r3, r1, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140a:	edc7 7a05 	vstr	s15, [r7, #20]
		  inorm = sqrt(inorm);
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff f84a 	bl	80004a8 <__aeabi_f2d>
 8001414:	4603      	mov	r3, r0
 8001416:	460c      	mov	r4, r1
 8001418:	ec44 3b10 	vmov	d0, r3, r4
 800141c:	f006 ffe4 	bl	80083e8 <sqrt>
 8001420:	ec54 3b10 	vmov	r3, r4, d0
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	f7ff fb6e 	bl	8000b08 <__aeabi_d2f>
 800142c:	4603      	mov	r3, r0
 800142e:	617b      	str	r3, [r7, #20]

    mag->xyz[0] =  magRaw[0] * inorm;
 8001430:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800143c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	edc3 7a03 	vstr	s15, [r3, #12]
    mag->xyz[1] = -magRaw[1] * inorm;
 800144a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800144e:	425b      	negs	r3, r3
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001458:	edd7 7a05 	vldr	s15, [r7, #20]
 800145c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	edc3 7a04 	vstr	s15, [r3, #16]
    mag->xyz[2] = -magRaw[2] * inorm;
 8001466:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800146a:	425b      	negs	r3, r3
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001474:	edd7 7a05 	vldr	s15, [r7, #20]
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Read temperature */
	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_TEMP_LOW, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, IIS_I2C_TIMEOUT);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	2364      	movs	r3, #100	; 0x64
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2302      	movs	r3, #2
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2301      	movs	r3, #1
 8001496:	226e      	movs	r2, #110	; 0x6e
 8001498:	213c      	movs	r1, #60	; 0x3c
 800149a:	f003 fad7 	bl	8004a4c <HAL_I2C_Mem_Read>
	int16_t temp = rxBuf[1];
 800149e:	7c7b      	ldrb	r3, [r7, #17]
 80014a0:	827b      	strh	r3, [r7, #18]
			temp <<= 8;
 80014a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	827b      	strh	r3, [r7, #18]
			temp |= rxBuf[0];
 80014aa:	7c3b      	ldrb	r3, [r7, #16]
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	8a7b      	ldrh	r3, [r7, #18]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	827b      	strh	r3, [r7, #18]

	mag->tempC = temp / 8.0f;
 80014b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80014c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	371c      	adds	r7, #28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}

080014d6 <KalmanRollPitch_Init>:
#include "KalmanRollPitch.h"

void KalmanRollPitch_Init(KalmanRollPitch *kal, float Pinit, float *Q, float *R) {
 80014d6:	b480      	push	{r7}
 80014d8:	b085      	sub	sp, #20
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	ed87 0a02 	vstr	s0, [r7, #8]
 80014e2:	6079      	str	r1, [r7, #4]
 80014e4:	603a      	str	r2, [r7, #0]
	kal->phi   = 0.0f;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
	kal->theta = 0.0f;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	605a      	str	r2, [r3, #4]
	kal->P[0] = Pinit; kal->P[1] = 0.0f;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
	kal->P[2] = 0.0f;  kal->P[3] = Pinit;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	615a      	str	r2, [r3, #20]
	kal->Q[0] = Q[0];  kal->Q[1] = Q[1];
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	619a      	str	r2, [r3, #24]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	61da      	str	r2, [r3, #28]
	kal->R[0] = R[0];  kal->R[1] = R[1]; kal->R[2] = R[2];
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	621a      	str	r2, [r3, #32]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <KalmanRollPitch_Update>:

void KalmanRollPitch_Update(KalmanRollPitch *kal, float *gyr, float *acc, float Va, float T) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b0bd      	sub	sp, #244	; 0xf4
 800154c:	af00      	add	r7, sp, #0
 800154e:	6178      	str	r0, [r7, #20]
 8001550:	6139      	str	r1, [r7, #16]
 8001552:	60fa      	str	r2, [r7, #12]
 8001554:	ed87 0a02 	vstr	s0, [r7, #8]
 8001558:	edc7 0a01 	vstr	s1, [r7, #4]
	/* Extract measurements */
	float p = gyr[0];
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float q = gyr[1];
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	float r = gyr[2];
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

	float ax = acc[0];
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	float ay = acc[1];
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	float az = acc[2];
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	/* Predict */

	/* Compute common trig terms */
	float sp = sin(kal->phi);   float cp = cos(kal->phi);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ff89 	bl	80004a8 <__aeabi_f2d>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	ec44 3b10 	vmov	d0, r3, r4
 800159e:	f006 feab 	bl	80082f8 <sin>
 80015a2:	ec54 3b10 	vmov	r3, r4, d0
 80015a6:	4618      	mov	r0, r3
 80015a8:	4621      	mov	r1, r4
 80015aa:	f7ff faad 	bl	8000b08 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff75 	bl	80004a8 <__aeabi_f2d>
 80015be:	4603      	mov	r3, r0
 80015c0:	460c      	mov	r4, r1
 80015c2:	ec44 3b10 	vmov	d0, r3, r4
 80015c6:	f006 fe53 	bl	8008270 <cos>
 80015ca:	ec54 3b10 	vmov	r3, r4, d0
 80015ce:	4618      	mov	r0, r3
 80015d0:	4621      	mov	r1, r4
 80015d2:	f7ff fa99 	bl	8000b08 <__aeabi_d2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float tt = tan(kal->theta);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff61 	bl	80004a8 <__aeabi_f2d>
 80015e6:	4603      	mov	r3, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	ec44 3b10 	vmov	d0, r3, r4
 80015ee:	f006 fecb 	bl	8008388 <tan>
 80015f2:	ec54 3b10 	vmov	r3, r4, d0
 80015f6:	4618      	mov	r0, r3
 80015f8:	4621      	mov	r1, r4
 80015fa:	f7ff fa85 	bl	8000b08 <__aeabi_d2f>
 80015fe:	4603      	mov	r3, r0
 8001600:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

	/* x+ = x- + T * f(x,u) */
	kal->phi   = kal->phi   + T * (p + tt * (q * sp + r * cp));
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	edd7 6a3a 	vldr	s13, [r7, #232]	; 0xe8
 800160e:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001612:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001616:	ed97 6a39 	vldr	s12, [r7, #228]	; 0xe4
 800161a:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800161e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001622:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001626:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800162a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800162e:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8001632:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001636:	edd7 7a01 	vldr	s15, [r7, #4]
 800163a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	edc3 7a00 	vstr	s15, [r3]
	kal->theta = kal->theta + T * (    q * cp      - r * sp);
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	ed93 7a01 	vldr	s14, [r3, #4]
 800164e:	edd7 6a3a 	vldr	s13, [r7, #232]	; 0xe8
 8001652:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001656:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800165a:	ed97 6a39 	vldr	s12, [r7, #228]	; 0xe4
 800165e:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001662:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001666:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800166a:	edd7 7a01 	vldr	s15, [r7, #4]
 800166e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Recompute common trig terms using new state estimates */
	      sp = sin(kal->phi); 		  cp = cos(kal->phi);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff11 	bl	80004a8 <__aeabi_f2d>
 8001686:	4603      	mov	r3, r0
 8001688:	460c      	mov	r4, r1
 800168a:	ec44 3b10 	vmov	d0, r3, r4
 800168e:	f006 fe33 	bl	80082f8 <sin>
 8001692:	ec54 3b10 	vmov	r3, r4, d0
 8001696:	4618      	mov	r0, r3
 8001698:	4621      	mov	r1, r4
 800169a:	f7ff fa35 	bl	8000b08 <__aeabi_d2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fefd 	bl	80004a8 <__aeabi_f2d>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	ec44 3b10 	vmov	d0, r3, r4
 80016b6:	f006 fddb 	bl	8008270 <cos>
 80016ba:	ec54 3b10 	vmov	r3, r4, d0
 80016be:	4618      	mov	r0, r3
 80016c0:	4621      	mov	r1, r4
 80016c2:	f7ff fa21 	bl	8000b08 <__aeabi_d2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	float st = sin(kal->theta); float ct = cos(kal->theta); tt = st / ct;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fee9 	bl	80004a8 <__aeabi_f2d>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	ec44 3b10 	vmov	d0, r3, r4
 80016de:	f006 fe0b 	bl	80082f8 <sin>
 80016e2:	ec54 3b10 	vmov	r3, r4, d0
 80016e6:	4618      	mov	r0, r3
 80016e8:	4621      	mov	r1, r4
 80016ea:	f7ff fa0d 	bl	8000b08 <__aeabi_d2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fed5 	bl	80004a8 <__aeabi_f2d>
 80016fe:	4603      	mov	r3, r0
 8001700:	460c      	mov	r4, r1
 8001702:	ec44 3b10 	vmov	d0, r3, r4
 8001706:	f006 fdb3 	bl	8008270 <cos>
 800170a:	ec54 3b10 	vmov	r3, r4, d0
 800170e:	4618      	mov	r0, r3
 8001710:	4621      	mov	r1, r4
 8001712:	f7ff f9f9 	bl	8000b08 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800171c:	edd7 6a32 	vldr	s13, [r7, #200]	; 0xc8
 8001720:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8001724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001728:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc

	/* Jacobian of f(x,u) */
	float A[4] = { tt * (q * cp - r * sp), (r * cp + q * sp) * (tt * tt + 1.0f),
 800172c:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 8001730:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001738:	edd7 6a39 	vldr	s13, [r7, #228]	; 0xe4
 800173c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001744:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001748:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 800174c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001750:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
 8001754:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001758:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800175c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001760:	edd7 6a3a 	vldr	s13, [r7, #232]	; 0xe8
 8001764:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001770:	edd7 6a33 	vldr	s13, [r7, #204]	; 0xcc
 8001774:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8001778:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001788:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
				 -(r * cp + q * sp),        0.0f};
 800178c:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001790:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001798:	edd7 6a3a 	vldr	s13, [r7, #232]	; 0xe8
 800179c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80017a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a8:	eef1 7a67 	vneg.f32	s15, s15
	float A[4] = { tt * (q * cp - r * sp), (r * cp + q * sp) * (tt * tt + 1.0f),
 80017ac:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	/* Update covariance matrix P+ = P- + T * (A*P- + P-*A' + Q) */
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80017be:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80017c2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d4:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	edd3 7a03 	vldr	s15, [r3, #12]
 80017de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e6:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80017f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001800:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 8001804:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	edd3 7a03 	vldr	s15, [r3, #12]
 800180e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001812:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	edd3 7a02 	vldr	s15, [r3, #8]
 800181c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001820:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001824:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	edd3 7a05 	vldr	s15, [r3, #20]
 800182e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001832:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001836:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001848:	edd7 7a01 	vldr	s15, [r7, #4]
 800184c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001850:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
					  T*(A[0]*kal->P[2] + A[2]*kal->P[0]   + A[1]*kal->P[3] + A[3]*kal->P[2]),    T*(kal->Q[1]      + A[2]*kal->P[1] + A[2]*kal->P[2] + 2.0f*A[3]*kal->P[3]) };
 8001854:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	edd3 7a04 	vldr	s15, [r3, #16]
 800185e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001862:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	edd3 7a02 	vldr	s15, [r3, #8]
 800186c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001874:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	edd3 7a05 	vldr	s15, [r3, #20]
 800187e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001882:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001886:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001898:	edd7 7a01 	vldr	s15, [r7, #4]
 800189c:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 80018a0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
					  T*(A[0]*kal->P[2] + A[2]*kal->P[0]   + A[1]*kal->P[3] + A[3]*kal->P[2]),    T*(kal->Q[1]      + A[2]*kal->P[1] + A[2]*kal->P[2] + 2.0f*A[3]*kal->P[3]) };
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	ed93 7a07 	vldr	s14, [r3, #28]
 80018aa:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80018b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018bc:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80018c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ce:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80018d2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80018dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e8:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ptmp[4] = { T*(kal->Q[0]      + 2.0f*A[0]*kal->P[0] + A[1]*kal->P[1] + A[1]*kal->P[2]), T*(A[0]*kal->P[1] + A[2]*kal->P[0] + A[1]*kal->P[3] + A[3]*kal->P[1]),
 80018ec:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

	kal->P[0] = kal->P[0] + Ptmp[0]; kal->P[1] = kal->P[1] + Ptmp[1];
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80018f6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80018fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	edc3 7a02 	vstr	s15, [r3, #8]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	ed93 7a03 	vldr	s14, [r3, #12]
 800190a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	edc3 7a03 	vstr	s15, [r3, #12]
	kal->P[2] = kal->P[2] + Ptmp[2]; kal->P[3] = kal->P[3] + Ptmp[3];
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	ed93 7a04 	vldr	s14, [r3, #16]
 800191e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	edc3 7a04 	vstr	s15, [r3, #16]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001932:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	edc3 7a05 	vstr	s15, [r3, #20]


	/* Update */

	/* Re-compute common trig terms */
	sp = sin(kal->phi);   cp = cos(kal->phi);
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fdaf 	bl	80004a8 <__aeabi_f2d>
 800194a:	4603      	mov	r3, r0
 800194c:	460c      	mov	r4, r1
 800194e:	ec44 3b10 	vmov	d0, r3, r4
 8001952:	f006 fcd1 	bl	80082f8 <sin>
 8001956:	ec54 3b10 	vmov	r3, r4, d0
 800195a:	4618      	mov	r0, r3
 800195c:	4621      	mov	r1, r4
 800195e:	f7ff f8d3 	bl	8000b08 <__aeabi_d2f>
 8001962:	4603      	mov	r3, r0
 8001964:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd9b 	bl	80004a8 <__aeabi_f2d>
 8001972:	4603      	mov	r3, r0
 8001974:	460c      	mov	r4, r1
 8001976:	ec44 3b10 	vmov	d0, r3, r4
 800197a:	f006 fc79 	bl	8008270 <cos>
 800197e:	ec54 3b10 	vmov	r3, r4, d0
 8001982:	4618      	mov	r0, r3
 8001984:	4621      	mov	r1, r4
 8001986:	f7ff f8bf 	bl	8000b08 <__aeabi_d2f>
 800198a:	4603      	mov	r3, r0
 800198c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	st = sin(kal->theta); ct = cos(kal->theta);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd87 	bl	80004a8 <__aeabi_f2d>
 800199a:	4603      	mov	r3, r0
 800199c:	460c      	mov	r4, r1
 800199e:	ec44 3b10 	vmov	d0, r3, r4
 80019a2:	f006 fca9 	bl	80082f8 <sin>
 80019a6:	ec54 3b10 	vmov	r3, r4, d0
 80019aa:	4618      	mov	r0, r3
 80019ac:	4621      	mov	r1, r4
 80019ae:	f7ff f8ab 	bl	8000b08 <__aeabi_d2f>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fd73 	bl	80004a8 <__aeabi_f2d>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	ec44 3b10 	vmov	d0, r3, r4
 80019ca:	f006 fc51 	bl	8008270 <cos>
 80019ce:	ec54 3b10 	vmov	r3, r4, d0
 80019d2:	4618      	mov	r0, r3
 80019d4:	4621      	mov	r1, r4
 80019d6:	f7ff f897 	bl	8000b08 <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	/* Output function h(x,u) */
	float h[3] = { q * Va * st               + g * st,
 80019e0:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 80019e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80019f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f4:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80019f8:	eddf 6aef 	vldr	s13, [pc, #956]	; 8001db8 <KalmanRollPitch_Update+0x870>
 80019fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a04:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
				   r * Va * ct - p * Va * st - g * ct * sp,
 8001a08:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a14:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a1c:	edd7 6a3b 	vldr	s13, [r7, #236]	; 0xec
 8001a20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a28:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a34:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a38:	eddf 6adf 	vldr	s13, [pc, #892]	; 8001db8 <KalmanRollPitch_Update+0x870>
 8001a3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a40:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a48:	ee77 7a67 	vsub.f32	s15, s14, s15
	float h[3] = { q * Va * st               + g * st,
 8001a4c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
				  -q * Va * ct               - g * ct * cp };
 8001a50:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8001a54:	eeb1 7a67 	vneg.f32	s14, s15
 8001a58:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a60:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a68:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a6c:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8001db8 <KalmanRollPitch_Update+0x870>
 8001a70:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a74:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
	float h[3] = { q * Va * st               + g * st,
 8001a80:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

	/* Jacobian of h(x,u) */
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001a8a:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 8001a8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a96:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9e:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001aa2:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8001db8 <KalmanRollPitch_Update+0x870>
 8001aa6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aae:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
				  -g * cp * ct, -r * Va * st - p * Va * ct + g * sp * st,
 8001ab2:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001ab6:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8001dbc <KalmanRollPitch_Update+0x874>
 8001aba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001abe:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001ac6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
				  -g * cp * ct, -r * Va * st - p * Va * ct + g * sp * st,
 8001aca:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001ace:	eeb1 7a67 	vneg.f32	s14, s15
 8001ad2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ada:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001ade:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae2:	edd7 6a3b 	vldr	s13, [r7, #236]	; 0xec
 8001ae6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aee:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001afa:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001afe:	eddf 6aae 	vldr	s13, [pc, #696]	; 8001db8 <KalmanRollPitch_Update+0x870>
 8001b02:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b06:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001b12:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				   g * sp * ct, (q * Va + g * cp) * st };
 8001b16:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001b1a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001db8 <KalmanRollPitch_Update+0x870>
 8001b1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b22:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001b26:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001b2a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
				   g * sp * ct, (q * Va + g * cp) * st };
 8001b2e:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 8001b32:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3a:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8001b3e:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8001db8 <KalmanRollPitch_Update+0x870>
 8001b42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b4a:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8001b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
	float C[6] = { 0.0f,         q * Va * ct + g * ct,
 8001b52:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

	/* Kalman gain K = P * C' / (C * P * C' + R) */
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	ed93 7a05 	vldr	s14, [r3, #20]
 8001b5c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b64:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b76:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8001b7a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001b7e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b90:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8001b94:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8001bae:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001bb2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc4:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8001bc8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001bcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bde:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 8001be2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001be6:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bf0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bf4:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bfe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c06:	ee67 7a27 	vmul.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001c0a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001c14:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8001c18:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c26:	edd7 5a22 	vldr	s11, [r7, #136]	; 0x88
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c30:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c34:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c40:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001c44:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c52:	edd7 5a22 	vldr	s11, [r7, #136]	; 0x88
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c5c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c60:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001c6c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
				   C[1]*(C[2]*kal->P[1] + C[3]*kal->P[3]), kal->R[1] + C[2]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[3]*(C[2]*kal->P[1] + C[3]*kal->P[3]), C[4]*(C[2]*kal->P[0] + C[3]*kal->P[2]) + C[5]*(C[2]*kal->P[1] + C[3]*kal->P[3]),
 8001c70:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001c74:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c82:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c98:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001c9c:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ca6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001caa:	edd7 5a22 	vldr	s11, [r7, #136]	; 0x88
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cb4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cb8:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc0:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001cc4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 8001cc8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001ccc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cda:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ce4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cec:	ee67 7a27 	vmul.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001cf0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 8001cf4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001cf8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d06:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1c:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001d20:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d2e:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d38:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d3c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d44:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001d48:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	               C[1]*(C[4]*kal->P[1] + C[5]*kal->P[3]), C[2]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[3]*(C[4]*kal->P[1] + C[5]*kal->P[3]),             kal->R[2] + C[4]*(C[4]*kal->P[0] + C[5]*kal->P[2]) + C[5]*(C[4]*kal->P[1] + C[5]*kal->P[3]) };
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d52:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001d56:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d60:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d64:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d6e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d72:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d7e:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001d82:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d90:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d9e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da6:	ee77 7a27 	vadd.f32	s15, s14, s15
	float G[9] = { kal->P[3]*C[1]*C[1] + kal->R[0],        C[1]*C[2]*kal->P[2] + C[1]*C[3]*kal->P[3],                                                   C[1]*C[4]*kal->P[2] + C[1]*C[5]*kal->P[3],
 8001daa:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	float Gdetinv = 1.0f / (G[0]*G[4]*G[8] - G[0]*G[5]*G[7] - G[1]*G[3]*G[8] + G[1]*G[5]*G[6] + G[2]*G[3]*G[7] - G[2]*G[4]*G[6]);
 8001dae:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001db2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001db6:	e003      	b.n	8001dc0 <KalmanRollPitch_Update+0x878>
 8001db8:	411cf5c3 	.word	0x411cf5c3
 8001dbc:	c11cf5c3 	.word	0xc11cf5c3
 8001dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dcc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001dd0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dd8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001de4:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001de8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001dec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001df0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001df4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dfc:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001e00:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e08:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e14:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001e18:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001e1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e20:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001e30:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e38:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e4c:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001e50:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001e54:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e5c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8001e60:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e6c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e74:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8001e78:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001e7c:	eeb1 7a67 	vneg.f32	s14, s15
 8001e80:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001e84:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001e88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e8c:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8001e90:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001e94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 8001ea4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001ea8:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb0:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001eb4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				     -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 8001ecc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001ed0:	eeb1 7a67 	vneg.f32	s14, s15
 8001ed4:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001ed8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001edc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ee0:	ed97 6a1b 	vldr	s12, [r7, #108]	; 0x6c
 8001ee4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ee8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001ef4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
				     -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 8001ef8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001efc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f04:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001f08:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f14:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001f18:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001f1c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
				     -Gdetinv * (G[3]*G[8] - G[5]*G[6]),  Gdetinv * (G[0]*G[8] - G[2]*G[6]), -Gdetinv * (G[0]*G[5] - G[2]*G[3]),
 8001f20:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001f24:	eeb1 7a67 	vneg.f32	s14, s15
 8001f28:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001f2c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001f30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f34:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8001f38:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001f3c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f44:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001f48:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	                  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 8001f4c:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001f50:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f58:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8001f5c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f68:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001f70:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	                  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 8001f74:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001f78:	eeb1 7a67 	vneg.f32	s14, s15
 8001f7c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001f80:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f88:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8001f8c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f98:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001f9c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	                  Gdetinv * (G[3]*G[7] - G[4]*G[6]), -Gdetinv * (G[0]*G[7] - G[1]*G[6]),  Gdetinv * (G[0]*G[4] - G[1]*G[3]) };
 8001fa0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001fa4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fac:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001fb0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fbc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8001fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
	float Ginv[9] = { Gdetinv * (G[4]*G[8] - G[5]*G[7]), -Gdetinv * (G[1]*G[8] - G[2]*G[7]),  Gdetinv * (G[1]*G[5] - G[2]*G[4]),
 8001fc4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 8001fc8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001fcc:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fd6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fda:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fe4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ff0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001ff4:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ffe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002002:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	edd3 7a03 	vldr	s15, [r3, #12]
 800200c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002010:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201c:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002020:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	edd3 7a03 	vldr	s15, [r3, #12]
 800202e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002036:	edc7 7a07 	vstr	s15, [r7, #28]
 800203a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800203e:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	edd3 7a02 	vldr	s15, [r3, #8]
 8002048:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800204c:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	edd3 7a03 	vldr	s15, [r3, #12]
 8002056:	ee66 7a27 	vmul.f32	s15, s12, s15
 800205a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800205e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002062:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002066:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002070:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002074:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	edd3 7a03 	vldr	s15, [r3, #12]
 800207e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002082:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800208e:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002092:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002096:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	edd3 7a03 	vldr	s15, [r3, #12]
 80020a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a8:	edc7 7a08 	vstr	s15, [r7, #32]
 80020ac:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80020b0:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80020ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020be:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80020c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80020d8:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	edd3 7a02 	vldr	s15, [r3, #8]
 80020e2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020e6:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80020f0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80020f4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80020f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002100:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002104:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002108:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 800211e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002122:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	edd3 7a04 	vldr	s15, [r3, #16]
 800212c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002130:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	edd3 7a05 	vldr	s15, [r3, #20]
 800213a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800213e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002142:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002146:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800214a:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	edd3 7a04 	vldr	s15, [r3, #16]
 8002154:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002158:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002162:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002166:	ee76 7a27 	vadd.f32	s15, s12, s15
 800216a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002172:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002176:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800217a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	edd3 7a05 	vldr	s15, [r3, #20]
 8002184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002188:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 800218c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
				   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 8002190:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002194:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	edd3 7a04 	vldr	s15, [r3, #16]
 800219e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021a2:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80021ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80021bc:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80021c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021ca:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80021d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80021d8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80021dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021e4:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80021e8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80021ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80021f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021fa:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 80021fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				   Ginv[3]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[6]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[0]*kal->P[3], Ginv[4]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[7]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[1]*kal->P[3], Ginv[5]*(C[2]*kal->P[2] + C[3]*kal->P[3]) + Ginv[8]*(C[4]*kal->P[2] + C[5]*kal->P[3]) + C[1]*Ginv[2]*kal->P[3] };
 8002202:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002206:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002210:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002214:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	edd3 7a05 	vldr	s15, [r3, #20]
 800221e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222a:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800222e:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	edd3 7a04 	vldr	s15, [r3, #16]
 8002238:	ee26 6a27 	vmul.f32	s12, s12, s15
 800223c:	edd7 5a24 	vldr	s11, [r7, #144]	; 0x90
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	edd3 7a05 	vldr	s15, [r3, #20]
 8002246:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800224a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800224e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002252:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002256:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800225a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800225e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	edd3 7a05 	vldr	s15, [r3, #20]
 8002268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226c:	ee77 7a27 	vadd.f32	s15, s14, s15
	float K[6] = { Ginv[3]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[6]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[0]*kal->P[1], Ginv[4]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[7]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[1]*kal->P[1], Ginv[5]*(C[2]*kal->P[0] + C[3]*kal->P[1]) + Ginv[8]*(C[4]*kal->P[0] + C[5]*kal->P[1]) + C[1]*Ginv[2]*kal->P[1],
 8002270:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

	/* Update covariance matrix P++ = (I - K * C) * P+ */
	Ptmp[0] = -kal->P[2]*(C[1]*K[0] + C[3]*K[1] + C[5]*K[2]) - kal->P[0]*(C[2]*K[1] + C[4]*K[2] - 1.0f); Ptmp[1] = -kal->P[3]*(C[1]*K[0] + C[3]*K[1] + C[5]*K[2]) - kal->P[1]*(C[2]*K[1] + C[4]*K[2] - 1.0f);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	edd3 7a04 	vldr	s15, [r3, #16]
 800227a:	eeb1 7a67 	vneg.f32	s14, s15
 800227e:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002282:	edd7 7a07 	vldr	s15, [r7, #28]
 8002286:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800228a:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800228e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002292:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002296:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800229a:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800229e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022a2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80022b4:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 80022b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80022bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022c0:	edd7 5a23 	vldr	s11, [r7, #140]	; 0x8c
 80022c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80022c8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80022cc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80022d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80022d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80022d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e0:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80022ea:	eeb1 7a67 	vneg.f32	s14, s15
 80022ee:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80022f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80022f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022fa:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80022fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8002302:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002306:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800230a:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800230e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002312:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800231a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	edd3 6a03 	vldr	s13, [r3, #12]
 8002324:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8002328:	edd7 7a08 	vldr	s15, [r7, #32]
 800232c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002330:	edd7 5a23 	vldr	s11, [r7, #140]	; 0x8c
 8002334:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002338:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800233c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002340:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002344:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800234c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002350:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	Ptmp[2] = -kal->P[2]*(C[1]*K[3] + C[3]*K[4] + C[5]*K[5] - 1.0f) - kal->P[0]*(C[2]*K[4] + C[4]*K[5]); Ptmp[3] = -kal->P[3]*(C[1]*K[3] + C[3]*K[4] + C[5]*K[5] - 1.0f) - kal->P[1]*(C[2]*K[4] + C[4]*K[5]);
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	edd3 7a04 	vldr	s15, [r3, #16]
 800235a:	eeb1 7a67 	vneg.f32	s14, s15
 800235e:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002362:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002366:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800236a:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 800236e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002372:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002376:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800237a:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 800237e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002382:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800238a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800238e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	edd3 6a02 	vldr	s13, [r3, #8]
 800239c:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 80023a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023a8:	edd7 5a23 	vldr	s11, [r7, #140]	; 0x8c
 80023ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023b0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80023b4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80023b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80023ca:	eeb1 7a67 	vneg.f32	s14, s15
 80023ce:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 80023d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80023da:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80023de:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023ea:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80023ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	edd3 6a03 	vldr	s13, [r3, #12]
 800240c:	ed97 6a21 	vldr	s12, [r7, #132]	; 0x84
 8002410:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002414:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002418:	edd7 5a23 	vldr	s11, [r7, #140]	; 0x8c
 800241c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002420:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002424:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002430:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

	kal->P[0] = kal->P[0] + Ptmp[0]; kal->P[1] = kal->P[1] + Ptmp[1];
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	ed93 7a02 	vldr	s14, [r3, #8]
 800243a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	edc3 7a02 	vstr	s15, [r3, #8]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	ed93 7a03 	vldr	s14, [r3, #12]
 800244e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	edc3 7a03 	vstr	s15, [r3, #12]
	kal->P[2] = kal->P[2] + Ptmp[2]; kal->P[3] = kal->P[3] + Ptmp[3];
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002462:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	edc3 7a04 	vstr	s15, [r3, #16]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	ed93 7a05 	vldr	s14, [r3, #20]
 8002476:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Update state estimate x++ = x+ + K * (y - h) */
	kal->phi   = kal->phi   + K[0] * (ax - h[0]) + K[1] * (ay - h[1]) + K[2] * (az - h[2]);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	ed93 7a00 	vldr	s14, [r3]
 800248a:	edd7 6a07 	vldr	s13, [r7, #28]
 800248e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002492:	ed97 6a38 	vldr	s12, [r7, #224]	; 0xe0
 8002496:	ee76 7a67 	vsub.f32	s15, s12, s15
 800249a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800249e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a2:	edd7 6a08 	vldr	s13, [r7, #32]
 80024a6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80024aa:	ed97 6a37 	vldr	s12, [r7, #220]	; 0xdc
 80024ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ba:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80024be:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80024c2:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 80024c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	edc3 7a00 	vstr	s15, [r3]
	kal->theta = kal->theta + K[3] * (ax - h[0]) + K[4] * (ay - h[1]) + K[5] * (az - h[2]);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	ed93 7a01 	vldr	s14, [r3, #4]
 80024de:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80024e2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80024e6:	ed97 6a38 	vldr	s12, [r7, #224]	; 0xe0
 80024ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 80024ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80024fa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80024fe:	ed97 6a37 	vldr	s12, [r7, #220]	; 0xdc
 8002502:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800250a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002512:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002516:	ed97 6a36 	vldr	s12, [r7, #216]	; 0xd8
 800251a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800251e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800252c:	bf00      	nop
 800252e:	37f4      	adds	r7, #244	; 0xf4
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}

08002534 <MPRLSBarometer_Init>:
#include "MPRLS.h"

uint8_t MPRLSBarometer_Init(MPRLSBarometer *bar, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *rstPinBank, uint16_t rstPin, GPIO_TypeDef *intPinBank, uint16_t intPin) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	807b      	strh	r3, [r7, #2]
	bar->I2Chandle  = I2Chandle;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	601a      	str	r2, [r3, #0]
	bar->rstPinBank = rstPinBank;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	605a      	str	r2, [r3, #4]
	bar->rstPin     = rstPin;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	887a      	ldrh	r2, [r7, #2]
 8002552:	811a      	strh	r2, [r3, #8]
	bar->intPinBank = intPinBank;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a3a      	ldr	r2, [r7, #32]
 8002558:	60da      	str	r2, [r3, #12]
	bar->intPin     = intPin;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800255e:	821a      	strh	r2, [r3, #16]
	bar->pressurePa = 0.0f;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	615a      	str	r2, [r3, #20]

	MPRLSBarometer_Reset(bar);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f80d 	bl	8002588 <MPRLSBarometer_Reset>

	HAL_Delay(10);
 800256e:	200a      	movs	r0, #10
 8002570:	f001 fb14 	bl	8003b9c <HAL_Delay>

	uint8_t status = MPRLSBarometer_ReadStatus(bar);
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f82d 	bl	80025d4 <MPRLSBarometer_ReadStatus>
 800257a:	4603      	mov	r3, r0
 800257c:	75fb      	strb	r3, [r7, #23]

	return status;
 800257e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <MPRLSBarometer_Reset>:

void MPRLSBarometer_Reset(MPRLSBarometer *bar) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_SET);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6858      	ldr	r0, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	891b      	ldrh	r3, [r3, #8]
 8002598:	2201      	movs	r2, #1
 800259a:	4619      	mov	r1, r3
 800259c:	f001 fdd6 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_RESET);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6858      	ldr	r0, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	891b      	ldrh	r3, [r3, #8]
 80025a8:	2200      	movs	r2, #0
 80025aa:	4619      	mov	r1, r3
 80025ac:	f001 fdce 	bl	800414c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80025b0:	200a      	movs	r0, #10
 80025b2:	f001 faf3 	bl	8003b9c <HAL_Delay>
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_SET);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6858      	ldr	r0, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	891b      	ldrh	r3, [r3, #8]
 80025be:	2201      	movs	r2, #1
 80025c0:	4619      	mov	r1, r3
 80025c2:	f001 fdc3 	bl	800414c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80025c6:	2032      	movs	r0, #50	; 0x32
 80025c8:	f001 fae8 	bl	8003b9c <HAL_Delay>
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <MPRLSBarometer_ReadStatus>:

uint8_t MPRLSBarometer_ReadStatus(MPRLSBarometer *bar) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	6078      	str	r0, [r7, #4]
	uint8_t status;
	HAL_I2C_Master_Receive(bar->I2Chandle, MPRLS_I2C_ADDR, &status, 1, MPRLS_I2C_TIMEOUT);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	f107 020f 	add.w	r2, r7, #15
 80025e4:	2364      	movs	r3, #100	; 0x64
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2301      	movs	r3, #1
 80025ea:	2130      	movs	r1, #48	; 0x30
 80025ec:	f002 f808 	bl	8004600 <HAL_I2C_Master_Receive>

	return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <MPRLSBarometer_ReadPressure>:

uint8_t MPRLSBarometer_ReadPressure(MPRLSBarometer *bar) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af02      	add	r7, sp, #8
 8002602:	6078      	str	r0, [r7, #4]
	/* Send read data request */
	uint8_t txBuf[3] = {0xAA, 0x00, 0x00};
 8002604:	23aa      	movs	r3, #170	; 0xaa
 8002606:	733b      	strb	r3, [r7, #12]
 8002608:	2300      	movs	r3, #0
 800260a:	737b      	strb	r3, [r7, #13]
 800260c:	2300      	movs	r3, #0
 800260e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(bar->I2Chandle, MPRLS_I2C_ADDR, txBuf, 3, MPRLS_I2C_TIMEOUT);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	f107 020c 	add.w	r2, r7, #12
 8002618:	2364      	movs	r3, #100	; 0x64
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2303      	movs	r3, #3
 800261e:	2130      	movs	r1, #48	; 0x30
 8002620:	f001 fef0 	bl	8004404 <HAL_I2C_Master_Transmit>

	/* Wait until EOC indicator is set */
	while (!HAL_GPIO_ReadPin(bar->intPinBank, bar->intPin)) {
 8002624:	e002      	b.n	800262c <MPRLSBarometer_ReadPressure+0x30>
		HAL_Delay(5);
 8002626:	2005      	movs	r0, #5
 8002628:	f001 fab8 	bl	8003b9c <HAL_Delay>
	while (!HAL_GPIO_ReadPin(bar->intPinBank, bar->intPin)) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8a1b      	ldrh	r3, [r3, #16]
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f001 fd70 	bl	800411c <HAL_GPIO_ReadPin>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f1      	beq.n	8002626 <MPRLSBarometer_ReadPressure+0x2a>
	}

	/* Request four bytes (1x status, 3x data) */
	uint8_t rxBuf[4];
	HAL_I2C_Master_Receive(bar->I2Chandle, MPRLS_I2C_ADDR, rxBuf, 4, MPRLS_I2C_TIMEOUT);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	f107 0208 	add.w	r2, r7, #8
 800264a:	2364      	movs	r3, #100	; 0x64
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2304      	movs	r3, #4
 8002650:	2130      	movs	r1, #48	; 0x30
 8002652:	f001 ffd5 	bl	8004600 <HAL_I2C_Master_Receive>

	/* Check status byte */
	if ((rxBuf[0] & MPRLS_STATUS_MATHSAT) || (rxBuf[0] & MPRLS_STATUS_FAILED)) {
 8002656:	7a3b      	ldrb	r3, [r7, #8]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <MPRLSBarometer_ReadPressure+0x6e>
 8002660:	7a3b      	ldrb	r3, [r7, #8]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MPRLSBarometer_ReadPressure+0x72>
		return 0;
 800266a:	2300      	movs	r3, #0
 800266c:	e03a      	b.n	80026e4 <MPRLSBarometer_ReadPressure+0xe8>
	}

	/* Compute raw pressure reading */
	uint32_t pressureRaw = rxBuf[1];
 800266e:	7a7b      	ldrb	r3, [r7, #9]
 8002670:	617b      	str	r3, [r7, #20]
			 pressureRaw <<= 8;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	021b      	lsls	r3, r3, #8
 8002676:	617b      	str	r3, [r7, #20]
			 pressureRaw |= rxBuf[2];
 8002678:	7abb      	ldrb	r3, [r7, #10]
 800267a:	461a      	mov	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
			 pressureRaw <<= 8;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	021b      	lsls	r3, r3, #8
 8002686:	617b      	str	r3, [r7, #20]
			 pressureRaw |= rxBuf[3];
 8002688:	7afb      	ldrb	r3, [r7, #11]
 800268a:	461a      	mov	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]

	/* Convert to pressure reading in Pascal */
	float psi  = (pressureRaw - 0x19999A) * (MPRLS_PSI_MAX - MPRLS_PSI_MIN);
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	009a      	lsls	r2, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	f1a3 7320 	sub.w	r3, r3, #41943040	; 0x2800000
 80026a2:	3b0a      	subs	r3, #10
 80026a4:	ee07 3a90 	vmov	s15, r3
 80026a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ac:	edc7 7a04 	vstr	s15, [r7, #16]
		  psi /= (float) (0xE66666 - 0x19999A);
 80026b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80026b4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80026ec <MPRLSBarometer_ReadPressure+0xf0>
 80026b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026bc:	edc7 7a04 	vstr	s15, [r7, #16]
		  psi += MPRLS_PSI_MIN;
 80026c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026c4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80026f0 <MPRLSBarometer_ReadPressure+0xf4>
 80026c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026cc:	edc7 7a04 	vstr	s15, [r7, #16]

	bar->pressurePa = MPRLS_PSI_TO_PA * psi;
 80026d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80026d4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80026f4 <MPRLSBarometer_ReadPressure+0xf8>
 80026d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Success */
	return 1;
 80026e2:	2301      	movs	r3, #1
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	4b4ccccc 	.word	0x4b4ccccc
 80026f0:	00000000 	.word	0x00000000
 80026f4:	45d7760f 	.word	0x45d7760f

080026f8 <TMP100_Init>:
#include "TMP100.h"

void TMP100_Init(TMP100 *tmp, I2C_HandleTypeDef *I2Chandle) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af02      	add	r7, sp, #8
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
	tmp->I2Chandle = I2Chandle;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	601a      	str	r2, [r3, #0]
	tmp->temp_C = 0.0f;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	605a      	str	r2, [r3, #4]

	/* Configure sensor */
	uint8_t txBuf[] = {TMP100_REG_CONF,  0x60};
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <TMP100_Init+0x3c>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(tmp->I2Chandle, TMP100_I2C_ADDR, txBuf, 2, TMP100_I2C_TIMEOUT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	f107 020c 	add.w	r2, r7, #12
 800271e:	2364      	movs	r3, #100	; 0x64
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2302      	movs	r3, #2
 8002724:	219c      	movs	r1, #156	; 0x9c
 8002726:	f001 fe6d 	bl	8004404 <HAL_I2C_Master_Transmit>
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	0800b408 	.word	0x0800b408

08002738 <UAVDataLink_Pack>:
#include "UAVDataLink.h"

uint8_t UAVDataLink_Pack(const uint8_t IDA, const uint8_t IDB, const uint8_t PAYLOADLENGTH, const uint8_t *PAYLOAD, uint8_t *byteStreamOut) {
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4603      	mov	r3, r0
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	460b      	mov	r3, r1
 8002746:	71bb      	strb	r3, [r7, #6]
 8002748:	4613      	mov	r3, r2
 800274a:	717b      	strb	r3, [r7, #5]
 800274c:	466b      	mov	r3, sp
 800274e:	461d      	mov	r5, r3

    static uint8_t SEQUENCE = 1;
    uint8_t n;

    /* Create array to store packet data */
    uint8_t rawDataLength = 4 + PAYLOADLENGTH + 1; /* 4 header bytes, payload bytes, and checksum byte */
 8002750:	797b      	ldrb	r3, [r7, #5]
 8002752:	3305      	adds	r3, #5
 8002754:	757b      	strb	r3, [r7, #21]
    uint8_t rawData[rawDataLength];
 8002756:	7d78      	ldrb	r0, [r7, #21]
 8002758:	4603      	mov	r3, r0
 800275a:	3b01      	subs	r3, #1
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	b2c1      	uxtb	r1, r0
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	f04f 0400 	mov.w	r4, #0
 800276c:	00d4      	lsls	r4, r2, #3
 800276e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002772:	00cb      	lsls	r3, r1, #3
 8002774:	b2c1      	uxtb	r1, r0
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	f04f 0400 	mov.w	r4, #0
 8002782:	00d4      	lsls	r4, r2, #3
 8002784:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002788:	00cb      	lsls	r3, r1, #3
 800278a:	4603      	mov	r3, r0
 800278c:	3307      	adds	r3, #7
 800278e:	08db      	lsrs	r3, r3, #3
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	ebad 0d03 	sub.w	sp, sp, r3
 8002796:	466b      	mov	r3, sp
 8002798:	3300      	adds	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]

    /* Set packet header */
    rawData[0] = SEQUENCE;
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <UAVDataLink_Pack+0x10c>)
 800279e:	781a      	ldrb	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	701a      	strb	r2, [r3, #0]
    rawData[1] = IDA;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	79fa      	ldrb	r2, [r7, #7]
 80027a8:	705a      	strb	r2, [r3, #1]
    rawData[2] = IDB;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	79ba      	ldrb	r2, [r7, #6]
 80027ae:	709a      	strb	r2, [r3, #2]
    rawData[3] = PAYLOADLENGTH;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	797a      	ldrb	r2, [r7, #5]
 80027b4:	70da      	strb	r2, [r3, #3]

    /* Attach payload */
    for (n = 0; n < PAYLOADLENGTH; n++) {
 80027b6:	2300      	movs	r3, #0
 80027b8:	75bb      	strb	r3, [r7, #22]
 80027ba:	e00a      	b.n	80027d2 <UAVDataLink_Pack+0x9a>

        rawData[4 + n] = PAYLOAD[n];
 80027bc:	7dbb      	ldrb	r3, [r7, #22]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	441a      	add	r2, r3
 80027c2:	7dbb      	ldrb	r3, [r7, #22]
 80027c4:	3304      	adds	r3, #4
 80027c6:	7811      	ldrb	r1, [r2, #0]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	54d1      	strb	r1, [r2, r3]
    for (n = 0; n < PAYLOADLENGTH; n++) {
 80027cc:	7dbb      	ldrb	r3, [r7, #22]
 80027ce:	3301      	adds	r3, #1
 80027d0:	75bb      	strb	r3, [r7, #22]
 80027d2:	7dba      	ldrb	r2, [r7, #22]
 80027d4:	797b      	ldrb	r3, [r7, #5]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d3f0      	bcc.n	80027bc <UAVDataLink_Pack+0x84>

    }

    /* Calculate checksum and set as last byte of packet */
    uint8_t cs = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]
    for (n = 0; n < PAYLOADLENGTH; n++) {
 80027de:	2300      	movs	r3, #0
 80027e0:	75bb      	strb	r3, [r7, #22]
 80027e2:	e009      	b.n	80027f8 <UAVDataLink_Pack+0xc0>

        cs ^= PAYLOAD[n];
 80027e4:	7dbb      	ldrb	r3, [r7, #22]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	4053      	eors	r3, r2
 80027f0:	75fb      	strb	r3, [r7, #23]
    for (n = 0; n < PAYLOADLENGTH; n++) {
 80027f2:	7dbb      	ldrb	r3, [r7, #22]
 80027f4:	3301      	adds	r3, #1
 80027f6:	75bb      	strb	r3, [r7, #22]
 80027f8:	7dba      	ldrb	r2, [r7, #22]
 80027fa:	797b      	ldrb	r3, [r7, #5]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d3f1      	bcc.n	80027e4 <UAVDataLink_Pack+0xac>

    }

    rawData[rawDataLength - 1] = cs;
 8002800:	7d7b      	ldrb	r3, [r7, #21]
 8002802:	3b01      	subs	r3, #1
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	7df9      	ldrb	r1, [r7, #23]
 8002808:	54d1      	strb	r1, [r2, r3]

    /* Encode with consistent overhead byte stuffing */
    uint8_t encodedPacketLength = UAVDataLink_EncodeCOBS(rawData, rawDataLength, byteStreamOut);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	7d79      	ldrb	r1, [r7, #21]
 800280e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f819 	bl	8002848 <UAVDataLink_EncodeCOBS>
 8002816:	4603      	mov	r3, r0
 8002818:	72fb      	strb	r3, [r7, #11]

    /* Increment sequence number */
    if (SEQUENCE == 255) {
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <UAVDataLink_Pack+0x10c>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2bff      	cmp	r3, #255	; 0xff
 8002820:	d103      	bne.n	800282a <UAVDataLink_Pack+0xf2>

        SEQUENCE = 1;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <UAVDataLink_Pack+0x10c>)
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	e005      	b.n	8002836 <UAVDataLink_Pack+0xfe>

    } else {

        SEQUENCE++;
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <UAVDataLink_Pack+0x10c>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	3301      	adds	r3, #1
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <UAVDataLink_Pack+0x10c>)
 8002834:	701a      	strb	r2, [r3, #0]

    }

    return encodedPacketLength;
 8002836:	7afb      	ldrb	r3, [r7, #11]
 8002838:	46ad      	mov	sp, r5

}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bdb0      	pop	{r4, r5, r7, pc}
 8002842:	bf00      	nop
 8002844:	20000000 	.word	0x20000000

08002848 <UAVDataLink_EncodeCOBS>:

    return nFloats;

}

uint8_t UAVDataLink_EncodeCOBS(const uint8_t *dataIn, const uint8_t dataInLength, uint8_t *dataOut) {
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	460b      	mov	r3, r1
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	72fb      	strb	r3, [r7, #11]

    uint8_t dataOutLength = 1; /* At least one header byte (set here) and one end byte (0x00) (set at end of function) */
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
    uint8_t dataOutIndex  = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	75bb      	strb	r3, [r7, #22]
    uint8_t nextZeroIndex = 1; /* Initially, assume first byte is a zero */
 800285e:	2301      	movs	r3, #1
 8002860:	757b      	strb	r3, [r7, #21]

    for (uint8_t dataInIndex = 0; dataInIndex < dataInLength; dataInIndex++) {
 8002862:	2300      	movs	r3, #0
 8002864:	753b      	strb	r3, [r7, #20]
 8002866:	e020      	b.n	80028aa <UAVDataLink_EncodeCOBS+0x62>

        if (dataIn[dataInIndex] == 0) {
 8002868:	7d3b      	ldrb	r3, [r7, #20]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <UAVDataLink_EncodeCOBS+0x40>

            dataOut[dataOutIndex] = nextZeroIndex;
 8002874:	7dbb      	ldrb	r3, [r7, #22]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	7d7a      	ldrb	r2, [r7, #21]
 800287c:	701a      	strb	r2, [r3, #0]

            nextZeroIndex = 1;
 800287e:	2301      	movs	r3, #1
 8002880:	757b      	strb	r3, [r7, #21]
            dataOutIndex  = dataOutLength;
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	75bb      	strb	r3, [r7, #22]
 8002886:	e00a      	b.n	800289e <UAVDataLink_EncodeCOBS+0x56>

        } else {

            dataOut[dataOutLength] = dataIn[dataInIndex];
 8002888:	7d3b      	ldrb	r3, [r7, #20]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	441a      	add	r2, r3
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	440b      	add	r3, r1
 8002894:	7812      	ldrb	r2, [r2, #0]
 8002896:	701a      	strb	r2, [r3, #0]

            nextZeroIndex++;
 8002898:	7d7b      	ldrb	r3, [r7, #21]
 800289a:	3301      	adds	r3, #1
 800289c:	757b      	strb	r3, [r7, #21]

        }

        dataOutLength++;
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	3301      	adds	r3, #1
 80028a2:	75fb      	strb	r3, [r7, #23]
    for (uint8_t dataInIndex = 0; dataInIndex < dataInLength; dataInIndex++) {
 80028a4:	7d3b      	ldrb	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	753b      	strb	r3, [r7, #20]
 80028aa:	7d3a      	ldrb	r2, [r7, #20]
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d3da      	bcc.n	8002868 <UAVDataLink_EncodeCOBS+0x20>

    }

    dataOut[dataOutIndex] = nextZeroIndex;
 80028b2:	7dbb      	ldrb	r3, [r7, #22]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	7d7a      	ldrb	r2, [r7, #21]
 80028ba:	701a      	strb	r2, [r3, #0]

    /* Append final, delimiting zero to mark end of packet */
    dataOut[dataOutLength] = 0;
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
    dataOutLength++;
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	3301      	adds	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]

    return dataOutLength;
 80028cc:	7dfb      	ldrb	r3, [r7, #23]

}
 80028ce:	4618      	mov	r0, r3
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <UBloxGPS_Init>:
#include "UBLOX.h"

void UBloxGPS_Init(UBloxGPS *gps, UART_HandleTypeDef *uart, GPIO_TypeDef *rstPinBank, uint16_t rstPin, GPIO_TypeDef *ppsPinBank, uint16_t ppsPin, GPIO_TypeDef *lnaEnablePinBank, uint16_t lnaEnablePin) {
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	807b      	strh	r3, [r7, #2]
	gps->uart             = uart;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	601a      	str	r2, [r3, #0]
	gps->rstPinBank       = rstPinBank;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	605a      	str	r2, [r3, #4]
	gps->rstPin           = rstPin;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	811a      	strh	r2, [r3, #8]
	gps->ppsPinBank       = ppsPinBank;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	60da      	str	r2, [r3, #12]
	gps->ppsPin           = ppsPin;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8bba      	ldrh	r2, [r7, #28]
 8002904:	821a      	strh	r2, [r3, #16]
	gps->lnaEnablePinBank = lnaEnablePinBank;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a3a      	ldr	r2, [r7, #32]
 800290a:	615a      	str	r2, [r3, #20]
	gps->lnaEnablePin     = lnaEnablePin;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002910:	831a      	strh	r2, [r3, #24]

	gps->latitude    = 0.0f;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
	gps->longitude   = 0.0f;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	621a      	str	r2, [r3, #32]
	gps->altitude    = 0.0f;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
	gps->course      = 0.0f;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
	gps->groundSpeed = 0.0f;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	62da      	str	r2, [r3, #44]	; 0x2c

	gps->uartBufIndex  = 0;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	gps->uartBufLength = 0;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <UBloxGPS_Reset>:

void UBloxGPS_Reset(UBloxGPS *gps) {
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_SET);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6858      	ldr	r0, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	891b      	ldrh	r3, [r3, #8]
 8002966:	2201      	movs	r2, #1
 8002968:	4619      	mov	r1, r3
 800296a:	f001 fbef 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_RESET);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6858      	ldr	r0, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	891b      	ldrh	r3, [r3, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	4619      	mov	r1, r3
 800297a:	f001 fbe7 	bl	800414c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800297e:	2032      	movs	r0, #50	; 0x32
 8002980:	f001 f90c 	bl	8003b9c <HAL_Delay>
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_SET);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6858      	ldr	r0, [r3, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	891b      	ldrh	r3, [r3, #8]
 800298c:	2201      	movs	r2, #1
 800298e:	4619      	mov	r1, r3
 8002990:	f001 fbdc 	bl	800414c <HAL_GPIO_WritePin>
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80029ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4a06      	ldr	r2, [pc, #24]	; (80029cc <vApplicationGetIdleTaskMemory+0x30>)
 80029b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000690 	.word	0x20000690
 80029cc:	200006e4 	.word	0x200006e4

080029d0 <FIRFilter_Init>:
	float *buf;
	uint8_t order;
	uint8_t putIndex;
} FIRFilter ;

void FIRFilter_Init(FIRFilter *filt, float *coeff, float *buf, const uint8_t order) {
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	70fb      	strb	r3, [r7, #3]
	filt->out = 0.0f;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
	
	filt->coeff = coeff;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	605a      	str	r2, [r3, #4]
	filt->buf   = buf;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]
	filt->order = order;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	731a      	strb	r2, [r3, #12]
	filt->putIndex = 0;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	735a      	strb	r2, [r3, #13]

	for (uint8_t n = 0; n < order; n++) {
 80029fe:	2300      	movs	r3, #0
 8002a00:	75fb      	strb	r3, [r7, #23]
 8002a02:	e00a      	b.n	8002a1a <FIRFilter_Init+0x4a>
		filt->buf[n] = 0.0f;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n < order; n++) {
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	3301      	adds	r3, #1
 8002a18:	75fb      	strb	r3, [r7, #23]
 8002a1a:	7dfa      	ldrb	r2, [r7, #23]
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d3f0      	bcc.n	8002a04 <FIRFilter_Init+0x34>
	}
}
 8002a22:	bf00      	nop
 8002a24:	371c      	adds	r7, #28
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *filt, float in) {
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	ed87 0a00 	vstr	s0, [r7]
    /* Store newest input value in circular buffer */
    filt->buf[filt->putIndex] = in;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7b5b      	ldrb	r3, [r3, #13]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	601a      	str	r2, [r3, #0]
    
    /* Compute filter output */
    uint8_t getIndex = filt->putIndex;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	7b5b      	ldrb	r3, [r3, #13]
 8002a4e:	73fb      	strb	r3, [r7, #15]
    
    filt->out = 0.0f;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
    for (uint8_t n = 0; n < filt->order; n++) {
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73bb      	strb	r3, [r7, #14]
 8002a5c:	e025      	b.n	8002aaa <FIRFilter_Update+0x7c>
        filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	ed93 7a00 	vldr	s14, [r3]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	7bbb      	ldrb	r3, [r7, #14]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	edd3 6a00 	vldr	s13, [r3]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	edc3 7a00 	vstr	s15, [r3]
        
        if (getIndex == 0) {
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d104      	bne.n	8002a9e <FIRFilter_Update+0x70>
            getIndex = filt->order - 1;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7b1b      	ldrb	r3, [r3, #12]
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e002      	b.n	8002aa4 <FIRFilter_Update+0x76>
        } else {
           getIndex--; 
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t n = 0; n < filt->order; n++) {
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	73bb      	strb	r3, [r7, #14]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7b1b      	ldrb	r3, [r3, #12]
 8002aae:	7bba      	ldrb	r2, [r7, #14]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d3d4      	bcc.n	8002a5e <FIRFilter_Update+0x30>
        }
    }
    
    /* Increment buffer index */
    filt->putIndex++;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7b5b      	ldrb	r3, [r3, #13]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	735a      	strb	r2, [r3, #13]
    if (filt->putIndex == filt->order) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	7b5a      	ldrb	r2, [r3, #13]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7b1b      	ldrb	r3, [r3, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d102      	bne.n	8002ad2 <FIRFilter_Update+0xa4>
        filt->putIndex = 0;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	735a      	strb	r2, [r3, #13]
    }
    
    /* Return output */
    return filt->out;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	ee07 3a90 	vmov	s15, r3
}
 8002ada:	eeb0 0a67 	vmov.f32	s0, s15
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <main>:
FIRFilter firAcc[3];
FIRFilter firMag[3];
FIRFilter firBar;

int main(void)
{
 8002ae8:	b5b0      	push	{r4, r5, r7, lr}
 8002aea:	b0b0      	sub	sp, #192	; 0xc0
 8002aec:	af00      	add	r7, sp, #0
  HAL_Init();
 8002aee:	f001 f813 	bl	8003b18 <HAL_Init>

  SystemClock_Config();
 8002af2:	f000 fb01 	bl	80030f8 <SystemClock_Config>

  MX_GPIO_Init();
 8002af6:	f000 fc71 	bl	80033dc <MX_GPIO_Init>

  HAL_Delay(500);
 8002afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002afe:	f001 f84d 	bl	8003b9c <HAL_Delay>

  MX_I2C1_Init();
 8002b02:	f000 fb63 	bl	80031cc <MX_I2C1_Init>
  MX_I2C2_Init();
 8002b06:	f000 fb8f 	bl	8003228 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002b0a:	f000 fbbb 	bl	8003284 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8002b0e:	f000 fbe7 	bl	80032e0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b12:	f000 fc0f 	bl	8003334 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002b16:	f000 fc37 	bl	8003388 <MX_USART3_UART_Init>

  initPeripherals();
 8002b1a:	f000 fa7b 	bl	8003014 <initPeripherals>

  FIRFilter_Init(&firGyr[0], firCoeffGyr, firGyrXBuf, FIRGYRN);
 8002b1e:	2349      	movs	r3, #73	; 0x49
 8002b20:	4a62      	ldr	r2, [pc, #392]	; (8002cac <main+0x1c4>)
 8002b22:	4963      	ldr	r1, [pc, #396]	; (8002cb0 <main+0x1c8>)
 8002b24:	4863      	ldr	r0, [pc, #396]	; (8002cb4 <main+0x1cc>)
 8002b26:	f7ff ff53 	bl	80029d0 <FIRFilter_Init>
  FIRFilter_Init(&firGyr[1], firCoeffGyr, firGyrYBuf, FIRGYRN);
 8002b2a:	2349      	movs	r3, #73	; 0x49
 8002b2c:	4a62      	ldr	r2, [pc, #392]	; (8002cb8 <main+0x1d0>)
 8002b2e:	4960      	ldr	r1, [pc, #384]	; (8002cb0 <main+0x1c8>)
 8002b30:	4862      	ldr	r0, [pc, #392]	; (8002cbc <main+0x1d4>)
 8002b32:	f7ff ff4d 	bl	80029d0 <FIRFilter_Init>
  FIRFilter_Init(&firGyr[2], firCoeffGyr, firGyrZBuf, FIRGYRN);
 8002b36:	2349      	movs	r3, #73	; 0x49
 8002b38:	4a61      	ldr	r2, [pc, #388]	; (8002cc0 <main+0x1d8>)
 8002b3a:	495d      	ldr	r1, [pc, #372]	; (8002cb0 <main+0x1c8>)
 8002b3c:	4861      	ldr	r0, [pc, #388]	; (8002cc4 <main+0x1dc>)
 8002b3e:	f7ff ff47 	bl	80029d0 <FIRFilter_Init>

  FIRFilter_Init(&firAcc[0], firCoeffAcc, firAccXBuf, FIRACCN);
 8002b42:	2349      	movs	r3, #73	; 0x49
 8002b44:	4a60      	ldr	r2, [pc, #384]	; (8002cc8 <main+0x1e0>)
 8002b46:	4961      	ldr	r1, [pc, #388]	; (8002ccc <main+0x1e4>)
 8002b48:	4861      	ldr	r0, [pc, #388]	; (8002cd0 <main+0x1e8>)
 8002b4a:	f7ff ff41 	bl	80029d0 <FIRFilter_Init>
  FIRFilter_Init(&firAcc[1], firCoeffAcc, firAccYBuf, FIRACCN);
 8002b4e:	2349      	movs	r3, #73	; 0x49
 8002b50:	4a60      	ldr	r2, [pc, #384]	; (8002cd4 <main+0x1ec>)
 8002b52:	495e      	ldr	r1, [pc, #376]	; (8002ccc <main+0x1e4>)
 8002b54:	4860      	ldr	r0, [pc, #384]	; (8002cd8 <main+0x1f0>)
 8002b56:	f7ff ff3b 	bl	80029d0 <FIRFilter_Init>
  FIRFilter_Init(&firAcc[2], firCoeffAcc, firAccZBuf, FIRACCN);
 8002b5a:	2349      	movs	r3, #73	; 0x49
 8002b5c:	4a5f      	ldr	r2, [pc, #380]	; (8002cdc <main+0x1f4>)
 8002b5e:	495b      	ldr	r1, [pc, #364]	; (8002ccc <main+0x1e4>)
 8002b60:	485f      	ldr	r0, [pc, #380]	; (8002ce0 <main+0x1f8>)
 8002b62:	f7ff ff35 	bl	80029d0 <FIRFilter_Init>

  FIRFilter_Init(&firMag[0], firCoeffMag, firMagXBuf, FIRMAGN);
 8002b66:	2339      	movs	r3, #57	; 0x39
 8002b68:	4a5e      	ldr	r2, [pc, #376]	; (8002ce4 <main+0x1fc>)
 8002b6a:	495f      	ldr	r1, [pc, #380]	; (8002ce8 <main+0x200>)
 8002b6c:	485f      	ldr	r0, [pc, #380]	; (8002cec <main+0x204>)
 8002b6e:	f7ff ff2f 	bl	80029d0 <FIRFilter_Init>
  FIRFilter_Init(&firMag[1], firCoeffMag, firMagYBuf, FIRMAGN);
 8002b72:	2339      	movs	r3, #57	; 0x39
 8002b74:	4a5e      	ldr	r2, [pc, #376]	; (8002cf0 <main+0x208>)
 8002b76:	495c      	ldr	r1, [pc, #368]	; (8002ce8 <main+0x200>)
 8002b78:	485e      	ldr	r0, [pc, #376]	; (8002cf4 <main+0x20c>)
 8002b7a:	f7ff ff29 	bl	80029d0 <FIRFilter_Init>
  FIRFilter_Init(&firMag[2], firCoeffMag, firMagZBuf, FIRMAGN);
 8002b7e:	2339      	movs	r3, #57	; 0x39
 8002b80:	4a5d      	ldr	r2, [pc, #372]	; (8002cf8 <main+0x210>)
 8002b82:	4959      	ldr	r1, [pc, #356]	; (8002ce8 <main+0x200>)
 8002b84:	485d      	ldr	r0, [pc, #372]	; (8002cfc <main+0x214>)
 8002b86:	f7ff ff23 	bl	80029d0 <FIRFilter_Init>

  FIRFilter_Init(&firBar, firCoeffBar, firBarBuf, FIRBARN);
 8002b8a:	2359      	movs	r3, #89	; 0x59
 8002b8c:	4a5c      	ldr	r2, [pc, #368]	; (8002d00 <main+0x218>)
 8002b8e:	495d      	ldr	r1, [pc, #372]	; (8002d04 <main+0x21c>)
 8002b90:	485d      	ldr	r0, [pc, #372]	; (8002d08 <main+0x220>)
 8002b92:	f7ff ff1d 	bl	80029d0 <FIRFilter_Init>

  float kalQ[] = {3.0f * 0.000011941f, 2.0f * 0.000011941f};
 8002b96:	4a5d      	ldr	r2, [pc, #372]	; (8002d0c <main+0x224>)
 8002b98:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ba0:	e883 0003 	stmia.w	r3, {r0, r1}
  float kalR[] = {0.00024636441f, 0.00024636441f, 0.00034741232f};
 8002ba4:	4a5a      	ldr	r2, [pc, #360]	; (8002d10 <main+0x228>)
 8002ba6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002baa:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  KalmanRollPitch_Init(&kal, 10.0f, kalQ, kalR);
 8002bb0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002bb4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002bb8:	4619      	mov	r1, r3
 8002bba:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002bbe:	4855      	ldr	r0, [pc, #340]	; (8002d14 <main+0x22c>)
 8002bc0:	f7fe fc89 	bl	80014d6 <KalmanRollPitch_Init>

  /* Heartbeat LED task */
  osThreadDef(heartbeatLEDTask, heartbeatTask, osPriorityLow, 0, 128);
 8002bc4:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <main+0x230>)
 8002bc6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002bca:	461d      	mov	r5, r3
 8002bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatHandle = osThreadCreate(osThread(heartbeatLEDTask), NULL);
 8002bd8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f004 f943 	bl	8006e6a <osThreadCreate>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <main+0x234>)
 8002be8:	601a      	str	r2, [r3, #0]

  /* Sensor tasks */
  osThreadDef(barometerReadTask, barometerReadTask, osPriorityAboveNormal, 0, 128);
 8002bea:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <main+0x238>)
 8002bec:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002bf0:	461d      	mov	r5, r3
 8002bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002bfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  barometerReadHandle = osThreadCreate(osThread(barometerReadTask), NULL);
 8002bfe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f004 f930 	bl	8006e6a <osThreadCreate>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b45      	ldr	r3, [pc, #276]	; (8002d24 <main+0x23c>)
 8002c0e:	601a      	str	r2, [r3, #0]

  osThreadDef(imuGyroReadTask, imuGyroReadTask, osPriorityRealtime, 0, 128);
 8002c10:	4b45      	ldr	r3, [pc, #276]	; (8002d28 <main+0x240>)
 8002c12:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002c16:	461d      	mov	r5, r3
 8002c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuGyroReadHandle = osThreadCreate(osThread(imuGyroReadTask), NULL);
 8002c24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 f91d 	bl	8006e6a <osThreadCreate>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <main+0x244>)
 8002c34:	601a      	str	r2, [r3, #0]

  osThreadDef(imuAccReadTask, imuAccReadTask, osPriorityRealtime, 0, 256);
 8002c36:	4b3e      	ldr	r3, [pc, #248]	; (8002d30 <main+0x248>)
 8002c38:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002c3c:	461d      	mov	r5, r3
 8002c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuAccReadHandle = osThreadCreate(osThread(imuAccReadTask), NULL);
 8002c4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 f90a 	bl	8006e6a <osThreadCreate>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <main+0x24c>)
 8002c5a:	601a      	str	r2, [r3, #0]

  osThreadDef(magReadTask, magReadTask, osPriorityRealtime, 0, 128);
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <main+0x250>)
 8002c5e:	f107 0420 	add.w	r4, r7, #32
 8002c62:	461d      	mov	r5, r3
 8002c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  magReadHandle = osThreadCreate(osThread(magReadTask), NULL);
 8002c70:	f107 0320 	add.w	r3, r7, #32
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f004 f8f7 	bl	8006e6a <osThreadCreate>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b2f      	ldr	r3, [pc, #188]	; (8002d3c <main+0x254>)
 8002c80:	601a      	str	r2, [r3, #0]

  /* Serial debug output task */
  osThreadDef(debugSerialTask, debugSerialTask, osPriorityLow, 0, 256);
 8002c82:	4b2f      	ldr	r3, [pc, #188]	; (8002d40 <main+0x258>)
 8002c84:	1d3c      	adds	r4, r7, #4
 8002c86:	461d      	mov	r5, r3
 8002c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  debugSerialHandle = osThreadCreate(osThread(debugSerialTask), NULL);
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f004 f8e6 	bl	8006e6a <osThreadCreate>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <main+0x25c>)
 8002ca2:	601a      	str	r2, [r3, #0]

  osKernelStart();
 8002ca4:	f004 f8da 	bl	8006e5c <osKernelStart>
  
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <main+0x1c0>
 8002caa:	bf00      	nop
 8002cac:	20005450 	.word	0x20005450
 8002cb0:	20000004 	.word	0x20000004
 8002cb4:	20005110 	.word	0x20005110
 8002cb8:	20005310 	.word	0x20005310
 8002cbc:	20005120 	.word	0x20005120
 8002cc0:	20004bc8 	.word	0x20004bc8
 8002cc4:	20005130 	.word	0x20005130
 8002cc8:	20004750 	.word	0x20004750
 8002ccc:	20000128 	.word	0x20000128
 8002cd0:	200050e0 	.word	0x200050e0
 8002cd4:	200048a8 	.word	0x200048a8
 8002cd8:	200050f0 	.word	0x200050f0
 8002cdc:	20004cec 	.word	0x20004cec
 8002ce0:	20005100 	.word	0x20005100
 8002ce4:	20004ffc 	.word	0x20004ffc
 8002ce8:	2000024c 	.word	0x2000024c
 8002cec:	20004b44 	.word	0x20004b44
 8002cf0:	20004a60 	.word	0x20004a60
 8002cf4:	20004b54 	.word	0x20004b54
 8002cf8:	20005154 	.word	0x20005154
 8002cfc:	20004b64 	.word	0x20004b64
 8002d00:	20004e10 	.word	0x20004e10
 8002d04:	20000330 	.word	0x20000330
 8002d08:	20005144 	.word	0x20005144
 8002d0c:	0800b410 	.word	0x0800b410
 8002d10:	0800b418 	.word	0x0800b418
 8002d14:	20005278 	.word	0x20005278
 8002d18:	0800b438 	.word	0x0800b438
 8002d1c:	20005140 	.word	0x20005140
 8002d20:	0800b468 	.word	0x0800b468
 8002d24:	20004874 	.word	0x20004874
 8002d28:	0800b494 	.word	0x0800b494
 8002d2c:	20004ff8 	.word	0x20004ff8
 8002d30:	0800b4c0 	.word	0x0800b4c0
 8002d34:	2000474c 	.word	0x2000474c
 8002d38:	0800b4e8 	.word	0x0800b4e8
 8002d3c:	20004ff4 	.word	0x20004ff4
 8002d40:	0800b514 	.word	0x0800b514
 8002d44:	200048a4 	.word	0x200048a4

08002d48 <heartbeatTask>:
  }

}

void heartbeatTask(void const * argument)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 8002d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d54:	4804      	ldr	r0, [pc, #16]	; (8002d68 <heartbeatTask+0x20>)
 8002d56:	f001 fa12 	bl	800417e <HAL_GPIO_TogglePin>
    osDelay(SAMPLE_TIME_LED_MS);
 8002d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 f8cf 	bl	8006f02 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 8002d64:	e7f4      	b.n	8002d50 <heartbeatTask+0x8>
 8002d66:	bf00      	nop
 8002d68:	40020400 	.word	0x40020400

08002d6c <imuGyroReadTask>:
  }

}

void imuGyroReadTask (void const *argument) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

	for (;;) {
		BMI088_ReadGyr(&imu);
 8002d74:	480f      	ldr	r0, [pc, #60]	; (8002db4 <imuGyroReadTask+0x48>)
 8002d76:	f7fe fa0b 	bl	8001190 <BMI088_ReadGyr>

		/* Filter measurements */
		FIRFilter_Update(&firGyr[0], imu.gyr[0]);
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	; (8002db4 <imuGyroReadTask+0x48>)
 8002d7c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d80:	eeb0 0a67 	vmov.f32	s0, s15
 8002d84:	480c      	ldr	r0, [pc, #48]	; (8002db8 <imuGyroReadTask+0x4c>)
 8002d86:	f7ff fe52 	bl	8002a2e <FIRFilter_Update>
		FIRFilter_Update(&firGyr[1], imu.gyr[1]);
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <imuGyroReadTask+0x48>)
 8002d8c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d90:	eeb0 0a67 	vmov.f32	s0, s15
 8002d94:	4809      	ldr	r0, [pc, #36]	; (8002dbc <imuGyroReadTask+0x50>)
 8002d96:	f7ff fe4a 	bl	8002a2e <FIRFilter_Update>
		FIRFilter_Update(&firGyr[2], imu.gyr[2]);
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <imuGyroReadTask+0x48>)
 8002d9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002da0:	eeb0 0a67 	vmov.f32	s0, s15
 8002da4:	4806      	ldr	r0, [pc, #24]	; (8002dc0 <imuGyroReadTask+0x54>)
 8002da6:	f7ff fe42 	bl	8002a2e <FIRFilter_Update>

		osDelay(SAMPLE_TIME_GYR_MS);
 8002daa:	2305      	movs	r3, #5
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 f8a8 	bl	8006f02 <osDelay>
		BMI088_ReadGyr(&imu);
 8002db2:	e7df      	b.n	8002d74 <imuGyroReadTask+0x8>
 8002db4:	20004878 	.word	0x20004878
 8002db8:	20005110 	.word	0x20005110
 8002dbc:	20005120 	.word	0x20005120
 8002dc0:	20005130 	.word	0x20005130

08002dc4 <imuAccReadTask>:
	}

}

void imuAccReadTask (void const *argument) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

	for (;;) {
		BMI088_ReadAcc(&imu);
 8002dcc:	481e      	ldr	r0, [pc, #120]	; (8002e48 <imuAccReadTask+0x84>)
 8002dce:	f7fe f97b 	bl	80010c8 <BMI088_ReadAcc>

		/* Filter measurements */
		FIRFilter_Update(&firAcc[0], imu.acc[0]);
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <imuAccReadTask+0x84>)
 8002dd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ddc:	481b      	ldr	r0, [pc, #108]	; (8002e4c <imuAccReadTask+0x88>)
 8002dde:	f7ff fe26 	bl	8002a2e <FIRFilter_Update>
		FIRFilter_Update(&firAcc[1], imu.acc[1]);
 8002de2:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <imuAccReadTask+0x84>)
 8002de4:	edd3 7a06 	vldr	s15, [r3, #24]
 8002de8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dec:	4818      	ldr	r0, [pc, #96]	; (8002e50 <imuAccReadTask+0x8c>)
 8002dee:	f7ff fe1e 	bl	8002a2e <FIRFilter_Update>
		FIRFilter_Update(&firAcc[2], imu.acc[2]);
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <imuAccReadTask+0x84>)
 8002df4:	edd3 7a07 	vldr	s15, [r3, #28]
 8002df8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dfc:	4815      	ldr	r0, [pc, #84]	; (8002e54 <imuAccReadTask+0x90>)
 8002dfe:	f7ff fe16 	bl	8002a2e <FIRFilter_Update>

		/* Update kalman filter */
		float gyrFilt[] = {firGyr[0].out, firGyr[1].out, firGyr[2].out};
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <imuAccReadTask+0x94>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <imuAccReadTask+0x94>)
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	4b12      	ldr	r3, [pc, #72]	; (8002e58 <imuAccReadTask+0x94>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	61fb      	str	r3, [r7, #28]
		float accFilt[] = {firAcc[0].out, firAcc[1].out, firAcc[2].out};
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <imuAccReadTask+0x88>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <imuAccReadTask+0x88>)
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <imuAccReadTask+0x88>)
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	613b      	str	r3, [r7, #16]
		KalmanRollPitch_Update(&kal, gyrFilt, accFilt, 0.0f, 0.01f);
 8002e26:	f107 0208 	add.w	r2, r7, #8
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002e5c <imuAccReadTask+0x98>
 8002e32:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002e60 <imuAccReadTask+0x9c>
 8002e36:	4619      	mov	r1, r3
 8002e38:	480a      	ldr	r0, [pc, #40]	; (8002e64 <imuAccReadTask+0xa0>)
 8002e3a:	f7fe fb85 	bl	8001548 <KalmanRollPitch_Update>

		osDelay(SAMPLE_TIME_ACC_MS);
 8002e3e:	230a      	movs	r3, #10
 8002e40:	4618      	mov	r0, r3
 8002e42:	f004 f85e 	bl	8006f02 <osDelay>
	for (;;) {
 8002e46:	e7c1      	b.n	8002dcc <imuAccReadTask+0x8>
 8002e48:	20004878 	.word	0x20004878
 8002e4c:	200050e0 	.word	0x200050e0
 8002e50:	200050f0 	.word	0x200050f0
 8002e54:	20005100 	.word	0x20005100
 8002e58:	20005110 	.word	0x20005110
 8002e5c:	3c23d70a 	.word	0x3c23d70a
 8002e60:	00000000 	.word	0x00000000
 8002e64:	20005278 	.word	0x20005278

08002e68 <magReadTask>:
	}

}

void magReadTask (void const *argument) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

	for (;;) {
		IISMagnetometer_Read(&mag);
 8002e70:	480f      	ldr	r0, [pc, #60]	; (8002eb0 <magReadTask+0x48>)
 8002e72:	f7fe fa59 	bl	8001328 <IISMagnetometer_Read>

		/* Filter measurements */
		FIRFilter_Update(&firMag[0], mag.xyz[0]);
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <magReadTask+0x48>)
 8002e78:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <magReadTask+0x4c>)
 8002e82:	f7ff fdd4 	bl	8002a2e <FIRFilter_Update>
		FIRFilter_Update(&firMag[1], mag.xyz[1]);
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <magReadTask+0x48>)
 8002e88:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e90:	4809      	ldr	r0, [pc, #36]	; (8002eb8 <magReadTask+0x50>)
 8002e92:	f7ff fdcc 	bl	8002a2e <FIRFilter_Update>
		FIRFilter_Update(&firMag[2], mag.xyz[2]);
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <magReadTask+0x48>)
 8002e98:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea0:	4806      	ldr	r0, [pc, #24]	; (8002ebc <magReadTask+0x54>)
 8002ea2:	f7ff fdc4 	bl	8002a2e <FIRFilter_Update>

		osDelay(SAMPLE_TIME_MAG_MS);
 8002ea6:	230a      	movs	r3, #10
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f004 f82a 	bl	8006f02 <osDelay>
		IISMagnetometer_Read(&mag);
 8002eae:	e7df      	b.n	8002e70 <magReadTask+0x8>
 8002eb0:	20005434 	.word	0x20005434
 8002eb4:	20004b44 	.word	0x20004b44
 8002eb8:	20004b54 	.word	0x20004b54
 8002ebc:	20004b64 	.word	0x20004b64

08002ec0 <barometerReadTask>:
	}

}

void barometerReadTask (void const *argument) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

	for (;;) {
		MPRLSBarometer_ReadPressure(&bar);
 8002ec8:	4807      	ldr	r0, [pc, #28]	; (8002ee8 <barometerReadTask+0x28>)
 8002eca:	f7ff fb97 	bl	80025fc <MPRLSBarometer_ReadPressure>

		/* Filter measurement */
		FIRFilter_Update(&firBar, bar.pressurePa);
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <barometerReadTask+0x28>)
 8002ed0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed8:	4804      	ldr	r0, [pc, #16]	; (8002eec <barometerReadTask+0x2c>)
 8002eda:	f7ff fda8 	bl	8002a2e <FIRFilter_Update>

		osDelay(SAMPLE_TIME_BAR_MS);
 8002ede:	230a      	movs	r3, #10
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 f80e 	bl	8006f02 <osDelay>
		MPRLSBarometer_ReadPressure(&bar);
 8002ee6:	e7ef      	b.n	8002ec8 <barometerReadTask+0x8>
 8002ee8:	200052f4 	.word	0x200052f4
 8002eec:	20005144 	.word	0x20005144

08002ef0 <debugSerialTask>:
	}

}

void debugSerialTask (void const *argument) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b0a6      	sub	sp, #152	; 0x98
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	6078      	str	r0, [r7, #4]

	for (;;) {

	    NavDataContainer[0] = firAcc[0].out;
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <debugSerialTask+0x100>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a3d      	ldr	r2, [pc, #244]	; (8002ff4 <debugSerialTask+0x104>)
 8002efe:	6013      	str	r3, [r2, #0]
		NavDataContainer[1] = firAcc[1].out;
 8002f00:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <debugSerialTask+0x100>)
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <debugSerialTask+0x104>)
 8002f06:	6053      	str	r3, [r2, #4]
		NavDataContainer[2] = firAcc[2].out;
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <debugSerialTask+0x100>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a39      	ldr	r2, [pc, #228]	; (8002ff4 <debugSerialTask+0x104>)
 8002f0e:	6093      	str	r3, [r2, #8]
		NavDataContainer[3] = firGyr[0].out;
 8002f10:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <debugSerialTask+0x108>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a37      	ldr	r2, [pc, #220]	; (8002ff4 <debugSerialTask+0x104>)
 8002f16:	60d3      	str	r3, [r2, #12]
		NavDataContainer[4] = firGyr[1].out;
 8002f18:	4b37      	ldr	r3, [pc, #220]	; (8002ff8 <debugSerialTask+0x108>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	4a35      	ldr	r2, [pc, #212]	; (8002ff4 <debugSerialTask+0x104>)
 8002f1e:	6113      	str	r3, [r2, #16]
		NavDataContainer[5] = firGyr[2].out;
 8002f20:	4b35      	ldr	r3, [pc, #212]	; (8002ff8 <debugSerialTask+0x108>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	4a33      	ldr	r2, [pc, #204]	; (8002ff4 <debugSerialTask+0x104>)
 8002f26:	6153      	str	r3, [r2, #20]

		NavDataContainer[6] = mag.xyz[0]; //firMag[0].out;
 8002f28:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <debugSerialTask+0x10c>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a31      	ldr	r2, [pc, #196]	; (8002ff4 <debugSerialTask+0x104>)
 8002f2e:	6193      	str	r3, [r2, #24]
		NavDataContainer[7] = mag.xyz[1]; //firMag[1].out;
 8002f30:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <debugSerialTask+0x10c>)
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	4a2f      	ldr	r2, [pc, #188]	; (8002ff4 <debugSerialTask+0x104>)
 8002f36:	61d3      	str	r3, [r2, #28]
		NavDataContainer[8] = mag.xyz[2]; //firMag[2].out;
 8002f38:	4b30      	ldr	r3, [pc, #192]	; (8002ffc <debugSerialTask+0x10c>)
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	4a2d      	ldr	r2, [pc, #180]	; (8002ff4 <debugSerialTask+0x104>)
 8002f3e:	6213      	str	r3, [r2, #32]

		NavDataContainer[9]  = bar.pressurePa; //firBar.out;
 8002f40:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <debugSerialTask+0x110>)
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	4a2b      	ldr	r2, [pc, #172]	; (8002ff4 <debugSerialTask+0x104>)
 8002f46:	6253      	str	r3, [r2, #36]	; 0x24
		NavDataContainer[10] = 0.0f;
 8002f48:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <debugSerialTask+0x104>)
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28

		NavDataContainer[11] = (float) gpsData.fixQuality;
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <debugSerialTask+0x114>)
 8002f52:	7f5b      	ldrb	r3, [r3, #29]
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <debugSerialTask+0x104>)
 8002f5e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		NavDataContainer[12] = gpsData.latitude_dec;
 8002f62:	4b28      	ldr	r3, [pc, #160]	; (8003004 <debugSerialTask+0x114>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <debugSerialTask+0x104>)
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
		NavDataContainer[13] = gpsData.longitude_dec;
 8002f6a:	4b26      	ldr	r3, [pc, #152]	; (8003004 <debugSerialTask+0x114>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <debugSerialTask+0x104>)
 8002f70:	6353      	str	r3, [r2, #52]	; 0x34
		NavDataContainer[14] = gpsData.altitude_m;
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <debugSerialTask+0x114>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <debugSerialTask+0x104>)
 8002f78:	6393      	str	r3, [r2, #56]	; 0x38
		NavDataContainer[15] = gpsData.groundSpeed_mps;
 8002f7a:	4b22      	ldr	r3, [pc, #136]	; (8003004 <debugSerialTask+0x114>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <debugSerialTask+0x104>)
 8002f80:	63d3      	str	r3, [r2, #60]	; 0x3c
		NavDataContainer[16] = gpsData.course_deg;
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <debugSerialTask+0x114>)
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <debugSerialTask+0x104>)
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40

		NavDataContainer[17] = kal.phi   * 57.2957795131f;
 8002f8a:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <debugSerialTask+0x118>)
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800300c <debugSerialTask+0x11c>
 8002f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f98:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <debugSerialTask+0x104>)
 8002f9a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		NavDataContainer[18] = kal.theta * 57.2957795131f;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <debugSerialTask+0x118>)
 8002fa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fa4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800300c <debugSerialTask+0x11c>
 8002fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <debugSerialTask+0x104>)
 8002fae:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		NavDataContainer[19] = 0.0f;
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <debugSerialTask+0x104>)
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	64da      	str	r2, [r3, #76]	; 0x4c

		uint8_t UAVDataPacket[128];
		uint8_t UAVDataPacketLength = UAVDataLink_Pack(0, 0, sizeof(NavDataContainer), (const uint8_t *) NavDataContainer, UAVDataPacket);
 8002fba:	f107 030c 	add.w	r3, r7, #12
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <debugSerialTask+0x104>)
 8002fc2:	2250      	movs	r2, #80	; 0x50
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7ff fbb6 	bl	8002738 <UAVDataLink_Pack>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

		HAL_UART_Transmit(&huart3, UAVDataPacket, UAVDataPacketLength, HAL_MAX_DELAY);
 8002fd2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	f107 010c 	add.w	r1, r7, #12
 8002fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe0:	480b      	ldr	r0, [pc, #44]	; (8003010 <debugSerialTask+0x120>)
 8002fe2:	f003 f9fa 	bl	80063da <HAL_UART_Transmit>

		osDelay(SAMPLE_TIME_DBG_MS);
 8002fe6:	2364      	movs	r3, #100	; 0x64
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 ff8a 	bl	8006f02 <osDelay>
	for (;;) {
 8002fee:	e783      	b.n	8002ef8 <debugSerialTask+0x8>
 8002ff0:	200050e0 	.word	0x200050e0
 8002ff4:	200052a4 	.word	0x200052a4
 8002ff8:	20005110 	.word	0x20005110
 8002ffc:	20005434 	.word	0x20005434
 8003000:	200052f4 	.word	0x200052f4
 8003004:	20004f74 	.word	0x20004f74
 8003008:	20005278 	.word	0x20005278
 800300c:	42652ee1 	.word	0x42652ee1
 8003010:	200049cc 	.word	0x200049cc

08003014 <initPeripherals>:
	}

}

void initPeripherals() {
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af04      	add	r7, sp, #16
	uint8_t status = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	71fb      	strb	r3, [r7, #7]

	/* Initialise pressure sensor */
	uint8_t statBar = (MPRLSBarometer_Init(&bar, &hi2c1, BARNRST_GPIO_Port, BARNRST_Pin, INTBAR_GPIO_Port, INTBAR_Pin) == MPRLS_STATUS_POWERED);
 800301e:	2301      	movs	r3, #1
 8003020:	9301      	str	r3, [sp, #4]
 8003022:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <initPeripherals+0xbc>)
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <initPeripherals+0xc0>)
 800302a:	492b      	ldr	r1, [pc, #172]	; (80030d8 <initPeripherals+0xc4>)
 800302c:	482b      	ldr	r0, [pc, #172]	; (80030dc <initPeripherals+0xc8>)
 800302e:	f7ff fa81 	bl	8002534 <MPRLSBarometer_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	71bb      	strb	r3, [r7, #6]

	/* Initialise magnetometer */
	uint8_t statMag = IISMagnetometer_Init(&mag, &hi2c1, GPIOA, INTMAG_Pin);
 8003040:	2340      	movs	r3, #64	; 0x40
 8003042:	4a24      	ldr	r2, [pc, #144]	; (80030d4 <initPeripherals+0xc0>)
 8003044:	4924      	ldr	r1, [pc, #144]	; (80030d8 <initPeripherals+0xc4>)
 8003046:	4826      	ldr	r0, [pc, #152]	; (80030e0 <initPeripherals+0xcc>)
 8003048:	f7fe f906 	bl	8001258 <IISMagnetometer_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	717b      	strb	r3, [r7, #5]

	/* Initialise IMU */
	uint8_t statIMU = BMI088_Init(&imu, &hi2c1, GPIOA, INTACC_Pin, GPIOA, INTGYR_Pin);
 8003050:	2320      	movs	r3, #32
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <initPeripherals+0xc0>)
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2310      	movs	r3, #16
 800305a:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <initPeripherals+0xc0>)
 800305c:	491e      	ldr	r1, [pc, #120]	; (80030d8 <initPeripherals+0xc4>)
 800305e:	4821      	ldr	r0, [pc, #132]	; (80030e4 <initPeripherals+0xd0>)
 8003060:	f7fd ff22 	bl	8000ea8 <BMI088_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	713b      	strb	r3, [r7, #4]

	status = statBar + statMag + statIMU;
 8003068:	79ba      	ldrb	r2, [r7, #6]
 800306a:	797b      	ldrb	r3, [r7, #5]
 800306c:	4413      	add	r3, r2
 800306e:	b2da      	uxtb	r2, r3
 8003070:	793b      	ldrb	r3, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	71fb      	strb	r3, [r7, #7]

	/* Initialise temperature sensor */
	TMP100_Init(&tmp, &hi2c1);
 8003076:	4918      	ldr	r1, [pc, #96]	; (80030d8 <initPeripherals+0xc4>)
 8003078:	481b      	ldr	r0, [pc, #108]	; (80030e8 <initPeripherals+0xd4>)
 800307a:	f7ff fb3d 	bl	80026f8 <TMP100_Init>

	/* Initialise GPS receiver */
	UBloxGPS_Init(&gps, &huart1, GPIOC, GPSNRST_Pin, GPIOC, GPSPPS_Pin, GPIOC, GPSLNAEN_Pin);
 800307e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003082:	9303      	str	r3, [sp, #12]
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <initPeripherals+0xd8>)
 8003086:	9302      	str	r3, [sp, #8]
 8003088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <initPeripherals+0xd8>)
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003096:	4a15      	ldr	r2, [pc, #84]	; (80030ec <initPeripherals+0xd8>)
 8003098:	4915      	ldr	r1, [pc, #84]	; (80030f0 <initPeripherals+0xdc>)
 800309a:	4816      	ldr	r0, [pc, #88]	; (80030f4 <initPeripherals+0xe0>)
 800309c:	f7ff fc1d 	bl	80028da <UBloxGPS_Init>
	UBloxGPS_Reset(&gps);
 80030a0:	4814      	ldr	r0, [pc, #80]	; (80030f4 <initPeripherals+0xe0>)
 80030a2:	f7ff fc58 	bl	8002956 <UBloxGPS_Reset>

	if (status < 3) {
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d806      	bhi.n	80030ba <initPeripherals+0xa6>
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_SET);
 80030ac:	2201      	movs	r2, #1
 80030ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030b2:	4807      	ldr	r0, [pc, #28]	; (80030d0 <initPeripherals+0xbc>)
 80030b4:	f001 f84a 	bl	800414c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_RESET);
	}
}
 80030b8:	e005      	b.n	80030c6 <initPeripherals+0xb2>
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_RESET);
 80030ba:	2200      	movs	r2, #0
 80030bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030c0:	4803      	ldr	r0, [pc, #12]	; (80030d0 <initPeripherals+0xbc>)
 80030c2:	f001 f843 	bl	800414c <HAL_GPIO_WritePin>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40020400 	.word	0x40020400
 80030d4:	40020000 	.word	0x40020000
 80030d8:	20004a0c 	.word	0x20004a0c
 80030dc:	200052f4 	.word	0x200052f4
 80030e0:	20005434 	.word	0x20005434
 80030e4:	20004878 	.word	0x20004878
 80030e8:	2000463c 	.word	0x2000463c
 80030ec:	40020800 	.word	0x40020800
 80030f0:	20004fb4 	.word	0x20004fb4
 80030f4:	20004644 	.word	0x20004644

080030f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b094      	sub	sp, #80	; 0x50
 80030fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030fe:	f107 0320 	add.w	r3, r7, #32
 8003102:	2230      	movs	r2, #48	; 0x30
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f006 fc4d 	bl	80099a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800310c:	f107 030c 	add.w	r3, r7, #12
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <SystemClock_Config+0xcc>)
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <SystemClock_Config+0xcc>)
 8003126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312a:	6413      	str	r3, [r2, #64]	; 0x40
 800312c:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <SystemClock_Config+0xcc>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003138:	2300      	movs	r3, #0
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <SystemClock_Config+0xd0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <SystemClock_Config+0xd0>)
 8003142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <SystemClock_Config+0xd0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003154:	2301      	movs	r3, #1
 8003156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800315e:	2302      	movs	r3, #2
 8003160:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003168:	2319      	movs	r3, #25
 800316a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800316c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003170:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003172:	2302      	movs	r3, #2
 8003174:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003176:	2304      	movs	r3, #4
 8003178:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800317a:	f107 0320 	add.w	r3, r7, #32
 800317e:	4618      	mov	r0, r3
 8003180:	f002 fa64 	bl	800564c <HAL_RCC_OscConfig>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800318a:	f000 f9eb 	bl	8003564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800318e:	230f      	movs	r3, #15
 8003190:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003192:	2302      	movs	r3, #2
 8003194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800319a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800319e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031a6:	f107 030c 	add.w	r3, r7, #12
 80031aa:	2105      	movs	r1, #5
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 fc8f 	bl	8005ad0 <HAL_RCC_ClockConfig>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80031b8:	f000 f9d4 	bl	8003564 <Error_Handler>
  }
}
 80031bc:	bf00      	nop
 80031be:	3750      	adds	r7, #80	; 0x50
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40007000 	.word	0x40007000

080031cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <MX_I2C1_Init+0x50>)
 80031d2:	4a13      	ldr	r2, [pc, #76]	; (8003220 <MX_I2C1_Init+0x54>)
 80031d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <MX_I2C1_Init+0x50>)
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <MX_I2C1_Init+0x58>)
 80031da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <MX_I2C1_Init+0x50>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <MX_I2C1_Init+0x50>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <MX_I2C1_Init+0x50>)
 80031ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <MX_I2C1_Init+0x50>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <MX_I2C1_Init+0x50>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <MX_I2C1_Init+0x50>)
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <MX_I2C1_Init+0x50>)
 8003204:	2200      	movs	r2, #0
 8003206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003208:	4804      	ldr	r0, [pc, #16]	; (800321c <MX_I2C1_Init+0x50>)
 800320a:	f000 ffd3 	bl	80041b4 <HAL_I2C_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003214:	f000 f9a6 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20004a0c 	.word	0x20004a0c
 8003220:	40005400 	.word	0x40005400
 8003224:	000186a0 	.word	0x000186a0

08003228 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <MX_I2C2_Init+0x50>)
 800322e:	4a13      	ldr	r2, [pc, #76]	; (800327c <MX_I2C2_Init+0x54>)
 8003230:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <MX_I2C2_Init+0x50>)
 8003234:	4a12      	ldr	r2, [pc, #72]	; (8003280 <MX_I2C2_Init+0x58>)
 8003236:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <MX_I2C2_Init+0x50>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <MX_I2C2_Init+0x50>)
 8003240:	2200      	movs	r2, #0
 8003242:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <MX_I2C2_Init+0x50>)
 8003246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800324a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <MX_I2C2_Init+0x50>)
 800324e:	2200      	movs	r2, #0
 8003250:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <MX_I2C2_Init+0x50>)
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003258:	4b07      	ldr	r3, [pc, #28]	; (8003278 <MX_I2C2_Init+0x50>)
 800325a:	2200      	movs	r2, #0
 800325c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <MX_I2C2_Init+0x50>)
 8003260:	2200      	movs	r2, #0
 8003262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003264:	4804      	ldr	r0, [pc, #16]	; (8003278 <MX_I2C2_Init+0x50>)
 8003266:	f000 ffa5 	bl	80041b4 <HAL_I2C_Init>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003270:	f000 f978 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20004b74 	.word	0x20004b74
 800327c:	40005800 	.word	0x40005800
 8003280:	000186a0 	.word	0x000186a0

08003284 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003288:	4b12      	ldr	r3, [pc, #72]	; (80032d4 <MX_I2C3_Init+0x50>)
 800328a:	4a13      	ldr	r2, [pc, #76]	; (80032d8 <MX_I2C3_Init+0x54>)
 800328c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <MX_I2C3_Init+0x50>)
 8003290:	4a12      	ldr	r2, [pc, #72]	; (80032dc <MX_I2C3_Init+0x58>)
 8003292:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <MX_I2C3_Init+0x50>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800329a:	4b0e      	ldr	r3, [pc, #56]	; (80032d4 <MX_I2C3_Init+0x50>)
 800329c:	2200      	movs	r2, #0
 800329e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <MX_I2C3_Init+0x50>)
 80032a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <MX_I2C3_Init+0x50>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <MX_I2C3_Init+0x50>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <MX_I2C3_Init+0x50>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <MX_I2C3_Init+0x50>)
 80032bc:	2200      	movs	r2, #0
 80032be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80032c0:	4804      	ldr	r0, [pc, #16]	; (80032d4 <MX_I2C3_Init+0x50>)
 80032c2:	f000 ff77 	bl	80041b4 <HAL_I2C_Init>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80032cc:	f000 f94a 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200046f8 	.word	0x200046f8
 80032d8:	40005c00 	.word	0x40005c00
 80032dc:	000186a0 	.word	0x000186a0

080032e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <MX_USART1_UART_Init+0x4c>)
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <MX_USART1_UART_Init+0x50>)
 80032e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9800;
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <MX_USART1_UART_Init+0x4c>)
 80032ec:	f242 6248 	movw	r2, #9800	; 0x2648
 80032f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032f2:	4b0e      	ldr	r3, [pc, #56]	; (800332c <MX_USART1_UART_Init+0x4c>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <MX_USART1_UART_Init+0x4c>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <MX_USART1_UART_Init+0x4c>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <MX_USART1_UART_Init+0x4c>)
 8003306:	220c      	movs	r2, #12
 8003308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800330a:	4b08      	ldr	r3, [pc, #32]	; (800332c <MX_USART1_UART_Init+0x4c>)
 800330c:	2200      	movs	r2, #0
 800330e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <MX_USART1_UART_Init+0x4c>)
 8003312:	2200      	movs	r2, #0
 8003314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003316:	4805      	ldr	r0, [pc, #20]	; (800332c <MX_USART1_UART_Init+0x4c>)
 8003318:	f003 f812 	bl	8006340 <HAL_UART_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003322:	f000 f91f 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20004fb4 	.word	0x20004fb4
 8003330:	40011000 	.word	0x40011000

08003334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <MX_USART2_UART_Init+0x4c>)
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <MX_USART2_UART_Init+0x50>)
 800333c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <MX_USART2_UART_Init+0x4c>)
 8003340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <MX_USART2_UART_Init+0x4c>)
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <MX_USART2_UART_Init+0x4c>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <MX_USART2_UART_Init+0x4c>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <MX_USART2_UART_Init+0x4c>)
 800335a:	220c      	movs	r2, #12
 800335c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800335e:	4b08      	ldr	r3, [pc, #32]	; (8003380 <MX_USART2_UART_Init+0x4c>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <MX_USART2_UART_Init+0x4c>)
 8003366:	2200      	movs	r2, #0
 8003368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800336a:	4805      	ldr	r0, [pc, #20]	; (8003380 <MX_USART2_UART_Init+0x4c>)
 800336c:	f002 ffe8 	bl	8006340 <HAL_UART_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003376:	f000 f8f5 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20005238 	.word	0x20005238
 8003384:	40004400 	.word	0x40004400

08003388 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 800338e:	4a12      	ldr	r2, [pc, #72]	; (80033d8 <MX_USART3_UART_Init+0x50>)
 8003390:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 8003394:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8003398:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033ae:	220c      	movs	r2, #12
 80033b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033be:	4805      	ldr	r0, [pc, #20]	; (80033d4 <MX_USART3_UART_Init+0x4c>)
 80033c0:	f002 ffbe 	bl	8006340 <HAL_UART_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80033ca:	f000 f8cb 	bl	8003564 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200049cc 	.word	0x200049cc
 80033d8:	40004800 	.word	0x40004800

080033dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e2:	f107 0314 	add.w	r3, r7, #20
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	4b4e      	ldr	r3, [pc, #312]	; (8003530 <MX_GPIO_Init+0x154>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a4d      	ldr	r2, [pc, #308]	; (8003530 <MX_GPIO_Init+0x154>)
 80033fc:	f043 0304 	orr.w	r3, r3, #4
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <MX_GPIO_Init+0x154>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	4b47      	ldr	r3, [pc, #284]	; (8003530 <MX_GPIO_Init+0x154>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a46      	ldr	r2, [pc, #280]	; (8003530 <MX_GPIO_Init+0x154>)
 8003418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b44      	ldr	r3, [pc, #272]	; (8003530 <MX_GPIO_Init+0x154>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	4b40      	ldr	r3, [pc, #256]	; (8003530 <MX_GPIO_Init+0x154>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a3f      	ldr	r2, [pc, #252]	; (8003530 <MX_GPIO_Init+0x154>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <MX_GPIO_Init+0x154>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	4b39      	ldr	r3, [pc, #228]	; (8003530 <MX_GPIO_Init+0x154>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	4a38      	ldr	r2, [pc, #224]	; (8003530 <MX_GPIO_Init+0x154>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6313      	str	r3, [r2, #48]	; 0x30
 8003456:	4b36      	ldr	r3, [pc, #216]	; (8003530 <MX_GPIO_Init+0x154>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPSNRST_Pin|FCCTXA_Pin|FCCTXB_Pin|FCCTXC_Pin 
 8003462:	2200      	movs	r2, #0
 8003464:	f244 01f0 	movw	r1, #16624	; 0x40f0
 8003468:	4832      	ldr	r0, [pc, #200]	; (8003534 <MX_GPIO_Init+0x158>)
 800346a:	f000 fe6f 	bl	800414c <HAL_GPIO_WritePin>
                          |FCCTXD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BARNRST_GPIO_Port, BARNRST_Pin, GPIO_PIN_RESET);
 800346e:	2200      	movs	r2, #0
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	4831      	ldr	r0, [pc, #196]	; (8003538 <MX_GPIO_Init+0x15c>)
 8003474:	f000 fe6a 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin, GPIO_PIN_RESET);
 8003478:	2200      	movs	r2, #0
 800347a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800347e:	482f      	ldr	r0, [pc, #188]	; (800353c <MX_GPIO_Init+0x160>)
 8003480:	f000 fe64 	bl	800414c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPSLNAEN_Pin FCCRXA_Pin FCCRXB_Pin FCCRXC_Pin 
                           FCCRXD_Pin GPSPPS_Pin */
  GPIO_InitStruct.Pin = GPSLNAEN_Pin|FCCRXA_Pin|FCCRXB_Pin|FCCRXC_Pin 
 8003484:	f243 030f 	movw	r3, #12303	; 0x300f
 8003488:	617b      	str	r3, [r7, #20]
                          |FCCRXD_Pin|GPSPPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003492:	f107 0314 	add.w	r3, r7, #20
 8003496:	4619      	mov	r1, r3
 8003498:	4826      	ldr	r0, [pc, #152]	; (8003534 <MX_GPIO_Init+0x158>)
 800349a:	f000 fca5 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPSNRST_Pin FCCTXA_Pin FCCTXB_Pin FCCTXC_Pin 
                           FCCTXD_Pin */
  GPIO_InitStruct.Pin = GPSNRST_Pin|FCCTXA_Pin|FCCTXB_Pin|FCCTXC_Pin 
 800349e:	f244 03f0 	movw	r3, #16624	; 0x40f0
 80034a2:	617b      	str	r3, [r7, #20]
                          |FCCTXD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a4:	2301      	movs	r3, #1
 80034a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4619      	mov	r1, r3
 80034b6:	481f      	ldr	r0, [pc, #124]	; (8003534 <MX_GPIO_Init+0x158>)
 80034b8:	f000 fc96 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTACC_Pin INTGYR_Pin INTMAG_Pin */
  GPIO_InitStruct.Pin = INTACC_Pin|INTGYR_Pin|INTMAG_Pin;
 80034bc:	2370      	movs	r3, #112	; 0x70
 80034be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	4619      	mov	r1, r3
 80034ce:	481a      	ldr	r0, [pc, #104]	; (8003538 <MX_GPIO_Init+0x15c>)
 80034d0:	f000 fc8a 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BARNRST_Pin */
  GPIO_InitStruct.Pin = BARNRST_Pin;
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d8:	2301      	movs	r3, #1
 80034da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e0:	2300      	movs	r3, #0
 80034e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARNRST_GPIO_Port, &GPIO_InitStruct);
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	4619      	mov	r1, r3
 80034ea:	4813      	ldr	r0, [pc, #76]	; (8003538 <MX_GPIO_Init+0x15c>)
 80034ec:	f000 fc7c 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTBAR_Pin */
  GPIO_InitStruct.Pin = INTBAR_Pin;
 80034f0:	2301      	movs	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTBAR_GPIO_Port, &GPIO_InitStruct);
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	4619      	mov	r1, r3
 8003502:	480e      	ldr	r0, [pc, #56]	; (800353c <MX_GPIO_Init+0x160>)
 8003504:	f000 fc70 	bl	8003de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin;
 8003508:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800350c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350e:	2301      	movs	r3, #1
 8003510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2300      	movs	r3, #0
 8003518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	4806      	ldr	r0, [pc, #24]	; (800353c <MX_GPIO_Init+0x160>)
 8003522:	f000 fc61 	bl	8003de8 <HAL_GPIO_Init>

}
 8003526:	bf00      	nop
 8003528:	3728      	adds	r7, #40	; 0x28
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40020800 	.word	0x40020800
 8003538:	40020000 	.word	0x40020000
 800353c:	40020400 	.word	0x40020400

08003540 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003552:	f000 fb03 	bl	8003b5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000

08003564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_MspInit+0x54>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	4a11      	ldr	r2, [pc, #68]	; (80035c8 <HAL_MspInit+0x54>)
 8003584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003588:	6453      	str	r3, [r2, #68]	; 0x44
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <HAL_MspInit+0x54>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	603b      	str	r3, [r7, #0]
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_MspInit+0x54>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <HAL_MspInit+0x54>)
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
 80035a6:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_MspInit+0x54>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035b2:	2200      	movs	r2, #0
 80035b4:	210f      	movs	r1, #15
 80035b6:	f06f 0001 	mvn.w	r0, #1
 80035ba:	f000 fbc9 	bl	8003d50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800

080035cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08e      	sub	sp, #56	; 0x38
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a5c      	ldr	r2, [pc, #368]	; (800375c <HAL_I2C_MspInit+0x190>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d12d      	bne.n	800364a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]
 80035f2:	4b5b      	ldr	r3, [pc, #364]	; (8003760 <HAL_I2C_MspInit+0x194>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4a5a      	ldr	r2, [pc, #360]	; (8003760 <HAL_I2C_MspInit+0x194>)
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	6313      	str	r3, [r2, #48]	; 0x30
 80035fe:	4b58      	ldr	r3, [pc, #352]	; (8003760 <HAL_I2C_MspInit+0x194>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	623b      	str	r3, [r7, #32]
 8003608:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800360a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003610:	2312      	movs	r3, #18
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003614:	2301      	movs	r3, #1
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003618:	2303      	movs	r3, #3
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800361c:	2304      	movs	r3, #4
 800361e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003624:	4619      	mov	r1, r3
 8003626:	484f      	ldr	r0, [pc, #316]	; (8003764 <HAL_I2C_MspInit+0x198>)
 8003628:	f000 fbde 	bl	8003de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	4b4b      	ldr	r3, [pc, #300]	; (8003760 <HAL_I2C_MspInit+0x194>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4a4a      	ldr	r2, [pc, #296]	; (8003760 <HAL_I2C_MspInit+0x194>)
 8003636:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800363a:	6413      	str	r3, [r2, #64]	; 0x40
 800363c:	4b48      	ldr	r3, [pc, #288]	; (8003760 <HAL_I2C_MspInit+0x194>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003648:	e083      	b.n	8003752 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a46      	ldr	r2, [pc, #280]	; (8003768 <HAL_I2C_MspInit+0x19c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d12d      	bne.n	80036b0 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	4b41      	ldr	r3, [pc, #260]	; (8003760 <HAL_I2C_MspInit+0x194>)
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	4a40      	ldr	r2, [pc, #256]	; (8003760 <HAL_I2C_MspInit+0x194>)
 800365e:	f043 0302 	orr.w	r3, r3, #2
 8003662:	6313      	str	r3, [r2, #48]	; 0x30
 8003664:	4b3e      	ldr	r3, [pc, #248]	; (8003760 <HAL_I2C_MspInit+0x194>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003670:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003676:	2312      	movs	r3, #18
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800367a:	2301      	movs	r3, #1
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367e:	2303      	movs	r3, #3
 8003680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003682:	2304      	movs	r3, #4
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368a:	4619      	mov	r1, r3
 800368c:	4835      	ldr	r0, [pc, #212]	; (8003764 <HAL_I2C_MspInit+0x198>)
 800368e:	f000 fbab 	bl	8003de8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	4b32      	ldr	r3, [pc, #200]	; (8003760 <HAL_I2C_MspInit+0x194>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a31      	ldr	r2, [pc, #196]	; (8003760 <HAL_I2C_MspInit+0x194>)
 800369c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_I2C_MspInit+0x194>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	697b      	ldr	r3, [r7, #20]
}
 80036ae:	e050      	b.n	8003752 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a2d      	ldr	r2, [pc, #180]	; (800376c <HAL_I2C_MspInit+0x1a0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d14b      	bne.n	8003752 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <HAL_I2C_MspInit+0x194>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	4a27      	ldr	r2, [pc, #156]	; (8003760 <HAL_I2C_MspInit+0x194>)
 80036c4:	f043 0304 	orr.w	r3, r3, #4
 80036c8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ca:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_I2C_MspInit+0x194>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	4b21      	ldr	r3, [pc, #132]	; (8003760 <HAL_I2C_MspInit+0x194>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	4a20      	ldr	r2, [pc, #128]	; (8003760 <HAL_I2C_MspInit+0x194>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	6313      	str	r3, [r2, #48]	; 0x30
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <HAL_I2C_MspInit+0x194>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036f8:	2312      	movs	r3, #18
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036fc:	2301      	movs	r3, #1
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003700:	2303      	movs	r3, #3
 8003702:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003704:	2304      	movs	r3, #4
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370c:	4619      	mov	r1, r3
 800370e:	4818      	ldr	r0, [pc, #96]	; (8003770 <HAL_I2C_MspInit+0x1a4>)
 8003710:	f000 fb6a 	bl	8003de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800371a:	2312      	movs	r3, #18
 800371c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800371e:	2301      	movs	r3, #1
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003722:	2303      	movs	r3, #3
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003726:	2304      	movs	r3, #4
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800372e:	4619      	mov	r1, r3
 8003730:	4810      	ldr	r0, [pc, #64]	; (8003774 <HAL_I2C_MspInit+0x1a8>)
 8003732:	f000 fb59 	bl	8003de8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_I2C_MspInit+0x194>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a08      	ldr	r2, [pc, #32]	; (8003760 <HAL_I2C_MspInit+0x194>)
 8003740:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003744:	6413      	str	r3, [r2, #64]	; 0x40
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <HAL_I2C_MspInit+0x194>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
}
 8003752:	bf00      	nop
 8003754:	3738      	adds	r7, #56	; 0x38
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40005400 	.word	0x40005400
 8003760:	40023800 	.word	0x40023800
 8003764:	40020400 	.word	0x40020400
 8003768:	40005800 	.word	0x40005800
 800376c:	40005c00 	.word	0x40005c00
 8003770:	40020800 	.word	0x40020800
 8003774:	40020000 	.word	0x40020000

08003778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	; 0x38
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a4f      	ldr	r2, [pc, #316]	; (80038d4 <HAL_UART_MspInit+0x15c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d134      	bne.n	8003804 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]
 800379e:	4b4e      	ldr	r3, [pc, #312]	; (80038d8 <HAL_UART_MspInit+0x160>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	4a4d      	ldr	r2, [pc, #308]	; (80038d8 <HAL_UART_MspInit+0x160>)
 80037a4:	f043 0310 	orr.w	r3, r3, #16
 80037a8:	6453      	str	r3, [r2, #68]	; 0x44
 80037aa:	4b4b      	ldr	r3, [pc, #300]	; (80038d8 <HAL_UART_MspInit+0x160>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	623b      	str	r3, [r7, #32]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_UART_MspInit+0x160>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a46      	ldr	r2, [pc, #280]	; (80038d8 <HAL_UART_MspInit+0x160>)
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b44      	ldr	r3, [pc, #272]	; (80038d8 <HAL_UART_MspInit+0x160>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	61fb      	str	r3, [r7, #28]
 80037d0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037d2:	23c0      	movs	r3, #192	; 0xc0
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037da:	2301      	movs	r3, #1
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037de:	2303      	movs	r3, #3
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037e2:	2307      	movs	r3, #7
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ea:	4619      	mov	r1, r3
 80037ec:	483b      	ldr	r0, [pc, #236]	; (80038dc <HAL_UART_MspInit+0x164>)
 80037ee:	f000 fafb 	bl	8003de8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80037f2:	2200      	movs	r2, #0
 80037f4:	2105      	movs	r1, #5
 80037f6:	2025      	movs	r0, #37	; 0x25
 80037f8:	f000 faaa 	bl	8003d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80037fc:	2025      	movs	r0, #37	; 0x25
 80037fe:	f000 fac3 	bl	8003d88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003802:	e063      	b.n	80038cc <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a35      	ldr	r2, [pc, #212]	; (80038e0 <HAL_UART_MspInit+0x168>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d12c      	bne.n	8003868 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
 8003812:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <HAL_UART_MspInit+0x160>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a30      	ldr	r2, [pc, #192]	; (80038d8 <HAL_UART_MspInit+0x160>)
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
 800381e:	4b2e      	ldr	r3, [pc, #184]	; (80038d8 <HAL_UART_MspInit+0x160>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <HAL_UART_MspInit+0x160>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <HAL_UART_MspInit+0x160>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b27      	ldr	r3, [pc, #156]	; (80038d8 <HAL_UART_MspInit+0x160>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003846:	230c      	movs	r3, #12
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800384e:	2301      	movs	r3, #1
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003852:	2303      	movs	r3, #3
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003856:	2307      	movs	r3, #7
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800385a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800385e:	4619      	mov	r1, r3
 8003860:	4820      	ldr	r0, [pc, #128]	; (80038e4 <HAL_UART_MspInit+0x16c>)
 8003862:	f000 fac1 	bl	8003de8 <HAL_GPIO_Init>
}
 8003866:	e031      	b.n	80038cc <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_UART_MspInit+0x170>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12c      	bne.n	80038cc <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <HAL_UART_MspInit+0x160>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <HAL_UART_MspInit+0x160>)
 800387c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003880:	6413      	str	r3, [r2, #64]	; 0x40
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_UART_MspInit+0x160>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <HAL_UART_MspInit+0x160>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <HAL_UART_MspInit+0x160>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_UART_MspInit+0x160>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80038aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038b4:	2301      	movs	r3, #1
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b8:	2303      	movs	r3, #3
 80038ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038bc:	2307      	movs	r3, #7
 80038be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c4:	4619      	mov	r1, r3
 80038c6:	4809      	ldr	r0, [pc, #36]	; (80038ec <HAL_UART_MspInit+0x174>)
 80038c8:	f000 fa8e 	bl	8003de8 <HAL_GPIO_Init>
}
 80038cc:	bf00      	nop
 80038ce:	3738      	adds	r7, #56	; 0x38
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40011000 	.word	0x40011000
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020400 	.word	0x40020400
 80038e0:	40004400 	.word	0x40004400
 80038e4:	40020000 	.word	0x40020000
 80038e8:	40004800 	.word	0x40004800
 80038ec:	40020800 	.word	0x40020800

080038f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08c      	sub	sp, #48	; 0x30
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003900:	2200      	movs	r2, #0
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	2019      	movs	r0, #25
 8003906:	f000 fa23 	bl	8003d50 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800390a:	2019      	movs	r0, #25
 800390c:	f000 fa3c 	bl	8003d88 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_InitTick+0xa4>)
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_InitTick+0xa4>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6453      	str	r3, [r2, #68]	; 0x44
 8003920:	4b1c      	ldr	r3, [pc, #112]	; (8003994 <HAL_InitTick+0xa4>)
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800392c:	f107 0210 	add.w	r2, r7, #16
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fa92 	bl	8005e60 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800393c:	f002 fa7c 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8003940:	4603      	mov	r3, r0
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003948:	4a13      	ldr	r2, [pc, #76]	; (8003998 <HAL_InitTick+0xa8>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	0c9b      	lsrs	r3, r3, #18
 8003950:	3b01      	subs	r3, #1
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003954:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_InitTick+0xac>)
 8003956:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <HAL_InitTick+0xb0>)
 8003958:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_InitTick+0xac>)
 800395c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003960:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003962:	4a0e      	ldr	r2, [pc, #56]	; (800399c <HAL_InitTick+0xac>)
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <HAL_InitTick+0xac>)
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396e:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_InitTick+0xac>)
 8003970:	2200      	movs	r2, #0
 8003972:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003974:	4809      	ldr	r0, [pc, #36]	; (800399c <HAL_InitTick+0xac>)
 8003976:	f002 faa5 	bl	8005ec4 <HAL_TIM_Base_Init>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d104      	bne.n	800398a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003980:	4806      	ldr	r0, [pc, #24]	; (800399c <HAL_InitTick+0xac>)
 8003982:	f002 fad4 	bl	8005f2e <HAL_TIM_Base_Start_IT>
 8003986:	4603      	mov	r3, r0
 8003988:	e000      	b.n	800398c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	3730      	adds	r7, #48	; 0x30
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	431bde83 	.word	0x431bde83
 800399c:	20005574 	.word	0x20005574
 80039a0:	40010000 	.word	0x40010000

080039a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039b6:	e7fe      	b.n	80039b6 <HardFault_Handler+0x4>

080039b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039bc:	e7fe      	b.n	80039bc <MemManage_Handler+0x4>

080039be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039be:	b480      	push	{r7}
 80039c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039c2:	e7fe      	b.n	80039c2 <BusFault_Handler+0x4>

080039c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039c8:	e7fe      	b.n	80039c8 <UsageFault_Handler+0x4>

080039ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ca:	b480      	push	{r7}
 80039cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80039de:	f002 faca 	bl	8005f76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20005574 	.word	0x20005574

080039ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <USART1_IRQHandler+0x10>)
 80039f2:	f002 fd8b 	bl	800650c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20004fb4 	.word	0x20004fb4

08003a00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <_sbrk+0x50>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <_sbrk+0x16>
		heap_end = &end;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <_sbrk+0x50>)
 8003a12:	4a10      	ldr	r2, [pc, #64]	; (8003a54 <_sbrk+0x54>)
 8003a14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <_sbrk+0x50>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003a1c:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <_sbrk+0x50>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	466a      	mov	r2, sp
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d907      	bls.n	8003a3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003a2a:	f005 ff87 	bl	800993c <__errno>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	230c      	movs	r3, #12
 8003a32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295
 8003a38:	e006      	b.n	8003a48 <_sbrk+0x48>
	}

	heap_end += incr;
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <_sbrk+0x50>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	4a03      	ldr	r2, [pc, #12]	; (8003a50 <_sbrk+0x50>)
 8003a44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003a46:	68fb      	ldr	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	200008e4 	.word	0x200008e4
 8003a54:	200055c0 	.word	0x200055c0

08003a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <SystemInit+0x60>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <SystemInit+0x60>)
 8003a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003a6c:	4b13      	ldr	r3, [pc, #76]	; (8003abc <SystemInit+0x64>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a12      	ldr	r2, [pc, #72]	; (8003abc <SystemInit+0x64>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003a78:	4b10      	ldr	r3, [pc, #64]	; (8003abc <SystemInit+0x64>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <SystemInit+0x64>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <SystemInit+0x64>)
 8003a84:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <SystemInit+0x64>)
 8003a90:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <SystemInit+0x68>)
 8003a92:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a94:	4b09      	ldr	r3, [pc, #36]	; (8003abc <SystemInit+0x64>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a08      	ldr	r2, [pc, #32]	; (8003abc <SystemInit+0x64>)
 8003a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <SystemInit+0x64>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003aa6:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <SystemInit+0x60>)
 8003aa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aac:	609a      	str	r2, [r3, #8]
#endif
}
 8003aae:	bf00      	nop
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000ed00 	.word	0xe000ed00
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	24003010 	.word	0x24003010

08003ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003afc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003ac8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003aca:	e003      	b.n	8003ad4 <LoopCopyDataInit>

08003acc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ace:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ad0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ad2:	3104      	adds	r1, #4

08003ad4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ad4:	480b      	ldr	r0, [pc, #44]	; (8003b04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ad6:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ad8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ada:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003adc:	d3f6      	bcc.n	8003acc <CopyDataInit>
  ldr  r2, =_sbss
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ae0:	e002      	b.n	8003ae8 <LoopFillZerobss>

08003ae2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ae2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ae4:	f842 3b04 	str.w	r3, [r2], #4

08003ae8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003aea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003aec:	d3f9      	bcc.n	8003ae2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003aee:	f7ff ffb3 	bl	8003a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003af2:	f005 ff29 	bl	8009948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af6:	f7fe fff7 	bl	8002ae8 <main>
  bx  lr    
 8003afa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003afc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003b00:	0800b970 	.word	0x0800b970
  ldr  r0, =_sdata
 8003b04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b08:	20000674 	.word	0x20000674
  ldr  r2, =_sbss
 8003b0c:	20000674 	.word	0x20000674
  ldr  r3, = _ebss
 8003b10:	200055bc 	.word	0x200055bc

08003b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b14:	e7fe      	b.n	8003b14 <ADC_IRQHandler>
	...

08003b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_Init+0x40>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0d      	ldr	r2, [pc, #52]	; (8003b58 <HAL_Init+0x40>)
 8003b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b28:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <HAL_Init+0x40>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0a      	ldr	r2, [pc, #40]	; (8003b58 <HAL_Init+0x40>)
 8003b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <HAL_Init+0x40>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a07      	ldr	r2, [pc, #28]	; (8003b58 <HAL_Init+0x40>)
 8003b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b40:	2003      	movs	r0, #3
 8003b42:	f000 f8fa 	bl	8003d3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b46:	2000      	movs	r0, #0
 8003b48:	f7ff fed2 	bl	80038f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b4c:	f7ff fd12 	bl	8003574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023c00 	.word	0x40023c00

08003b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_IncTick+0x20>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_IncTick+0x24>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	4a04      	ldr	r2, [pc, #16]	; (8003b80 <HAL_IncTick+0x24>)
 8003b6e:	6013      	str	r3, [r2, #0]
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000498 	.word	0x20000498
 8003b80:	200055b4 	.word	0x200055b4

08003b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return uwTick;
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_GetTick+0x14>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	200055b4 	.word	0x200055b4

08003b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7ff ffee 	bl	8003b84 <HAL_GetTick>
 8003ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d005      	beq.n	8003bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bb6:	4b09      	ldr	r3, [pc, #36]	; (8003bdc <HAL_Delay+0x40>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bc2:	bf00      	nop
 8003bc4:	f7ff ffde 	bl	8003b84 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d8f7      	bhi.n	8003bc4 <HAL_Delay+0x28>
  {
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000498 	.word	0x20000498

08003be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c12:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	60d3      	str	r3, [r2, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <__NVIC_GetPriorityGrouping+0x18>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 0307 	and.w	r3, r3, #7
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	db0b      	blt.n	8003c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	4907      	ldr	r1, [pc, #28]	; (8003c7c <__NVIC_EnableIRQ+0x38>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2001      	movs	r0, #1
 8003c66:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	e000e100 	.word	0xe000e100

08003c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	6039      	str	r1, [r7, #0]
 8003c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	db0a      	blt.n	8003caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	490c      	ldr	r1, [pc, #48]	; (8003ccc <__NVIC_SetPriority+0x4c>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca8:	e00a      	b.n	8003cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4908      	ldr	r1, [pc, #32]	; (8003cd0 <__NVIC_SetPriority+0x50>)
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	3b04      	subs	r3, #4
 8003cb8:	0112      	lsls	r2, r2, #4
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	761a      	strb	r2, [r3, #24]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000e100 	.word	0xe000e100
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	; 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f1c3 0307 	rsb	r3, r3, #7
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	bf28      	it	cs
 8003cf2:	2304      	movcs	r3, #4
 8003cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d902      	bls.n	8003d04 <NVIC_EncodePriority+0x30>
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3b03      	subs	r3, #3
 8003d02:	e000      	b.n	8003d06 <NVIC_EncodePriority+0x32>
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43da      	mvns	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	401a      	ands	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	43d9      	mvns	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	4313      	orrs	r3, r2
         );
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3724      	adds	r7, #36	; 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff ff4c 	bl	8003be0 <__NVIC_SetPriorityGrouping>
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d62:	f7ff ff61 	bl	8003c28 <__NVIC_GetPriorityGrouping>
 8003d66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	6978      	ldr	r0, [r7, #20]
 8003d6e:	f7ff ffb1 	bl	8003cd4 <NVIC_EncodePriority>
 8003d72:	4602      	mov	r2, r0
 8003d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ff80 	bl	8003c80 <__NVIC_SetPriority>
}
 8003d80:	bf00      	nop
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff ff54 	bl	8003c44 <__NVIC_EnableIRQ>
}
 8003d9c:	bf00      	nop
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d004      	beq.n	8003dc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2280      	movs	r2, #128	; 0x80
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00c      	b.n	8003ddc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2205      	movs	r2, #5
 8003dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b089      	sub	sp, #36	; 0x24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	e16b      	b.n	80040dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e04:	2201      	movs	r2, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	f040 815a 	bne.w	80040d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x4a>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b12      	cmp	r3, #18
 8003e30:	d123      	bne.n	8003e7a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	08da      	lsrs	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3208      	adds	r2, #8
 8003e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	220f      	movs	r2, #15
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	08da      	lsrs	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3208      	adds	r2, #8
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	2203      	movs	r2, #3
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0203 	and.w	r2, r3, #3
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d00b      	beq.n	8003ece <HAL_GPIO_Init+0xe6>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d007      	beq.n	8003ece <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ec2:	2b11      	cmp	r3, #17
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b12      	cmp	r3, #18
 8003ecc:	d130      	bne.n	8003f30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f04:	2201      	movs	r2, #1
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	091b      	lsrs	r3, r3, #4
 8003f1a:	f003 0201 	and.w	r2, r3, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80b4 	beq.w	80040d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <HAL_GPIO_Init+0x308>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	4a5e      	ldr	r2, [pc, #376]	; (80040f0 <HAL_GPIO_Init+0x308>)
 8003f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7e:	4b5c      	ldr	r3, [pc, #368]	; (80040f0 <HAL_GPIO_Init+0x308>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f8a:	4a5a      	ldr	r2, [pc, #360]	; (80040f4 <HAL_GPIO_Init+0x30c>)
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	089b      	lsrs	r3, r3, #2
 8003f90:	3302      	adds	r3, #2
 8003f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	220f      	movs	r2, #15
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a51      	ldr	r2, [pc, #324]	; (80040f8 <HAL_GPIO_Init+0x310>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d02b      	beq.n	800400e <HAL_GPIO_Init+0x226>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a50      	ldr	r2, [pc, #320]	; (80040fc <HAL_GPIO_Init+0x314>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d025      	beq.n	800400a <HAL_GPIO_Init+0x222>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4f      	ldr	r2, [pc, #316]	; (8004100 <HAL_GPIO_Init+0x318>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d01f      	beq.n	8004006 <HAL_GPIO_Init+0x21e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <HAL_GPIO_Init+0x31c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d019      	beq.n	8004002 <HAL_GPIO_Init+0x21a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a4d      	ldr	r2, [pc, #308]	; (8004108 <HAL_GPIO_Init+0x320>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_GPIO_Init+0x216>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4c      	ldr	r2, [pc, #304]	; (800410c <HAL_GPIO_Init+0x324>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00d      	beq.n	8003ffa <HAL_GPIO_Init+0x212>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4b      	ldr	r2, [pc, #300]	; (8004110 <HAL_GPIO_Init+0x328>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <HAL_GPIO_Init+0x20e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4a      	ldr	r2, [pc, #296]	; (8004114 <HAL_GPIO_Init+0x32c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <HAL_GPIO_Init+0x20a>
 8003fee:	2307      	movs	r3, #7
 8003ff0:	e00e      	b.n	8004010 <HAL_GPIO_Init+0x228>
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	e00c      	b.n	8004010 <HAL_GPIO_Init+0x228>
 8003ff6:	2306      	movs	r3, #6
 8003ff8:	e00a      	b.n	8004010 <HAL_GPIO_Init+0x228>
 8003ffa:	2305      	movs	r3, #5
 8003ffc:	e008      	b.n	8004010 <HAL_GPIO_Init+0x228>
 8003ffe:	2304      	movs	r3, #4
 8004000:	e006      	b.n	8004010 <HAL_GPIO_Init+0x228>
 8004002:	2303      	movs	r3, #3
 8004004:	e004      	b.n	8004010 <HAL_GPIO_Init+0x228>
 8004006:	2302      	movs	r3, #2
 8004008:	e002      	b.n	8004010 <HAL_GPIO_Init+0x228>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <HAL_GPIO_Init+0x228>
 800400e:	2300      	movs	r3, #0
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	f002 0203 	and.w	r2, r2, #3
 8004016:	0092      	lsls	r2, r2, #2
 8004018:	4093      	lsls	r3, r2
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4313      	orrs	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004020:	4934      	ldr	r1, [pc, #208]	; (80040f4 <HAL_GPIO_Init+0x30c>)
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	3302      	adds	r3, #2
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800402e:	4b3a      	ldr	r3, [pc, #232]	; (8004118 <HAL_GPIO_Init+0x330>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004052:	4a31      	ldr	r2, [pc, #196]	; (8004118 <HAL_GPIO_Init+0x330>)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004058:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <HAL_GPIO_Init+0x330>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800407c:	4a26      	ldr	r2, [pc, #152]	; (8004118 <HAL_GPIO_Init+0x330>)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004082:	4b25      	ldr	r3, [pc, #148]	; (8004118 <HAL_GPIO_Init+0x330>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	43db      	mvns	r3, r3
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	4013      	ands	r3, r2
 8004090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_GPIO_Init+0x330>)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040ac:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <HAL_GPIO_Init+0x330>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040c8:	69ba      	ldr	r2, [r7, #24]
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d0:	4a11      	ldr	r2, [pc, #68]	; (8004118 <HAL_GPIO_Init+0x330>)
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3301      	adds	r3, #1
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b0f      	cmp	r3, #15
 80040e0:	f67f ae90 	bls.w	8003e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040e4:	bf00      	nop
 80040e6:	3724      	adds	r7, #36	; 0x24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40013800 	.word	0x40013800
 80040f8:	40020000 	.word	0x40020000
 80040fc:	40020400 	.word	0x40020400
 8004100:	40020800 	.word	0x40020800
 8004104:	40020c00 	.word	0x40020c00
 8004108:	40021000 	.word	0x40021000
 800410c:	40021400 	.word	0x40021400
 8004110:	40021800 	.word	0x40021800
 8004114:	40021c00 	.word	0x40021c00
 8004118:	40013c00 	.word	0x40013c00

0800411c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	887b      	ldrh	r3, [r7, #2]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	e001      	b.n	800413e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800413e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
 8004158:	4613      	mov	r3, r2
 800415a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800415c:	787b      	ldrb	r3, [r7, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004162:	887a      	ldrh	r2, [r7, #2]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004168:	e003      	b.n	8004172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	041a      	lsls	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	619a      	str	r2, [r3, #24]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	887b      	ldrh	r3, [r7, #2]
 8004190:	401a      	ands	r2, r3
 8004192:	887b      	ldrh	r3, [r7, #2]
 8004194:	429a      	cmp	r2, r3
 8004196:	d104      	bne.n	80041a2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004198:	887b      	ldrh	r3, [r7, #2]
 800419a:	041a      	lsls	r2, r3, #16
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80041a0:	e002      	b.n	80041a8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	619a      	str	r2, [r3, #24]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e10f      	b.n	80043e6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff f9f6 	bl	80035cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	; 0x24
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041f8:	f001 fe0a 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 80041fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4a7b      	ldr	r2, [pc, #492]	; (80043f0 <HAL_I2C_Init+0x23c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d807      	bhi.n	8004218 <HAL_I2C_Init+0x64>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a7a      	ldr	r2, [pc, #488]	; (80043f4 <HAL_I2C_Init+0x240>)
 800420c:	4293      	cmp	r3, r2
 800420e:	bf94      	ite	ls
 8004210:	2301      	movls	r3, #1
 8004212:	2300      	movhi	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e006      	b.n	8004226 <HAL_I2C_Init+0x72>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a77      	ldr	r2, [pc, #476]	; (80043f8 <HAL_I2C_Init+0x244>)
 800421c:	4293      	cmp	r3, r2
 800421e:	bf94      	ite	ls
 8004220:	2301      	movls	r3, #1
 8004222:	2300      	movhi	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e0db      	b.n	80043e6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a72      	ldr	r2, [pc, #456]	; (80043fc <HAL_I2C_Init+0x248>)
 8004232:	fba2 2303 	umull	r2, r3, r2, r3
 8004236:	0c9b      	lsrs	r3, r3, #18
 8004238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a64      	ldr	r2, [pc, #400]	; (80043f0 <HAL_I2C_Init+0x23c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d802      	bhi.n	8004268 <HAL_I2C_Init+0xb4>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3301      	adds	r3, #1
 8004266:	e009      	b.n	800427c <HAL_I2C_Init+0xc8>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800426e:	fb02 f303 	mul.w	r3, r2, r3
 8004272:	4a63      	ldr	r2, [pc, #396]	; (8004400 <HAL_I2C_Init+0x24c>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	3301      	adds	r3, #1
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	430b      	orrs	r3, r1
 8004282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800428e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4956      	ldr	r1, [pc, #344]	; (80043f0 <HAL_I2C_Init+0x23c>)
 8004298:	428b      	cmp	r3, r1
 800429a:	d80d      	bhi.n	80042b8 <HAL_I2C_Init+0x104>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	1e59      	subs	r1, r3, #1
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042aa:	3301      	adds	r3, #1
 80042ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	bf38      	it	cc
 80042b4:	2304      	movcc	r3, #4
 80042b6:	e04f      	b.n	8004358 <HAL_I2C_Init+0x1a4>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d111      	bne.n	80042e4 <HAL_I2C_Init+0x130>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1e58      	subs	r0, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	440b      	add	r3, r1
 80042ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf0c      	ite	eq
 80042dc:	2301      	moveq	r3, #1
 80042de:	2300      	movne	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	e012      	b.n	800430a <HAL_I2C_Init+0x156>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1e58      	subs	r0, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	0099      	lsls	r1, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_I2C_Init+0x15e>
 800430e:	2301      	movs	r3, #1
 8004310:	e022      	b.n	8004358 <HAL_I2C_Init+0x1a4>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10e      	bne.n	8004338 <HAL_I2C_Init+0x184>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1e58      	subs	r0, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	440b      	add	r3, r1
 8004328:	fbb0 f3f3 	udiv	r3, r0, r3
 800432c:	3301      	adds	r3, #1
 800432e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004336:	e00f      	b.n	8004358 <HAL_I2C_Init+0x1a4>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e58      	subs	r0, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	0099      	lsls	r1, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	fbb0 f3f3 	udiv	r3, r0, r3
 800434e:	3301      	adds	r3, #1
 8004350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	6809      	ldr	r1, [r1, #0]
 800435c:	4313      	orrs	r3, r2
 800435e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004386:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6911      	ldr	r1, [r2, #16]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68d2      	ldr	r2, [r2, #12]
 8004392:	4311      	orrs	r1, r2
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	430b      	orrs	r3, r1
 800439a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	000186a0 	.word	0x000186a0
 80043f4:	001e847f 	.word	0x001e847f
 80043f8:	003d08ff 	.word	0x003d08ff
 80043fc:	431bde83 	.word	0x431bde83
 8004400:	10624dd3 	.word	0x10624dd3

08004404 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	461a      	mov	r2, r3
 8004410:	460b      	mov	r3, r1
 8004412:	817b      	strh	r3, [r7, #10]
 8004414:	4613      	mov	r3, r2
 8004416:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004418:	f7ff fbb4 	bl	8003b84 <HAL_GetTick>
 800441c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b20      	cmp	r3, #32
 8004428:	f040 80e0 	bne.w	80045ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	2319      	movs	r3, #25
 8004432:	2201      	movs	r2, #1
 8004434:	4970      	ldr	r1, [pc, #448]	; (80045f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 ff2a 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
 8004444:	e0d3      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_I2C_Master_Transmit+0x50>
 8004450:	2302      	movs	r3, #2
 8004452:	e0cc      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d007      	beq.n	800447a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004488:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2221      	movs	r2, #33	; 0x21
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2210      	movs	r2, #16
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	893a      	ldrh	r2, [r7, #8]
 80044aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a50      	ldr	r2, [pc, #320]	; (80045fc <HAL_I2C_Master_Transmit+0x1f8>)
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044bc:	8979      	ldrh	r1, [r7, #10]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	6a3a      	ldr	r2, [r7, #32]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fce8 	bl	8004e98 <I2C_MasterRequestWrite>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e08d      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044e8:	e066      	b.n	80045b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	6a39      	ldr	r1, [r7, #32]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 ffa4 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00d      	beq.n	8004516 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d107      	bne.n	8004512 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004510:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e06b      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b04      	cmp	r3, #4
 8004552:	d11b      	bne.n	800458c <HAL_I2C_Master_Transmit+0x188>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d017      	beq.n	800458c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	6a39      	ldr	r1, [r7, #32]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 ff94 	bl	80054be <I2C_WaitOnBTFFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d107      	bne.n	80045b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e01a      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d194      	bne.n	80044ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e000      	b.n	80045ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
  }
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	00100002 	.word	0x00100002
 80045fc:	ffff0000 	.word	0xffff0000

08004600 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08c      	sub	sp, #48	; 0x30
 8004604:	af02      	add	r7, sp, #8
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	461a      	mov	r2, r3
 800460c:	460b      	mov	r3, r1
 800460e:	817b      	strh	r3, [r7, #10]
 8004610:	4613      	mov	r3, r2
 8004612:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004614:	f7ff fab6 	bl	8003b84 <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b20      	cmp	r3, #32
 8004624:	f040 820b 	bne.w	8004a3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	2319      	movs	r3, #25
 800462e:	2201      	movs	r2, #1
 8004630:	497c      	ldr	r1, [pc, #496]	; (8004824 <HAL_I2C_Master_Receive+0x224>)
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fe2c 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800463e:	2302      	movs	r3, #2
 8004640:	e1fe      	b.n	8004a40 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_I2C_Master_Receive+0x50>
 800464c:	2302      	movs	r3, #2
 800464e:	e1f7      	b.n	8004a40 <HAL_I2C_Master_Receive+0x440>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b01      	cmp	r3, #1
 8004664:	d007      	beq.n	8004676 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004684:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2222      	movs	r2, #34	; 0x22
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2210      	movs	r2, #16
 8004692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	893a      	ldrh	r2, [r7, #8]
 80046a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a5c      	ldr	r2, [pc, #368]	; (8004828 <HAL_I2C_Master_Receive+0x228>)
 80046b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046b8:	8979      	ldrh	r1, [r7, #10]
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fc60 	bl	8004f84 <I2C_MasterRequestRead>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e1b8      	b.n	8004a40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d113      	bne.n	80046fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d6:	2300      	movs	r3, #0
 80046d8:	623b      	str	r3, [r7, #32]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e18c      	b.n	8004a18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004702:	2b01      	cmp	r3, #1
 8004704:	d11b      	bne.n	800473e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	61fb      	str	r3, [r7, #28]
 800472a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e16c      	b.n	8004a18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004742:	2b02      	cmp	r3, #2
 8004744:	d11b      	bne.n	800477e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004766:	2300      	movs	r3, #0
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	61bb      	str	r3, [r7, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	e14c      	b.n	8004a18 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047a4:	e138      	b.n	8004a18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	f200 80f1 	bhi.w	8004992 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d123      	bne.n	8004800 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 febf 	bl	8005540 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e139      	b.n	8004a40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691a      	ldr	r2, [r3, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047fe:	e10b      	b.n	8004a18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004804:	2b02      	cmp	r3, #2
 8004806:	d14e      	bne.n	80048a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	2200      	movs	r2, #0
 8004810:	4906      	ldr	r1, [pc, #24]	; (800482c <HAL_I2C_Master_Receive+0x22c>)
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 fd3c 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e10e      	b.n	8004a40 <HAL_I2C_Master_Receive+0x440>
 8004822:	bf00      	nop
 8004824:	00100002 	.word	0x00100002
 8004828:	ffff0000 	.word	0xffff0000
 800482c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048a4:	e0b8      	b.n	8004a18 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	2200      	movs	r2, #0
 80048ae:	4966      	ldr	r1, [pc, #408]	; (8004a48 <HAL_I2C_Master_Receive+0x448>)
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 fced 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0bf      	b.n	8004a40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	2200      	movs	r2, #0
 800490a:	494f      	ldr	r1, [pc, #316]	; (8004a48 <HAL_I2C_Master_Receive+0x448>)
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fcbf 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e091      	b.n	8004a40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004990:	e042      	b.n	8004a18 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004994:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fdd2 	bl	8005540 <I2C_WaitOnRXNEFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e04c      	b.n	8004a40 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d118      	bne.n	8004a18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	691a      	ldr	r2, [r3, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f47f aec2 	bne.w	80047a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3728      	adds	r7, #40	; 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	00010004 	.word	0x00010004

08004a4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08c      	sub	sp, #48	; 0x30
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	817b      	strh	r3, [r7, #10]
 8004a5e:	460b      	mov	r3, r1
 8004a60:	813b      	strh	r3, [r7, #8]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a66:	f7ff f88d 	bl	8003b84 <HAL_GetTick>
 8004a6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	f040 8208 	bne.w	8004e8a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	2319      	movs	r3, #25
 8004a80:	2201      	movs	r2, #1
 8004a82:	497b      	ldr	r1, [pc, #492]	; (8004c70 <HAL_I2C_Mem_Read+0x224>)
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 fc03 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
 8004a92:	e1fb      	b.n	8004e8c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_Mem_Read+0x56>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e1f4      	b.n	8004e8c <HAL_I2C_Mem_Read+0x440>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d007      	beq.n	8004ac8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2222      	movs	r2, #34	; 0x22
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2240      	movs	r2, #64	; 0x40
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004af8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a5b      	ldr	r2, [pc, #364]	; (8004c74 <HAL_I2C_Mem_Read+0x228>)
 8004b08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b0a:	88f8      	ldrh	r0, [r7, #6]
 8004b0c:	893a      	ldrh	r2, [r7, #8]
 8004b0e:	8979      	ldrh	r1, [r7, #10]
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	9301      	str	r3, [sp, #4]
 8004b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4603      	mov	r3, r0
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fae8 	bl	80050f0 <I2C_RequestMemoryRead>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e1b0      	b.n	8004e8c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d113      	bne.n	8004b5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	623b      	str	r3, [r7, #32]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	e184      	b.n	8004e64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d11b      	bne.n	8004b9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	e164      	b.n	8004e64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d11b      	bne.n	8004bda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	e144      	b.n	8004e64 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bf0:	e138      	b.n	8004e64 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	f200 80f1 	bhi.w	8004dde <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d123      	bne.n	8004c4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fc99 	bl	8005540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e139      	b.n	8004e8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c4a:	e10b      	b.n	8004e64 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d14e      	bne.n	8004cf2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	4906      	ldr	r1, [pc, #24]	; (8004c78 <HAL_I2C_Mem_Read+0x22c>)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 fb16 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e10e      	b.n	8004e8c <HAL_I2C_Mem_Read+0x440>
 8004c6e:	bf00      	nop
 8004c70:	00100002 	.word	0x00100002
 8004c74:	ffff0000 	.word	0xffff0000
 8004c78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cf0:	e0b8      	b.n	8004e64 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4966      	ldr	r1, [pc, #408]	; (8004e94 <HAL_I2C_Mem_Read+0x448>)
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fac7 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0bf      	b.n	8004e8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2200      	movs	r2, #0
 8004d56:	494f      	ldr	r1, [pc, #316]	; (8004e94 <HAL_I2C_Mem_Read+0x448>)
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 fa99 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e091      	b.n	8004e8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ddc:	e042      	b.n	8004e64 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fbac 	bl	8005540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e04c      	b.n	8004e8c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	691a      	ldr	r2, [r3, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d118      	bne.n	8004e64 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f47f aec2 	bne.w	8004bf2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e000      	b.n	8004e8c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e8a:	2302      	movs	r3, #2
  }
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3728      	adds	r7, #40	; 0x28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	00010004 	.word	0x00010004

08004e98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	603b      	str	r3, [r7, #0]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d006      	beq.n	8004ec2 <I2C_MasterRequestWrite+0x2a>
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d003      	beq.n	8004ec2 <I2C_MasterRequestWrite+0x2a>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ec0:	d108      	bne.n	8004ed4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e00b      	b.n	8004eec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	2b12      	cmp	r3, #18
 8004eda:	d107      	bne.n	8004eec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f9c9 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e035      	b.n	8004f74 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f10:	d108      	bne.n	8004f24 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f12:	897b      	ldrh	r3, [r7, #10]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f20:	611a      	str	r2, [r3, #16]
 8004f22:	e01b      	b.n	8004f5c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f24:	897b      	ldrh	r3, [r7, #10]
 8004f26:	11db      	asrs	r3, r3, #7
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	f003 0306 	and.w	r3, r3, #6
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f063 030f 	orn	r3, r3, #15
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	490e      	ldr	r1, [pc, #56]	; (8004f7c <I2C_MasterRequestWrite+0xe4>)
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f9fb 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e010      	b.n	8004f74 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f52:	897b      	ldrh	r3, [r7, #10]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	4907      	ldr	r1, [pc, #28]	; (8004f80 <I2C_MasterRequestWrite+0xe8>)
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f9eb 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e000      	b.n	8004f74 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	00010008 	.word	0x00010008
 8004f80:	00010002 	.word	0x00010002

08004f84 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	460b      	mov	r3, r1
 8004f92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d006      	beq.n	8004fbe <I2C_MasterRequestRead+0x3a>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d003      	beq.n	8004fbe <I2C_MasterRequestRead+0x3a>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fbc:	d108      	bne.n	8004fd0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	e00b      	b.n	8004fe8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	2b11      	cmp	r3, #17
 8004fd6:	d107      	bne.n	8004fe8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f94b 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e06d      	b.n	80050e0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800500c:	d108      	bne.n	8005020 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800500e:	897b      	ldrh	r3, [r7, #10]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	b2da      	uxtb	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	611a      	str	r2, [r3, #16]
 800501e:	e053      	b.n	80050c8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005020:	897b      	ldrh	r3, [r7, #10]
 8005022:	11db      	asrs	r3, r3, #7
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f003 0306 	and.w	r3, r3, #6
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f063 030f 	orn	r3, r3, #15
 8005030:	b2da      	uxtb	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	492a      	ldr	r1, [pc, #168]	; (80050e8 <I2C_MasterRequestRead+0x164>)
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f97d 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e048      	b.n	80050e0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800504e:	897b      	ldrh	r3, [r7, #10]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4923      	ldr	r1, [pc, #140]	; (80050ec <I2C_MasterRequestRead+0x168>)
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f96d 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e038      	b.n	80050e0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005092:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f8f5 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e017      	b.n	80050e0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80050b0:	897b      	ldrh	r3, [r7, #10]
 80050b2:	11db      	asrs	r3, r3, #7
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	f003 0306 	and.w	r3, r3, #6
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	f063 030e 	orn	r3, r3, #14
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	4907      	ldr	r1, [pc, #28]	; (80050ec <I2C_MasterRequestRead+0x168>)
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f935 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3718      	adds	r7, #24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	00010008 	.word	0x00010008
 80050ec:	00010002 	.word	0x00010002

080050f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	4608      	mov	r0, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	817b      	strh	r3, [r7, #10]
 8005102:	460b      	mov	r3, r1
 8005104:	813b      	strh	r3, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005118:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	2200      	movs	r2, #0
 8005132:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f8aa 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e09e      	b.n	8005284 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005146:	897b      	ldrh	r3, [r7, #10]
 8005148:	b2db      	uxtb	r3, r3
 800514a:	461a      	mov	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005154:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	6a3a      	ldr	r2, [r7, #32]
 800515a:	494c      	ldr	r1, [pc, #304]	; (800528c <I2C_RequestMemoryRead+0x19c>)
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f8ee 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e08b      	b.n	8005284 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005184:	6a39      	ldr	r1, [r7, #32]
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f958 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00d      	beq.n	80051ae <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	2b04      	cmp	r3, #4
 8005198:	d107      	bne.n	80051aa <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e06a      	b.n	8005284 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d105      	bne.n	80051c0 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051b4:	893b      	ldrh	r3, [r7, #8]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	611a      	str	r2, [r3, #16]
 80051be:	e021      	b.n	8005204 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051c0:	893b      	ldrh	r3, [r7, #8]
 80051c2:	0a1b      	lsrs	r3, r3, #8
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6a39      	ldr	r1, [r7, #32]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f932 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d107      	bne.n	80051f6 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e044      	b.n	8005284 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051fa:	893b      	ldrh	r3, [r7, #8]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005206:	6a39      	ldr	r1, [r7, #32]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f917 	bl	800543c <I2C_WaitOnTXEFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00d      	beq.n	8005230 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	2b04      	cmp	r3, #4
 800521a:	d107      	bne.n	800522c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e029      	b.n	8005284 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2200      	movs	r2, #0
 8005248:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f81f 	bl	8005290 <I2C_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e013      	b.n	8005284 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800525c:	897b      	ldrh	r3, [r7, #10]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	6a3a      	ldr	r2, [r7, #32]
 8005270:	4906      	ldr	r1, [pc, #24]	; (800528c <I2C_RequestMemoryRead+0x19c>)
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f863 	bl	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3718      	adds	r7, #24
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	00010002 	.word	0x00010002

08005290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	4613      	mov	r3, r2
 800529e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a0:	e025      	b.n	80052ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a8:	d021      	beq.n	80052ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052aa:	f7fe fc6b 	bl	8003b84 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d302      	bcc.n	80052c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d116      	bne.n	80052ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e023      	b.n	8005336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	0c1b      	lsrs	r3, r3, #16
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d10d      	bne.n	8005314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	43da      	mvns	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4013      	ands	r3, r2
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf0c      	ite	eq
 800530a:	2301      	moveq	r3, #1
 800530c:	2300      	movne	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	e00c      	b.n	800532e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	43da      	mvns	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4013      	ands	r3, r2
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	bf0c      	ite	eq
 8005326:	2301      	moveq	r3, #1
 8005328:	2300      	movne	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	429a      	cmp	r2, r3
 8005332:	d0b6      	beq.n	80052a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800534c:	e051      	b.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535c:	d123      	bne.n	80053a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f043 0204 	orr.w	r2, r3, #4
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e046      	b.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ac:	d021      	beq.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fe fbe9 	bl	8003b84 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d302      	bcc.n	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d116      	bne.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	f043 0220 	orr.w	r2, r3, #32
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e020      	b.n	8005434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	0c1b      	lsrs	r3, r3, #16
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10c      	bne.n	8005416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	43da      	mvns	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4013      	ands	r3, r2
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	bf14      	ite	ne
 800540e:	2301      	movne	r3, #1
 8005410:	2300      	moveq	r3, #0
 8005412:	b2db      	uxtb	r3, r3
 8005414:	e00b      	b.n	800542e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	43da      	mvns	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	4013      	ands	r3, r2
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d18d      	bne.n	800534e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005448:	e02d      	b.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f8ce 	bl	80055ec <I2C_IsAcknowledgeFailed>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e02d      	b.n	80054b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d021      	beq.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7fe fb8f 	bl	8003b84 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d116      	bne.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e007      	b.n	80054b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b0:	2b80      	cmp	r3, #128	; 0x80
 80054b2:	d1ca      	bne.n	800544a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054ca:	e02d      	b.n	8005528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f88d 	bl	80055ec <I2C_IsAcknowledgeFailed>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e02d      	b.n	8005538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d021      	beq.n	8005528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e4:	f7fe fb4e 	bl	8003b84 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d302      	bcc.n	80054fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d116      	bne.n	8005528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	f043 0220 	orr.w	r2, r3, #32
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e007      	b.n	8005538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b04      	cmp	r3, #4
 8005534:	d1ca      	bne.n	80054cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800554c:	e042      	b.n	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b10      	cmp	r3, #16
 800555a:	d119      	bne.n	8005590 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f06f 0210 	mvn.w	r2, #16
 8005564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e029      	b.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005590:	f7fe faf8 	bl	8003b84 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	429a      	cmp	r2, r3
 800559e:	d302      	bcc.n	80055a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d116      	bne.n	80055d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	f043 0220 	orr.w	r2, r3, #32
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e007      	b.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d1b5      	bne.n	800554e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005602:	d11b      	bne.n	800563c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800560c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	f043 0204 	orr.w	r2, r3, #4
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e22d      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d075      	beq.n	8005756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800566a:	4ba3      	ldr	r3, [pc, #652]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b04      	cmp	r3, #4
 8005674:	d00c      	beq.n	8005690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005676:	4ba0      	ldr	r3, [pc, #640]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800567e:	2b08      	cmp	r3, #8
 8005680:	d112      	bne.n	80056a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005682:	4b9d      	ldr	r3, [pc, #628]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568e:	d10b      	bne.n	80056a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005690:	4b99      	ldr	r3, [pc, #612]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d05b      	beq.n	8005754 <HAL_RCC_OscConfig+0x108>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d157      	bne.n	8005754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e208      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b0:	d106      	bne.n	80056c0 <HAL_RCC_OscConfig+0x74>
 80056b2:	4b91      	ldr	r3, [pc, #580]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a90      	ldr	r2, [pc, #576]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	e01d      	b.n	80056fc <HAL_RCC_OscConfig+0xb0>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056c8:	d10c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x98>
 80056ca:	4b8b      	ldr	r3, [pc, #556]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a8a      	ldr	r2, [pc, #552]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056d4:	6013      	str	r3, [r2, #0]
 80056d6:	4b88      	ldr	r3, [pc, #544]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a87      	ldr	r2, [pc, #540]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	e00b      	b.n	80056fc <HAL_RCC_OscConfig+0xb0>
 80056e4:	4b84      	ldr	r3, [pc, #528]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a83      	ldr	r2, [pc, #524]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	4b81      	ldr	r3, [pc, #516]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a80      	ldr	r2, [pc, #512]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80056f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d013      	beq.n	800572c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f7fe fa3e 	bl	8003b84 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800570c:	f7fe fa3a 	bl	8003b84 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b64      	cmp	r3, #100	; 0x64
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e1cd      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571e:	4b76      	ldr	r3, [pc, #472]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0xc0>
 800572a:	e014      	b.n	8005756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572c:	f7fe fa2a 	bl	8003b84 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005734:	f7fe fa26 	bl	8003b84 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b64      	cmp	r3, #100	; 0x64
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e1b9      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005746:	4b6c      	ldr	r3, [pc, #432]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f0      	bne.n	8005734 <HAL_RCC_OscConfig+0xe8>
 8005752:	e000      	b.n	8005756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d063      	beq.n	800582a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005762:	4b65      	ldr	r3, [pc, #404]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 030c 	and.w	r3, r3, #12
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576e:	4b62      	ldr	r3, [pc, #392]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005776:	2b08      	cmp	r3, #8
 8005778:	d11c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800577a:	4b5f      	ldr	r3, [pc, #380]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d116      	bne.n	80057b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005786:	4b5c      	ldr	r3, [pc, #368]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d005      	beq.n	800579e <HAL_RCC_OscConfig+0x152>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d001      	beq.n	800579e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e18d      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579e:	4b56      	ldr	r3, [pc, #344]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	4952      	ldr	r1, [pc, #328]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057b2:	e03a      	b.n	800582a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d020      	beq.n	80057fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057bc:	4b4f      	ldr	r3, [pc, #316]	; (80058fc <HAL_RCC_OscConfig+0x2b0>)
 80057be:	2201      	movs	r2, #1
 80057c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c2:	f7fe f9df 	bl	8003b84 <HAL_GetTick>
 80057c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ca:	f7fe f9db 	bl	8003b84 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e16e      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057dc:	4b46      	ldr	r3, [pc, #280]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e8:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4940      	ldr	r1, [pc, #256]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	600b      	str	r3, [r1, #0]
 80057fc:	e015      	b.n	800582a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057fe:	4b3f      	ldr	r3, [pc, #252]	; (80058fc <HAL_RCC_OscConfig+0x2b0>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005804:	f7fe f9be 	bl	8003b84 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800580c:	f7fe f9ba 	bl	8003b84 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e14d      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800581e:	4b36      	ldr	r3, [pc, #216]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d030      	beq.n	8005898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d016      	beq.n	800586c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800583e:	4b30      	ldr	r3, [pc, #192]	; (8005900 <HAL_RCC_OscConfig+0x2b4>)
 8005840:	2201      	movs	r2, #1
 8005842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005844:	f7fe f99e 	bl	8003b84 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800584c:	f7fe f99a 	bl	8003b84 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e12d      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585e:	4b26      	ldr	r3, [pc, #152]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 8005860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005862:	f003 0302 	and.w	r3, r3, #2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f0      	beq.n	800584c <HAL_RCC_OscConfig+0x200>
 800586a:	e015      	b.n	8005898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800586c:	4b24      	ldr	r3, [pc, #144]	; (8005900 <HAL_RCC_OscConfig+0x2b4>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005872:	f7fe f987 	bl	8003b84 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800587a:	f7fe f983 	bl	8003b84 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e116      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800588c:	4b1a      	ldr	r3, [pc, #104]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 800588e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f0      	bne.n	800587a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80a0 	beq.w	80059e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10f      	bne.n	80058d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	4a0e      	ldr	r2, [pc, #56]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80058c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058c4:	6413      	str	r3, [r2, #64]	; 0x40
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d6:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <HAL_RCC_OscConfig+0x2b8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d121      	bne.n	8005926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058e2:	4b08      	ldr	r3, [pc, #32]	; (8005904 <HAL_RCC_OscConfig+0x2b8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a07      	ldr	r2, [pc, #28]	; (8005904 <HAL_RCC_OscConfig+0x2b8>)
 80058e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ee:	f7fe f949 	bl	8003b84 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f4:	e011      	b.n	800591a <HAL_RCC_OscConfig+0x2ce>
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800
 80058fc:	42470000 	.word	0x42470000
 8005900:	42470e80 	.word	0x42470e80
 8005904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005908:	f7fe f93c 	bl	8003b84 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e0cf      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591a:	4b6a      	ldr	r3, [pc, #424]	; (8005ac4 <HAL_RCC_OscConfig+0x478>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d106      	bne.n	800593c <HAL_RCC_OscConfig+0x2f0>
 800592e:	4b66      	ldr	r3, [pc, #408]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005932:	4a65      	ldr	r2, [pc, #404]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	6713      	str	r3, [r2, #112]	; 0x70
 800593a:	e01c      	b.n	8005976 <HAL_RCC_OscConfig+0x32a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b05      	cmp	r3, #5
 8005942:	d10c      	bne.n	800595e <HAL_RCC_OscConfig+0x312>
 8005944:	4b60      	ldr	r3, [pc, #384]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005948:	4a5f      	ldr	r2, [pc, #380]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 800594a:	f043 0304 	orr.w	r3, r3, #4
 800594e:	6713      	str	r3, [r2, #112]	; 0x70
 8005950:	4b5d      	ldr	r3, [pc, #372]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	4a5c      	ldr	r2, [pc, #368]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	6713      	str	r3, [r2, #112]	; 0x70
 800595c:	e00b      	b.n	8005976 <HAL_RCC_OscConfig+0x32a>
 800595e:	4b5a      	ldr	r3, [pc, #360]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005962:	4a59      	ldr	r2, [pc, #356]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005964:	f023 0301 	bic.w	r3, r3, #1
 8005968:	6713      	str	r3, [r2, #112]	; 0x70
 800596a:	4b57      	ldr	r3, [pc, #348]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596e:	4a56      	ldr	r2, [pc, #344]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005970:	f023 0304 	bic.w	r3, r3, #4
 8005974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d015      	beq.n	80059aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597e:	f7fe f901 	bl	8003b84 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005984:	e00a      	b.n	800599c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f7fe f8fd 	bl	8003b84 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	; 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e08e      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599c:	4b4a      	ldr	r3, [pc, #296]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 800599e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ee      	beq.n	8005986 <HAL_RCC_OscConfig+0x33a>
 80059a8:	e014      	b.n	80059d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059aa:	f7fe f8eb 	bl	8003b84 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b0:	e00a      	b.n	80059c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fe f8e7 	bl	8003b84 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e078      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059c8:	4b3f      	ldr	r3, [pc, #252]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1ee      	bne.n	80059b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059d4:	7dfb      	ldrb	r3, [r7, #23]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d105      	bne.n	80059e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059da:	4b3b      	ldr	r3, [pc, #236]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	4a3a      	ldr	r2, [pc, #232]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 80059e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d064      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059ee:	4b36      	ldr	r3, [pc, #216]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d05c      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d141      	bne.n	8005a86 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a02:	4b32      	ldr	r3, [pc, #200]	; (8005acc <HAL_RCC_OscConfig+0x480>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a08:	f7fe f8bc 	bl	8003b84 <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a10:	f7fe f8b8 	bl	8003b84 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e04b      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a22:	4b29      	ldr	r3, [pc, #164]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	69da      	ldr	r2, [r3, #28]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	085b      	lsrs	r3, r3, #1
 8005a46:	3b01      	subs	r3, #1
 8005a48:	041b      	lsls	r3, r3, #16
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	061b      	lsls	r3, r3, #24
 8005a52:	491d      	ldr	r1, [pc, #116]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a58:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <HAL_RCC_OscConfig+0x480>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5e:	f7fe f891 	bl	8003b84 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a66:	f7fe f88d 	bl	8003b84 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e020      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a78:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCC_OscConfig+0x41a>
 8005a84:	e018      	b.n	8005ab8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <HAL_RCC_OscConfig+0x480>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8c:	f7fe f87a 	bl	8003b84 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a94:	f7fe f876 	bl	8003b84 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e009      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa6:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <HAL_RCC_OscConfig+0x47c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f0      	bne.n	8005a94 <HAL_RCC_OscConfig+0x448>
 8005ab2:	e001      	b.n	8005ab8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40007000 	.word	0x40007000
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	42470060 	.word	0x42470060

08005ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0ca      	b.n	8005c7a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae4:	4b67      	ldr	r3, [pc, #412]	; (8005c84 <HAL_RCC_ClockConfig+0x1b4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d90c      	bls.n	8005b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af2:	4b64      	ldr	r3, [pc, #400]	; (8005c84 <HAL_RCC_ClockConfig+0x1b4>)
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afa:	4b62      	ldr	r3, [pc, #392]	; (8005c84 <HAL_RCC_ClockConfig+0x1b4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d001      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0b6      	b.n	8005c7a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d020      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b24:	4b58      	ldr	r3, [pc, #352]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	4a57      	ldr	r2, [pc, #348]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b3c:	4b52      	ldr	r3, [pc, #328]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	4a51      	ldr	r2, [pc, #324]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b48:	4b4f      	ldr	r3, [pc, #316]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	494c      	ldr	r1, [pc, #304]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d044      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d107      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6e:	4b46      	ldr	r3, [pc, #280]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d119      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e07d      	b.n	8005c7a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d003      	beq.n	8005b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8e:	4b3e      	ldr	r3, [pc, #248]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e06d      	b.n	8005c7a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b9e:	4b3a      	ldr	r3, [pc, #232]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e065      	b.n	8005c7a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bae:	4b36      	ldr	r3, [pc, #216]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f023 0203 	bic.w	r2, r3, #3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4933      	ldr	r1, [pc, #204]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bc0:	f7fd ffe0 	bl	8003b84 <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc6:	e00a      	b.n	8005bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bc8:	f7fd ffdc 	bl	8003b84 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e04d      	b.n	8005c7a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bde:	4b2a      	ldr	r3, [pc, #168]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 020c 	and.w	r2, r3, #12
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d1eb      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bf0:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <HAL_RCC_ClockConfig+0x1b4>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d20c      	bcs.n	8005c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bfe:	4b21      	ldr	r3, [pc, #132]	; (8005c84 <HAL_RCC_ClockConfig+0x1b4>)
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c06:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <HAL_RCC_ClockConfig+0x1b4>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d001      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e030      	b.n	8005c7a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d008      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c24:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	4915      	ldr	r1, [pc, #84]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	490d      	ldr	r1, [pc, #52]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c56:	f000 f81d 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005c5a:	4601      	mov	r1, r0
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <HAL_RCC_ClockConfig+0x1b8>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	091b      	lsrs	r3, r3, #4
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	4a09      	ldr	r2, [pc, #36]	; (8005c8c <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	5cd3      	ldrb	r3, [r2, r3]
 8005c6a:	fa21 f303 	lsr.w	r3, r1, r3
 8005c6e:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <HAL_RCC_ClockConfig+0x1c0>)
 8005c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005c72:	2000      	movs	r0, #0
 8005c74:	f7fd fe3c 	bl	80038f0 <HAL_InitTick>

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40023c00 	.word	0x40023c00
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	0800b538 	.word	0x0800b538
 8005c90:	20000494 	.word	0x20000494

08005c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005caa:	4b50      	ldr	r3, [pc, #320]	; (8005dec <HAL_RCC_GetSysClockFreq+0x158>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 030c 	and.w	r3, r3, #12
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d007      	beq.n	8005cc6 <HAL_RCC_GetSysClockFreq+0x32>
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d008      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0x38>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f040 808d 	bne.w	8005dda <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005cc0:	4b4b      	ldr	r3, [pc, #300]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005cc2:	60bb      	str	r3, [r7, #8]
       break;
 8005cc4:	e08c      	b.n	8005de0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cc6:	4b4b      	ldr	r3, [pc, #300]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005cc8:	60bb      	str	r3, [r7, #8]
      break;
 8005cca:	e089      	b.n	8005de0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ccc:	4b47      	ldr	r3, [pc, #284]	; (8005dec <HAL_RCC_GetSysClockFreq+0x158>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cd6:	4b45      	ldr	r3, [pc, #276]	; (8005dec <HAL_RCC_GetSysClockFreq+0x158>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d023      	beq.n	8005d2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ce2:	4b42      	ldr	r3, [pc, #264]	; (8005dec <HAL_RCC_GetSysClockFreq+0x158>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	099b      	lsrs	r3, r3, #6
 8005ce8:	f04f 0400 	mov.w	r4, #0
 8005cec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	ea03 0501 	and.w	r5, r3, r1
 8005cf8:	ea04 0602 	and.w	r6, r4, r2
 8005cfc:	4a3d      	ldr	r2, [pc, #244]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005cfe:	fb02 f106 	mul.w	r1, r2, r6
 8005d02:	2200      	movs	r2, #0
 8005d04:	fb02 f205 	mul.w	r2, r2, r5
 8005d08:	440a      	add	r2, r1
 8005d0a:	493a      	ldr	r1, [pc, #232]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d0c:	fba5 0101 	umull	r0, r1, r5, r1
 8005d10:	1853      	adds	r3, r2, r1
 8005d12:	4619      	mov	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f04f 0400 	mov.w	r4, #0
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	f7fa ff43 	bl	8000ba8 <__aeabi_uldivmod>
 8005d22:	4603      	mov	r3, r0
 8005d24:	460c      	mov	r4, r1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e049      	b.n	8005dbe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d2a:	4b30      	ldr	r3, [pc, #192]	; (8005dec <HAL_RCC_GetSysClockFreq+0x158>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	099b      	lsrs	r3, r3, #6
 8005d30:	f04f 0400 	mov.w	r4, #0
 8005d34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	ea03 0501 	and.w	r5, r3, r1
 8005d40:	ea04 0602 	and.w	r6, r4, r2
 8005d44:	4629      	mov	r1, r5
 8005d46:	4632      	mov	r2, r6
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	f04f 0400 	mov.w	r4, #0
 8005d50:	0154      	lsls	r4, r2, #5
 8005d52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d56:	014b      	lsls	r3, r1, #5
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	1b49      	subs	r1, r1, r5
 8005d5e:	eb62 0206 	sbc.w	r2, r2, r6
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	f04f 0400 	mov.w	r4, #0
 8005d6a:	0194      	lsls	r4, r2, #6
 8005d6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005d70:	018b      	lsls	r3, r1, #6
 8005d72:	1a5b      	subs	r3, r3, r1
 8005d74:	eb64 0402 	sbc.w	r4, r4, r2
 8005d78:	f04f 0100 	mov.w	r1, #0
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	00e2      	lsls	r2, r4, #3
 8005d82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005d86:	00d9      	lsls	r1, r3, #3
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4614      	mov	r4, r2
 8005d8c:	195b      	adds	r3, r3, r5
 8005d8e:	eb44 0406 	adc.w	r4, r4, r6
 8005d92:	f04f 0100 	mov.w	r1, #0
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	02a2      	lsls	r2, r4, #10
 8005d9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005da0:	0299      	lsls	r1, r3, #10
 8005da2:	460b      	mov	r3, r1
 8005da4:	4614      	mov	r4, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	4621      	mov	r1, r4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f04f 0400 	mov.w	r4, #0
 8005db0:	461a      	mov	r2, r3
 8005db2:	4623      	mov	r3, r4
 8005db4:	f7fa fef8 	bl	8000ba8 <__aeabi_uldivmod>
 8005db8:	4603      	mov	r3, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_RCC_GetSysClockFreq+0x158>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	0c1b      	lsrs	r3, r3, #16
 8005dc4:	f003 0303 	and.w	r3, r3, #3
 8005dc8:	3301      	adds	r3, #1
 8005dca:	005b      	lsls	r3, r3, #1
 8005dcc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd6:	60bb      	str	r3, [r7, #8]
      break;
 8005dd8:	e002      	b.n	8005de0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005ddc:	60bb      	str	r3, [r7, #8]
      break;
 8005dde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005de0:	68bb      	ldr	r3, [r7, #8]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40023800 	.word	0x40023800
 8005df0:	00f42400 	.word	0x00f42400
 8005df4:	017d7840 	.word	0x017d7840

08005df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dfc:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000494 	.word	0x20000494

08005e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e14:	f7ff fff0 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e18:	4601      	mov	r1, r0
 8005e1a:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	0a9b      	lsrs	r3, r3, #10
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	4a03      	ldr	r2, [pc, #12]	; (8005e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e26:	5cd3      	ldrb	r3, [r2, r3]
 8005e28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40023800 	.word	0x40023800
 8005e34:	0800b548 	.word	0x0800b548

08005e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e3c:	f7ff ffdc 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e40:	4601      	mov	r1, r0
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	0b5b      	lsrs	r3, r3, #13
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	4a03      	ldr	r2, [pc, #12]	; (8005e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e4e:	5cd3      	ldrb	r3, [r2, r3]
 8005e50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	0800b548 	.word	0x0800b548

08005e60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	220f      	movs	r2, #15
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e70:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <HAL_RCC_GetClockConfig+0x5c>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 0203 	and.w	r2, r3, #3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	; (8005ebc <HAL_RCC_GetClockConfig+0x5c>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e88:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <HAL_RCC_GetClockConfig+0x5c>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e94:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <HAL_RCC_GetClockConfig+0x5c>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	08db      	lsrs	r3, r3, #3
 8005e9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ea2:	4b07      	ldr	r3, [pc, #28]	; (8005ec0 <HAL_RCC_GetClockConfig+0x60>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 020f 	and.w	r2, r3, #15
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	601a      	str	r2, [r3, #0]
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	40023c00 	.word	0x40023c00

08005ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e01d      	b.n	8005f12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f815 	bl	8005f1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f000 f968 	bl	80061d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0201 	orr.w	r2, r2, #1
 8005f44:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b06      	cmp	r3, #6
 8005f56:	d007      	beq.n	8005f68 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d122      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d11b      	bne.n	8005fd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f06f 0202 	mvn.w	r2, #2
 8005fa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f003 0303 	and.w	r3, r3, #3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f8ee 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 8005fbe:	e005      	b.n	8005fcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f8e0 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f8f1 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d122      	bne.n	8006026 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f003 0304 	and.w	r3, r3, #4
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d11b      	bne.n	8006026 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f06f 0204 	mvn.w	r2, #4
 8005ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f8c4 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 8006012:	e005      	b.n	8006020 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f8b6 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8c7 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f003 0308 	and.w	r3, r3, #8
 8006030:	2b08      	cmp	r3, #8
 8006032:	d122      	bne.n	800607a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b08      	cmp	r3, #8
 8006040:	d11b      	bne.n	800607a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0208 	mvn.w	r2, #8
 800604a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2204      	movs	r2, #4
 8006050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f89a 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 8006066:	e005      	b.n	8006074 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f88c 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f89d 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	f003 0310 	and.w	r3, r3, #16
 8006084:	2b10      	cmp	r3, #16
 8006086:	d122      	bne.n	80060ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2b10      	cmp	r3, #16
 8006094:	d11b      	bne.n	80060ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0210 	mvn.w	r2, #16
 800609e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2208      	movs	r2, #8
 80060a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f870 	bl	800619a <HAL_TIM_IC_CaptureCallback>
 80060ba:	e005      	b.n	80060c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f862 	bl	8006186 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f873 	bl	80061ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d10e      	bne.n	80060fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d107      	bne.n	80060fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f06f 0201 	mvn.w	r2, #1
 80060f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fd fa23 	bl	8003540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006104:	2b80      	cmp	r3, #128	; 0x80
 8006106:	d10e      	bne.n	8006126 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006112:	2b80      	cmp	r3, #128	; 0x80
 8006114:	d107      	bne.n	8006126 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800611e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f903 	bl	800632c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006130:	2b40      	cmp	r3, #64	; 0x40
 8006132:	d10e      	bne.n	8006152 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d107      	bne.n	8006152 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800614a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f838 	bl	80061c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b20      	cmp	r3, #32
 800615e:	d10e      	bne.n	800617e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f003 0320 	and.w	r3, r3, #32
 800616a:	2b20      	cmp	r3, #32
 800616c:	d107      	bne.n	800617e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f06f 0220 	mvn.w	r2, #32
 8006176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f8cd 	bl	8006318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
	...

080061d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a40      	ldr	r2, [pc, #256]	; (80062ec <TIM_Base_SetConfig+0x114>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f6:	d00f      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a3d      	ldr	r2, [pc, #244]	; (80062f0 <TIM_Base_SetConfig+0x118>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00b      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a3c      	ldr	r2, [pc, #240]	; (80062f4 <TIM_Base_SetConfig+0x11c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d007      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a3b      	ldr	r2, [pc, #236]	; (80062f8 <TIM_Base_SetConfig+0x120>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d003      	beq.n	8006218 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a3a      	ldr	r2, [pc, #232]	; (80062fc <TIM_Base_SetConfig+0x124>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d108      	bne.n	800622a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a2f      	ldr	r2, [pc, #188]	; (80062ec <TIM_Base_SetConfig+0x114>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d02b      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006238:	d027      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2c      	ldr	r2, [pc, #176]	; (80062f0 <TIM_Base_SetConfig+0x118>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d023      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2b      	ldr	r2, [pc, #172]	; (80062f4 <TIM_Base_SetConfig+0x11c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01f      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2a      	ldr	r2, [pc, #168]	; (80062f8 <TIM_Base_SetConfig+0x120>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d01b      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a29      	ldr	r2, [pc, #164]	; (80062fc <TIM_Base_SetConfig+0x124>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d017      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a28      	ldr	r2, [pc, #160]	; (8006300 <TIM_Base_SetConfig+0x128>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a27      	ldr	r2, [pc, #156]	; (8006304 <TIM_Base_SetConfig+0x12c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d00f      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a26      	ldr	r2, [pc, #152]	; (8006308 <TIM_Base_SetConfig+0x130>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00b      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a25      	ldr	r2, [pc, #148]	; (800630c <TIM_Base_SetConfig+0x134>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d007      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a24      	ldr	r2, [pc, #144]	; (8006310 <TIM_Base_SetConfig+0x138>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a23      	ldr	r2, [pc, #140]	; (8006314 <TIM_Base_SetConfig+0x13c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d108      	bne.n	800629c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <TIM_Base_SetConfig+0x114>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_Base_SetConfig+0xf8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a0c      	ldr	r2, [pc, #48]	; (80062fc <TIM_Base_SetConfig+0x124>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d103      	bne.n	80062d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	615a      	str	r2, [r3, #20]
}
 80062de:	bf00      	nop
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40010000 	.word	0x40010000
 80062f0:	40000400 	.word	0x40000400
 80062f4:	40000800 	.word	0x40000800
 80062f8:	40000c00 	.word	0x40000c00
 80062fc:	40010400 	.word	0x40010400
 8006300:	40014000 	.word	0x40014000
 8006304:	40014400 	.word	0x40014400
 8006308:	40014800 	.word	0x40014800
 800630c:	40001800 	.word	0x40001800
 8006310:	40001c00 	.word	0x40001c00
 8006314:	40002000 	.word	0x40002000

08006318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e03f      	b.n	80063d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fd fa06 	bl	8003778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2224      	movs	r2, #36	; 0x24
 8006370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fb47 	bl	8006a18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	691a      	ldr	r2, [r3, #16]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695a      	ldr	r2, [r3, #20]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b088      	sub	sp, #32
 80063de:	af02      	add	r7, sp, #8
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	603b      	str	r3, [r7, #0]
 80063e6:	4613      	mov	r3, r2
 80063e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	f040 8083 	bne.w	8006502 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <HAL_UART_Transmit+0x2e>
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e07b      	b.n	8006504 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_UART_Transmit+0x40>
 8006416:	2302      	movs	r3, #2
 8006418:	e074      	b.n	8006504 <HAL_UART_Transmit+0x12a>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2221      	movs	r2, #33	; 0x21
 800642c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006430:	f7fd fba8 	bl	8003b84 <HAL_GetTick>
 8006434:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	88fa      	ldrh	r2, [r7, #6]
 800643a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006442:	e042      	b.n	80064ca <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645a:	d122      	bne.n	80064a2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2200      	movs	r2, #0
 8006464:	2180      	movs	r1, #128	; 0x80
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 f96a 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e046      	b.n	8006504 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006488:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	3302      	adds	r3, #2
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	e017      	b.n	80064ca <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	3301      	adds	r3, #1
 800649e:	60bb      	str	r3, [r7, #8]
 80064a0:	e013      	b.n	80064ca <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2200      	movs	r2, #0
 80064aa:	2180      	movs	r1, #128	; 0x80
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f947 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e023      	b.n	8006504 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	60ba      	str	r2, [r7, #8]
 80064c2:	781a      	ldrb	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1b7      	bne.n	8006444 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2200      	movs	r2, #0
 80064dc:	2140      	movs	r1, #64	; 0x40
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 f92e 	bl	8006740 <UART_WaitOnFlagUntilTimeout>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e00a      	b.n	8006504 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	e000      	b.n	8006504 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006502:	2302      	movs	r3, #2
  }
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800652c:	2300      	movs	r3, #0
 800652e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10d      	bne.n	800655e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <HAL_UART_IRQHandler+0x52>
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f003 0320 	and.w	r3, r3, #32
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f9dc 	bl	8006914 <UART_Receive_IT>
      return;
 800655c:	e0cc      	b.n	80066f8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80ab 	beq.w	80066bc <HAL_UART_IRQHandler+0x1b0>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <HAL_UART_IRQHandler+0x70>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 80a0 	beq.w	80066bc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <HAL_UART_IRQHandler+0x90>
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006594:	f043 0201 	orr.w	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_UART_IRQHandler+0xb0>
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b4:	f043 0202 	orr.w	r2, r3, #2
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00a      	beq.n	80065dc <HAL_UART_IRQHandler+0xd0>
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	f043 0204 	orr.w	r2, r3, #4
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <HAL_UART_IRQHandler+0xf0>
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f4:	f043 0208 	orr.w	r2, r3, #8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d078      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d007      	beq.n	800661e <HAL_UART_IRQHandler+0x112>
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	f003 0320 	and.w	r3, r3, #32
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f97b 	bl	8006914 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	bf0c      	ite	eq
 800662c:	2301      	moveq	r3, #1
 800662e:	2300      	movne	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d102      	bne.n	8006646 <HAL_UART_IRQHandler+0x13a>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d031      	beq.n	80066aa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f8c4 	bl	80067d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d123      	bne.n	80066a2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695a      	ldr	r2, [r3, #20]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006668:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	2b00      	cmp	r3, #0
 8006670:	d013      	beq.n	800669a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006676:	4a22      	ldr	r2, [pc, #136]	; (8006700 <HAL_UART_IRQHandler+0x1f4>)
 8006678:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667e:	4618      	mov	r0, r3
 8006680:	f7fd fb90 	bl	8003da4 <HAL_DMA_Abort_IT>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d016      	beq.n	80066b8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006694:	4610      	mov	r0, r2
 8006696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006698:	e00e      	b.n	80066b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f846 	bl	800672c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	e00a      	b.n	80066b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f842 	bl	800672c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a8:	e006      	b.n	80066b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f83e 	bl	800672c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80066b6:	e01e      	b.n	80066f6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b8:	bf00      	nop
    return;
 80066ba:	e01c      	b.n	80066f6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d008      	beq.n	80066d8 <HAL_UART_IRQHandler+0x1cc>
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f8b1 	bl	8006838 <UART_Transmit_IT>
    return;
 80066d6:	e00f      	b.n	80066f8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <HAL_UART_IRQHandler+0x1ec>
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f8f9 	bl	80068e4 <UART_EndTransmit_IT>
    return;
 80066f2:	bf00      	nop
 80066f4:	e000      	b.n	80066f8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80066f6:	bf00      	nop
  }
}
 80066f8:	3720      	adds	r7, #32
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	08006811 	.word	0x08006811

08006704 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	603b      	str	r3, [r7, #0]
 800674c:	4613      	mov	r3, r2
 800674e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006750:	e02c      	b.n	80067ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d028      	beq.n	80067ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <UART_WaitOnFlagUntilTimeout+0x30>
 8006760:	f7fd fa10 	bl	8003b84 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	429a      	cmp	r2, r3
 800676e:	d21d      	bcs.n	80067ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800677e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695a      	ldr	r2, [r3, #20]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0201 	bic.w	r2, r2, #1
 800678e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e00f      	b.n	80067cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4013      	ands	r3, r2
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d0c3      	beq.n	8006752 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80067ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695a      	ldr	r2, [r3, #20]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0201 	bic.w	r2, r2, #1
 80067fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f7ff ff7e 	bl	800672c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006830:	bf00      	nop
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b21      	cmp	r3, #33	; 0x21
 800684a:	d144      	bne.n	80068d6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006854:	d11a      	bne.n	800688c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800686a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d105      	bne.n	8006880 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	1c9a      	adds	r2, r3, #2
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	621a      	str	r2, [r3, #32]
 800687e:	e00e      	b.n	800689e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	621a      	str	r2, [r3, #32]
 800688a:	e008      	b.n	800689e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	1c59      	adds	r1, r3, #1
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6211      	str	r1, [r2, #32]
 8006896:	781a      	ldrb	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	4619      	mov	r1, r3
 80068ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10f      	bne.n	80068d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e000      	b.n	80068d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80068d6:	2302      	movs	r3, #2
  }
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff fefd 	bl	8006704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b22      	cmp	r3, #34	; 0x22
 8006926:	d171      	bne.n	8006a0c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006930:	d123      	bne.n	800697a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10e      	bne.n	800695e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	b29b      	uxth	r3, r3
 8006948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	1c9a      	adds	r2, r3, #2
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	629a      	str	r2, [r3, #40]	; 0x28
 800695c:	e029      	b.n	80069b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	b29b      	uxth	r3, r3
 8006966:	b2db      	uxtb	r3, r3
 8006968:	b29a      	uxth	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	629a      	str	r2, [r3, #40]	; 0x28
 8006978:	e01b      	b.n	80069b2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6858      	ldr	r0, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698c:	1c59      	adds	r1, r3, #1
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6291      	str	r1, [r2, #40]	; 0x28
 8006992:	b2c2      	uxtb	r2, r0
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	e00c      	b.n	80069b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	1c58      	adds	r0, r3, #1
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	6288      	str	r0, [r1, #40]	; 0x28
 80069aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	4619      	mov	r1, r3
 80069c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d120      	bne.n	8006a08 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0220 	bic.w	r2, r2, #32
 80069d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	695a      	ldr	r2, [r3, #20]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff fe8a 	bl	8006718 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e002      	b.n	8006a0e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e000      	b.n	8006a0e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006a0c:	2302      	movs	r3, #2
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a18:	b5b0      	push	{r4, r5, r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a58:	f023 030c 	bic.w	r3, r3, #12
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	68f9      	ldr	r1, [r7, #12]
 8006a62:	430b      	orrs	r3, r1
 8006a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699a      	ldr	r2, [r3, #24]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a84:	f040 80e4 	bne.w	8006c50 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4aab      	ldr	r2, [pc, #684]	; (8006d3c <UART_SetConfig+0x324>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <UART_SetConfig+0x84>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4aaa      	ldr	r2, [pc, #680]	; (8006d40 <UART_SetConfig+0x328>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d16c      	bne.n	8006b76 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006a9c:	f7ff f9cc 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009a      	lsls	r2, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ab6:	4aa3      	ldr	r2, [pc, #652]	; (8006d44 <UART_SetConfig+0x32c>)
 8006ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	011c      	lsls	r4, r3, #4
 8006ac0:	f7ff f9ba 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	009a      	lsls	r2, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ada:	f7ff f9ad 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009a      	lsls	r2, r3, #2
 8006ae8:	441a      	add	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af4:	4a93      	ldr	r2, [pc, #588]	; (8006d44 <UART_SetConfig+0x32c>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	2264      	movs	r2, #100	; 0x64
 8006afe:	fb02 f303 	mul.w	r3, r2, r3
 8006b02:	1aeb      	subs	r3, r5, r3
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	3332      	adds	r3, #50	; 0x32
 8006b08:	4a8e      	ldr	r2, [pc, #568]	; (8006d44 <UART_SetConfig+0x32c>)
 8006b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b0e:	095b      	lsrs	r3, r3, #5
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b16:	441c      	add	r4, r3
 8006b18:	f7ff f98e 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009a      	lsls	r2, r3, #2
 8006b26:	441a      	add	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006b32:	f7ff f981 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006b36:	4602      	mov	r2, r0
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009a      	lsls	r2, r3, #2
 8006b40:	441a      	add	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	4a7d      	ldr	r2, [pc, #500]	; (8006d44 <UART_SetConfig+0x32c>)
 8006b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b52:	095b      	lsrs	r3, r3, #5
 8006b54:	2264      	movs	r2, #100	; 0x64
 8006b56:	fb02 f303 	mul.w	r3, r2, r3
 8006b5a:	1aeb      	subs	r3, r5, r3
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	3332      	adds	r3, #50	; 0x32
 8006b60:	4a78      	ldr	r2, [pc, #480]	; (8006d44 <UART_SetConfig+0x32c>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	f003 0207 	and.w	r2, r3, #7
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4422      	add	r2, r4
 8006b72:	609a      	str	r2, [r3, #8]
 8006b74:	e154      	b.n	8006e20 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006b76:	f7ff f94b 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009a      	lsls	r2, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b90:	4a6c      	ldr	r2, [pc, #432]	; (8006d44 <UART_SetConfig+0x32c>)
 8006b92:	fba2 2303 	umull	r2, r3, r2, r3
 8006b96:	095b      	lsrs	r3, r3, #5
 8006b98:	011c      	lsls	r4, r3, #4
 8006b9a:	f7ff f939 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009a      	lsls	r2, r3, #2
 8006ba8:	441a      	add	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	fbb2 f5f3 	udiv	r5, r2, r3
 8006bb4:	f7ff f92c 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	4613      	mov	r3, r2
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009a      	lsls	r2, r3, #2
 8006bc2:	441a      	add	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bce:	4a5d      	ldr	r2, [pc, #372]	; (8006d44 <UART_SetConfig+0x32c>)
 8006bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	2264      	movs	r2, #100	; 0x64
 8006bd8:	fb02 f303 	mul.w	r3, r2, r3
 8006bdc:	1aeb      	subs	r3, r5, r3
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	3332      	adds	r3, #50	; 0x32
 8006be2:	4a58      	ldr	r2, [pc, #352]	; (8006d44 <UART_SetConfig+0x32c>)
 8006be4:	fba2 2303 	umull	r2, r3, r2, r3
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bf0:	441c      	add	r4, r3
 8006bf2:	f7ff f90d 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009a      	lsls	r2, r3, #2
 8006c00:	441a      	add	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	fbb2 f5f3 	udiv	r5, r2, r3
 8006c0c:	f7ff f900 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006c10:	4602      	mov	r2, r0
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009a      	lsls	r2, r3, #2
 8006c1a:	441a      	add	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	005b      	lsls	r3, r3, #1
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	4a47      	ldr	r2, [pc, #284]	; (8006d44 <UART_SetConfig+0x32c>)
 8006c28:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2c:	095b      	lsrs	r3, r3, #5
 8006c2e:	2264      	movs	r2, #100	; 0x64
 8006c30:	fb02 f303 	mul.w	r3, r2, r3
 8006c34:	1aeb      	subs	r3, r5, r3
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	3332      	adds	r3, #50	; 0x32
 8006c3a:	4a42      	ldr	r2, [pc, #264]	; (8006d44 <UART_SetConfig+0x32c>)
 8006c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c40:	095b      	lsrs	r3, r3, #5
 8006c42:	f003 0207 	and.w	r2, r3, #7
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4422      	add	r2, r4
 8006c4c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006c4e:	e0e7      	b.n	8006e20 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a39      	ldr	r2, [pc, #228]	; (8006d3c <UART_SetConfig+0x324>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <UART_SetConfig+0x24c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a38      	ldr	r2, [pc, #224]	; (8006d40 <UART_SetConfig+0x328>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d171      	bne.n	8006d48 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006c64:	f7ff f8e8 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009a      	lsls	r2, r3, #2
 8006c72:	441a      	add	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7e:	4a31      	ldr	r2, [pc, #196]	; (8006d44 <UART_SetConfig+0x32c>)
 8006c80:	fba2 2303 	umull	r2, r3, r2, r3
 8006c84:	095b      	lsrs	r3, r3, #5
 8006c86:	011c      	lsls	r4, r3, #4
 8006c88:	f7ff f8d6 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009a      	lsls	r2, r3, #2
 8006c96:	441a      	add	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ca2:	f7ff f8c9 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009a      	lsls	r2, r3, #2
 8006cb0:	441a      	add	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbc:	4a21      	ldr	r2, [pc, #132]	; (8006d44 <UART_SetConfig+0x32c>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	2264      	movs	r2, #100	; 0x64
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	1aeb      	subs	r3, r5, r3
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	3332      	adds	r3, #50	; 0x32
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	; (8006d44 <UART_SetConfig+0x32c>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cdc:	441c      	add	r4, r3
 8006cde:	f7ff f8ab 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	009a      	lsls	r2, r3, #2
 8006cec:	441a      	add	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	fbb2 f5f3 	udiv	r5, r2, r3
 8006cf8:	f7ff f89e 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009a      	lsls	r2, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	4a0c      	ldr	r2, [pc, #48]	; (8006d44 <UART_SetConfig+0x32c>)
 8006d14:	fba2 2303 	umull	r2, r3, r2, r3
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	2264      	movs	r2, #100	; 0x64
 8006d1c:	fb02 f303 	mul.w	r3, r2, r3
 8006d20:	1aeb      	subs	r3, r5, r3
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	3332      	adds	r3, #50	; 0x32
 8006d26:	4a07      	ldr	r2, [pc, #28]	; (8006d44 <UART_SetConfig+0x32c>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	f003 020f 	and.w	r2, r3, #15
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4422      	add	r2, r4
 8006d38:	609a      	str	r2, [r3, #8]
 8006d3a:	e071      	b.n	8006e20 <UART_SetConfig+0x408>
 8006d3c:	40011000 	.word	0x40011000
 8006d40:	40011400 	.word	0x40011400
 8006d44:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006d48:	f7ff f862 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009a      	lsls	r2, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d62:	4a31      	ldr	r2, [pc, #196]	; (8006e28 <UART_SetConfig+0x410>)
 8006d64:	fba2 2303 	umull	r2, r3, r2, r3
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	011c      	lsls	r4, r3, #4
 8006d6c:	f7ff f850 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006d70:	4602      	mov	r2, r0
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009a      	lsls	r2, r3, #2
 8006d7a:	441a      	add	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	fbb2 f5f3 	udiv	r5, r2, r3
 8006d86:	f7ff f843 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009a      	lsls	r2, r3, #2
 8006d94:	441a      	add	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da0:	4a21      	ldr	r2, [pc, #132]	; (8006e28 <UART_SetConfig+0x410>)
 8006da2:	fba2 2303 	umull	r2, r3, r2, r3
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	2264      	movs	r2, #100	; 0x64
 8006daa:	fb02 f303 	mul.w	r3, r2, r3
 8006dae:	1aeb      	subs	r3, r5, r3
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	3332      	adds	r3, #50	; 0x32
 8006db4:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <UART_SetConfig+0x410>)
 8006db6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dc0:	441c      	add	r4, r3
 8006dc2:	f7ff f825 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4613      	mov	r3, r2
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	4413      	add	r3, r2
 8006dce:	009a      	lsls	r2, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	fbb2 f5f3 	udiv	r5, r2, r3
 8006ddc:	f7ff f818 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8006de0:	4602      	mov	r2, r0
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009a      	lsls	r2, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df6:	4a0c      	ldr	r2, [pc, #48]	; (8006e28 <UART_SetConfig+0x410>)
 8006df8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	2264      	movs	r2, #100	; 0x64
 8006e00:	fb02 f303 	mul.w	r3, r2, r3
 8006e04:	1aeb      	subs	r3, r5, r3
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	3332      	adds	r3, #50	; 0x32
 8006e0a:	4a07      	ldr	r2, [pc, #28]	; (8006e28 <UART_SetConfig+0x410>)
 8006e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	f003 020f 	and.w	r2, r3, #15
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4422      	add	r2, r4
 8006e1c:	609a      	str	r2, [r3, #8]
}
 8006e1e:	e7ff      	b.n	8006e20 <UART_SetConfig+0x408>
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bdb0      	pop	{r4, r5, r7, pc}
 8006e28:	51eb851f 	.word	0x51eb851f

08006e2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e36:	2300      	movs	r3, #0
 8006e38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e3e:	2b84      	cmp	r3, #132	; 0x84
 8006e40:	d005      	beq.n	8006e4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	3303      	adds	r3, #3
 8006e4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006e60:	f000 fad2 	bl	8007408 <vTaskStartScheduler>
  
  return osOK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e6c:	b089      	sub	sp, #36	; 0x24
 8006e6e:	af04      	add	r7, sp, #16
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d020      	beq.n	8006ebe <osThreadCreate+0x54>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01c      	beq.n	8006ebe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685c      	ldr	r4, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681d      	ldr	r5, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691e      	ldr	r6, [r3, #16]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7ff ffc8 	bl	8006e2c <makeFreeRtosPriority>
 8006e9c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ea6:	9202      	str	r2, [sp, #8]
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	9100      	str	r1, [sp, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	4632      	mov	r2, r6
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 f8ed 	bl	8007092 <xTaskCreateStatic>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	e01c      	b.n	8006ef8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685c      	ldr	r4, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006eca:	b29e      	uxth	r6, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff ffaa 	bl	8006e2c <makeFreeRtosPriority>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	f107 030c 	add.w	r3, r7, #12
 8006ede:	9301      	str	r3, [sp, #4]
 8006ee0:	9200      	str	r2, [sp, #0]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f000 f92b 	bl	8007144 <xTaskCreate>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d001      	beq.n	8006ef8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e000      	b.n	8006efa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f02 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <osDelay+0x16>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	e000      	b.n	8006f1a <osDelay+0x18>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fa40 	bl	80073a0 <vTaskDelay>
  
  return osOK;
 8006f20:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f103 0208 	add.w	r2, r3, #8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f42:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f103 0208 	add.w	r2, r3, #8
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f103 0208 	add.w	r2, r3, #8
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b083      	sub	sp, #12
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	601a      	str	r2, [r3, #0]
}
 8006fc0:	bf00      	nop
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe2:	d103      	bne.n	8006fec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	e00c      	b.n	8007006 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3308      	adds	r3, #8
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	e002      	b.n	8006ffa <vListInsert+0x2e>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	d2f6      	bcs.n	8006ff4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	601a      	str	r2, [r3, #0]
}
 8007032:	bf00      	nop
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800703e:	b480      	push	{r7}
 8007040:	b085      	sub	sp, #20
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6892      	ldr	r2, [r2, #8]
 8007054:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	6852      	ldr	r2, [r2, #4]
 800705e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d103      	bne.n	8007072 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	1e5a      	subs	r2, r3, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007092:	b580      	push	{r7, lr}
 8007094:	b08e      	sub	sp, #56	; 0x38
 8007096:	af04      	add	r7, sp, #16
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	623b      	str	r3, [r7, #32]
 80070b8:	e7fe      	b.n	80070b8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d109      	bne.n	80070d4 <xTaskCreateStatic+0x42>
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	e7fe      	b.n	80070d2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070d4:	2354      	movs	r3, #84	; 0x54
 80070d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	2b54      	cmp	r3, #84	; 0x54
 80070dc:	d009      	beq.n	80070f2 <xTaskCreateStatic+0x60>
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	e7fe      	b.n	80070f0 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d01e      	beq.n	8007136 <xTaskCreateStatic+0xa4>
 80070f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d01b      	beq.n	8007136 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007106:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	2202      	movs	r2, #2
 800710c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007110:	2300      	movs	r3, #0
 8007112:	9303      	str	r3, [sp, #12]
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	9302      	str	r3, [sp, #8]
 8007118:	f107 0314 	add.w	r3, r7, #20
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f850 	bl	80071ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800712e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007130:	f000 f8cc 	bl	80072cc <prvAddNewTaskToReadyList>
 8007134:	e001      	b.n	800713a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800713a:	697b      	ldr	r3, [r7, #20]
	}
 800713c:	4618      	mov	r0, r3
 800713e:	3728      	adds	r7, #40	; 0x28
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08c      	sub	sp, #48	; 0x30
 8007148:	af04      	add	r7, sp, #16
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	4613      	mov	r3, r2
 8007152:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007154:	88fb      	ldrh	r3, [r7, #6]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4618      	mov	r0, r3
 800715a:	f000 feb3 	bl	8007ec4 <pvPortMalloc>
 800715e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00e      	beq.n	8007184 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007166:	2054      	movs	r0, #84	; 0x54
 8007168:	f000 feac 	bl	8007ec4 <pvPortMalloc>
 800716c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	631a      	str	r2, [r3, #48]	; 0x30
 800717a:	e005      	b.n	8007188 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800717c:	6978      	ldr	r0, [r7, #20]
 800717e:	f000 ff63 	bl	8008048 <vPortFree>
 8007182:	e001      	b.n	8007188 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007184:	2300      	movs	r3, #0
 8007186:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d017      	beq.n	80071be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	2300      	movs	r3, #0
 800719a:	9303      	str	r3, [sp, #12]
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	9302      	str	r3, [sp, #8]
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f80e 	bl	80071ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071b2:	69f8      	ldr	r0, [r7, #28]
 80071b4:	f000 f88a 	bl	80072cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071b8:	2301      	movs	r3, #1
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	e002      	b.n	80071c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071be:	f04f 33ff 	mov.w	r3, #4294967295
 80071c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071c4:	69bb      	ldr	r3, [r7, #24]
	}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3720      	adds	r7, #32
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b088      	sub	sp, #32
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	607a      	str	r2, [r7, #4]
 80071da:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071e6:	3b01      	subs	r3, #1
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	f023 0307 	bic.w	r3, r3, #7
 80071f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d009      	beq.n	8007214 <prvInitialiseNewTask+0x46>
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	e7fe      	b.n	8007212 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007214:	2300      	movs	r3, #0
 8007216:	61fb      	str	r3, [r7, #28]
 8007218:	e012      	b.n	8007240 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	7819      	ldrb	r1, [r3, #0]
 8007222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4413      	add	r3, r2
 8007228:	3334      	adds	r3, #52	; 0x34
 800722a:	460a      	mov	r2, r1
 800722c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	4413      	add	r3, r2
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d006      	beq.n	8007248 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	3301      	adds	r3, #1
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	2b0f      	cmp	r3, #15
 8007244:	d9e9      	bls.n	800721a <prvInitialiseNewTask+0x4c>
 8007246:	e000      	b.n	800724a <prvInitialiseNewTask+0x7c>
		{
			break;
 8007248:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007254:	2b06      	cmp	r3, #6
 8007256:	d901      	bls.n	800725c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007258:	2306      	movs	r3, #6
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007260:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007266:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	2200      	movs	r2, #0
 800726c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	3304      	adds	r3, #4
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff fe79 	bl	8006f6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727a:	3318      	adds	r3, #24
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff fe74 	bl	8006f6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007286:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	f1c3 0207 	rsb	r2, r3, #7
 800728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007290:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007296:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	2200      	movs	r2, #0
 800729c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072a6:	683a      	ldr	r2, [r7, #0]
 80072a8:	68f9      	ldr	r1, [r7, #12]
 80072aa:	69b8      	ldr	r0, [r7, #24]
 80072ac:	f000 fc08 	bl	8007ac0 <pxPortInitialiseStack>
 80072b0:	4602      	mov	r2, r0
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072c2:	bf00      	nop
 80072c4:	3720      	adds	r7, #32
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80072d4:	f000 fd1a 	bl	8007d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80072d8:	4b2a      	ldr	r3, [pc, #168]	; (8007384 <prvAddNewTaskToReadyList+0xb8>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3301      	adds	r3, #1
 80072de:	4a29      	ldr	r2, [pc, #164]	; (8007384 <prvAddNewTaskToReadyList+0xb8>)
 80072e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80072e2:	4b29      	ldr	r3, [pc, #164]	; (8007388 <prvAddNewTaskToReadyList+0xbc>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d109      	bne.n	80072fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072ea:	4a27      	ldr	r2, [pc, #156]	; (8007388 <prvAddNewTaskToReadyList+0xbc>)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072f0:	4b24      	ldr	r3, [pc, #144]	; (8007384 <prvAddNewTaskToReadyList+0xb8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d110      	bne.n	800731a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072f8:	f000 fabc 	bl	8007874 <prvInitialiseTaskLists>
 80072fc:	e00d      	b.n	800731a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072fe:	4b23      	ldr	r3, [pc, #140]	; (800738c <prvAddNewTaskToReadyList+0xc0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007306:	4b20      	ldr	r3, [pc, #128]	; (8007388 <prvAddNewTaskToReadyList+0xbc>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007310:	429a      	cmp	r2, r3
 8007312:	d802      	bhi.n	800731a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007314:	4a1c      	ldr	r2, [pc, #112]	; (8007388 <prvAddNewTaskToReadyList+0xbc>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800731a:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <prvAddNewTaskToReadyList+0xc4>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3301      	adds	r3, #1
 8007320:	4a1b      	ldr	r2, [pc, #108]	; (8007390 <prvAddNewTaskToReadyList+0xc4>)
 8007322:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007328:	2201      	movs	r2, #1
 800732a:	409a      	lsls	r2, r3
 800732c:	4b19      	ldr	r3, [pc, #100]	; (8007394 <prvAddNewTaskToReadyList+0xc8>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4313      	orrs	r3, r2
 8007332:	4a18      	ldr	r2, [pc, #96]	; (8007394 <prvAddNewTaskToReadyList+0xc8>)
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4a15      	ldr	r2, [pc, #84]	; (8007398 <prvAddNewTaskToReadyList+0xcc>)
 8007344:	441a      	add	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	3304      	adds	r3, #4
 800734a:	4619      	mov	r1, r3
 800734c:	4610      	mov	r0, r2
 800734e:	f7ff fe19 	bl	8006f84 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007352:	f000 fd09 	bl	8007d68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007356:	4b0d      	ldr	r3, [pc, #52]	; (800738c <prvAddNewTaskToReadyList+0xc0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800735e:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <prvAddNewTaskToReadyList+0xbc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	429a      	cmp	r2, r3
 800736a:	d207      	bcs.n	800737c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <prvAddNewTaskToReadyList+0xd0>)
 800736e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	200009e8 	.word	0x200009e8
 8007388:	200008e8 	.word	0x200008e8
 800738c:	200009f4 	.word	0x200009f4
 8007390:	20000a04 	.word	0x20000a04
 8007394:	200009f0 	.word	0x200009f0
 8007398:	200008ec 	.word	0x200008ec
 800739c:	e000ed04 	.word	0xe000ed04

080073a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d016      	beq.n	80073e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073b2:	4b13      	ldr	r3, [pc, #76]	; (8007400 <vTaskDelay+0x60>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <vTaskDelay+0x2e>
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	60bb      	str	r3, [r7, #8]
 80073cc:	e7fe      	b.n	80073cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80073ce:	f000 f879 	bl	80074c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073d2:	2100      	movs	r1, #0
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fb0d 	bl	80079f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073da:	f000 f881 	bl	80074e0 <xTaskResumeAll>
 80073de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d107      	bne.n	80073f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80073e6:	4b07      	ldr	r3, [pc, #28]	; (8007404 <vTaskDelay+0x64>)
 80073e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073f6:	bf00      	nop
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000a10 	.word	0x20000a10
 8007404:	e000ed04 	.word	0xe000ed04

08007408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08a      	sub	sp, #40	; 0x28
 800740c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007416:	463a      	mov	r2, r7
 8007418:	1d39      	adds	r1, r7, #4
 800741a:	f107 0308 	add.w	r3, r7, #8
 800741e:	4618      	mov	r0, r3
 8007420:	f7fb fabc 	bl	800299c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	9202      	str	r2, [sp, #8]
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	2300      	movs	r3, #0
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	2300      	movs	r3, #0
 8007434:	460a      	mov	r2, r1
 8007436:	491d      	ldr	r1, [pc, #116]	; (80074ac <vTaskStartScheduler+0xa4>)
 8007438:	481d      	ldr	r0, [pc, #116]	; (80074b0 <vTaskStartScheduler+0xa8>)
 800743a:	f7ff fe2a 	bl	8007092 <xTaskCreateStatic>
 800743e:	4602      	mov	r2, r0
 8007440:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <vTaskStartScheduler+0xac>)
 8007442:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007444:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <vTaskStartScheduler+0xac>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800744c:	2301      	movs	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	e001      	b.n	8007456 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d115      	bne.n	8007488 <vTaskStartScheduler+0x80>
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800746e:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <vTaskStartScheduler+0xb0>)
 8007470:	f04f 32ff 	mov.w	r2, #4294967295
 8007474:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007476:	4b11      	ldr	r3, [pc, #68]	; (80074bc <vTaskStartScheduler+0xb4>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <vTaskStartScheduler+0xb8>)
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007482:	f000 fba5 	bl	8007bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007486:	e00d      	b.n	80074a4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d109      	bne.n	80074a4 <vTaskStartScheduler+0x9c>
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	e7fe      	b.n	80074a2 <vTaskStartScheduler+0x9a>
}
 80074a4:	bf00      	nop
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	0800b530 	.word	0x0800b530
 80074b0:	08007845 	.word	0x08007845
 80074b4:	20000a0c 	.word	0x20000a0c
 80074b8:	20000a08 	.word	0x20000a08
 80074bc:	200009f4 	.word	0x200009f4
 80074c0:	200009ec 	.word	0x200009ec

080074c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80074c8:	4b04      	ldr	r3, [pc, #16]	; (80074dc <vTaskSuspendAll+0x18>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	4a03      	ldr	r2, [pc, #12]	; (80074dc <vTaskSuspendAll+0x18>)
 80074d0:	6013      	str	r3, [r2, #0]
}
 80074d2:	bf00      	nop
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	20000a10 	.word	0x20000a10

080074e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074ee:	4b41      	ldr	r3, [pc, #260]	; (80075f4 <xTaskResumeAll+0x114>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <xTaskResumeAll+0x2a>
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	e7fe      	b.n	8007508 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800750a:	f000 fbff 	bl	8007d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800750e:	4b39      	ldr	r3, [pc, #228]	; (80075f4 <xTaskResumeAll+0x114>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3b01      	subs	r3, #1
 8007514:	4a37      	ldr	r2, [pc, #220]	; (80075f4 <xTaskResumeAll+0x114>)
 8007516:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007518:	4b36      	ldr	r3, [pc, #216]	; (80075f4 <xTaskResumeAll+0x114>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d161      	bne.n	80075e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007520:	4b35      	ldr	r3, [pc, #212]	; (80075f8 <xTaskResumeAll+0x118>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d05d      	beq.n	80075e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007528:	e02e      	b.n	8007588 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800752a:	4b34      	ldr	r3, [pc, #208]	; (80075fc <xTaskResumeAll+0x11c>)
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3318      	adds	r3, #24
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fd81 	bl	800703e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3304      	adds	r3, #4
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff fd7c 	bl	800703e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	2201      	movs	r2, #1
 800754c:	409a      	lsls	r2, r3
 800754e:	4b2c      	ldr	r3, [pc, #176]	; (8007600 <xTaskResumeAll+0x120>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4313      	orrs	r3, r2
 8007554:	4a2a      	ldr	r2, [pc, #168]	; (8007600 <xTaskResumeAll+0x120>)
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4a27      	ldr	r2, [pc, #156]	; (8007604 <xTaskResumeAll+0x124>)
 8007566:	441a      	add	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3304      	adds	r3, #4
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f7ff fd08 	bl	8006f84 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4b23      	ldr	r3, [pc, #140]	; (8007608 <xTaskResumeAll+0x128>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	429a      	cmp	r2, r3
 8007580:	d302      	bcc.n	8007588 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007582:	4b22      	ldr	r3, [pc, #136]	; (800760c <xTaskResumeAll+0x12c>)
 8007584:	2201      	movs	r2, #1
 8007586:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007588:	4b1c      	ldr	r3, [pc, #112]	; (80075fc <xTaskResumeAll+0x11c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1cc      	bne.n	800752a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007596:	f000 fa07 	bl	80079a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800759a:	4b1d      	ldr	r3, [pc, #116]	; (8007610 <xTaskResumeAll+0x130>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d010      	beq.n	80075c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80075a6:	f000 f837 	bl	8007618 <xTaskIncrementTick>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80075b0:	4b16      	ldr	r3, [pc, #88]	; (800760c <xTaskResumeAll+0x12c>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1f1      	bne.n	80075a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80075c2:	4b13      	ldr	r3, [pc, #76]	; (8007610 <xTaskResumeAll+0x130>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075c8:	4b10      	ldr	r3, [pc, #64]	; (800760c <xTaskResumeAll+0x12c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d009      	beq.n	80075e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075d4:	4b0f      	ldr	r3, [pc, #60]	; (8007614 <xTaskResumeAll+0x134>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075e4:	f000 fbc0 	bl	8007d68 <vPortExitCritical>

	return xAlreadyYielded;
 80075e8:	68bb      	ldr	r3, [r7, #8]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000a10 	.word	0x20000a10
 80075f8:	200009e8 	.word	0x200009e8
 80075fc:	200009a8 	.word	0x200009a8
 8007600:	200009f0 	.word	0x200009f0
 8007604:	200008ec 	.word	0x200008ec
 8007608:	200008e8 	.word	0x200008e8
 800760c:	200009fc 	.word	0x200009fc
 8007610:	200009f8 	.word	0x200009f8
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800761e:	2300      	movs	r3, #0
 8007620:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007622:	4b50      	ldr	r3, [pc, #320]	; (8007764 <xTaskIncrementTick+0x14c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	f040 808c 	bne.w	8007744 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800762c:	4b4e      	ldr	r3, [pc, #312]	; (8007768 <xTaskIncrementTick+0x150>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3301      	adds	r3, #1
 8007632:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007634:	4a4c      	ldr	r2, [pc, #304]	; (8007768 <xTaskIncrementTick+0x150>)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d11f      	bne.n	8007680 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007640:	4b4a      	ldr	r3, [pc, #296]	; (800776c <xTaskIncrementTick+0x154>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <xTaskIncrementTick+0x46>
 800764a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	e7fe      	b.n	800765c <xTaskIncrementTick+0x44>
 800765e:	4b43      	ldr	r3, [pc, #268]	; (800776c <xTaskIncrementTick+0x154>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	4b42      	ldr	r3, [pc, #264]	; (8007770 <xTaskIncrementTick+0x158>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a40      	ldr	r2, [pc, #256]	; (800776c <xTaskIncrementTick+0x154>)
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	4a40      	ldr	r2, [pc, #256]	; (8007770 <xTaskIncrementTick+0x158>)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	4b40      	ldr	r3, [pc, #256]	; (8007774 <xTaskIncrementTick+0x15c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	4a3e      	ldr	r2, [pc, #248]	; (8007774 <xTaskIncrementTick+0x15c>)
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	f000 f994 	bl	80079a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007680:	4b3d      	ldr	r3, [pc, #244]	; (8007778 <xTaskIncrementTick+0x160>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	429a      	cmp	r2, r3
 8007688:	d34d      	bcc.n	8007726 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800768a:	4b38      	ldr	r3, [pc, #224]	; (800776c <xTaskIncrementTick+0x154>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <xTaskIncrementTick+0x80>
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <xTaskIncrementTick+0x82>
 8007698:	2300      	movs	r3, #0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800769e:	4b36      	ldr	r3, [pc, #216]	; (8007778 <xTaskIncrementTick+0x160>)
 80076a0:	f04f 32ff 	mov.w	r2, #4294967295
 80076a4:	601a      	str	r2, [r3, #0]
					break;
 80076a6:	e03e      	b.n	8007726 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076a8:	4b30      	ldr	r3, [pc, #192]	; (800776c <xTaskIncrementTick+0x154>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d203      	bcs.n	80076c8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076c0:	4a2d      	ldr	r2, [pc, #180]	; (8007778 <xTaskIncrementTick+0x160>)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6013      	str	r3, [r2, #0]
						break;
 80076c6:	e02e      	b.n	8007726 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fcb6 	bl	800703e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	3318      	adds	r3, #24
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff fcad 	bl	800703e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	2201      	movs	r2, #1
 80076ea:	409a      	lsls	r2, r3
 80076ec:	4b23      	ldr	r3, [pc, #140]	; (800777c <xTaskIncrementTick+0x164>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	4a22      	ldr	r2, [pc, #136]	; (800777c <xTaskIncrementTick+0x164>)
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4a1f      	ldr	r2, [pc, #124]	; (8007780 <xTaskIncrementTick+0x168>)
 8007704:	441a      	add	r2, r3
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	3304      	adds	r3, #4
 800770a:	4619      	mov	r1, r3
 800770c:	4610      	mov	r0, r2
 800770e:	f7ff fc39 	bl	8006f84 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007716:	4b1b      	ldr	r3, [pc, #108]	; (8007784 <xTaskIncrementTick+0x16c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	429a      	cmp	r2, r3
 800771e:	d3b4      	bcc.n	800768a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007720:	2301      	movs	r3, #1
 8007722:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007724:	e7b1      	b.n	800768a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007726:	4b17      	ldr	r3, [pc, #92]	; (8007784 <xTaskIncrementTick+0x16c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772c:	4914      	ldr	r1, [pc, #80]	; (8007780 <xTaskIncrementTick+0x168>)
 800772e:	4613      	mov	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d907      	bls.n	800774e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800773e:	2301      	movs	r3, #1
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e004      	b.n	800774e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007744:	4b10      	ldr	r3, [pc, #64]	; (8007788 <xTaskIncrementTick+0x170>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3301      	adds	r3, #1
 800774a:	4a0f      	ldr	r2, [pc, #60]	; (8007788 <xTaskIncrementTick+0x170>)
 800774c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <xTaskIncrementTick+0x174>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007756:	2301      	movs	r3, #1
 8007758:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800775a:	697b      	ldr	r3, [r7, #20]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3718      	adds	r7, #24
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000a10 	.word	0x20000a10
 8007768:	200009ec 	.word	0x200009ec
 800776c:	200009a0 	.word	0x200009a0
 8007770:	200009a4 	.word	0x200009a4
 8007774:	20000a00 	.word	0x20000a00
 8007778:	20000a08 	.word	0x20000a08
 800777c:	200009f0 	.word	0x200009f0
 8007780:	200008ec 	.word	0x200008ec
 8007784:	200008e8 	.word	0x200008e8
 8007788:	200009f8 	.word	0x200009f8
 800778c:	200009fc 	.word	0x200009fc

08007790 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007796:	4b26      	ldr	r3, [pc, #152]	; (8007830 <vTaskSwitchContext+0xa0>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800779e:	4b25      	ldr	r3, [pc, #148]	; (8007834 <vTaskSwitchContext+0xa4>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077a4:	e03e      	b.n	8007824 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80077a6:	4b23      	ldr	r3, [pc, #140]	; (8007834 <vTaskSwitchContext+0xa4>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80077ac:	4b22      	ldr	r3, [pc, #136]	; (8007838 <vTaskSwitchContext+0xa8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	fab3 f383 	clz	r3, r3
 80077b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80077ba:	7afb      	ldrb	r3, [r7, #11]
 80077bc:	f1c3 031f 	rsb	r3, r3, #31
 80077c0:	617b      	str	r3, [r7, #20]
 80077c2:	491e      	ldr	r1, [pc, #120]	; (800783c <vTaskSwitchContext+0xac>)
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	4613      	mov	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d109      	bne.n	80077ea <vTaskSwitchContext+0x5a>
	__asm volatile
 80077d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	607b      	str	r3, [r7, #4]
 80077e8:	e7fe      	b.n	80077e8 <vTaskSwitchContext+0x58>
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4613      	mov	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4a11      	ldr	r2, [pc, #68]	; (800783c <vTaskSwitchContext+0xac>)
 80077f6:	4413      	add	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	605a      	str	r2, [r3, #4]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	3308      	adds	r3, #8
 800780c:	429a      	cmp	r2, r3
 800780e:	d104      	bne.n	800781a <vTaskSwitchContext+0x8a>
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	605a      	str	r2, [r3, #4]
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	4a07      	ldr	r2, [pc, #28]	; (8007840 <vTaskSwitchContext+0xb0>)
 8007822:	6013      	str	r3, [r2, #0]
}
 8007824:	bf00      	nop
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	20000a10 	.word	0x20000a10
 8007834:	200009fc 	.word	0x200009fc
 8007838:	200009f0 	.word	0x200009f0
 800783c:	200008ec 	.word	0x200008ec
 8007840:	200008e8 	.word	0x200008e8

08007844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800784c:	f000 f852 	bl	80078f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007850:	4b06      	ldr	r3, [pc, #24]	; (800786c <prvIdleTask+0x28>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d9f9      	bls.n	800784c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007858:	4b05      	ldr	r3, [pc, #20]	; (8007870 <prvIdleTask+0x2c>)
 800785a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007868:	e7f0      	b.n	800784c <prvIdleTask+0x8>
 800786a:	bf00      	nop
 800786c:	200008ec 	.word	0x200008ec
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800787a:	2300      	movs	r3, #0
 800787c:	607b      	str	r3, [r7, #4]
 800787e:	e00c      	b.n	800789a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4613      	mov	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4a12      	ldr	r2, [pc, #72]	; (80078d4 <prvInitialiseTaskLists+0x60>)
 800788c:	4413      	add	r3, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7ff fb4b 	bl	8006f2a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3301      	adds	r3, #1
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b06      	cmp	r3, #6
 800789e:	d9ef      	bls.n	8007880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078a0:	480d      	ldr	r0, [pc, #52]	; (80078d8 <prvInitialiseTaskLists+0x64>)
 80078a2:	f7ff fb42 	bl	8006f2a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078a6:	480d      	ldr	r0, [pc, #52]	; (80078dc <prvInitialiseTaskLists+0x68>)
 80078a8:	f7ff fb3f 	bl	8006f2a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078ac:	480c      	ldr	r0, [pc, #48]	; (80078e0 <prvInitialiseTaskLists+0x6c>)
 80078ae:	f7ff fb3c 	bl	8006f2a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078b2:	480c      	ldr	r0, [pc, #48]	; (80078e4 <prvInitialiseTaskLists+0x70>)
 80078b4:	f7ff fb39 	bl	8006f2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078b8:	480b      	ldr	r0, [pc, #44]	; (80078e8 <prvInitialiseTaskLists+0x74>)
 80078ba:	f7ff fb36 	bl	8006f2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078be:	4b0b      	ldr	r3, [pc, #44]	; (80078ec <prvInitialiseTaskLists+0x78>)
 80078c0:	4a05      	ldr	r2, [pc, #20]	; (80078d8 <prvInitialiseTaskLists+0x64>)
 80078c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <prvInitialiseTaskLists+0x7c>)
 80078c6:	4a05      	ldr	r2, [pc, #20]	; (80078dc <prvInitialiseTaskLists+0x68>)
 80078c8:	601a      	str	r2, [r3, #0]
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	200008ec 	.word	0x200008ec
 80078d8:	20000978 	.word	0x20000978
 80078dc:	2000098c 	.word	0x2000098c
 80078e0:	200009a8 	.word	0x200009a8
 80078e4:	200009bc 	.word	0x200009bc
 80078e8:	200009d4 	.word	0x200009d4
 80078ec:	200009a0 	.word	0x200009a0
 80078f0:	200009a4 	.word	0x200009a4

080078f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078fa:	e019      	b.n	8007930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078fc:	f000 fa06 	bl	8007d0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007900:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <prvCheckTasksWaitingTermination+0x4c>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3304      	adds	r3, #4
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff fb96 	bl	800703e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007912:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <prvCheckTasksWaitingTermination+0x50>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3b01      	subs	r3, #1
 8007918:	4a0a      	ldr	r2, [pc, #40]	; (8007944 <prvCheckTasksWaitingTermination+0x50>)
 800791a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800791c:	4b0a      	ldr	r3, [pc, #40]	; (8007948 <prvCheckTasksWaitingTermination+0x54>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3b01      	subs	r3, #1
 8007922:	4a09      	ldr	r2, [pc, #36]	; (8007948 <prvCheckTasksWaitingTermination+0x54>)
 8007924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007926:	f000 fa1f 	bl	8007d68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f80e 	bl	800794c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007930:	4b05      	ldr	r3, [pc, #20]	; (8007948 <prvCheckTasksWaitingTermination+0x54>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e1      	bne.n	80078fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	200009bc 	.word	0x200009bc
 8007944:	200009e8 	.word	0x200009e8
 8007948:	200009d0 	.word	0x200009d0

0800794c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800795a:	2b00      	cmp	r3, #0
 800795c:	d108      	bne.n	8007970 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007962:	4618      	mov	r0, r3
 8007964:	f000 fb70 	bl	8008048 <vPortFree>
				vPortFree( pxTCB );
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fb6d 	bl	8008048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800796e:	e017      	b.n	80079a0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007976:	2b01      	cmp	r3, #1
 8007978:	d103      	bne.n	8007982 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fb64 	bl	8008048 <vPortFree>
	}
 8007980:	e00e      	b.n	80079a0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007988:	2b02      	cmp	r3, #2
 800798a:	d009      	beq.n	80079a0 <prvDeleteTCB+0x54>
 800798c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	60fb      	str	r3, [r7, #12]
 800799e:	e7fe      	b.n	800799e <prvDeleteTCB+0x52>
	}
 80079a0:	bf00      	nop
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ae:	4b0f      	ldr	r3, [pc, #60]	; (80079ec <prvResetNextTaskUnblockTime+0x44>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <prvResetNextTaskUnblockTime+0x14>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e000      	b.n	80079be <prvResetNextTaskUnblockTime+0x16>
 80079bc:	2300      	movs	r3, #0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079c2:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <prvResetNextTaskUnblockTime+0x48>)
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079ca:	e008      	b.n	80079de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079cc:	4b07      	ldr	r3, [pc, #28]	; (80079ec <prvResetNextTaskUnblockTime+0x44>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	4a05      	ldr	r2, [pc, #20]	; (80079f0 <prvResetNextTaskUnblockTime+0x48>)
 80079dc:	6013      	str	r3, [r2, #0]
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	200009a0 	.word	0x200009a0
 80079f0:	20000a08 	.word	0x20000a08

080079f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079fe:	4b29      	ldr	r3, [pc, #164]	; (8007aa4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a04:	4b28      	ldr	r3, [pc, #160]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fb17 	bl	800703e <uxListRemove>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10b      	bne.n	8007a2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007a16:	4b24      	ldr	r3, [pc, #144]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	43da      	mvns	r2, r3
 8007a24:	4b21      	ldr	r3, [pc, #132]	; (8007aac <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	4a20      	ldr	r2, [pc, #128]	; (8007aac <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a34:	d10a      	bne.n	8007a4c <prvAddCurrentTaskToDelayedList+0x58>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d007      	beq.n	8007a4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3304      	adds	r3, #4
 8007a42:	4619      	mov	r1, r3
 8007a44:	481a      	ldr	r0, [pc, #104]	; (8007ab0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a46:	f7ff fa9d 	bl	8006f84 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a4a:	e026      	b.n	8007a9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4413      	add	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a54:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d209      	bcs.n	8007a78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a64:	4b13      	ldr	r3, [pc, #76]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4b0f      	ldr	r3, [pc, #60]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4610      	mov	r0, r2
 8007a72:	f7ff faab 	bl	8006fcc <vListInsert>
}
 8007a76:	e010      	b.n	8007a9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a78:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7ff faa1 	bl	8006fcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a8a:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d202      	bcs.n	8007a9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a94:	4a09      	ldr	r2, [pc, #36]	; (8007abc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6013      	str	r3, [r2, #0]
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	200009ec 	.word	0x200009ec
 8007aa8:	200008e8 	.word	0x200008e8
 8007aac:	200009f0 	.word	0x200009f0
 8007ab0:	200009d4 	.word	0x200009d4
 8007ab4:	200009a4 	.word	0x200009a4
 8007ab8:	200009a0 	.word	0x200009a0
 8007abc:	20000a08 	.word	0x20000a08

08007ac0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3b04      	subs	r3, #4
 8007ad0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3b04      	subs	r3, #4
 8007ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3b04      	subs	r3, #4
 8007aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007af0:	4a0c      	ldr	r2, [pc, #48]	; (8007b24 <pxPortInitialiseStack+0x64>)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3b14      	subs	r3, #20
 8007afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3b04      	subs	r3, #4
 8007b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f06f 0202 	mvn.w	r2, #2
 8007b0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3b20      	subs	r3, #32
 8007b14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b16:	68fb      	ldr	r3, [r7, #12]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	08007b29 	.word	0x08007b29

08007b28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b32:	4b11      	ldr	r3, [pc, #68]	; (8007b78 <prvTaskExitError+0x50>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d009      	beq.n	8007b50 <prvTaskExitError+0x28>
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	e7fe      	b.n	8007b4e <prvTaskExitError+0x26>
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b62:	bf00      	nop
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0fc      	beq.n	8007b64 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	2000049c 	.word	0x2000049c
 8007b7c:	00000000 	.word	0x00000000

08007b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b80:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <pxCurrentTCBConst2>)
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	6808      	ldr	r0, [r1, #0]
 8007b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	f380 8809 	msr	PSP, r0
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8811 	msr	BASEPRI, r0
 8007b9a:	4770      	bx	lr
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst2>:
 8007ba0:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ba8:	4808      	ldr	r0, [pc, #32]	; (8007bcc <prvPortStartFirstTask+0x24>)
 8007baa:	6800      	ldr	r0, [r0, #0]
 8007bac:	6800      	ldr	r0, [r0, #0]
 8007bae:	f380 8808 	msr	MSP, r0
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8814 	msr	CONTROL, r0
 8007bba:	b662      	cpsie	i
 8007bbc:	b661      	cpsie	f
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	df00      	svc	0
 8007bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bca:	bf00      	nop
 8007bcc:	e000ed08 	.word	0xe000ed08

08007bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bd6:	4b44      	ldr	r3, [pc, #272]	; (8007ce8 <xPortStartScheduler+0x118>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a44      	ldr	r2, [pc, #272]	; (8007cec <xPortStartScheduler+0x11c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d109      	bne.n	8007bf4 <xPortStartScheduler+0x24>
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	613b      	str	r3, [r7, #16]
 8007bf2:	e7fe      	b.n	8007bf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007bf4:	4b3c      	ldr	r3, [pc, #240]	; (8007ce8 <xPortStartScheduler+0x118>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a3d      	ldr	r2, [pc, #244]	; (8007cf0 <xPortStartScheduler+0x120>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d109      	bne.n	8007c12 <xPortStartScheduler+0x42>
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	f383 8811 	msr	BASEPRI, r3
 8007c06:	f3bf 8f6f 	isb	sy
 8007c0a:	f3bf 8f4f 	dsb	sy
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e7fe      	b.n	8007c10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c12:	4b38      	ldr	r3, [pc, #224]	; (8007cf4 <xPortStartScheduler+0x124>)
 8007c14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	22ff      	movs	r2, #255	; 0xff
 8007c22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	4b30      	ldr	r3, [pc, #192]	; (8007cf8 <xPortStartScheduler+0x128>)
 8007c38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c3a:	4b30      	ldr	r3, [pc, #192]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c40:	e009      	b.n	8007c56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007c42:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	4a2c      	ldr	r2, [pc, #176]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c4c:	78fb      	ldrb	r3, [r7, #3]
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c5e:	2b80      	cmp	r3, #128	; 0x80
 8007c60:	d0ef      	beq.n	8007c42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c62:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f1c3 0307 	rsb	r3, r3, #7
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d009      	beq.n	8007c82 <xPortStartScheduler+0xb2>
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	60bb      	str	r3, [r7, #8]
 8007c80:	e7fe      	b.n	8007c80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c82:	4b1e      	ldr	r3, [pc, #120]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	4a1c      	ldr	r2, [pc, #112]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c8c:	4b1b      	ldr	r3, [pc, #108]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c94:	4a19      	ldr	r2, [pc, #100]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ca0:	4b17      	ldr	r3, [pc, #92]	; (8007d00 <xPortStartScheduler+0x130>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a16      	ldr	r2, [pc, #88]	; (8007d00 <xPortStartScheduler+0x130>)
 8007ca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007caa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cac:	4b14      	ldr	r3, [pc, #80]	; (8007d00 <xPortStartScheduler+0x130>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a13      	ldr	r2, [pc, #76]	; (8007d00 <xPortStartScheduler+0x130>)
 8007cb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cb8:	f000 f8d6 	bl	8007e68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cbc:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <xPortStartScheduler+0x134>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cc2:	f000 f8f5 	bl	8007eb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cc6:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <xPortStartScheduler+0x138>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a0f      	ldr	r2, [pc, #60]	; (8007d08 <xPortStartScheduler+0x138>)
 8007ccc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cd2:	f7ff ff69 	bl	8007ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cd6:	f7ff fd5b 	bl	8007790 <vTaskSwitchContext>
	prvTaskExitError();
 8007cda:	f7ff ff25 	bl	8007b28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	e000ed00 	.word	0xe000ed00
 8007cec:	410fc271 	.word	0x410fc271
 8007cf0:	410fc270 	.word	0x410fc270
 8007cf4:	e000e400 	.word	0xe000e400
 8007cf8:	20000a14 	.word	0x20000a14
 8007cfc:	20000a18 	.word	0x20000a18
 8007d00:	e000ed20 	.word	0xe000ed20
 8007d04:	2000049c 	.word	0x2000049c
 8007d08:	e000ef34 	.word	0xe000ef34

08007d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d24:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <vPortEnterCritical+0x54>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	4a0d      	ldr	r2, [pc, #52]	; (8007d60 <vPortEnterCritical+0x54>)
 8007d2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <vPortEnterCritical+0x54>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d10e      	bne.n	8007d54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d36:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <vPortEnterCritical+0x58>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d009      	beq.n	8007d54 <vPortEnterCritical+0x48>
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	603b      	str	r3, [r7, #0]
 8007d52:	e7fe      	b.n	8007d52 <vPortEnterCritical+0x46>
	}
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	2000049c 	.word	0x2000049c
 8007d64:	e000ed04 	.word	0xe000ed04

08007d68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d6e:	4b11      	ldr	r3, [pc, #68]	; (8007db4 <vPortExitCritical+0x4c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <vPortExitCritical+0x22>
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	607b      	str	r3, [r7, #4]
 8007d88:	e7fe      	b.n	8007d88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007d8a:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <vPortExitCritical+0x4c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	4a08      	ldr	r2, [pc, #32]	; (8007db4 <vPortExitCritical+0x4c>)
 8007d92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d94:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <vPortExitCritical+0x4c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d104      	bne.n	8007da6 <vPortExitCritical+0x3e>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	2000049c 	.word	0x2000049c
	...

08007dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dc0:	f3ef 8009 	mrs	r0, PSP
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <pxCurrentTCBConst>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	f01e 0f10 	tst.w	lr, #16
 8007dd0:	bf08      	it	eq
 8007dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dda:	6010      	str	r0, [r2, #0]
 8007ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007de4:	f380 8811 	msr	BASEPRI, r0
 8007de8:	f3bf 8f4f 	dsb	sy
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f7ff fcce 	bl	8007790 <vTaskSwitchContext>
 8007df4:	f04f 0000 	mov.w	r0, #0
 8007df8:	f380 8811 	msr	BASEPRI, r0
 8007dfc:	bc09      	pop	{r0, r3}
 8007dfe:	6819      	ldr	r1, [r3, #0]
 8007e00:	6808      	ldr	r0, [r1, #0]
 8007e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e06:	f01e 0f10 	tst.w	lr, #16
 8007e0a:	bf08      	it	eq
 8007e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e10:	f380 8809 	msr	PSP, r0
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	f3af 8000 	nop.w

08007e20 <pxCurrentTCBConst>:
 8007e20:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop

08007e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e40:	f7ff fbea 	bl	8007618 <xTaskIncrementTick>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e4a:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <SysTick_Handler+0x3c>)
 8007e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	2300      	movs	r3, #0
 8007e54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	e000ed04 	.word	0xe000ed04

08007e68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e6c:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <vPortSetupTimerInterrupt+0x34>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e72:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <vPortSetupTimerInterrupt+0x38>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e78:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <vPortSetupTimerInterrupt+0x3c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ea8 <vPortSetupTimerInterrupt+0x40>)
 8007e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e82:	099b      	lsrs	r3, r3, #6
 8007e84:	4a09      	ldr	r2, [pc, #36]	; (8007eac <vPortSetupTimerInterrupt+0x44>)
 8007e86:	3b01      	subs	r3, #1
 8007e88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e8a:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <vPortSetupTimerInterrupt+0x34>)
 8007e8c:	2207      	movs	r2, #7
 8007e8e:	601a      	str	r2, [r3, #0]
}
 8007e90:	bf00      	nop
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	e000e010 	.word	0xe000e010
 8007ea0:	e000e018 	.word	0xe000e018
 8007ea4:	20000494 	.word	0x20000494
 8007ea8:	10624dd3 	.word	0x10624dd3
 8007eac:	e000e014 	.word	0xe000e014

08007eb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007eb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ec0 <vPortEnableVFP+0x10>
 8007eb4:	6801      	ldr	r1, [r0, #0]
 8007eb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007eba:	6001      	str	r1, [r0, #0]
 8007ebc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ebe:	bf00      	nop
 8007ec0:	e000ed88 	.word	0xe000ed88

08007ec4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	; 0x28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ed0:	f7ff faf8 	bl	80074c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ed4:	4b57      	ldr	r3, [pc, #348]	; (8008034 <pvPortMalloc+0x170>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007edc:	f000 f90c 	bl	80080f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ee0:	4b55      	ldr	r3, [pc, #340]	; (8008038 <pvPortMalloc+0x174>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f040 808c 	bne.w	8008006 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d01c      	beq.n	8007f2e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007ef4:	2208      	movs	r2, #8
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d013      	beq.n	8007f2e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f023 0307 	bic.w	r3, r3, #7
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <pvPortMalloc+0x6a>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	617b      	str	r3, [r7, #20]
 8007f2c:	e7fe      	b.n	8007f2c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d068      	beq.n	8008006 <pvPortMalloc+0x142>
 8007f34:	4b41      	ldr	r3, [pc, #260]	; (800803c <pvPortMalloc+0x178>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d863      	bhi.n	8008006 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f3e:	4b40      	ldr	r3, [pc, #256]	; (8008040 <pvPortMalloc+0x17c>)
 8007f40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f42:	4b3f      	ldr	r3, [pc, #252]	; (8008040 <pvPortMalloc+0x17c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f48:	e004      	b.n	8007f54 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d903      	bls.n	8007f66 <pvPortMalloc+0xa2>
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1f1      	bne.n	8007f4a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f66:	4b33      	ldr	r3, [pc, #204]	; (8008034 <pvPortMalloc+0x170>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d04a      	beq.n	8008006 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2208      	movs	r2, #8
 8007f76:	4413      	add	r3, r2
 8007f78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	1ad2      	subs	r2, r2, r3
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d91e      	bls.n	8007fd0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4413      	add	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	f003 0307 	and.w	r3, r3, #7
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d009      	beq.n	8007fb8 <pvPortMalloc+0xf4>
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	613b      	str	r3, [r7, #16]
 8007fb6:	e7fe      	b.n	8007fb6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fca:	69b8      	ldr	r0, [r7, #24]
 8007fcc:	f000 f8f6 	bl	80081bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fd0:	4b1a      	ldr	r3, [pc, #104]	; (800803c <pvPortMalloc+0x178>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	4a18      	ldr	r2, [pc, #96]	; (800803c <pvPortMalloc+0x178>)
 8007fdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fde:	4b17      	ldr	r3, [pc, #92]	; (800803c <pvPortMalloc+0x178>)
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4b18      	ldr	r3, [pc, #96]	; (8008044 <pvPortMalloc+0x180>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d203      	bcs.n	8007ff2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fea:	4b14      	ldr	r3, [pc, #80]	; (800803c <pvPortMalloc+0x178>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a15      	ldr	r2, [pc, #84]	; (8008044 <pvPortMalloc+0x180>)
 8007ff0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	4b10      	ldr	r3, [pc, #64]	; (8008038 <pvPortMalloc+0x174>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008006:	f7ff fa6b 	bl	80074e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	2b00      	cmp	r3, #0
 8008012:	d009      	beq.n	8008028 <pvPortMalloc+0x164>
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	e7fe      	b.n	8008026 <pvPortMalloc+0x162>
	return pvReturn;
 8008028:	69fb      	ldr	r3, [r7, #28]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3728      	adds	r7, #40	; 0x28
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20004624 	.word	0x20004624
 8008038:	20004630 	.word	0x20004630
 800803c:	20004628 	.word	0x20004628
 8008040:	2000461c 	.word	0x2000461c
 8008044:	2000462c 	.word	0x2000462c

08008048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d046      	beq.n	80080e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800805a:	2308      	movs	r3, #8
 800805c:	425b      	negs	r3, r3
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4413      	add	r3, r2
 8008062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	4b20      	ldr	r3, [pc, #128]	; (80080f0 <vPortFree+0xa8>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4013      	ands	r3, r2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <vPortFree+0x42>
 8008076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	e7fe      	b.n	8008088 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <vPortFree+0x5e>
 8008092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	60bb      	str	r3, [r7, #8]
 80080a4:	e7fe      	b.n	80080a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	4b11      	ldr	r3, [pc, #68]	; (80080f0 <vPortFree+0xa8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d019      	beq.n	80080e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d115      	bne.n	80080e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <vPortFree+0xa8>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	43db      	mvns	r3, r3
 80080c6:	401a      	ands	r2, r3
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080cc:	f7ff f9fa 	bl	80074c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <vPortFree+0xac>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4413      	add	r3, r2
 80080da:	4a06      	ldr	r2, [pc, #24]	; (80080f4 <vPortFree+0xac>)
 80080dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080de:	6938      	ldr	r0, [r7, #16]
 80080e0:	f000 f86c 	bl	80081bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80080e4:	f7ff f9fc 	bl	80074e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080e8:	bf00      	nop
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20004630 	.word	0x20004630
 80080f4:	20004628 	.word	0x20004628

080080f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008102:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008104:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <prvHeapInit+0xac>)
 8008106:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00c      	beq.n	800812c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	3307      	adds	r3, #7
 8008116:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 0307 	bic.w	r3, r3, #7
 800811e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	4a1f      	ldr	r2, [pc, #124]	; (80081a4 <prvHeapInit+0xac>)
 8008128:	4413      	add	r3, r2
 800812a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008130:	4a1d      	ldr	r2, [pc, #116]	; (80081a8 <prvHeapInit+0xb0>)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008136:	4b1c      	ldr	r3, [pc, #112]	; (80081a8 <prvHeapInit+0xb0>)
 8008138:	2200      	movs	r2, #0
 800813a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	4413      	add	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008144:	2208      	movs	r2, #8
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1a9b      	subs	r3, r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 0307 	bic.w	r3, r3, #7
 8008152:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4a15      	ldr	r2, [pc, #84]	; (80081ac <prvHeapInit+0xb4>)
 8008158:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800815a:	4b14      	ldr	r3, [pc, #80]	; (80081ac <prvHeapInit+0xb4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2200      	movs	r2, #0
 8008160:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008162:	4b12      	ldr	r3, [pc, #72]	; (80081ac <prvHeapInit+0xb4>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	1ad2      	subs	r2, r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008178:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <prvHeapInit+0xb4>)
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	4a0a      	ldr	r2, [pc, #40]	; (80081b0 <prvHeapInit+0xb8>)
 8008186:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	4a09      	ldr	r2, [pc, #36]	; (80081b4 <prvHeapInit+0xbc>)
 800818e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008190:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <prvHeapInit+0xc0>)
 8008192:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008196:	601a      	str	r2, [r3, #0]
}
 8008198:	bf00      	nop
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	20000a1c 	.word	0x20000a1c
 80081a8:	2000461c 	.word	0x2000461c
 80081ac:	20004624 	.word	0x20004624
 80081b0:	2000462c 	.word	0x2000462c
 80081b4:	20004628 	.word	0x20004628
 80081b8:	20004630 	.word	0x20004630

080081bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081c4:	4b28      	ldr	r3, [pc, #160]	; (8008268 <prvInsertBlockIntoFreeList+0xac>)
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	e002      	b.n	80081d0 <prvInsertBlockIntoFreeList+0x14>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d8f7      	bhi.n	80081ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	4413      	add	r3, r2
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d108      	bne.n	80081fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	441a      	add	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	441a      	add	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	429a      	cmp	r2, r3
 8008210:	d118      	bne.n	8008244 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	4b15      	ldr	r3, [pc, #84]	; (800826c <prvInsertBlockIntoFreeList+0xb0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d00d      	beq.n	800823a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	441a      	add	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	e008      	b.n	800824c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800823a:	4b0c      	ldr	r3, [pc, #48]	; (800826c <prvInsertBlockIntoFreeList+0xb0>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	e003      	b.n	800824c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	429a      	cmp	r2, r3
 8008252:	d002      	beq.n	800825a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800825a:	bf00      	nop
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	2000461c 	.word	0x2000461c
 800826c:	20004624 	.word	0x20004624

08008270 <cos>:
 8008270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008272:	ec51 0b10 	vmov	r0, r1, d0
 8008276:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <cos+0x80>)
 8008278:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800827c:	4293      	cmp	r3, r2
 800827e:	dc06      	bgt.n	800828e <cos+0x1e>
 8008280:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80082e8 <cos+0x78>
 8008284:	f000 fbb0 	bl	80089e8 <__kernel_cos>
 8008288:	ec51 0b10 	vmov	r0, r1, d0
 800828c:	e007      	b.n	800829e <cos+0x2e>
 800828e:	4a19      	ldr	r2, [pc, #100]	; (80082f4 <cos+0x84>)
 8008290:	4293      	cmp	r3, r2
 8008292:	dd09      	ble.n	80082a8 <cos+0x38>
 8008294:	ee10 2a10 	vmov	r2, s0
 8008298:	460b      	mov	r3, r1
 800829a:	f7f7 ffa5 	bl	80001e8 <__aeabi_dsub>
 800829e:	ec41 0b10 	vmov	d0, r0, r1
 80082a2:	b005      	add	sp, #20
 80082a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80082a8:	4668      	mov	r0, sp
 80082aa:	f000 f8f9 	bl	80084a0 <__ieee754_rem_pio2>
 80082ae:	f000 0003 	and.w	r0, r0, #3
 80082b2:	2801      	cmp	r0, #1
 80082b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80082b8:	ed9d 0b00 	vldr	d0, [sp]
 80082bc:	d007      	beq.n	80082ce <cos+0x5e>
 80082be:	2802      	cmp	r0, #2
 80082c0:	d00e      	beq.n	80082e0 <cos+0x70>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d0de      	beq.n	8008284 <cos+0x14>
 80082c6:	2001      	movs	r0, #1
 80082c8:	f000 ff96 	bl	80091f8 <__kernel_sin>
 80082cc:	e7dc      	b.n	8008288 <cos+0x18>
 80082ce:	f000 ff93 	bl	80091f8 <__kernel_sin>
 80082d2:	ec53 2b10 	vmov	r2, r3, d0
 80082d6:	ee10 0a10 	vmov	r0, s0
 80082da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80082de:	e7de      	b.n	800829e <cos+0x2e>
 80082e0:	f000 fb82 	bl	80089e8 <__kernel_cos>
 80082e4:	e7f5      	b.n	80082d2 <cos+0x62>
 80082e6:	bf00      	nop
	...
 80082f0:	3fe921fb 	.word	0x3fe921fb
 80082f4:	7fefffff 	.word	0x7fefffff

080082f8 <sin>:
 80082f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082fa:	ec51 0b10 	vmov	r0, r1, d0
 80082fe:	4a20      	ldr	r2, [pc, #128]	; (8008380 <sin+0x88>)
 8008300:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008304:	4293      	cmp	r3, r2
 8008306:	dc07      	bgt.n	8008318 <sin+0x20>
 8008308:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008378 <sin+0x80>
 800830c:	2000      	movs	r0, #0
 800830e:	f000 ff73 	bl	80091f8 <__kernel_sin>
 8008312:	ec51 0b10 	vmov	r0, r1, d0
 8008316:	e007      	b.n	8008328 <sin+0x30>
 8008318:	4a1a      	ldr	r2, [pc, #104]	; (8008384 <sin+0x8c>)
 800831a:	4293      	cmp	r3, r2
 800831c:	dd09      	ble.n	8008332 <sin+0x3a>
 800831e:	ee10 2a10 	vmov	r2, s0
 8008322:	460b      	mov	r3, r1
 8008324:	f7f7 ff60 	bl	80001e8 <__aeabi_dsub>
 8008328:	ec41 0b10 	vmov	d0, r0, r1
 800832c:	b005      	add	sp, #20
 800832e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008332:	4668      	mov	r0, sp
 8008334:	f000 f8b4 	bl	80084a0 <__ieee754_rem_pio2>
 8008338:	f000 0003 	and.w	r0, r0, #3
 800833c:	2801      	cmp	r0, #1
 800833e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008342:	ed9d 0b00 	vldr	d0, [sp]
 8008346:	d004      	beq.n	8008352 <sin+0x5a>
 8008348:	2802      	cmp	r0, #2
 800834a:	d005      	beq.n	8008358 <sin+0x60>
 800834c:	b970      	cbnz	r0, 800836c <sin+0x74>
 800834e:	2001      	movs	r0, #1
 8008350:	e7dd      	b.n	800830e <sin+0x16>
 8008352:	f000 fb49 	bl	80089e8 <__kernel_cos>
 8008356:	e7dc      	b.n	8008312 <sin+0x1a>
 8008358:	2001      	movs	r0, #1
 800835a:	f000 ff4d 	bl	80091f8 <__kernel_sin>
 800835e:	ec53 2b10 	vmov	r2, r3, d0
 8008362:	ee10 0a10 	vmov	r0, s0
 8008366:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800836a:	e7dd      	b.n	8008328 <sin+0x30>
 800836c:	f000 fb3c 	bl	80089e8 <__kernel_cos>
 8008370:	e7f5      	b.n	800835e <sin+0x66>
 8008372:	bf00      	nop
 8008374:	f3af 8000 	nop.w
	...
 8008380:	3fe921fb 	.word	0x3fe921fb
 8008384:	7fefffff 	.word	0x7fefffff

08008388 <tan>:
 8008388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800838a:	ec51 0b10 	vmov	r0, r1, d0
 800838e:	4a14      	ldr	r2, [pc, #80]	; (80083e0 <tan+0x58>)
 8008390:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008394:	4293      	cmp	r3, r2
 8008396:	dc05      	bgt.n	80083a4 <tan+0x1c>
 8008398:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80083d8 <tan+0x50>
 800839c:	2001      	movs	r0, #1
 800839e:	f000 ffe7 	bl	8009370 <__kernel_tan>
 80083a2:	e009      	b.n	80083b8 <tan+0x30>
 80083a4:	4a0f      	ldr	r2, [pc, #60]	; (80083e4 <tan+0x5c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	dd09      	ble.n	80083be <tan+0x36>
 80083aa:	ee10 2a10 	vmov	r2, s0
 80083ae:	460b      	mov	r3, r1
 80083b0:	f7f7 ff1a 	bl	80001e8 <__aeabi_dsub>
 80083b4:	ec41 0b10 	vmov	d0, r0, r1
 80083b8:	b005      	add	sp, #20
 80083ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80083be:	4668      	mov	r0, sp
 80083c0:	f000 f86e 	bl	80084a0 <__ieee754_rem_pio2>
 80083c4:	0040      	lsls	r0, r0, #1
 80083c6:	f000 0002 	and.w	r0, r0, #2
 80083ca:	f1c0 0001 	rsb	r0, r0, #1
 80083ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083d2:	ed9d 0b00 	vldr	d0, [sp]
 80083d6:	e7e2      	b.n	800839e <tan+0x16>
	...
 80083e0:	3fe921fb 	.word	0x3fe921fb
 80083e4:	7fefffff 	.word	0x7fefffff

080083e8 <sqrt>:
 80083e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083ec:	ed2d 8b02 	vpush	{d8}
 80083f0:	b08b      	sub	sp, #44	; 0x2c
 80083f2:	ec55 4b10 	vmov	r4, r5, d0
 80083f6:	f000 fa45 	bl	8008884 <__ieee754_sqrt>
 80083fa:	4b26      	ldr	r3, [pc, #152]	; (8008494 <sqrt+0xac>)
 80083fc:	eeb0 8a40 	vmov.f32	s16, s0
 8008400:	eef0 8a60 	vmov.f32	s17, s1
 8008404:	f993 6000 	ldrsb.w	r6, [r3]
 8008408:	1c73      	adds	r3, r6, #1
 800840a:	d02a      	beq.n	8008462 <sqrt+0x7a>
 800840c:	4622      	mov	r2, r4
 800840e:	462b      	mov	r3, r5
 8008410:	4620      	mov	r0, r4
 8008412:	4629      	mov	r1, r5
 8008414:	f7f8 fb3a 	bl	8000a8c <__aeabi_dcmpun>
 8008418:	4607      	mov	r7, r0
 800841a:	bb10      	cbnz	r0, 8008462 <sqrt+0x7a>
 800841c:	f04f 0800 	mov.w	r8, #0
 8008420:	f04f 0900 	mov.w	r9, #0
 8008424:	4642      	mov	r2, r8
 8008426:	464b      	mov	r3, r9
 8008428:	4620      	mov	r0, r4
 800842a:	4629      	mov	r1, r5
 800842c:	f7f8 fb06 	bl	8000a3c <__aeabi_dcmplt>
 8008430:	b1b8      	cbz	r0, 8008462 <sqrt+0x7a>
 8008432:	2301      	movs	r3, #1
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4b18      	ldr	r3, [pc, #96]	; (8008498 <sqrt+0xb0>)
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	9708      	str	r7, [sp, #32]
 800843c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008440:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008444:	b9b6      	cbnz	r6, 8008474 <sqrt+0x8c>
 8008446:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800844a:	4668      	mov	r0, sp
 800844c:	f001 f9ec 	bl	8009828 <matherr>
 8008450:	b1d0      	cbz	r0, 8008488 <sqrt+0xa0>
 8008452:	9b08      	ldr	r3, [sp, #32]
 8008454:	b11b      	cbz	r3, 800845e <sqrt+0x76>
 8008456:	f001 fa71 	bl	800993c <__errno>
 800845a:	9b08      	ldr	r3, [sp, #32]
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008462:	eeb0 0a48 	vmov.f32	s0, s16
 8008466:	eef0 0a68 	vmov.f32	s1, s17
 800846a:	b00b      	add	sp, #44	; 0x2c
 800846c:	ecbd 8b02 	vpop	{d8}
 8008470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008474:	4642      	mov	r2, r8
 8008476:	464b      	mov	r3, r9
 8008478:	4640      	mov	r0, r8
 800847a:	4649      	mov	r1, r9
 800847c:	f7f8 f996 	bl	80007ac <__aeabi_ddiv>
 8008480:	2e02      	cmp	r6, #2
 8008482:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008486:	d1e0      	bne.n	800844a <sqrt+0x62>
 8008488:	f001 fa58 	bl	800993c <__errno>
 800848c:	2321      	movs	r3, #33	; 0x21
 800848e:	6003      	str	r3, [r0, #0]
 8008490:	e7df      	b.n	8008452 <sqrt+0x6a>
 8008492:	bf00      	nop
 8008494:	200004a0 	.word	0x200004a0
 8008498:	0800b550 	.word	0x0800b550
 800849c:	00000000 	.word	0x00000000

080084a0 <__ieee754_rem_pio2>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	ec57 6b10 	vmov	r6, r7, d0
 80084a8:	4bc3      	ldr	r3, [pc, #780]	; (80087b8 <__ieee754_rem_pio2+0x318>)
 80084aa:	b08d      	sub	sp, #52	; 0x34
 80084ac:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80084b0:	4598      	cmp	r8, r3
 80084b2:	4604      	mov	r4, r0
 80084b4:	9704      	str	r7, [sp, #16]
 80084b6:	dc07      	bgt.n	80084c8 <__ieee754_rem_pio2+0x28>
 80084b8:	2200      	movs	r2, #0
 80084ba:	2300      	movs	r3, #0
 80084bc:	ed84 0b00 	vstr	d0, [r4]
 80084c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80084c4:	2500      	movs	r5, #0
 80084c6:	e027      	b.n	8008518 <__ieee754_rem_pio2+0x78>
 80084c8:	4bbc      	ldr	r3, [pc, #752]	; (80087bc <__ieee754_rem_pio2+0x31c>)
 80084ca:	4598      	cmp	r8, r3
 80084cc:	dc75      	bgt.n	80085ba <__ieee754_rem_pio2+0x11a>
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	4dbb      	ldr	r5, [pc, #748]	; (80087c0 <__ieee754_rem_pio2+0x320>)
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	ee10 0a10 	vmov	r0, s0
 80084d8:	a3a9      	add	r3, pc, #676	; (adr r3, 8008780 <__ieee754_rem_pio2+0x2e0>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	4639      	mov	r1, r7
 80084e0:	dd36      	ble.n	8008550 <__ieee754_rem_pio2+0xb0>
 80084e2:	f7f7 fe81 	bl	80001e8 <__aeabi_dsub>
 80084e6:	45a8      	cmp	r8, r5
 80084e8:	4606      	mov	r6, r0
 80084ea:	460f      	mov	r7, r1
 80084ec:	d018      	beq.n	8008520 <__ieee754_rem_pio2+0x80>
 80084ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8008788 <__ieee754_rem_pio2+0x2e8>)
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	f7f7 fe78 	bl	80001e8 <__aeabi_dsub>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	e9c4 2300 	strd	r2, r3, [r4]
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f7 fe70 	bl	80001e8 <__aeabi_dsub>
 8008508:	a39f      	add	r3, pc, #636	; (adr r3, 8008788 <__ieee754_rem_pio2+0x2e8>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f7 fe6b 	bl	80001e8 <__aeabi_dsub>
 8008512:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008516:	2501      	movs	r5, #1
 8008518:	4628      	mov	r0, r5
 800851a:	b00d      	add	sp, #52	; 0x34
 800851c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008520:	a39b      	add	r3, pc, #620	; (adr r3, 8008790 <__ieee754_rem_pio2+0x2f0>)
 8008522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008526:	f7f7 fe5f 	bl	80001e8 <__aeabi_dsub>
 800852a:	a39b      	add	r3, pc, #620	; (adr r3, 8008798 <__ieee754_rem_pio2+0x2f8>)
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	4606      	mov	r6, r0
 8008532:	460f      	mov	r7, r1
 8008534:	f7f7 fe58 	bl	80001e8 <__aeabi_dsub>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	e9c4 2300 	strd	r2, r3, [r4]
 8008540:	4630      	mov	r0, r6
 8008542:	4639      	mov	r1, r7
 8008544:	f7f7 fe50 	bl	80001e8 <__aeabi_dsub>
 8008548:	a393      	add	r3, pc, #588	; (adr r3, 8008798 <__ieee754_rem_pio2+0x2f8>)
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	e7de      	b.n	800850e <__ieee754_rem_pio2+0x6e>
 8008550:	f7f7 fe4c 	bl	80001ec <__adddf3>
 8008554:	45a8      	cmp	r8, r5
 8008556:	4606      	mov	r6, r0
 8008558:	460f      	mov	r7, r1
 800855a:	d016      	beq.n	800858a <__ieee754_rem_pio2+0xea>
 800855c:	a38a      	add	r3, pc, #552	; (adr r3, 8008788 <__ieee754_rem_pio2+0x2e8>)
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	f7f7 fe43 	bl	80001ec <__adddf3>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	e9c4 2300 	strd	r2, r3, [r4]
 800856e:	4630      	mov	r0, r6
 8008570:	4639      	mov	r1, r7
 8008572:	f7f7 fe39 	bl	80001e8 <__aeabi_dsub>
 8008576:	a384      	add	r3, pc, #528	; (adr r3, 8008788 <__ieee754_rem_pio2+0x2e8>)
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f7f7 fe36 	bl	80001ec <__adddf3>
 8008580:	f04f 35ff 	mov.w	r5, #4294967295
 8008584:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008588:	e7c6      	b.n	8008518 <__ieee754_rem_pio2+0x78>
 800858a:	a381      	add	r3, pc, #516	; (adr r3, 8008790 <__ieee754_rem_pio2+0x2f0>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f7 fe2c 	bl	80001ec <__adddf3>
 8008594:	a380      	add	r3, pc, #512	; (adr r3, 8008798 <__ieee754_rem_pio2+0x2f8>)
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	f7f7 fe25 	bl	80001ec <__adddf3>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	e9c4 2300 	strd	r2, r3, [r4]
 80085aa:	4630      	mov	r0, r6
 80085ac:	4639      	mov	r1, r7
 80085ae:	f7f7 fe1b 	bl	80001e8 <__aeabi_dsub>
 80085b2:	a379      	add	r3, pc, #484	; (adr r3, 8008798 <__ieee754_rem_pio2+0x2f8>)
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	e7e0      	b.n	800857c <__ieee754_rem_pio2+0xdc>
 80085ba:	4b82      	ldr	r3, [pc, #520]	; (80087c4 <__ieee754_rem_pio2+0x324>)
 80085bc:	4598      	cmp	r8, r3
 80085be:	f300 80d0 	bgt.w	8008762 <__ieee754_rem_pio2+0x2c2>
 80085c2:	f001 f8a1 	bl	8009708 <fabs>
 80085c6:	ec57 6b10 	vmov	r6, r7, d0
 80085ca:	ee10 0a10 	vmov	r0, s0
 80085ce:	a374      	add	r3, pc, #464	; (adr r3, 80087a0 <__ieee754_rem_pio2+0x300>)
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f7 ffbf 	bl	8000558 <__aeabi_dmul>
 80085da:	2200      	movs	r2, #0
 80085dc:	4b7a      	ldr	r3, [pc, #488]	; (80087c8 <__ieee754_rem_pio2+0x328>)
 80085de:	f7f7 fe05 	bl	80001ec <__adddf3>
 80085e2:	f7f8 fa69 	bl	8000ab8 <__aeabi_d2iz>
 80085e6:	4605      	mov	r5, r0
 80085e8:	f7f7 ff4c 	bl	8000484 <__aeabi_i2d>
 80085ec:	a364      	add	r3, pc, #400	; (adr r3, 8008780 <__ieee754_rem_pio2+0x2e0>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f6:	f7f7 ffaf 	bl	8000558 <__aeabi_dmul>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4630      	mov	r0, r6
 8008600:	4639      	mov	r1, r7
 8008602:	f7f7 fdf1 	bl	80001e8 <__aeabi_dsub>
 8008606:	a360      	add	r3, pc, #384	; (adr r3, 8008788 <__ieee754_rem_pio2+0x2e8>)
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	4682      	mov	sl, r0
 800860e:	468b      	mov	fp, r1
 8008610:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008614:	f7f7 ffa0 	bl	8000558 <__aeabi_dmul>
 8008618:	2d1f      	cmp	r5, #31
 800861a:	4606      	mov	r6, r0
 800861c:	460f      	mov	r7, r1
 800861e:	dc0c      	bgt.n	800863a <__ieee754_rem_pio2+0x19a>
 8008620:	1e6a      	subs	r2, r5, #1
 8008622:	4b6a      	ldr	r3, [pc, #424]	; (80087cc <__ieee754_rem_pio2+0x32c>)
 8008624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008628:	4543      	cmp	r3, r8
 800862a:	d006      	beq.n	800863a <__ieee754_rem_pio2+0x19a>
 800862c:	4632      	mov	r2, r6
 800862e:	463b      	mov	r3, r7
 8008630:	4650      	mov	r0, sl
 8008632:	4659      	mov	r1, fp
 8008634:	f7f7 fdd8 	bl	80001e8 <__aeabi_dsub>
 8008638:	e00e      	b.n	8008658 <__ieee754_rem_pio2+0x1b8>
 800863a:	4632      	mov	r2, r6
 800863c:	463b      	mov	r3, r7
 800863e:	4650      	mov	r0, sl
 8008640:	4659      	mov	r1, fp
 8008642:	f7f7 fdd1 	bl	80001e8 <__aeabi_dsub>
 8008646:	ea4f 5328 	mov.w	r3, r8, asr #20
 800864a:	9305      	str	r3, [sp, #20]
 800864c:	9a05      	ldr	r2, [sp, #20]
 800864e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	2b10      	cmp	r3, #16
 8008656:	dc02      	bgt.n	800865e <__ieee754_rem_pio2+0x1be>
 8008658:	e9c4 0100 	strd	r0, r1, [r4]
 800865c:	e039      	b.n	80086d2 <__ieee754_rem_pio2+0x232>
 800865e:	a34c      	add	r3, pc, #304	; (adr r3, 8008790 <__ieee754_rem_pio2+0x2f0>)
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008668:	f7f7 ff76 	bl	8000558 <__aeabi_dmul>
 800866c:	4606      	mov	r6, r0
 800866e:	460f      	mov	r7, r1
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4650      	mov	r0, sl
 8008676:	4659      	mov	r1, fp
 8008678:	f7f7 fdb6 	bl	80001e8 <__aeabi_dsub>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4680      	mov	r8, r0
 8008682:	4689      	mov	r9, r1
 8008684:	4650      	mov	r0, sl
 8008686:	4659      	mov	r1, fp
 8008688:	f7f7 fdae 	bl	80001e8 <__aeabi_dsub>
 800868c:	4632      	mov	r2, r6
 800868e:	463b      	mov	r3, r7
 8008690:	f7f7 fdaa 	bl	80001e8 <__aeabi_dsub>
 8008694:	a340      	add	r3, pc, #256	; (adr r3, 8008798 <__ieee754_rem_pio2+0x2f8>)
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	4606      	mov	r6, r0
 800869c:	460f      	mov	r7, r1
 800869e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086a2:	f7f7 ff59 	bl	8000558 <__aeabi_dmul>
 80086a6:	4632      	mov	r2, r6
 80086a8:	463b      	mov	r3, r7
 80086aa:	f7f7 fd9d 	bl	80001e8 <__aeabi_dsub>
 80086ae:	4602      	mov	r2, r0
 80086b0:	460b      	mov	r3, r1
 80086b2:	4606      	mov	r6, r0
 80086b4:	460f      	mov	r7, r1
 80086b6:	4640      	mov	r0, r8
 80086b8:	4649      	mov	r1, r9
 80086ba:	f7f7 fd95 	bl	80001e8 <__aeabi_dsub>
 80086be:	9a05      	ldr	r2, [sp, #20]
 80086c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b31      	cmp	r3, #49	; 0x31
 80086c8:	dc20      	bgt.n	800870c <__ieee754_rem_pio2+0x26c>
 80086ca:	e9c4 0100 	strd	r0, r1, [r4]
 80086ce:	46c2      	mov	sl, r8
 80086d0:	46cb      	mov	fp, r9
 80086d2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80086d6:	4650      	mov	r0, sl
 80086d8:	4642      	mov	r2, r8
 80086da:	464b      	mov	r3, r9
 80086dc:	4659      	mov	r1, fp
 80086de:	f7f7 fd83 	bl	80001e8 <__aeabi_dsub>
 80086e2:	463b      	mov	r3, r7
 80086e4:	4632      	mov	r2, r6
 80086e6:	f7f7 fd7f 	bl	80001e8 <__aeabi_dsub>
 80086ea:	9b04      	ldr	r3, [sp, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80086f2:	f6bf af11 	bge.w	8008518 <__ieee754_rem_pio2+0x78>
 80086f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80086fa:	6063      	str	r3, [r4, #4]
 80086fc:	f8c4 8000 	str.w	r8, [r4]
 8008700:	60a0      	str	r0, [r4, #8]
 8008702:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008706:	60e3      	str	r3, [r4, #12]
 8008708:	426d      	negs	r5, r5
 800870a:	e705      	b.n	8008518 <__ieee754_rem_pio2+0x78>
 800870c:	a326      	add	r3, pc, #152	; (adr r3, 80087a8 <__ieee754_rem_pio2+0x308>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008716:	f7f7 ff1f 	bl	8000558 <__aeabi_dmul>
 800871a:	4606      	mov	r6, r0
 800871c:	460f      	mov	r7, r1
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4640      	mov	r0, r8
 8008724:	4649      	mov	r1, r9
 8008726:	f7f7 fd5f 	bl	80001e8 <__aeabi_dsub>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4682      	mov	sl, r0
 8008730:	468b      	mov	fp, r1
 8008732:	4640      	mov	r0, r8
 8008734:	4649      	mov	r1, r9
 8008736:	f7f7 fd57 	bl	80001e8 <__aeabi_dsub>
 800873a:	4632      	mov	r2, r6
 800873c:	463b      	mov	r3, r7
 800873e:	f7f7 fd53 	bl	80001e8 <__aeabi_dsub>
 8008742:	a31b      	add	r3, pc, #108	; (adr r3, 80087b0 <__ieee754_rem_pio2+0x310>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	4606      	mov	r6, r0
 800874a:	460f      	mov	r7, r1
 800874c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008750:	f7f7 ff02 	bl	8000558 <__aeabi_dmul>
 8008754:	4632      	mov	r2, r6
 8008756:	463b      	mov	r3, r7
 8008758:	f7f7 fd46 	bl	80001e8 <__aeabi_dsub>
 800875c:	4606      	mov	r6, r0
 800875e:	460f      	mov	r7, r1
 8008760:	e764      	b.n	800862c <__ieee754_rem_pio2+0x18c>
 8008762:	4b1b      	ldr	r3, [pc, #108]	; (80087d0 <__ieee754_rem_pio2+0x330>)
 8008764:	4598      	cmp	r8, r3
 8008766:	dd35      	ble.n	80087d4 <__ieee754_rem_pio2+0x334>
 8008768:	ee10 2a10 	vmov	r2, s0
 800876c:	463b      	mov	r3, r7
 800876e:	4630      	mov	r0, r6
 8008770:	4639      	mov	r1, r7
 8008772:	f7f7 fd39 	bl	80001e8 <__aeabi_dsub>
 8008776:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800877a:	e9c4 0100 	strd	r0, r1, [r4]
 800877e:	e6a1      	b.n	80084c4 <__ieee754_rem_pio2+0x24>
 8008780:	54400000 	.word	0x54400000
 8008784:	3ff921fb 	.word	0x3ff921fb
 8008788:	1a626331 	.word	0x1a626331
 800878c:	3dd0b461 	.word	0x3dd0b461
 8008790:	1a600000 	.word	0x1a600000
 8008794:	3dd0b461 	.word	0x3dd0b461
 8008798:	2e037073 	.word	0x2e037073
 800879c:	3ba3198a 	.word	0x3ba3198a
 80087a0:	6dc9c883 	.word	0x6dc9c883
 80087a4:	3fe45f30 	.word	0x3fe45f30
 80087a8:	2e000000 	.word	0x2e000000
 80087ac:	3ba3198a 	.word	0x3ba3198a
 80087b0:	252049c1 	.word	0x252049c1
 80087b4:	397b839a 	.word	0x397b839a
 80087b8:	3fe921fb 	.word	0x3fe921fb
 80087bc:	4002d97b 	.word	0x4002d97b
 80087c0:	3ff921fb 	.word	0x3ff921fb
 80087c4:	413921fb 	.word	0x413921fb
 80087c8:	3fe00000 	.word	0x3fe00000
 80087cc:	0800b558 	.word	0x0800b558
 80087d0:	7fefffff 	.word	0x7fefffff
 80087d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80087d8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80087dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80087e0:	4630      	mov	r0, r6
 80087e2:	460f      	mov	r7, r1
 80087e4:	f7f8 f968 	bl	8000ab8 <__aeabi_d2iz>
 80087e8:	f7f7 fe4c 	bl	8000484 <__aeabi_i2d>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80087f8:	f7f7 fcf6 	bl	80001e8 <__aeabi_dsub>
 80087fc:	2200      	movs	r2, #0
 80087fe:	4b1f      	ldr	r3, [pc, #124]	; (800887c <__ieee754_rem_pio2+0x3dc>)
 8008800:	f7f7 feaa 	bl	8000558 <__aeabi_dmul>
 8008804:	460f      	mov	r7, r1
 8008806:	4606      	mov	r6, r0
 8008808:	f7f8 f956 	bl	8000ab8 <__aeabi_d2iz>
 800880c:	f7f7 fe3a 	bl	8000484 <__aeabi_i2d>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4630      	mov	r0, r6
 8008816:	4639      	mov	r1, r7
 8008818:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800881c:	f7f7 fce4 	bl	80001e8 <__aeabi_dsub>
 8008820:	2200      	movs	r2, #0
 8008822:	4b16      	ldr	r3, [pc, #88]	; (800887c <__ieee754_rem_pio2+0x3dc>)
 8008824:	f7f7 fe98 	bl	8000558 <__aeabi_dmul>
 8008828:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800882c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008830:	f04f 0803 	mov.w	r8, #3
 8008834:	2600      	movs	r6, #0
 8008836:	2700      	movs	r7, #0
 8008838:	4632      	mov	r2, r6
 800883a:	463b      	mov	r3, r7
 800883c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008840:	f108 3aff 	add.w	sl, r8, #4294967295
 8008844:	f7f8 f8f0 	bl	8000a28 <__aeabi_dcmpeq>
 8008848:	b9b0      	cbnz	r0, 8008878 <__ieee754_rem_pio2+0x3d8>
 800884a:	4b0d      	ldr	r3, [pc, #52]	; (8008880 <__ieee754_rem_pio2+0x3e0>)
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	2302      	movs	r3, #2
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	462a      	mov	r2, r5
 8008854:	4643      	mov	r3, r8
 8008856:	4621      	mov	r1, r4
 8008858:	a806      	add	r0, sp, #24
 800885a:	f000 f98d 	bl	8008b78 <__kernel_rem_pio2>
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	4605      	mov	r5, r0
 8008864:	f6bf ae58 	bge.w	8008518 <__ieee754_rem_pio2+0x78>
 8008868:	6863      	ldr	r3, [r4, #4]
 800886a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800886e:	6063      	str	r3, [r4, #4]
 8008870:	68e3      	ldr	r3, [r4, #12]
 8008872:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008876:	e746      	b.n	8008706 <__ieee754_rem_pio2+0x266>
 8008878:	46d0      	mov	r8, sl
 800887a:	e7dd      	b.n	8008838 <__ieee754_rem_pio2+0x398>
 800887c:	41700000 	.word	0x41700000
 8008880:	0800b5d8 	.word	0x0800b5d8

08008884 <__ieee754_sqrt>:
 8008884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008888:	4955      	ldr	r1, [pc, #340]	; (80089e0 <__ieee754_sqrt+0x15c>)
 800888a:	ec55 4b10 	vmov	r4, r5, d0
 800888e:	43a9      	bics	r1, r5
 8008890:	462b      	mov	r3, r5
 8008892:	462a      	mov	r2, r5
 8008894:	d112      	bne.n	80088bc <__ieee754_sqrt+0x38>
 8008896:	ee10 2a10 	vmov	r2, s0
 800889a:	ee10 0a10 	vmov	r0, s0
 800889e:	4629      	mov	r1, r5
 80088a0:	f7f7 fe5a 	bl	8000558 <__aeabi_dmul>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4620      	mov	r0, r4
 80088aa:	4629      	mov	r1, r5
 80088ac:	f7f7 fc9e 	bl	80001ec <__adddf3>
 80088b0:	4604      	mov	r4, r0
 80088b2:	460d      	mov	r5, r1
 80088b4:	ec45 4b10 	vmov	d0, r4, r5
 80088b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088bc:	2d00      	cmp	r5, #0
 80088be:	ee10 0a10 	vmov	r0, s0
 80088c2:	4621      	mov	r1, r4
 80088c4:	dc0f      	bgt.n	80088e6 <__ieee754_sqrt+0x62>
 80088c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80088ca:	4330      	orrs	r0, r6
 80088cc:	d0f2      	beq.n	80088b4 <__ieee754_sqrt+0x30>
 80088ce:	b155      	cbz	r5, 80088e6 <__ieee754_sqrt+0x62>
 80088d0:	ee10 2a10 	vmov	r2, s0
 80088d4:	4620      	mov	r0, r4
 80088d6:	4629      	mov	r1, r5
 80088d8:	f7f7 fc86 	bl	80001e8 <__aeabi_dsub>
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	f7f7 ff64 	bl	80007ac <__aeabi_ddiv>
 80088e4:	e7e4      	b.n	80088b0 <__ieee754_sqrt+0x2c>
 80088e6:	151b      	asrs	r3, r3, #20
 80088e8:	d073      	beq.n	80089d2 <__ieee754_sqrt+0x14e>
 80088ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088ee:	07dd      	lsls	r5, r3, #31
 80088f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80088f4:	bf48      	it	mi
 80088f6:	0fc8      	lsrmi	r0, r1, #31
 80088f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80088fc:	bf44      	itt	mi
 80088fe:	0049      	lslmi	r1, r1, #1
 8008900:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008904:	2500      	movs	r5, #0
 8008906:	1058      	asrs	r0, r3, #1
 8008908:	0fcb      	lsrs	r3, r1, #31
 800890a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800890e:	0049      	lsls	r1, r1, #1
 8008910:	2316      	movs	r3, #22
 8008912:	462c      	mov	r4, r5
 8008914:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008918:	19a7      	adds	r7, r4, r6
 800891a:	4297      	cmp	r7, r2
 800891c:	bfde      	ittt	le
 800891e:	19bc      	addle	r4, r7, r6
 8008920:	1bd2      	suble	r2, r2, r7
 8008922:	19ad      	addle	r5, r5, r6
 8008924:	0fcf      	lsrs	r7, r1, #31
 8008926:	3b01      	subs	r3, #1
 8008928:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800892c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008930:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008934:	d1f0      	bne.n	8008918 <__ieee754_sqrt+0x94>
 8008936:	f04f 0c20 	mov.w	ip, #32
 800893a:	469e      	mov	lr, r3
 800893c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008940:	42a2      	cmp	r2, r4
 8008942:	eb06 070e 	add.w	r7, r6, lr
 8008946:	dc02      	bgt.n	800894e <__ieee754_sqrt+0xca>
 8008948:	d112      	bne.n	8008970 <__ieee754_sqrt+0xec>
 800894a:	428f      	cmp	r7, r1
 800894c:	d810      	bhi.n	8008970 <__ieee754_sqrt+0xec>
 800894e:	2f00      	cmp	r7, #0
 8008950:	eb07 0e06 	add.w	lr, r7, r6
 8008954:	da42      	bge.n	80089dc <__ieee754_sqrt+0x158>
 8008956:	f1be 0f00 	cmp.w	lr, #0
 800895a:	db3f      	blt.n	80089dc <__ieee754_sqrt+0x158>
 800895c:	f104 0801 	add.w	r8, r4, #1
 8008960:	1b12      	subs	r2, r2, r4
 8008962:	428f      	cmp	r7, r1
 8008964:	bf88      	it	hi
 8008966:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800896a:	1bc9      	subs	r1, r1, r7
 800896c:	4433      	add	r3, r6
 800896e:	4644      	mov	r4, r8
 8008970:	0052      	lsls	r2, r2, #1
 8008972:	f1bc 0c01 	subs.w	ip, ip, #1
 8008976:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800897a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800897e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008982:	d1dd      	bne.n	8008940 <__ieee754_sqrt+0xbc>
 8008984:	430a      	orrs	r2, r1
 8008986:	d006      	beq.n	8008996 <__ieee754_sqrt+0x112>
 8008988:	1c5c      	adds	r4, r3, #1
 800898a:	bf13      	iteet	ne
 800898c:	3301      	addne	r3, #1
 800898e:	3501      	addeq	r5, #1
 8008990:	4663      	moveq	r3, ip
 8008992:	f023 0301 	bicne.w	r3, r3, #1
 8008996:	106a      	asrs	r2, r5, #1
 8008998:	085b      	lsrs	r3, r3, #1
 800899a:	07e9      	lsls	r1, r5, #31
 800899c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80089a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80089a4:	bf48      	it	mi
 80089a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80089aa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80089ae:	461c      	mov	r4, r3
 80089b0:	e780      	b.n	80088b4 <__ieee754_sqrt+0x30>
 80089b2:	0aca      	lsrs	r2, r1, #11
 80089b4:	3815      	subs	r0, #21
 80089b6:	0549      	lsls	r1, r1, #21
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	d0fa      	beq.n	80089b2 <__ieee754_sqrt+0x12e>
 80089bc:	02d6      	lsls	r6, r2, #11
 80089be:	d50a      	bpl.n	80089d6 <__ieee754_sqrt+0x152>
 80089c0:	f1c3 0420 	rsb	r4, r3, #32
 80089c4:	fa21 f404 	lsr.w	r4, r1, r4
 80089c8:	1e5d      	subs	r5, r3, #1
 80089ca:	4099      	lsls	r1, r3
 80089cc:	4322      	orrs	r2, r4
 80089ce:	1b43      	subs	r3, r0, r5
 80089d0:	e78b      	b.n	80088ea <__ieee754_sqrt+0x66>
 80089d2:	4618      	mov	r0, r3
 80089d4:	e7f0      	b.n	80089b8 <__ieee754_sqrt+0x134>
 80089d6:	0052      	lsls	r2, r2, #1
 80089d8:	3301      	adds	r3, #1
 80089da:	e7ef      	b.n	80089bc <__ieee754_sqrt+0x138>
 80089dc:	46a0      	mov	r8, r4
 80089de:	e7bf      	b.n	8008960 <__ieee754_sqrt+0xdc>
 80089e0:	7ff00000 	.word	0x7ff00000
 80089e4:	00000000 	.word	0x00000000

080089e8 <__kernel_cos>:
 80089e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	ec59 8b10 	vmov	r8, r9, d0
 80089f0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80089f4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80089f8:	ed2d 8b02 	vpush	{d8}
 80089fc:	eeb0 8a41 	vmov.f32	s16, s2
 8008a00:	eef0 8a61 	vmov.f32	s17, s3
 8008a04:	da07      	bge.n	8008a16 <__kernel_cos+0x2e>
 8008a06:	ee10 0a10 	vmov	r0, s0
 8008a0a:	4649      	mov	r1, r9
 8008a0c:	f7f8 f854 	bl	8000ab8 <__aeabi_d2iz>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f000 8089 	beq.w	8008b28 <__kernel_cos+0x140>
 8008a16:	4642      	mov	r2, r8
 8008a18:	464b      	mov	r3, r9
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	f7f7 fd9b 	bl	8000558 <__aeabi_dmul>
 8008a22:	2200      	movs	r2, #0
 8008a24:	4b4e      	ldr	r3, [pc, #312]	; (8008b60 <__kernel_cos+0x178>)
 8008a26:	4604      	mov	r4, r0
 8008a28:	460d      	mov	r5, r1
 8008a2a:	f7f7 fd95 	bl	8000558 <__aeabi_dmul>
 8008a2e:	a340      	add	r3, pc, #256	; (adr r3, 8008b30 <__kernel_cos+0x148>)
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	4682      	mov	sl, r0
 8008a36:	468b      	mov	fp, r1
 8008a38:	4620      	mov	r0, r4
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	f7f7 fd8c 	bl	8000558 <__aeabi_dmul>
 8008a40:	a33d      	add	r3, pc, #244	; (adr r3, 8008b38 <__kernel_cos+0x150>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	f7f7 fbd1 	bl	80001ec <__adddf3>
 8008a4a:	4622      	mov	r2, r4
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	f7f7 fd83 	bl	8000558 <__aeabi_dmul>
 8008a52:	a33b      	add	r3, pc, #236	; (adr r3, 8008b40 <__kernel_cos+0x158>)
 8008a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a58:	f7f7 fbc6 	bl	80001e8 <__aeabi_dsub>
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	462b      	mov	r3, r5
 8008a60:	f7f7 fd7a 	bl	8000558 <__aeabi_dmul>
 8008a64:	a338      	add	r3, pc, #224	; (adr r3, 8008b48 <__kernel_cos+0x160>)
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	f7f7 fbbf 	bl	80001ec <__adddf3>
 8008a6e:	4622      	mov	r2, r4
 8008a70:	462b      	mov	r3, r5
 8008a72:	f7f7 fd71 	bl	8000558 <__aeabi_dmul>
 8008a76:	a336      	add	r3, pc, #216	; (adr r3, 8008b50 <__kernel_cos+0x168>)
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	f7f7 fbb4 	bl	80001e8 <__aeabi_dsub>
 8008a80:	4622      	mov	r2, r4
 8008a82:	462b      	mov	r3, r5
 8008a84:	f7f7 fd68 	bl	8000558 <__aeabi_dmul>
 8008a88:	a333      	add	r3, pc, #204	; (adr r3, 8008b58 <__kernel_cos+0x170>)
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f7f7 fbad 	bl	80001ec <__adddf3>
 8008a92:	4622      	mov	r2, r4
 8008a94:	462b      	mov	r3, r5
 8008a96:	f7f7 fd5f 	bl	8000558 <__aeabi_dmul>
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	f7f7 fd5b 	bl	8000558 <__aeabi_dmul>
 8008aa2:	ec53 2b18 	vmov	r2, r3, d8
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	460d      	mov	r5, r1
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	f7f7 fd53 	bl	8000558 <__aeabi_dmul>
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f7f7 fb95 	bl	80001e8 <__aeabi_dsub>
 8008abe:	4b29      	ldr	r3, [pc, #164]	; (8008b64 <__kernel_cos+0x17c>)
 8008ac0:	429e      	cmp	r6, r3
 8008ac2:	4680      	mov	r8, r0
 8008ac4:	4689      	mov	r9, r1
 8008ac6:	dc11      	bgt.n	8008aec <__kernel_cos+0x104>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4650      	mov	r0, sl
 8008ace:	4659      	mov	r1, fp
 8008ad0:	f7f7 fb8a 	bl	80001e8 <__aeabi_dsub>
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4924      	ldr	r1, [pc, #144]	; (8008b68 <__kernel_cos+0x180>)
 8008ad8:	4602      	mov	r2, r0
 8008ada:	2000      	movs	r0, #0
 8008adc:	f7f7 fb84 	bl	80001e8 <__aeabi_dsub>
 8008ae0:	ecbd 8b02 	vpop	{d8}
 8008ae4:	ec41 0b10 	vmov	d0, r0, r1
 8008ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aec:	4b1f      	ldr	r3, [pc, #124]	; (8008b6c <__kernel_cos+0x184>)
 8008aee:	491e      	ldr	r1, [pc, #120]	; (8008b68 <__kernel_cos+0x180>)
 8008af0:	429e      	cmp	r6, r3
 8008af2:	bfcc      	ite	gt
 8008af4:	4d1e      	ldrgt	r5, [pc, #120]	; (8008b70 <__kernel_cos+0x188>)
 8008af6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008afa:	2400      	movs	r4, #0
 8008afc:	4622      	mov	r2, r4
 8008afe:	462b      	mov	r3, r5
 8008b00:	2000      	movs	r0, #0
 8008b02:	f7f7 fb71 	bl	80001e8 <__aeabi_dsub>
 8008b06:	4622      	mov	r2, r4
 8008b08:	4606      	mov	r6, r0
 8008b0a:	460f      	mov	r7, r1
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	4650      	mov	r0, sl
 8008b10:	4659      	mov	r1, fp
 8008b12:	f7f7 fb69 	bl	80001e8 <__aeabi_dsub>
 8008b16:	4642      	mov	r2, r8
 8008b18:	464b      	mov	r3, r9
 8008b1a:	f7f7 fb65 	bl	80001e8 <__aeabi_dsub>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4630      	mov	r0, r6
 8008b24:	4639      	mov	r1, r7
 8008b26:	e7d9      	b.n	8008adc <__kernel_cos+0xf4>
 8008b28:	2000      	movs	r0, #0
 8008b2a:	490f      	ldr	r1, [pc, #60]	; (8008b68 <__kernel_cos+0x180>)
 8008b2c:	e7d8      	b.n	8008ae0 <__kernel_cos+0xf8>
 8008b2e:	bf00      	nop
 8008b30:	be8838d4 	.word	0xbe8838d4
 8008b34:	bda8fae9 	.word	0xbda8fae9
 8008b38:	bdb4b1c4 	.word	0xbdb4b1c4
 8008b3c:	3e21ee9e 	.word	0x3e21ee9e
 8008b40:	809c52ad 	.word	0x809c52ad
 8008b44:	3e927e4f 	.word	0x3e927e4f
 8008b48:	19cb1590 	.word	0x19cb1590
 8008b4c:	3efa01a0 	.word	0x3efa01a0
 8008b50:	16c15177 	.word	0x16c15177
 8008b54:	3f56c16c 	.word	0x3f56c16c
 8008b58:	5555554c 	.word	0x5555554c
 8008b5c:	3fa55555 	.word	0x3fa55555
 8008b60:	3fe00000 	.word	0x3fe00000
 8008b64:	3fd33332 	.word	0x3fd33332
 8008b68:	3ff00000 	.word	0x3ff00000
 8008b6c:	3fe90000 	.word	0x3fe90000
 8008b70:	3fd20000 	.word	0x3fd20000
 8008b74:	00000000 	.word	0x00000000

08008b78 <__kernel_rem_pio2>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	ed2d 8b02 	vpush	{d8}
 8008b80:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008b84:	1ed4      	subs	r4, r2, #3
 8008b86:	9308      	str	r3, [sp, #32]
 8008b88:	9101      	str	r1, [sp, #4]
 8008b8a:	4bc5      	ldr	r3, [pc, #788]	; (8008ea0 <__kernel_rem_pio2+0x328>)
 8008b8c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008b8e:	9009      	str	r0, [sp, #36]	; 0x24
 8008b90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	9b08      	ldr	r3, [sp, #32]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	9307      	str	r3, [sp, #28]
 8008b9c:	2318      	movs	r3, #24
 8008b9e:	fb94 f4f3 	sdiv	r4, r4, r3
 8008ba2:	f06f 0317 	mvn.w	r3, #23
 8008ba6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008baa:	fb04 3303 	mla	r3, r4, r3, r3
 8008bae:	eb03 0a02 	add.w	sl, r3, r2
 8008bb2:	9b04      	ldr	r3, [sp, #16]
 8008bb4:	9a07      	ldr	r2, [sp, #28]
 8008bb6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008e90 <__kernel_rem_pio2+0x318>
 8008bba:	eb03 0802 	add.w	r8, r3, r2
 8008bbe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008bc0:	1aa7      	subs	r7, r4, r2
 8008bc2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008bc6:	ae22      	add	r6, sp, #136	; 0x88
 8008bc8:	2500      	movs	r5, #0
 8008bca:	4545      	cmp	r5, r8
 8008bcc:	dd13      	ble.n	8008bf6 <__kernel_rem_pio2+0x7e>
 8008bce:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8008e90 <__kernel_rem_pio2+0x318>
 8008bd2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008bd6:	2600      	movs	r6, #0
 8008bd8:	9b04      	ldr	r3, [sp, #16]
 8008bda:	429e      	cmp	r6, r3
 8008bdc:	dc32      	bgt.n	8008c44 <__kernel_rem_pio2+0xcc>
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	9302      	str	r3, [sp, #8]
 8008be2:	9b08      	ldr	r3, [sp, #32]
 8008be4:	199d      	adds	r5, r3, r6
 8008be6:	ab22      	add	r3, sp, #136	; 0x88
 8008be8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008bec:	9306      	str	r3, [sp, #24]
 8008bee:	ec59 8b18 	vmov	r8, r9, d8
 8008bf2:	2700      	movs	r7, #0
 8008bf4:	e01f      	b.n	8008c36 <__kernel_rem_pio2+0xbe>
 8008bf6:	42ef      	cmn	r7, r5
 8008bf8:	d407      	bmi.n	8008c0a <__kernel_rem_pio2+0x92>
 8008bfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008bfe:	f7f7 fc41 	bl	8000484 <__aeabi_i2d>
 8008c02:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008c06:	3501      	adds	r5, #1
 8008c08:	e7df      	b.n	8008bca <__kernel_rem_pio2+0x52>
 8008c0a:	ec51 0b18 	vmov	r0, r1, d8
 8008c0e:	e7f8      	b.n	8008c02 <__kernel_rem_pio2+0x8a>
 8008c10:	9906      	ldr	r1, [sp, #24]
 8008c12:	9d02      	ldr	r5, [sp, #8]
 8008c14:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8008c18:	9106      	str	r1, [sp, #24]
 8008c1a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8008c1e:	9502      	str	r5, [sp, #8]
 8008c20:	f7f7 fc9a 	bl	8000558 <__aeabi_dmul>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4640      	mov	r0, r8
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	f7f7 fade 	bl	80001ec <__adddf3>
 8008c30:	3701      	adds	r7, #1
 8008c32:	4680      	mov	r8, r0
 8008c34:	4689      	mov	r9, r1
 8008c36:	9b07      	ldr	r3, [sp, #28]
 8008c38:	429f      	cmp	r7, r3
 8008c3a:	dde9      	ble.n	8008c10 <__kernel_rem_pio2+0x98>
 8008c3c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008c40:	3601      	adds	r6, #1
 8008c42:	e7c9      	b.n	8008bd8 <__kernel_rem_pio2+0x60>
 8008c44:	9b04      	ldr	r3, [sp, #16]
 8008c46:	aa0e      	add	r2, sp, #56	; 0x38
 8008c48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c4c:	930c      	str	r3, [sp, #48]	; 0x30
 8008c4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008c50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c54:	9c04      	ldr	r4, [sp, #16]
 8008c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c58:	ab9a      	add	r3, sp, #616	; 0x268
 8008c5a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8008c5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c66:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008c6a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008c6e:	ab9a      	add	r3, sp, #616	; 0x268
 8008c70:	445b      	add	r3, fp
 8008c72:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8008c76:	2500      	movs	r5, #0
 8008c78:	1b63      	subs	r3, r4, r5
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	dc78      	bgt.n	8008d70 <__kernel_rem_pio2+0x1f8>
 8008c7e:	4650      	mov	r0, sl
 8008c80:	ec49 8b10 	vmov	d0, r8, r9
 8008c84:	f000 fdd4 	bl	8009830 <scalbn>
 8008c88:	ec57 6b10 	vmov	r6, r7, d0
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c92:	ee10 0a10 	vmov	r0, s0
 8008c96:	4639      	mov	r1, r7
 8008c98:	f7f7 fc5e 	bl	8000558 <__aeabi_dmul>
 8008c9c:	ec41 0b10 	vmov	d0, r0, r1
 8008ca0:	f000 fd3e 	bl	8009720 <floor>
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	ec51 0b10 	vmov	r0, r1, d0
 8008caa:	4b7e      	ldr	r3, [pc, #504]	; (8008ea4 <__kernel_rem_pio2+0x32c>)
 8008cac:	f7f7 fc54 	bl	8000558 <__aeabi_dmul>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	4639      	mov	r1, r7
 8008cb8:	f7f7 fa96 	bl	80001e8 <__aeabi_dsub>
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	4606      	mov	r6, r0
 8008cc0:	f7f7 fefa 	bl	8000ab8 <__aeabi_d2iz>
 8008cc4:	9006      	str	r0, [sp, #24]
 8008cc6:	f7f7 fbdd 	bl	8000484 <__aeabi_i2d>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	4630      	mov	r0, r6
 8008cd0:	4639      	mov	r1, r7
 8008cd2:	f7f7 fa89 	bl	80001e8 <__aeabi_dsub>
 8008cd6:	f1ba 0f00 	cmp.w	sl, #0
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460f      	mov	r7, r1
 8008cde:	dd6c      	ble.n	8008dba <__kernel_rem_pio2+0x242>
 8008ce0:	1e62      	subs	r2, r4, #1
 8008ce2:	ab0e      	add	r3, sp, #56	; 0x38
 8008ce4:	f1ca 0118 	rsb	r1, sl, #24
 8008ce8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008cec:	9d06      	ldr	r5, [sp, #24]
 8008cee:	fa40 f301 	asr.w	r3, r0, r1
 8008cf2:	441d      	add	r5, r3
 8008cf4:	408b      	lsls	r3, r1
 8008cf6:	1ac0      	subs	r0, r0, r3
 8008cf8:	ab0e      	add	r3, sp, #56	; 0x38
 8008cfa:	9506      	str	r5, [sp, #24]
 8008cfc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008d00:	f1ca 0317 	rsb	r3, sl, #23
 8008d04:	fa40 f303 	asr.w	r3, r0, r3
 8008d08:	9302      	str	r3, [sp, #8]
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dd62      	ble.n	8008dd6 <__kernel_rem_pio2+0x25e>
 8008d10:	9b06      	ldr	r3, [sp, #24]
 8008d12:	2200      	movs	r2, #0
 8008d14:	3301      	adds	r3, #1
 8008d16:	9306      	str	r3, [sp, #24]
 8008d18:	4615      	mov	r5, r2
 8008d1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008d1e:	4294      	cmp	r4, r2
 8008d20:	f300 8095 	bgt.w	8008e4e <__kernel_rem_pio2+0x2d6>
 8008d24:	f1ba 0f00 	cmp.w	sl, #0
 8008d28:	dd07      	ble.n	8008d3a <__kernel_rem_pio2+0x1c2>
 8008d2a:	f1ba 0f01 	cmp.w	sl, #1
 8008d2e:	f000 80a2 	beq.w	8008e76 <__kernel_rem_pio2+0x2fe>
 8008d32:	f1ba 0f02 	cmp.w	sl, #2
 8008d36:	f000 80c1 	beq.w	8008ebc <__kernel_rem_pio2+0x344>
 8008d3a:	9b02      	ldr	r3, [sp, #8]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d14a      	bne.n	8008dd6 <__kernel_rem_pio2+0x25e>
 8008d40:	4632      	mov	r2, r6
 8008d42:	463b      	mov	r3, r7
 8008d44:	2000      	movs	r0, #0
 8008d46:	4958      	ldr	r1, [pc, #352]	; (8008ea8 <__kernel_rem_pio2+0x330>)
 8008d48:	f7f7 fa4e 	bl	80001e8 <__aeabi_dsub>
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	460f      	mov	r7, r1
 8008d50:	2d00      	cmp	r5, #0
 8008d52:	d040      	beq.n	8008dd6 <__kernel_rem_pio2+0x25e>
 8008d54:	4650      	mov	r0, sl
 8008d56:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008e98 <__kernel_rem_pio2+0x320>
 8008d5a:	f000 fd69 	bl	8009830 <scalbn>
 8008d5e:	4630      	mov	r0, r6
 8008d60:	4639      	mov	r1, r7
 8008d62:	ec53 2b10 	vmov	r2, r3, d0
 8008d66:	f7f7 fa3f 	bl	80001e8 <__aeabi_dsub>
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	460f      	mov	r7, r1
 8008d6e:	e032      	b.n	8008dd6 <__kernel_rem_pio2+0x25e>
 8008d70:	2200      	movs	r2, #0
 8008d72:	4b4e      	ldr	r3, [pc, #312]	; (8008eac <__kernel_rem_pio2+0x334>)
 8008d74:	4640      	mov	r0, r8
 8008d76:	4649      	mov	r1, r9
 8008d78:	f7f7 fbee 	bl	8000558 <__aeabi_dmul>
 8008d7c:	f7f7 fe9c 	bl	8000ab8 <__aeabi_d2iz>
 8008d80:	f7f7 fb80 	bl	8000484 <__aeabi_i2d>
 8008d84:	2200      	movs	r2, #0
 8008d86:	4b4a      	ldr	r3, [pc, #296]	; (8008eb0 <__kernel_rem_pio2+0x338>)
 8008d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d8c:	f7f7 fbe4 	bl	8000558 <__aeabi_dmul>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4640      	mov	r0, r8
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 fa26 	bl	80001e8 <__aeabi_dsub>
 8008d9c:	f7f7 fe8c 	bl	8000ab8 <__aeabi_d2iz>
 8008da0:	ab0e      	add	r3, sp, #56	; 0x38
 8008da2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8008da6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dae:	f7f7 fa1d 	bl	80001ec <__adddf3>
 8008db2:	3501      	adds	r5, #1
 8008db4:	4680      	mov	r8, r0
 8008db6:	4689      	mov	r9, r1
 8008db8:	e75e      	b.n	8008c78 <__kernel_rem_pio2+0x100>
 8008dba:	d105      	bne.n	8008dc8 <__kernel_rem_pio2+0x250>
 8008dbc:	1e63      	subs	r3, r4, #1
 8008dbe:	aa0e      	add	r2, sp, #56	; 0x38
 8008dc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008dc4:	15c3      	asrs	r3, r0, #23
 8008dc6:	e79f      	b.n	8008d08 <__kernel_rem_pio2+0x190>
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4b3a      	ldr	r3, [pc, #232]	; (8008eb4 <__kernel_rem_pio2+0x33c>)
 8008dcc:	f7f7 fe4a 	bl	8000a64 <__aeabi_dcmpge>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d139      	bne.n	8008e48 <__kernel_rem_pio2+0x2d0>
 8008dd4:	9002      	str	r0, [sp, #8]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2300      	movs	r3, #0
 8008dda:	4630      	mov	r0, r6
 8008ddc:	4639      	mov	r1, r7
 8008dde:	f7f7 fe23 	bl	8000a28 <__aeabi_dcmpeq>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	f000 80c7 	beq.w	8008f76 <__kernel_rem_pio2+0x3fe>
 8008de8:	1e65      	subs	r5, r4, #1
 8008dea:	462b      	mov	r3, r5
 8008dec:	2200      	movs	r2, #0
 8008dee:	9904      	ldr	r1, [sp, #16]
 8008df0:	428b      	cmp	r3, r1
 8008df2:	da6a      	bge.n	8008eca <__kernel_rem_pio2+0x352>
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	f000 8088 	beq.w	8008f0a <__kernel_rem_pio2+0x392>
 8008dfa:	ab0e      	add	r3, sp, #56	; 0x38
 8008dfc:	f1aa 0a18 	sub.w	sl, sl, #24
 8008e00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 80b4 	beq.w	8008f72 <__kernel_rem_pio2+0x3fa>
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008e98 <__kernel_rem_pio2+0x320>
 8008e10:	f000 fd0e 	bl	8009830 <scalbn>
 8008e14:	00ec      	lsls	r4, r5, #3
 8008e16:	ab72      	add	r3, sp, #456	; 0x1c8
 8008e18:	191e      	adds	r6, r3, r4
 8008e1a:	ec59 8b10 	vmov	r8, r9, d0
 8008e1e:	f106 0a08 	add.w	sl, r6, #8
 8008e22:	462f      	mov	r7, r5
 8008e24:	2f00      	cmp	r7, #0
 8008e26:	f280 80df 	bge.w	8008fe8 <__kernel_rem_pio2+0x470>
 8008e2a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008e90 <__kernel_rem_pio2+0x318>
 8008e2e:	f04f 0a00 	mov.w	sl, #0
 8008e32:	eba5 030a 	sub.w	r3, r5, sl
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f2c0 810a 	blt.w	8009050 <__kernel_rem_pio2+0x4d8>
 8008e3c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8008eb8 <__kernel_rem_pio2+0x340>
 8008e40:	ec59 8b18 	vmov	r8, r9, d8
 8008e44:	2700      	movs	r7, #0
 8008e46:	e0f5      	b.n	8009034 <__kernel_rem_pio2+0x4bc>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	9302      	str	r3, [sp, #8]
 8008e4c:	e760      	b.n	8008d10 <__kernel_rem_pio2+0x198>
 8008e4e:	ab0e      	add	r3, sp, #56	; 0x38
 8008e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e54:	b94d      	cbnz	r5, 8008e6a <__kernel_rem_pio2+0x2f2>
 8008e56:	b12b      	cbz	r3, 8008e64 <__kernel_rem_pio2+0x2ec>
 8008e58:	a80e      	add	r0, sp, #56	; 0x38
 8008e5a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008e5e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008e62:	2301      	movs	r3, #1
 8008e64:	3201      	adds	r2, #1
 8008e66:	461d      	mov	r5, r3
 8008e68:	e759      	b.n	8008d1e <__kernel_rem_pio2+0x1a6>
 8008e6a:	a80e      	add	r0, sp, #56	; 0x38
 8008e6c:	1acb      	subs	r3, r1, r3
 8008e6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008e72:	462b      	mov	r3, r5
 8008e74:	e7f6      	b.n	8008e64 <__kernel_rem_pio2+0x2ec>
 8008e76:	1e62      	subs	r2, r4, #1
 8008e78:	ab0e      	add	r3, sp, #56	; 0x38
 8008e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e82:	a90e      	add	r1, sp, #56	; 0x38
 8008e84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e88:	e757      	b.n	8008d3a <__kernel_rem_pio2+0x1c2>
 8008e8a:	bf00      	nop
 8008e8c:	f3af 8000 	nop.w
	...
 8008e9c:	3ff00000 	.word	0x3ff00000
 8008ea0:	0800b720 	.word	0x0800b720
 8008ea4:	40200000 	.word	0x40200000
 8008ea8:	3ff00000 	.word	0x3ff00000
 8008eac:	3e700000 	.word	0x3e700000
 8008eb0:	41700000 	.word	0x41700000
 8008eb4:	3fe00000 	.word	0x3fe00000
 8008eb8:	0800b6e0 	.word	0x0800b6e0
 8008ebc:	1e62      	subs	r2, r4, #1
 8008ebe:	ab0e      	add	r3, sp, #56	; 0x38
 8008ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ec8:	e7db      	b.n	8008e82 <__kernel_rem_pio2+0x30a>
 8008eca:	a90e      	add	r1, sp, #56	; 0x38
 8008ecc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	e78b      	b.n	8008dee <__kernel_rem_pio2+0x276>
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008edc:	2900      	cmp	r1, #0
 8008ede:	d0fa      	beq.n	8008ed6 <__kernel_rem_pio2+0x35e>
 8008ee0:	9a08      	ldr	r2, [sp, #32]
 8008ee2:	4422      	add	r2, r4
 8008ee4:	00d2      	lsls	r2, r2, #3
 8008ee6:	a922      	add	r1, sp, #136	; 0x88
 8008ee8:	18e3      	adds	r3, r4, r3
 8008eea:	9206      	str	r2, [sp, #24]
 8008eec:	440a      	add	r2, r1
 8008eee:	9302      	str	r3, [sp, #8]
 8008ef0:	f10b 0108 	add.w	r1, fp, #8
 8008ef4:	f102 0308 	add.w	r3, r2, #8
 8008ef8:	1c66      	adds	r6, r4, #1
 8008efa:	910a      	str	r1, [sp, #40]	; 0x28
 8008efc:	2500      	movs	r5, #0
 8008efe:	930d      	str	r3, [sp, #52]	; 0x34
 8008f00:	9b02      	ldr	r3, [sp, #8]
 8008f02:	42b3      	cmp	r3, r6
 8008f04:	da04      	bge.n	8008f10 <__kernel_rem_pio2+0x398>
 8008f06:	461c      	mov	r4, r3
 8008f08:	e6a6      	b.n	8008c58 <__kernel_rem_pio2+0xe0>
 8008f0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e7e3      	b.n	8008ed8 <__kernel_rem_pio2+0x360>
 8008f10:	9b06      	ldr	r3, [sp, #24]
 8008f12:	18ef      	adds	r7, r5, r3
 8008f14:	ab22      	add	r3, sp, #136	; 0x88
 8008f16:	441f      	add	r7, r3
 8008f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008f1e:	f7f7 fab1 	bl	8000484 <__aeabi_i2d>
 8008f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f24:	461c      	mov	r4, r3
 8008f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f28:	e9c7 0100 	strd	r0, r1, [r7]
 8008f2c:	eb03 0b05 	add.w	fp, r3, r5
 8008f30:	2700      	movs	r7, #0
 8008f32:	f04f 0800 	mov.w	r8, #0
 8008f36:	f04f 0900 	mov.w	r9, #0
 8008f3a:	9b07      	ldr	r3, [sp, #28]
 8008f3c:	429f      	cmp	r7, r3
 8008f3e:	dd08      	ble.n	8008f52 <__kernel_rem_pio2+0x3da>
 8008f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f42:	aa72      	add	r2, sp, #456	; 0x1c8
 8008f44:	18eb      	adds	r3, r5, r3
 8008f46:	4413      	add	r3, r2
 8008f48:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8008f4c:	3601      	adds	r6, #1
 8008f4e:	3508      	adds	r5, #8
 8008f50:	e7d6      	b.n	8008f00 <__kernel_rem_pio2+0x388>
 8008f52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008f56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008f5a:	f7f7 fafd 	bl	8000558 <__aeabi_dmul>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4640      	mov	r0, r8
 8008f64:	4649      	mov	r1, r9
 8008f66:	f7f7 f941 	bl	80001ec <__adddf3>
 8008f6a:	3701      	adds	r7, #1
 8008f6c:	4680      	mov	r8, r0
 8008f6e:	4689      	mov	r9, r1
 8008f70:	e7e3      	b.n	8008f3a <__kernel_rem_pio2+0x3c2>
 8008f72:	3d01      	subs	r5, #1
 8008f74:	e741      	b.n	8008dfa <__kernel_rem_pio2+0x282>
 8008f76:	f1ca 0000 	rsb	r0, sl, #0
 8008f7a:	ec47 6b10 	vmov	d0, r6, r7
 8008f7e:	f000 fc57 	bl	8009830 <scalbn>
 8008f82:	ec57 6b10 	vmov	r6, r7, d0
 8008f86:	2200      	movs	r2, #0
 8008f88:	4b99      	ldr	r3, [pc, #612]	; (80091f0 <__kernel_rem_pio2+0x678>)
 8008f8a:	ee10 0a10 	vmov	r0, s0
 8008f8e:	4639      	mov	r1, r7
 8008f90:	f7f7 fd68 	bl	8000a64 <__aeabi_dcmpge>
 8008f94:	b1f8      	cbz	r0, 8008fd6 <__kernel_rem_pio2+0x45e>
 8008f96:	2200      	movs	r2, #0
 8008f98:	4b96      	ldr	r3, [pc, #600]	; (80091f4 <__kernel_rem_pio2+0x67c>)
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 fadb 	bl	8000558 <__aeabi_dmul>
 8008fa2:	f7f7 fd89 	bl	8000ab8 <__aeabi_d2iz>
 8008fa6:	4680      	mov	r8, r0
 8008fa8:	f7f7 fa6c 	bl	8000484 <__aeabi_i2d>
 8008fac:	2200      	movs	r2, #0
 8008fae:	4b90      	ldr	r3, [pc, #576]	; (80091f0 <__kernel_rem_pio2+0x678>)
 8008fb0:	f7f7 fad2 	bl	8000558 <__aeabi_dmul>
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	4639      	mov	r1, r7
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f7f7 f914 	bl	80001e8 <__aeabi_dsub>
 8008fc0:	f7f7 fd7a 	bl	8000ab8 <__aeabi_d2iz>
 8008fc4:	1c65      	adds	r5, r4, #1
 8008fc6:	ab0e      	add	r3, sp, #56	; 0x38
 8008fc8:	f10a 0a18 	add.w	sl, sl, #24
 8008fcc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008fd0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008fd4:	e719      	b.n	8008e0a <__kernel_rem_pio2+0x292>
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	4639      	mov	r1, r7
 8008fda:	f7f7 fd6d 	bl	8000ab8 <__aeabi_d2iz>
 8008fde:	ab0e      	add	r3, sp, #56	; 0x38
 8008fe0:	4625      	mov	r5, r4
 8008fe2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008fe6:	e710      	b.n	8008e0a <__kernel_rem_pio2+0x292>
 8008fe8:	ab0e      	add	r3, sp, #56	; 0x38
 8008fea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8008fee:	f7f7 fa49 	bl	8000484 <__aeabi_i2d>
 8008ff2:	4642      	mov	r2, r8
 8008ff4:	464b      	mov	r3, r9
 8008ff6:	f7f7 faaf 	bl	8000558 <__aeabi_dmul>
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009000:	4b7c      	ldr	r3, [pc, #496]	; (80091f4 <__kernel_rem_pio2+0x67c>)
 8009002:	4640      	mov	r0, r8
 8009004:	4649      	mov	r1, r9
 8009006:	f7f7 faa7 	bl	8000558 <__aeabi_dmul>
 800900a:	3f01      	subs	r7, #1
 800900c:	4680      	mov	r8, r0
 800900e:	4689      	mov	r9, r1
 8009010:	e708      	b.n	8008e24 <__kernel_rem_pio2+0x2ac>
 8009012:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800901e:	f7f7 fa9b 	bl	8000558 <__aeabi_dmul>
 8009022:	4602      	mov	r2, r0
 8009024:	460b      	mov	r3, r1
 8009026:	4640      	mov	r0, r8
 8009028:	4649      	mov	r1, r9
 800902a:	f7f7 f8df 	bl	80001ec <__adddf3>
 800902e:	3701      	adds	r7, #1
 8009030:	4680      	mov	r8, r0
 8009032:	4689      	mov	r9, r1
 8009034:	9b04      	ldr	r3, [sp, #16]
 8009036:	429f      	cmp	r7, r3
 8009038:	dc01      	bgt.n	800903e <__kernel_rem_pio2+0x4c6>
 800903a:	45ba      	cmp	sl, r7
 800903c:	dae9      	bge.n	8009012 <__kernel_rem_pio2+0x49a>
 800903e:	ab4a      	add	r3, sp, #296	; 0x128
 8009040:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009044:	e9c3 8900 	strd	r8, r9, [r3]
 8009048:	f10a 0a01 	add.w	sl, sl, #1
 800904c:	3e08      	subs	r6, #8
 800904e:	e6f0      	b.n	8008e32 <__kernel_rem_pio2+0x2ba>
 8009050:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009052:	2b03      	cmp	r3, #3
 8009054:	d85b      	bhi.n	800910e <__kernel_rem_pio2+0x596>
 8009056:	e8df f003 	tbb	[pc, r3]
 800905a:	264a      	.short	0x264a
 800905c:	0226      	.short	0x0226
 800905e:	ab9a      	add	r3, sp, #616	; 0x268
 8009060:	441c      	add	r4, r3
 8009062:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009066:	46a2      	mov	sl, r4
 8009068:	46ab      	mov	fp, r5
 800906a:	f1bb 0f00 	cmp.w	fp, #0
 800906e:	dc6c      	bgt.n	800914a <__kernel_rem_pio2+0x5d2>
 8009070:	46a2      	mov	sl, r4
 8009072:	46ab      	mov	fp, r5
 8009074:	f1bb 0f01 	cmp.w	fp, #1
 8009078:	f300 8086 	bgt.w	8009188 <__kernel_rem_pio2+0x610>
 800907c:	2000      	movs	r0, #0
 800907e:	2100      	movs	r1, #0
 8009080:	2d01      	cmp	r5, #1
 8009082:	f300 80a0 	bgt.w	80091c6 <__kernel_rem_pio2+0x64e>
 8009086:	9b02      	ldr	r3, [sp, #8]
 8009088:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800908c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8009090:	2b00      	cmp	r3, #0
 8009092:	f040 809e 	bne.w	80091d2 <__kernel_rem_pio2+0x65a>
 8009096:	9b01      	ldr	r3, [sp, #4]
 8009098:	e9c3 7800 	strd	r7, r8, [r3]
 800909c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80090a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80090a4:	e033      	b.n	800910e <__kernel_rem_pio2+0x596>
 80090a6:	3408      	adds	r4, #8
 80090a8:	ab4a      	add	r3, sp, #296	; 0x128
 80090aa:	441c      	add	r4, r3
 80090ac:	462e      	mov	r6, r5
 80090ae:	2000      	movs	r0, #0
 80090b0:	2100      	movs	r1, #0
 80090b2:	2e00      	cmp	r6, #0
 80090b4:	da3a      	bge.n	800912c <__kernel_rem_pio2+0x5b4>
 80090b6:	9b02      	ldr	r3, [sp, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d03d      	beq.n	8009138 <__kernel_rem_pio2+0x5c0>
 80090bc:	4602      	mov	r2, r0
 80090be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090c2:	9c01      	ldr	r4, [sp, #4]
 80090c4:	e9c4 2300 	strd	r2, r3, [r4]
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80090d0:	f7f7 f88a 	bl	80001e8 <__aeabi_dsub>
 80090d4:	ae4c      	add	r6, sp, #304	; 0x130
 80090d6:	2401      	movs	r4, #1
 80090d8:	42a5      	cmp	r5, r4
 80090da:	da30      	bge.n	800913e <__kernel_rem_pio2+0x5c6>
 80090dc:	9b02      	ldr	r3, [sp, #8]
 80090de:	b113      	cbz	r3, 80090e6 <__kernel_rem_pio2+0x56e>
 80090e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090e4:	4619      	mov	r1, r3
 80090e6:	9b01      	ldr	r3, [sp, #4]
 80090e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80090ec:	e00f      	b.n	800910e <__kernel_rem_pio2+0x596>
 80090ee:	ab9a      	add	r3, sp, #616	; 0x268
 80090f0:	441c      	add	r4, r3
 80090f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80090f6:	2000      	movs	r0, #0
 80090f8:	2100      	movs	r1, #0
 80090fa:	2d00      	cmp	r5, #0
 80090fc:	da10      	bge.n	8009120 <__kernel_rem_pio2+0x5a8>
 80090fe:	9b02      	ldr	r3, [sp, #8]
 8009100:	b113      	cbz	r3, 8009108 <__kernel_rem_pio2+0x590>
 8009102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009106:	4619      	mov	r1, r3
 8009108:	9b01      	ldr	r3, [sp, #4]
 800910a:	e9c3 0100 	strd	r0, r1, [r3]
 800910e:	9b06      	ldr	r3, [sp, #24]
 8009110:	f003 0007 	and.w	r0, r3, #7
 8009114:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009118:	ecbd 8b02 	vpop	{d8}
 800911c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009120:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009124:	f7f7 f862 	bl	80001ec <__adddf3>
 8009128:	3d01      	subs	r5, #1
 800912a:	e7e6      	b.n	80090fa <__kernel_rem_pio2+0x582>
 800912c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009130:	f7f7 f85c 	bl	80001ec <__adddf3>
 8009134:	3e01      	subs	r6, #1
 8009136:	e7bc      	b.n	80090b2 <__kernel_rem_pio2+0x53a>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	e7c1      	b.n	80090c2 <__kernel_rem_pio2+0x54a>
 800913e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009142:	f7f7 f853 	bl	80001ec <__adddf3>
 8009146:	3401      	adds	r4, #1
 8009148:	e7c6      	b.n	80090d8 <__kernel_rem_pio2+0x560>
 800914a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800914e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009152:	4640      	mov	r0, r8
 8009154:	ec53 2b17 	vmov	r2, r3, d7
 8009158:	4649      	mov	r1, r9
 800915a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800915e:	f7f7 f845 	bl	80001ec <__adddf3>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4606      	mov	r6, r0
 8009168:	460f      	mov	r7, r1
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	f7f7 f83b 	bl	80001e8 <__aeabi_dsub>
 8009172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009176:	f7f7 f839 	bl	80001ec <__adddf3>
 800917a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800917e:	e9ca 0100 	strd	r0, r1, [sl]
 8009182:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8009186:	e770      	b.n	800906a <__kernel_rem_pio2+0x4f2>
 8009188:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800918c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009190:	4630      	mov	r0, r6
 8009192:	ec53 2b17 	vmov	r2, r3, d7
 8009196:	4639      	mov	r1, r7
 8009198:	ed8d 7b04 	vstr	d7, [sp, #16]
 800919c:	f7f7 f826 	bl	80001ec <__adddf3>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4680      	mov	r8, r0
 80091a6:	4689      	mov	r9, r1
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 f81c 	bl	80001e8 <__aeabi_dsub>
 80091b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091b4:	f7f7 f81a 	bl	80001ec <__adddf3>
 80091b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091bc:	e9ca 0100 	strd	r0, r1, [sl]
 80091c0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80091c4:	e756      	b.n	8009074 <__kernel_rem_pio2+0x4fc>
 80091c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80091ca:	f7f7 f80f 	bl	80001ec <__adddf3>
 80091ce:	3d01      	subs	r5, #1
 80091d0:	e756      	b.n	8009080 <__kernel_rem_pio2+0x508>
 80091d2:	9b01      	ldr	r3, [sp, #4]
 80091d4:	9a01      	ldr	r2, [sp, #4]
 80091d6:	601f      	str	r7, [r3, #0]
 80091d8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80091dc:	605c      	str	r4, [r3, #4]
 80091de:	609d      	str	r5, [r3, #8]
 80091e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80091e4:	60d3      	str	r3, [r2, #12]
 80091e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091ea:	6110      	str	r0, [r2, #16]
 80091ec:	6153      	str	r3, [r2, #20]
 80091ee:	e78e      	b.n	800910e <__kernel_rem_pio2+0x596>
 80091f0:	41700000 	.word	0x41700000
 80091f4:	3e700000 	.word	0x3e700000

080091f8 <__kernel_sin>:
 80091f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091fc:	ec55 4b10 	vmov	r4, r5, d0
 8009200:	b085      	sub	sp, #20
 8009202:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009206:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800920a:	ed8d 1b00 	vstr	d1, [sp]
 800920e:	9002      	str	r0, [sp, #8]
 8009210:	da06      	bge.n	8009220 <__kernel_sin+0x28>
 8009212:	ee10 0a10 	vmov	r0, s0
 8009216:	4629      	mov	r1, r5
 8009218:	f7f7 fc4e 	bl	8000ab8 <__aeabi_d2iz>
 800921c:	2800      	cmp	r0, #0
 800921e:	d051      	beq.n	80092c4 <__kernel_sin+0xcc>
 8009220:	4622      	mov	r2, r4
 8009222:	462b      	mov	r3, r5
 8009224:	4620      	mov	r0, r4
 8009226:	4629      	mov	r1, r5
 8009228:	f7f7 f996 	bl	8000558 <__aeabi_dmul>
 800922c:	4682      	mov	sl, r0
 800922e:	468b      	mov	fp, r1
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 f98e 	bl	8000558 <__aeabi_dmul>
 800923c:	a341      	add	r3, pc, #260	; (adr r3, 8009344 <__kernel_sin+0x14c>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	4680      	mov	r8, r0
 8009244:	4689      	mov	r9, r1
 8009246:	4650      	mov	r0, sl
 8009248:	4659      	mov	r1, fp
 800924a:	f7f7 f985 	bl	8000558 <__aeabi_dmul>
 800924e:	a33f      	add	r3, pc, #252	; (adr r3, 800934c <__kernel_sin+0x154>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f6 ffc8 	bl	80001e8 <__aeabi_dsub>
 8009258:	4652      	mov	r2, sl
 800925a:	465b      	mov	r3, fp
 800925c:	f7f7 f97c 	bl	8000558 <__aeabi_dmul>
 8009260:	a33c      	add	r3, pc, #240	; (adr r3, 8009354 <__kernel_sin+0x15c>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f6 ffc1 	bl	80001ec <__adddf3>
 800926a:	4652      	mov	r2, sl
 800926c:	465b      	mov	r3, fp
 800926e:	f7f7 f973 	bl	8000558 <__aeabi_dmul>
 8009272:	a33a      	add	r3, pc, #232	; (adr r3, 800935c <__kernel_sin+0x164>)
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f7f6 ffb6 	bl	80001e8 <__aeabi_dsub>
 800927c:	4652      	mov	r2, sl
 800927e:	465b      	mov	r3, fp
 8009280:	f7f7 f96a 	bl	8000558 <__aeabi_dmul>
 8009284:	a337      	add	r3, pc, #220	; (adr r3, 8009364 <__kernel_sin+0x16c>)
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f7f6 ffaf 	bl	80001ec <__adddf3>
 800928e:	9b02      	ldr	r3, [sp, #8]
 8009290:	4606      	mov	r6, r0
 8009292:	460f      	mov	r7, r1
 8009294:	b9db      	cbnz	r3, 80092ce <__kernel_sin+0xd6>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4650      	mov	r0, sl
 800929c:	4659      	mov	r1, fp
 800929e:	f7f7 f95b 	bl	8000558 <__aeabi_dmul>
 80092a2:	a325      	add	r3, pc, #148	; (adr r3, 8009338 <__kernel_sin+0x140>)
 80092a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a8:	f7f6 ff9e 	bl	80001e8 <__aeabi_dsub>
 80092ac:	4642      	mov	r2, r8
 80092ae:	464b      	mov	r3, r9
 80092b0:	f7f7 f952 	bl	8000558 <__aeabi_dmul>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	4620      	mov	r0, r4
 80092ba:	4629      	mov	r1, r5
 80092bc:	f7f6 ff96 	bl	80001ec <__adddf3>
 80092c0:	4604      	mov	r4, r0
 80092c2:	460d      	mov	r5, r1
 80092c4:	ec45 4b10 	vmov	d0, r4, r5
 80092c8:	b005      	add	sp, #20
 80092ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ce:	2200      	movs	r2, #0
 80092d0:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <__kernel_sin+0x148>)
 80092d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092d6:	f7f7 f93f 	bl	8000558 <__aeabi_dmul>
 80092da:	4632      	mov	r2, r6
 80092dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e0:	463b      	mov	r3, r7
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f7 f937 	bl	8000558 <__aeabi_dmul>
 80092ea:	4602      	mov	r2, r0
 80092ec:	460b      	mov	r3, r1
 80092ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092f2:	f7f6 ff79 	bl	80001e8 <__aeabi_dsub>
 80092f6:	4652      	mov	r2, sl
 80092f8:	465b      	mov	r3, fp
 80092fa:	f7f7 f92d 	bl	8000558 <__aeabi_dmul>
 80092fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009302:	f7f6 ff71 	bl	80001e8 <__aeabi_dsub>
 8009306:	a30c      	add	r3, pc, #48	; (adr r3, 8009338 <__kernel_sin+0x140>)
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	4606      	mov	r6, r0
 800930e:	460f      	mov	r7, r1
 8009310:	4640      	mov	r0, r8
 8009312:	4649      	mov	r1, r9
 8009314:	f7f7 f920 	bl	8000558 <__aeabi_dmul>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7f6 ff64 	bl	80001ec <__adddf3>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	4620      	mov	r0, r4
 800932a:	4629      	mov	r1, r5
 800932c:	f7f6 ff5c 	bl	80001e8 <__aeabi_dsub>
 8009330:	e7c6      	b.n	80092c0 <__kernel_sin+0xc8>
 8009332:	bf00      	nop
 8009334:	f3af 8000 	nop.w
 8009338:	55555549 	.word	0x55555549
 800933c:	3fc55555 	.word	0x3fc55555
 8009340:	3fe00000 	.word	0x3fe00000
 8009344:	5acfd57c 	.word	0x5acfd57c
 8009348:	3de5d93a 	.word	0x3de5d93a
 800934c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009350:	3e5ae5e6 	.word	0x3e5ae5e6
 8009354:	57b1fe7d 	.word	0x57b1fe7d
 8009358:	3ec71de3 	.word	0x3ec71de3
 800935c:	19c161d5 	.word	0x19c161d5
 8009360:	3f2a01a0 	.word	0x3f2a01a0
 8009364:	1110f8a6 	.word	0x1110f8a6
 8009368:	3f811111 	.word	0x3f811111
 800936c:	00000000 	.word	0x00000000

08009370 <__kernel_tan>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	ec5b ab10 	vmov	sl, fp, d0
 8009378:	4bbf      	ldr	r3, [pc, #764]	; (8009678 <__kernel_tan+0x308>)
 800937a:	b089      	sub	sp, #36	; 0x24
 800937c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8009380:	429f      	cmp	r7, r3
 8009382:	ec59 8b11 	vmov	r8, r9, d1
 8009386:	4606      	mov	r6, r0
 8009388:	f8cd b008 	str.w	fp, [sp, #8]
 800938c:	dc22      	bgt.n	80093d4 <__kernel_tan+0x64>
 800938e:	ee10 0a10 	vmov	r0, s0
 8009392:	4659      	mov	r1, fp
 8009394:	f7f7 fb90 	bl	8000ab8 <__aeabi_d2iz>
 8009398:	2800      	cmp	r0, #0
 800939a:	d145      	bne.n	8009428 <__kernel_tan+0xb8>
 800939c:	1c73      	adds	r3, r6, #1
 800939e:	4652      	mov	r2, sl
 80093a0:	4313      	orrs	r3, r2
 80093a2:	433b      	orrs	r3, r7
 80093a4:	d110      	bne.n	80093c8 <__kernel_tan+0x58>
 80093a6:	ec4b ab10 	vmov	d0, sl, fp
 80093aa:	f000 f9ad 	bl	8009708 <fabs>
 80093ae:	49b3      	ldr	r1, [pc, #716]	; (800967c <__kernel_tan+0x30c>)
 80093b0:	ec53 2b10 	vmov	r2, r3, d0
 80093b4:	2000      	movs	r0, #0
 80093b6:	f7f7 f9f9 	bl	80007ac <__aeabi_ddiv>
 80093ba:	4682      	mov	sl, r0
 80093bc:	468b      	mov	fp, r1
 80093be:	ec4b ab10 	vmov	d0, sl, fp
 80093c2:	b009      	add	sp, #36	; 0x24
 80093c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c8:	2e01      	cmp	r6, #1
 80093ca:	d0f8      	beq.n	80093be <__kernel_tan+0x4e>
 80093cc:	465b      	mov	r3, fp
 80093ce:	2000      	movs	r0, #0
 80093d0:	49ab      	ldr	r1, [pc, #684]	; (8009680 <__kernel_tan+0x310>)
 80093d2:	e7f0      	b.n	80093b6 <__kernel_tan+0x46>
 80093d4:	4bab      	ldr	r3, [pc, #684]	; (8009684 <__kernel_tan+0x314>)
 80093d6:	429f      	cmp	r7, r3
 80093d8:	dd26      	ble.n	8009428 <__kernel_tan+0xb8>
 80093da:	9b02      	ldr	r3, [sp, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	da09      	bge.n	80093f4 <__kernel_tan+0x84>
 80093e0:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093e4:	469b      	mov	fp, r3
 80093e6:	ee10 aa10 	vmov	sl, s0
 80093ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093ee:	ee11 8a10 	vmov	r8, s2
 80093f2:	4699      	mov	r9, r3
 80093f4:	4652      	mov	r2, sl
 80093f6:	465b      	mov	r3, fp
 80093f8:	a181      	add	r1, pc, #516	; (adr r1, 8009600 <__kernel_tan+0x290>)
 80093fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093fe:	f7f6 fef3 	bl	80001e8 <__aeabi_dsub>
 8009402:	4642      	mov	r2, r8
 8009404:	464b      	mov	r3, r9
 8009406:	4604      	mov	r4, r0
 8009408:	460d      	mov	r5, r1
 800940a:	a17f      	add	r1, pc, #508	; (adr r1, 8009608 <__kernel_tan+0x298>)
 800940c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009410:	f7f6 feea 	bl	80001e8 <__aeabi_dsub>
 8009414:	4622      	mov	r2, r4
 8009416:	462b      	mov	r3, r5
 8009418:	f7f6 fee8 	bl	80001ec <__adddf3>
 800941c:	f04f 0800 	mov.w	r8, #0
 8009420:	4682      	mov	sl, r0
 8009422:	468b      	mov	fp, r1
 8009424:	f04f 0900 	mov.w	r9, #0
 8009428:	4652      	mov	r2, sl
 800942a:	465b      	mov	r3, fp
 800942c:	4650      	mov	r0, sl
 800942e:	4659      	mov	r1, fp
 8009430:	f7f7 f892 	bl	8000558 <__aeabi_dmul>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	e9cd 0100 	strd	r0, r1, [sp]
 800943c:	f7f7 f88c 	bl	8000558 <__aeabi_dmul>
 8009440:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009444:	4604      	mov	r4, r0
 8009446:	460d      	mov	r5, r1
 8009448:	4650      	mov	r0, sl
 800944a:	4659      	mov	r1, fp
 800944c:	f7f7 f884 	bl	8000558 <__aeabi_dmul>
 8009450:	a36f      	add	r3, pc, #444	; (adr r3, 8009610 <__kernel_tan+0x2a0>)
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800945a:	4620      	mov	r0, r4
 800945c:	4629      	mov	r1, r5
 800945e:	f7f7 f87b 	bl	8000558 <__aeabi_dmul>
 8009462:	a36d      	add	r3, pc, #436	; (adr r3, 8009618 <__kernel_tan+0x2a8>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	f7f6 fec0 	bl	80001ec <__adddf3>
 800946c:	4622      	mov	r2, r4
 800946e:	462b      	mov	r3, r5
 8009470:	f7f7 f872 	bl	8000558 <__aeabi_dmul>
 8009474:	a36a      	add	r3, pc, #424	; (adr r3, 8009620 <__kernel_tan+0x2b0>)
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	f7f6 feb7 	bl	80001ec <__adddf3>
 800947e:	4622      	mov	r2, r4
 8009480:	462b      	mov	r3, r5
 8009482:	f7f7 f869 	bl	8000558 <__aeabi_dmul>
 8009486:	a368      	add	r3, pc, #416	; (adr r3, 8009628 <__kernel_tan+0x2b8>)
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	f7f6 feae 	bl	80001ec <__adddf3>
 8009490:	4622      	mov	r2, r4
 8009492:	462b      	mov	r3, r5
 8009494:	f7f7 f860 	bl	8000558 <__aeabi_dmul>
 8009498:	a365      	add	r3, pc, #404	; (adr r3, 8009630 <__kernel_tan+0x2c0>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f6 fea5 	bl	80001ec <__adddf3>
 80094a2:	4622      	mov	r2, r4
 80094a4:	462b      	mov	r3, r5
 80094a6:	f7f7 f857 	bl	8000558 <__aeabi_dmul>
 80094aa:	a363      	add	r3, pc, #396	; (adr r3, 8009638 <__kernel_tan+0x2c8>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f6 fe9c 	bl	80001ec <__adddf3>
 80094b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094b8:	f7f7 f84e 	bl	8000558 <__aeabi_dmul>
 80094bc:	a360      	add	r3, pc, #384	; (adr r3, 8009640 <__kernel_tan+0x2d0>)
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80094c6:	4620      	mov	r0, r4
 80094c8:	4629      	mov	r1, r5
 80094ca:	f7f7 f845 	bl	8000558 <__aeabi_dmul>
 80094ce:	a35e      	add	r3, pc, #376	; (adr r3, 8009648 <__kernel_tan+0x2d8>)
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f7f6 fe8a 	bl	80001ec <__adddf3>
 80094d8:	4622      	mov	r2, r4
 80094da:	462b      	mov	r3, r5
 80094dc:	f7f7 f83c 	bl	8000558 <__aeabi_dmul>
 80094e0:	a35b      	add	r3, pc, #364	; (adr r3, 8009650 <__kernel_tan+0x2e0>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	f7f6 fe81 	bl	80001ec <__adddf3>
 80094ea:	4622      	mov	r2, r4
 80094ec:	462b      	mov	r3, r5
 80094ee:	f7f7 f833 	bl	8000558 <__aeabi_dmul>
 80094f2:	a359      	add	r3, pc, #356	; (adr r3, 8009658 <__kernel_tan+0x2e8>)
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	f7f6 fe78 	bl	80001ec <__adddf3>
 80094fc:	4622      	mov	r2, r4
 80094fe:	462b      	mov	r3, r5
 8009500:	f7f7 f82a 	bl	8000558 <__aeabi_dmul>
 8009504:	a356      	add	r3, pc, #344	; (adr r3, 8009660 <__kernel_tan+0x2f0>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	f7f6 fe6f 	bl	80001ec <__adddf3>
 800950e:	4622      	mov	r2, r4
 8009510:	462b      	mov	r3, r5
 8009512:	f7f7 f821 	bl	8000558 <__aeabi_dmul>
 8009516:	a354      	add	r3, pc, #336	; (adr r3, 8009668 <__kernel_tan+0x2f8>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f7f6 fe66 	bl	80001ec <__adddf3>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009528:	f7f6 fe60 	bl	80001ec <__adddf3>
 800952c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009530:	f7f7 f812 	bl	8000558 <__aeabi_dmul>
 8009534:	4642      	mov	r2, r8
 8009536:	464b      	mov	r3, r9
 8009538:	f7f6 fe58 	bl	80001ec <__adddf3>
 800953c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009540:	f7f7 f80a 	bl	8000558 <__aeabi_dmul>
 8009544:	4642      	mov	r2, r8
 8009546:	464b      	mov	r3, r9
 8009548:	f7f6 fe50 	bl	80001ec <__adddf3>
 800954c:	a348      	add	r3, pc, #288	; (adr r3, 8009670 <__kernel_tan+0x300>)
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	4604      	mov	r4, r0
 8009554:	460d      	mov	r5, r1
 8009556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800955a:	f7f6 fffd 	bl	8000558 <__aeabi_dmul>
 800955e:	4622      	mov	r2, r4
 8009560:	462b      	mov	r3, r5
 8009562:	f7f6 fe43 	bl	80001ec <__adddf3>
 8009566:	e9cd 0100 	strd	r0, r1, [sp]
 800956a:	460b      	mov	r3, r1
 800956c:	4602      	mov	r2, r0
 800956e:	4659      	mov	r1, fp
 8009570:	4650      	mov	r0, sl
 8009572:	f7f6 fe3b 	bl	80001ec <__adddf3>
 8009576:	4b43      	ldr	r3, [pc, #268]	; (8009684 <__kernel_tan+0x314>)
 8009578:	429f      	cmp	r7, r3
 800957a:	4604      	mov	r4, r0
 800957c:	460d      	mov	r5, r1
 800957e:	f340 8083 	ble.w	8009688 <__kernel_tan+0x318>
 8009582:	4630      	mov	r0, r6
 8009584:	f7f6 ff7e 	bl	8000484 <__aeabi_i2d>
 8009588:	4622      	mov	r2, r4
 800958a:	4680      	mov	r8, r0
 800958c:	4689      	mov	r9, r1
 800958e:	462b      	mov	r3, r5
 8009590:	4620      	mov	r0, r4
 8009592:	4629      	mov	r1, r5
 8009594:	f7f6 ffe0 	bl	8000558 <__aeabi_dmul>
 8009598:	4642      	mov	r2, r8
 800959a:	4606      	mov	r6, r0
 800959c:	460f      	mov	r7, r1
 800959e:	464b      	mov	r3, r9
 80095a0:	4620      	mov	r0, r4
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7f6 fe22 	bl	80001ec <__adddf3>
 80095a8:	4602      	mov	r2, r0
 80095aa:	460b      	mov	r3, r1
 80095ac:	4630      	mov	r0, r6
 80095ae:	4639      	mov	r1, r7
 80095b0:	f7f7 f8fc 	bl	80007ac <__aeabi_ddiv>
 80095b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095b8:	f7f6 fe16 	bl	80001e8 <__aeabi_dsub>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4650      	mov	r0, sl
 80095c2:	4659      	mov	r1, fp
 80095c4:	f7f6 fe10 	bl	80001e8 <__aeabi_dsub>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	f7f6 fe0e 	bl	80001ec <__adddf3>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4640      	mov	r0, r8
 80095d6:	4649      	mov	r1, r9
 80095d8:	f7f6 fe06 	bl	80001e8 <__aeabi_dsub>
 80095dc:	9b02      	ldr	r3, [sp, #8]
 80095de:	4604      	mov	r4, r0
 80095e0:	1798      	asrs	r0, r3, #30
 80095e2:	f000 0002 	and.w	r0, r0, #2
 80095e6:	f1c0 0001 	rsb	r0, r0, #1
 80095ea:	460d      	mov	r5, r1
 80095ec:	f7f6 ff4a 	bl	8000484 <__aeabi_i2d>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f6 ffae 	bl	8000558 <__aeabi_dmul>
 80095fc:	e6dd      	b.n	80093ba <__kernel_tan+0x4a>
 80095fe:	bf00      	nop
 8009600:	54442d18 	.word	0x54442d18
 8009604:	3fe921fb 	.word	0x3fe921fb
 8009608:	33145c07 	.word	0x33145c07
 800960c:	3c81a626 	.word	0x3c81a626
 8009610:	74bf7ad4 	.word	0x74bf7ad4
 8009614:	3efb2a70 	.word	0x3efb2a70
 8009618:	32f0a7e9 	.word	0x32f0a7e9
 800961c:	3f12b80f 	.word	0x3f12b80f
 8009620:	1a8d1068 	.word	0x1a8d1068
 8009624:	3f3026f7 	.word	0x3f3026f7
 8009628:	fee08315 	.word	0xfee08315
 800962c:	3f57dbc8 	.word	0x3f57dbc8
 8009630:	e96e8493 	.word	0xe96e8493
 8009634:	3f8226e3 	.word	0x3f8226e3
 8009638:	1bb341fe 	.word	0x1bb341fe
 800963c:	3faba1ba 	.word	0x3faba1ba
 8009640:	db605373 	.word	0xdb605373
 8009644:	bef375cb 	.word	0xbef375cb
 8009648:	a03792a6 	.word	0xa03792a6
 800964c:	3f147e88 	.word	0x3f147e88
 8009650:	f2f26501 	.word	0xf2f26501
 8009654:	3f4344d8 	.word	0x3f4344d8
 8009658:	c9560328 	.word	0xc9560328
 800965c:	3f6d6d22 	.word	0x3f6d6d22
 8009660:	8406d637 	.word	0x8406d637
 8009664:	3f9664f4 	.word	0x3f9664f4
 8009668:	1110fe7a 	.word	0x1110fe7a
 800966c:	3fc11111 	.word	0x3fc11111
 8009670:	55555563 	.word	0x55555563
 8009674:	3fd55555 	.word	0x3fd55555
 8009678:	3e2fffff 	.word	0x3e2fffff
 800967c:	3ff00000 	.word	0x3ff00000
 8009680:	bff00000 	.word	0xbff00000
 8009684:	3fe59427 	.word	0x3fe59427
 8009688:	2e01      	cmp	r6, #1
 800968a:	d036      	beq.n	80096fa <__kernel_tan+0x38a>
 800968c:	460f      	mov	r7, r1
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	2000      	movs	r0, #0
 8009694:	491a      	ldr	r1, [pc, #104]	; (8009700 <__kernel_tan+0x390>)
 8009696:	f7f7 f889 	bl	80007ac <__aeabi_ddiv>
 800969a:	2600      	movs	r6, #0
 800969c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096a0:	4652      	mov	r2, sl
 80096a2:	465b      	mov	r3, fp
 80096a4:	4630      	mov	r0, r6
 80096a6:	4639      	mov	r1, r7
 80096a8:	f7f6 fd9e 	bl	80001e8 <__aeabi_dsub>
 80096ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096b8:	f7f6 fd96 	bl	80001e8 <__aeabi_dsub>
 80096bc:	4632      	mov	r2, r6
 80096be:	462b      	mov	r3, r5
 80096c0:	f7f6 ff4a 	bl	8000558 <__aeabi_dmul>
 80096c4:	4632      	mov	r2, r6
 80096c6:	4682      	mov	sl, r0
 80096c8:	468b      	mov	fp, r1
 80096ca:	462b      	mov	r3, r5
 80096cc:	4630      	mov	r0, r6
 80096ce:	4639      	mov	r1, r7
 80096d0:	f7f6 ff42 	bl	8000558 <__aeabi_dmul>
 80096d4:	2200      	movs	r2, #0
 80096d6:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <__kernel_tan+0x394>)
 80096d8:	f7f6 fd88 	bl	80001ec <__adddf3>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	f7f6 fd82 	bl	80001ec <__adddf3>
 80096e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096ec:	f7f6 ff34 	bl	8000558 <__aeabi_dmul>
 80096f0:	4632      	mov	r2, r6
 80096f2:	462b      	mov	r3, r5
 80096f4:	f7f6 fd7a 	bl	80001ec <__adddf3>
 80096f8:	e65f      	b.n	80093ba <__kernel_tan+0x4a>
 80096fa:	4682      	mov	sl, r0
 80096fc:	468b      	mov	fp, r1
 80096fe:	e65e      	b.n	80093be <__kernel_tan+0x4e>
 8009700:	bff00000 	.word	0xbff00000
 8009704:	3ff00000 	.word	0x3ff00000

08009708 <fabs>:
 8009708:	ec51 0b10 	vmov	r0, r1, d0
 800970c:	ee10 2a10 	vmov	r2, s0
 8009710:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009714:	ec43 2b10 	vmov	d0, r2, r3
 8009718:	4770      	bx	lr
 800971a:	0000      	movs	r0, r0
 800971c:	0000      	movs	r0, r0
	...

08009720 <floor>:
 8009720:	ec51 0b10 	vmov	r0, r1, d0
 8009724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009728:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800972c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009730:	2e13      	cmp	r6, #19
 8009732:	460c      	mov	r4, r1
 8009734:	ee10 5a10 	vmov	r5, s0
 8009738:	4680      	mov	r8, r0
 800973a:	dc34      	bgt.n	80097a6 <floor+0x86>
 800973c:	2e00      	cmp	r6, #0
 800973e:	da16      	bge.n	800976e <floor+0x4e>
 8009740:	a335      	add	r3, pc, #212	; (adr r3, 8009818 <floor+0xf8>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f6 fd51 	bl	80001ec <__adddf3>
 800974a:	2200      	movs	r2, #0
 800974c:	2300      	movs	r3, #0
 800974e:	f7f7 f993 	bl	8000a78 <__aeabi_dcmpgt>
 8009752:	b148      	cbz	r0, 8009768 <floor+0x48>
 8009754:	2c00      	cmp	r4, #0
 8009756:	da59      	bge.n	800980c <floor+0xec>
 8009758:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800975c:	4a30      	ldr	r2, [pc, #192]	; (8009820 <floor+0x100>)
 800975e:	432b      	orrs	r3, r5
 8009760:	2500      	movs	r5, #0
 8009762:	42ab      	cmp	r3, r5
 8009764:	bf18      	it	ne
 8009766:	4614      	movne	r4, r2
 8009768:	4621      	mov	r1, r4
 800976a:	4628      	mov	r0, r5
 800976c:	e025      	b.n	80097ba <floor+0x9a>
 800976e:	4f2d      	ldr	r7, [pc, #180]	; (8009824 <floor+0x104>)
 8009770:	4137      	asrs	r7, r6
 8009772:	ea01 0307 	and.w	r3, r1, r7
 8009776:	4303      	orrs	r3, r0
 8009778:	d01f      	beq.n	80097ba <floor+0x9a>
 800977a:	a327      	add	r3, pc, #156	; (adr r3, 8009818 <floor+0xf8>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f7f6 fd34 	bl	80001ec <__adddf3>
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	f7f7 f976 	bl	8000a78 <__aeabi_dcmpgt>
 800978c:	2800      	cmp	r0, #0
 800978e:	d0eb      	beq.n	8009768 <floor+0x48>
 8009790:	2c00      	cmp	r4, #0
 8009792:	bfbe      	ittt	lt
 8009794:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009798:	fa43 f606 	asrlt.w	r6, r3, r6
 800979c:	19a4      	addlt	r4, r4, r6
 800979e:	ea24 0407 	bic.w	r4, r4, r7
 80097a2:	2500      	movs	r5, #0
 80097a4:	e7e0      	b.n	8009768 <floor+0x48>
 80097a6:	2e33      	cmp	r6, #51	; 0x33
 80097a8:	dd0b      	ble.n	80097c2 <floor+0xa2>
 80097aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80097ae:	d104      	bne.n	80097ba <floor+0x9a>
 80097b0:	ee10 2a10 	vmov	r2, s0
 80097b4:	460b      	mov	r3, r1
 80097b6:	f7f6 fd19 	bl	80001ec <__adddf3>
 80097ba:	ec41 0b10 	vmov	d0, r0, r1
 80097be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80097c6:	f04f 33ff 	mov.w	r3, #4294967295
 80097ca:	fa23 f707 	lsr.w	r7, r3, r7
 80097ce:	4207      	tst	r7, r0
 80097d0:	d0f3      	beq.n	80097ba <floor+0x9a>
 80097d2:	a311      	add	r3, pc, #68	; (adr r3, 8009818 <floor+0xf8>)
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	f7f6 fd08 	bl	80001ec <__adddf3>
 80097dc:	2200      	movs	r2, #0
 80097de:	2300      	movs	r3, #0
 80097e0:	f7f7 f94a 	bl	8000a78 <__aeabi_dcmpgt>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d0bf      	beq.n	8009768 <floor+0x48>
 80097e8:	2c00      	cmp	r4, #0
 80097ea:	da02      	bge.n	80097f2 <floor+0xd2>
 80097ec:	2e14      	cmp	r6, #20
 80097ee:	d103      	bne.n	80097f8 <floor+0xd8>
 80097f0:	3401      	adds	r4, #1
 80097f2:	ea25 0507 	bic.w	r5, r5, r7
 80097f6:	e7b7      	b.n	8009768 <floor+0x48>
 80097f8:	2301      	movs	r3, #1
 80097fa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80097fe:	fa03 f606 	lsl.w	r6, r3, r6
 8009802:	4435      	add	r5, r6
 8009804:	4545      	cmp	r5, r8
 8009806:	bf38      	it	cc
 8009808:	18e4      	addcc	r4, r4, r3
 800980a:	e7f2      	b.n	80097f2 <floor+0xd2>
 800980c:	2500      	movs	r5, #0
 800980e:	462c      	mov	r4, r5
 8009810:	e7aa      	b.n	8009768 <floor+0x48>
 8009812:	bf00      	nop
 8009814:	f3af 8000 	nop.w
 8009818:	8800759c 	.word	0x8800759c
 800981c:	7e37e43c 	.word	0x7e37e43c
 8009820:	bff00000 	.word	0xbff00000
 8009824:	000fffff 	.word	0x000fffff

08009828 <matherr>:
 8009828:	2000      	movs	r0, #0
 800982a:	4770      	bx	lr
 800982c:	0000      	movs	r0, r0
	...

08009830 <scalbn>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	ec55 4b10 	vmov	r4, r5, d0
 8009836:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800983a:	4606      	mov	r6, r0
 800983c:	462b      	mov	r3, r5
 800983e:	b9aa      	cbnz	r2, 800986c <scalbn+0x3c>
 8009840:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009844:	4323      	orrs	r3, r4
 8009846:	d03b      	beq.n	80098c0 <scalbn+0x90>
 8009848:	4b31      	ldr	r3, [pc, #196]	; (8009910 <scalbn+0xe0>)
 800984a:	4629      	mov	r1, r5
 800984c:	2200      	movs	r2, #0
 800984e:	ee10 0a10 	vmov	r0, s0
 8009852:	f7f6 fe81 	bl	8000558 <__aeabi_dmul>
 8009856:	4b2f      	ldr	r3, [pc, #188]	; (8009914 <scalbn+0xe4>)
 8009858:	429e      	cmp	r6, r3
 800985a:	4604      	mov	r4, r0
 800985c:	460d      	mov	r5, r1
 800985e:	da12      	bge.n	8009886 <scalbn+0x56>
 8009860:	a327      	add	r3, pc, #156	; (adr r3, 8009900 <scalbn+0xd0>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f6 fe77 	bl	8000558 <__aeabi_dmul>
 800986a:	e009      	b.n	8009880 <scalbn+0x50>
 800986c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009870:	428a      	cmp	r2, r1
 8009872:	d10c      	bne.n	800988e <scalbn+0x5e>
 8009874:	ee10 2a10 	vmov	r2, s0
 8009878:	4620      	mov	r0, r4
 800987a:	4629      	mov	r1, r5
 800987c:	f7f6 fcb6 	bl	80001ec <__adddf3>
 8009880:	4604      	mov	r4, r0
 8009882:	460d      	mov	r5, r1
 8009884:	e01c      	b.n	80098c0 <scalbn+0x90>
 8009886:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800988a:	460b      	mov	r3, r1
 800988c:	3a36      	subs	r2, #54	; 0x36
 800988e:	4432      	add	r2, r6
 8009890:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009894:	428a      	cmp	r2, r1
 8009896:	dd0b      	ble.n	80098b0 <scalbn+0x80>
 8009898:	ec45 4b11 	vmov	d1, r4, r5
 800989c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009908 <scalbn+0xd8>
 80098a0:	f000 f83c 	bl	800991c <copysign>
 80098a4:	a318      	add	r3, pc, #96	; (adr r3, 8009908 <scalbn+0xd8>)
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	ec51 0b10 	vmov	r0, r1, d0
 80098ae:	e7da      	b.n	8009866 <scalbn+0x36>
 80098b0:	2a00      	cmp	r2, #0
 80098b2:	dd08      	ble.n	80098c6 <scalbn+0x96>
 80098b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098c0:	ec45 4b10 	vmov	d0, r4, r5
 80098c4:	bd70      	pop	{r4, r5, r6, pc}
 80098c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80098ca:	da0d      	bge.n	80098e8 <scalbn+0xb8>
 80098cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098d0:	429e      	cmp	r6, r3
 80098d2:	ec45 4b11 	vmov	d1, r4, r5
 80098d6:	dce1      	bgt.n	800989c <scalbn+0x6c>
 80098d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009900 <scalbn+0xd0>
 80098dc:	f000 f81e 	bl	800991c <copysign>
 80098e0:	a307      	add	r3, pc, #28	; (adr r3, 8009900 <scalbn+0xd0>)
 80098e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e6:	e7e0      	b.n	80098aa <scalbn+0x7a>
 80098e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098ec:	3236      	adds	r2, #54	; 0x36
 80098ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80098f6:	4620      	mov	r0, r4
 80098f8:	4629      	mov	r1, r5
 80098fa:	2200      	movs	r2, #0
 80098fc:	4b06      	ldr	r3, [pc, #24]	; (8009918 <scalbn+0xe8>)
 80098fe:	e7b2      	b.n	8009866 <scalbn+0x36>
 8009900:	c2f8f359 	.word	0xc2f8f359
 8009904:	01a56e1f 	.word	0x01a56e1f
 8009908:	8800759c 	.word	0x8800759c
 800990c:	7e37e43c 	.word	0x7e37e43c
 8009910:	43500000 	.word	0x43500000
 8009914:	ffff3cb0 	.word	0xffff3cb0
 8009918:	3c900000 	.word	0x3c900000

0800991c <copysign>:
 800991c:	ec51 0b10 	vmov	r0, r1, d0
 8009920:	ee11 0a90 	vmov	r0, s3
 8009924:	ee10 2a10 	vmov	r2, s0
 8009928:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800992c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009930:	ea41 0300 	orr.w	r3, r1, r0
 8009934:	ec43 2b10 	vmov	d0, r2, r3
 8009938:	4770      	bx	lr
	...

0800993c <__errno>:
 800993c:	4b01      	ldr	r3, [pc, #4]	; (8009944 <__errno+0x8>)
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	4770      	bx	lr
 8009942:	bf00      	nop
 8009944:	200004a4 	.word	0x200004a4

08009948 <__libc_init_array>:
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	4e0d      	ldr	r6, [pc, #52]	; (8009980 <__libc_init_array+0x38>)
 800994c:	4c0d      	ldr	r4, [pc, #52]	; (8009984 <__libc_init_array+0x3c>)
 800994e:	1ba4      	subs	r4, r4, r6
 8009950:	10a4      	asrs	r4, r4, #2
 8009952:	2500      	movs	r5, #0
 8009954:	42a5      	cmp	r5, r4
 8009956:	d109      	bne.n	800996c <__libc_init_array+0x24>
 8009958:	4e0b      	ldr	r6, [pc, #44]	; (8009988 <__libc_init_array+0x40>)
 800995a:	4c0c      	ldr	r4, [pc, #48]	; (800998c <__libc_init_array+0x44>)
 800995c:	f001 fd48 	bl	800b3f0 <_init>
 8009960:	1ba4      	subs	r4, r4, r6
 8009962:	10a4      	asrs	r4, r4, #2
 8009964:	2500      	movs	r5, #0
 8009966:	42a5      	cmp	r5, r4
 8009968:	d105      	bne.n	8009976 <__libc_init_array+0x2e>
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009970:	4798      	blx	r3
 8009972:	3501      	adds	r5, #1
 8009974:	e7ee      	b.n	8009954 <__libc_init_array+0xc>
 8009976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800997a:	4798      	blx	r3
 800997c:	3501      	adds	r5, #1
 800997e:	e7f2      	b.n	8009966 <__libc_init_array+0x1e>
 8009980:	0800b968 	.word	0x0800b968
 8009984:	0800b968 	.word	0x0800b968
 8009988:	0800b968 	.word	0x0800b968
 800998c:	0800b96c 	.word	0x0800b96c

08009990 <memcpy>:
 8009990:	b510      	push	{r4, lr}
 8009992:	1e43      	subs	r3, r0, #1
 8009994:	440a      	add	r2, r1
 8009996:	4291      	cmp	r1, r2
 8009998:	d100      	bne.n	800999c <memcpy+0xc>
 800999a:	bd10      	pop	{r4, pc}
 800999c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099a4:	e7f7      	b.n	8009996 <memcpy+0x6>

080099a6 <memset>:
 80099a6:	4402      	add	r2, r0
 80099a8:	4603      	mov	r3, r0
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d100      	bne.n	80099b0 <memset+0xa>
 80099ae:	4770      	bx	lr
 80099b0:	f803 1b01 	strb.w	r1, [r3], #1
 80099b4:	e7f9      	b.n	80099aa <memset+0x4>

080099b6 <__cvt>:
 80099b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099ba:	ec55 4b10 	vmov	r4, r5, d0
 80099be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80099c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099c4:	2d00      	cmp	r5, #0
 80099c6:	460e      	mov	r6, r1
 80099c8:	4691      	mov	r9, r2
 80099ca:	4619      	mov	r1, r3
 80099cc:	bfb8      	it	lt
 80099ce:	4622      	movlt	r2, r4
 80099d0:	462b      	mov	r3, r5
 80099d2:	f027 0720 	bic.w	r7, r7, #32
 80099d6:	bfbb      	ittet	lt
 80099d8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099dc:	461d      	movlt	r5, r3
 80099de:	2300      	movge	r3, #0
 80099e0:	232d      	movlt	r3, #45	; 0x2d
 80099e2:	bfb8      	it	lt
 80099e4:	4614      	movlt	r4, r2
 80099e6:	2f46      	cmp	r7, #70	; 0x46
 80099e8:	700b      	strb	r3, [r1, #0]
 80099ea:	d004      	beq.n	80099f6 <__cvt+0x40>
 80099ec:	2f45      	cmp	r7, #69	; 0x45
 80099ee:	d100      	bne.n	80099f2 <__cvt+0x3c>
 80099f0:	3601      	adds	r6, #1
 80099f2:	2102      	movs	r1, #2
 80099f4:	e000      	b.n	80099f8 <__cvt+0x42>
 80099f6:	2103      	movs	r1, #3
 80099f8:	ab03      	add	r3, sp, #12
 80099fa:	9301      	str	r3, [sp, #4]
 80099fc:	ab02      	add	r3, sp, #8
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	4632      	mov	r2, r6
 8009a02:	4653      	mov	r3, sl
 8009a04:	ec45 4b10 	vmov	d0, r4, r5
 8009a08:	f000 fbae 	bl	800a168 <_dtoa_r>
 8009a0c:	2f47      	cmp	r7, #71	; 0x47
 8009a0e:	4680      	mov	r8, r0
 8009a10:	d102      	bne.n	8009a18 <__cvt+0x62>
 8009a12:	f019 0f01 	tst.w	r9, #1
 8009a16:	d026      	beq.n	8009a66 <__cvt+0xb0>
 8009a18:	2f46      	cmp	r7, #70	; 0x46
 8009a1a:	eb08 0906 	add.w	r9, r8, r6
 8009a1e:	d111      	bne.n	8009a44 <__cvt+0x8e>
 8009a20:	f898 3000 	ldrb.w	r3, [r8]
 8009a24:	2b30      	cmp	r3, #48	; 0x30
 8009a26:	d10a      	bne.n	8009a3e <__cvt+0x88>
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	4629      	mov	r1, r5
 8009a30:	f7f6 fffa 	bl	8000a28 <__aeabi_dcmpeq>
 8009a34:	b918      	cbnz	r0, 8009a3e <__cvt+0x88>
 8009a36:	f1c6 0601 	rsb	r6, r6, #1
 8009a3a:	f8ca 6000 	str.w	r6, [sl]
 8009a3e:	f8da 3000 	ldr.w	r3, [sl]
 8009a42:	4499      	add	r9, r3
 8009a44:	2200      	movs	r2, #0
 8009a46:	2300      	movs	r3, #0
 8009a48:	4620      	mov	r0, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	f7f6 ffec 	bl	8000a28 <__aeabi_dcmpeq>
 8009a50:	b938      	cbnz	r0, 8009a62 <__cvt+0xac>
 8009a52:	2230      	movs	r2, #48	; 0x30
 8009a54:	9b03      	ldr	r3, [sp, #12]
 8009a56:	454b      	cmp	r3, r9
 8009a58:	d205      	bcs.n	8009a66 <__cvt+0xb0>
 8009a5a:	1c59      	adds	r1, r3, #1
 8009a5c:	9103      	str	r1, [sp, #12]
 8009a5e:	701a      	strb	r2, [r3, #0]
 8009a60:	e7f8      	b.n	8009a54 <__cvt+0x9e>
 8009a62:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a6a:	eba3 0308 	sub.w	r3, r3, r8
 8009a6e:	4640      	mov	r0, r8
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	b004      	add	sp, #16
 8009a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009a78 <__exponent>:
 8009a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7a:	2900      	cmp	r1, #0
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	bfba      	itte	lt
 8009a80:	4249      	neglt	r1, r1
 8009a82:	232d      	movlt	r3, #45	; 0x2d
 8009a84:	232b      	movge	r3, #43	; 0x2b
 8009a86:	2909      	cmp	r1, #9
 8009a88:	f804 2b02 	strb.w	r2, [r4], #2
 8009a8c:	7043      	strb	r3, [r0, #1]
 8009a8e:	dd20      	ble.n	8009ad2 <__exponent+0x5a>
 8009a90:	f10d 0307 	add.w	r3, sp, #7
 8009a94:	461f      	mov	r7, r3
 8009a96:	260a      	movs	r6, #10
 8009a98:	fb91 f5f6 	sdiv	r5, r1, r6
 8009a9c:	fb06 1115 	mls	r1, r6, r5, r1
 8009aa0:	3130      	adds	r1, #48	; 0x30
 8009aa2:	2d09      	cmp	r5, #9
 8009aa4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009aa8:	f103 32ff 	add.w	r2, r3, #4294967295
 8009aac:	4629      	mov	r1, r5
 8009aae:	dc09      	bgt.n	8009ac4 <__exponent+0x4c>
 8009ab0:	3130      	adds	r1, #48	; 0x30
 8009ab2:	3b02      	subs	r3, #2
 8009ab4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009ab8:	42bb      	cmp	r3, r7
 8009aba:	4622      	mov	r2, r4
 8009abc:	d304      	bcc.n	8009ac8 <__exponent+0x50>
 8009abe:	1a10      	subs	r0, r2, r0
 8009ac0:	b003      	add	sp, #12
 8009ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	e7e7      	b.n	8009a98 <__exponent+0x20>
 8009ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009acc:	f804 2b01 	strb.w	r2, [r4], #1
 8009ad0:	e7f2      	b.n	8009ab8 <__exponent+0x40>
 8009ad2:	2330      	movs	r3, #48	; 0x30
 8009ad4:	4419      	add	r1, r3
 8009ad6:	7083      	strb	r3, [r0, #2]
 8009ad8:	1d02      	adds	r2, r0, #4
 8009ada:	70c1      	strb	r1, [r0, #3]
 8009adc:	e7ef      	b.n	8009abe <__exponent+0x46>
	...

08009ae0 <_printf_float>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	b08d      	sub	sp, #52	; 0x34
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009aec:	4616      	mov	r6, r2
 8009aee:	461f      	mov	r7, r3
 8009af0:	4605      	mov	r5, r0
 8009af2:	f001 f8f1 	bl	800acd8 <_localeconv_r>
 8009af6:	6803      	ldr	r3, [r0, #0]
 8009af8:	9304      	str	r3, [sp, #16]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7f6 fb68 	bl	80001d0 <strlen>
 8009b00:	2300      	movs	r3, #0
 8009b02:	930a      	str	r3, [sp, #40]	; 0x28
 8009b04:	f8d8 3000 	ldr.w	r3, [r8]
 8009b08:	9005      	str	r0, [sp, #20]
 8009b0a:	3307      	adds	r3, #7
 8009b0c:	f023 0307 	bic.w	r3, r3, #7
 8009b10:	f103 0208 	add.w	r2, r3, #8
 8009b14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b18:	f8d4 b000 	ldr.w	fp, [r4]
 8009b1c:	f8c8 2000 	str.w	r2, [r8]
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b28:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b2c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b30:	9307      	str	r3, [sp, #28]
 8009b32:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b36:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3a:	4ba7      	ldr	r3, [pc, #668]	; (8009dd8 <_printf_float+0x2f8>)
 8009b3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b40:	f7f6 ffa4 	bl	8000a8c <__aeabi_dcmpun>
 8009b44:	bb70      	cbnz	r0, 8009ba4 <_printf_float+0xc4>
 8009b46:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4a:	4ba3      	ldr	r3, [pc, #652]	; (8009dd8 <_printf_float+0x2f8>)
 8009b4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b50:	f7f6 ff7e 	bl	8000a50 <__aeabi_dcmple>
 8009b54:	bb30      	cbnz	r0, 8009ba4 <_printf_float+0xc4>
 8009b56:	2200      	movs	r2, #0
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	f7f6 ff6d 	bl	8000a3c <__aeabi_dcmplt>
 8009b62:	b110      	cbz	r0, 8009b6a <_printf_float+0x8a>
 8009b64:	232d      	movs	r3, #45	; 0x2d
 8009b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b6a:	4a9c      	ldr	r2, [pc, #624]	; (8009ddc <_printf_float+0x2fc>)
 8009b6c:	4b9c      	ldr	r3, [pc, #624]	; (8009de0 <_printf_float+0x300>)
 8009b6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009b72:	bf8c      	ite	hi
 8009b74:	4690      	movhi	r8, r2
 8009b76:	4698      	movls	r8, r3
 8009b78:	2303      	movs	r3, #3
 8009b7a:	f02b 0204 	bic.w	r2, fp, #4
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	6022      	str	r2, [r4, #0]
 8009b82:	f04f 0900 	mov.w	r9, #0
 8009b86:	9700      	str	r7, [sp, #0]
 8009b88:	4633      	mov	r3, r6
 8009b8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f000 f9e6 	bl	8009f60 <_printf_common>
 8009b94:	3001      	adds	r0, #1
 8009b96:	f040 808d 	bne.w	8009cb4 <_printf_float+0x1d4>
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9e:	b00d      	add	sp, #52	; 0x34
 8009ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba4:	4642      	mov	r2, r8
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	4640      	mov	r0, r8
 8009baa:	4649      	mov	r1, r9
 8009bac:	f7f6 ff6e 	bl	8000a8c <__aeabi_dcmpun>
 8009bb0:	b110      	cbz	r0, 8009bb8 <_printf_float+0xd8>
 8009bb2:	4a8c      	ldr	r2, [pc, #560]	; (8009de4 <_printf_float+0x304>)
 8009bb4:	4b8c      	ldr	r3, [pc, #560]	; (8009de8 <_printf_float+0x308>)
 8009bb6:	e7da      	b.n	8009b6e <_printf_float+0x8e>
 8009bb8:	6861      	ldr	r1, [r4, #4]
 8009bba:	1c4b      	adds	r3, r1, #1
 8009bbc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009bc0:	a80a      	add	r0, sp, #40	; 0x28
 8009bc2:	d13e      	bne.n	8009c42 <_printf_float+0x162>
 8009bc4:	2306      	movs	r3, #6
 8009bc6:	6063      	str	r3, [r4, #4]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009bce:	ab09      	add	r3, sp, #36	; 0x24
 8009bd0:	9300      	str	r3, [sp, #0]
 8009bd2:	ec49 8b10 	vmov	d0, r8, r9
 8009bd6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bda:	6022      	str	r2, [r4, #0]
 8009bdc:	f8cd a004 	str.w	sl, [sp, #4]
 8009be0:	6861      	ldr	r1, [r4, #4]
 8009be2:	4628      	mov	r0, r5
 8009be4:	f7ff fee7 	bl	80099b6 <__cvt>
 8009be8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009bec:	2b47      	cmp	r3, #71	; 0x47
 8009bee:	4680      	mov	r8, r0
 8009bf0:	d109      	bne.n	8009c06 <_printf_float+0x126>
 8009bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf4:	1cd8      	adds	r0, r3, #3
 8009bf6:	db02      	blt.n	8009bfe <_printf_float+0x11e>
 8009bf8:	6862      	ldr	r2, [r4, #4]
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	dd47      	ble.n	8009c8e <_printf_float+0x1ae>
 8009bfe:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c02:	fa5f fa8a 	uxtb.w	sl, sl
 8009c06:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009c0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c0c:	d824      	bhi.n	8009c58 <_printf_float+0x178>
 8009c0e:	3901      	subs	r1, #1
 8009c10:	4652      	mov	r2, sl
 8009c12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c16:	9109      	str	r1, [sp, #36]	; 0x24
 8009c18:	f7ff ff2e 	bl	8009a78 <__exponent>
 8009c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c1e:	1813      	adds	r3, r2, r0
 8009c20:	2a01      	cmp	r2, #1
 8009c22:	4681      	mov	r9, r0
 8009c24:	6123      	str	r3, [r4, #16]
 8009c26:	dc02      	bgt.n	8009c2e <_printf_float+0x14e>
 8009c28:	6822      	ldr	r2, [r4, #0]
 8009c2a:	07d1      	lsls	r1, r2, #31
 8009c2c:	d501      	bpl.n	8009c32 <_printf_float+0x152>
 8009c2e:	3301      	adds	r3, #1
 8009c30:	6123      	str	r3, [r4, #16]
 8009c32:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d0a5      	beq.n	8009b86 <_printf_float+0xa6>
 8009c3a:	232d      	movs	r3, #45	; 0x2d
 8009c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c40:	e7a1      	b.n	8009b86 <_printf_float+0xa6>
 8009c42:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009c46:	f000 8177 	beq.w	8009f38 <_printf_float+0x458>
 8009c4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009c4e:	d1bb      	bne.n	8009bc8 <_printf_float+0xe8>
 8009c50:	2900      	cmp	r1, #0
 8009c52:	d1b9      	bne.n	8009bc8 <_printf_float+0xe8>
 8009c54:	2301      	movs	r3, #1
 8009c56:	e7b6      	b.n	8009bc6 <_printf_float+0xe6>
 8009c58:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009c5c:	d119      	bne.n	8009c92 <_printf_float+0x1b2>
 8009c5e:	2900      	cmp	r1, #0
 8009c60:	6863      	ldr	r3, [r4, #4]
 8009c62:	dd0c      	ble.n	8009c7e <_printf_float+0x19e>
 8009c64:	6121      	str	r1, [r4, #16]
 8009c66:	b913      	cbnz	r3, 8009c6e <_printf_float+0x18e>
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	07d2      	lsls	r2, r2, #31
 8009c6c:	d502      	bpl.n	8009c74 <_printf_float+0x194>
 8009c6e:	3301      	adds	r3, #1
 8009c70:	440b      	add	r3, r1
 8009c72:	6123      	str	r3, [r4, #16]
 8009c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c76:	65a3      	str	r3, [r4, #88]	; 0x58
 8009c78:	f04f 0900 	mov.w	r9, #0
 8009c7c:	e7d9      	b.n	8009c32 <_printf_float+0x152>
 8009c7e:	b913      	cbnz	r3, 8009c86 <_printf_float+0x1a6>
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	07d0      	lsls	r0, r2, #31
 8009c84:	d501      	bpl.n	8009c8a <_printf_float+0x1aa>
 8009c86:	3302      	adds	r3, #2
 8009c88:	e7f3      	b.n	8009c72 <_printf_float+0x192>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e7f1      	b.n	8009c72 <_printf_float+0x192>
 8009c8e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009c92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c96:	4293      	cmp	r3, r2
 8009c98:	db05      	blt.n	8009ca6 <_printf_float+0x1c6>
 8009c9a:	6822      	ldr	r2, [r4, #0]
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	07d1      	lsls	r1, r2, #31
 8009ca0:	d5e8      	bpl.n	8009c74 <_printf_float+0x194>
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	e7e5      	b.n	8009c72 <_printf_float+0x192>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	bfd4      	ite	le
 8009caa:	f1c3 0302 	rsble	r3, r3, #2
 8009cae:	2301      	movgt	r3, #1
 8009cb0:	4413      	add	r3, r2
 8009cb2:	e7de      	b.n	8009c72 <_printf_float+0x192>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	055a      	lsls	r2, r3, #21
 8009cb8:	d407      	bmi.n	8009cca <_printf_float+0x1ea>
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	47b8      	blx	r7
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d12b      	bne.n	8009d20 <_printf_float+0x240>
 8009cc8:	e767      	b.n	8009b9a <_printf_float+0xba>
 8009cca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009cce:	f240 80dc 	bls.w	8009e8a <_printf_float+0x3aa>
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cda:	f7f6 fea5 	bl	8000a28 <__aeabi_dcmpeq>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d033      	beq.n	8009d4a <_printf_float+0x26a>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4a41      	ldr	r2, [pc, #260]	; (8009dec <_printf_float+0x30c>)
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	f43f af54 	beq.w	8009b9a <_printf_float+0xba>
 8009cf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	db02      	blt.n	8009d00 <_printf_float+0x220>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	07d8      	lsls	r0, r3, #31
 8009cfe:	d50f      	bpl.n	8009d20 <_printf_float+0x240>
 8009d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d04:	4631      	mov	r1, r6
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f43f af45 	beq.w	8009b9a <_printf_float+0xba>
 8009d10:	f04f 0800 	mov.w	r8, #0
 8009d14:	f104 091a 	add.w	r9, r4, #26
 8009d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	4543      	cmp	r3, r8
 8009d1e:	dc09      	bgt.n	8009d34 <_printf_float+0x254>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	079b      	lsls	r3, r3, #30
 8009d24:	f100 8103 	bmi.w	8009f2e <_printf_float+0x44e>
 8009d28:	68e0      	ldr	r0, [r4, #12]
 8009d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d2c:	4298      	cmp	r0, r3
 8009d2e:	bfb8      	it	lt
 8009d30:	4618      	movlt	r0, r3
 8009d32:	e734      	b.n	8009b9e <_printf_float+0xbe>
 8009d34:	2301      	movs	r3, #1
 8009d36:	464a      	mov	r2, r9
 8009d38:	4631      	mov	r1, r6
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b8      	blx	r7
 8009d3e:	3001      	adds	r0, #1
 8009d40:	f43f af2b 	beq.w	8009b9a <_printf_float+0xba>
 8009d44:	f108 0801 	add.w	r8, r8, #1
 8009d48:	e7e6      	b.n	8009d18 <_printf_float+0x238>
 8009d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dc2b      	bgt.n	8009da8 <_printf_float+0x2c8>
 8009d50:	2301      	movs	r3, #1
 8009d52:	4a26      	ldr	r2, [pc, #152]	; (8009dec <_printf_float+0x30c>)
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f af1d 	beq.w	8009b9a <_printf_float+0xba>
 8009d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d62:	b923      	cbnz	r3, 8009d6e <_printf_float+0x28e>
 8009d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d66:	b913      	cbnz	r3, 8009d6e <_printf_float+0x28e>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	07d9      	lsls	r1, r3, #31
 8009d6c:	d5d8      	bpl.n	8009d20 <_printf_float+0x240>
 8009d6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d72:	4631      	mov	r1, r6
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b8      	blx	r7
 8009d78:	3001      	adds	r0, #1
 8009d7a:	f43f af0e 	beq.w	8009b9a <_printf_float+0xba>
 8009d7e:	f04f 0900 	mov.w	r9, #0
 8009d82:	f104 0a1a 	add.w	sl, r4, #26
 8009d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d88:	425b      	negs	r3, r3
 8009d8a:	454b      	cmp	r3, r9
 8009d8c:	dc01      	bgt.n	8009d92 <_printf_float+0x2b2>
 8009d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d90:	e794      	b.n	8009cbc <_printf_float+0x1dc>
 8009d92:	2301      	movs	r3, #1
 8009d94:	4652      	mov	r2, sl
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f43f aefc 	beq.w	8009b9a <_printf_float+0xba>
 8009da2:	f109 0901 	add.w	r9, r9, #1
 8009da6:	e7ee      	b.n	8009d86 <_printf_float+0x2a6>
 8009da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009daa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009dac:	429a      	cmp	r2, r3
 8009dae:	bfa8      	it	ge
 8009db0:	461a      	movge	r2, r3
 8009db2:	2a00      	cmp	r2, #0
 8009db4:	4691      	mov	r9, r2
 8009db6:	dd07      	ble.n	8009dc8 <_printf_float+0x2e8>
 8009db8:	4613      	mov	r3, r2
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4642      	mov	r2, r8
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	47b8      	blx	r7
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	f43f aee9 	beq.w	8009b9a <_printf_float+0xba>
 8009dc8:	f104 031a 	add.w	r3, r4, #26
 8009dcc:	f04f 0b00 	mov.w	fp, #0
 8009dd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dd4:	9306      	str	r3, [sp, #24]
 8009dd6:	e015      	b.n	8009e04 <_printf_float+0x324>
 8009dd8:	7fefffff 	.word	0x7fefffff
 8009ddc:	0800b734 	.word	0x0800b734
 8009de0:	0800b730 	.word	0x0800b730
 8009de4:	0800b73c 	.word	0x0800b73c
 8009de8:	0800b738 	.word	0x0800b738
 8009dec:	0800b740 	.word	0x0800b740
 8009df0:	2301      	movs	r3, #1
 8009df2:	9a06      	ldr	r2, [sp, #24]
 8009df4:	4631      	mov	r1, r6
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	f43f aecd 	beq.w	8009b9a <_printf_float+0xba>
 8009e00:	f10b 0b01 	add.w	fp, fp, #1
 8009e04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009e08:	ebaa 0309 	sub.w	r3, sl, r9
 8009e0c:	455b      	cmp	r3, fp
 8009e0e:	dcef      	bgt.n	8009df0 <_printf_float+0x310>
 8009e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e14:	429a      	cmp	r2, r3
 8009e16:	44d0      	add	r8, sl
 8009e18:	db15      	blt.n	8009e46 <_printf_float+0x366>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	07da      	lsls	r2, r3, #31
 8009e1e:	d412      	bmi.n	8009e46 <_printf_float+0x366>
 8009e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e24:	eba3 020a 	sub.w	r2, r3, sl
 8009e28:	eba3 0a01 	sub.w	sl, r3, r1
 8009e2c:	4592      	cmp	sl, r2
 8009e2e:	bfa8      	it	ge
 8009e30:	4692      	movge	sl, r2
 8009e32:	f1ba 0f00 	cmp.w	sl, #0
 8009e36:	dc0e      	bgt.n	8009e56 <_printf_float+0x376>
 8009e38:	f04f 0800 	mov.w	r8, #0
 8009e3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e40:	f104 091a 	add.w	r9, r4, #26
 8009e44:	e019      	b.n	8009e7a <_printf_float+0x39a>
 8009e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b8      	blx	r7
 8009e50:	3001      	adds	r0, #1
 8009e52:	d1e5      	bne.n	8009e20 <_printf_float+0x340>
 8009e54:	e6a1      	b.n	8009b9a <_printf_float+0xba>
 8009e56:	4653      	mov	r3, sl
 8009e58:	4642      	mov	r2, r8
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b8      	blx	r7
 8009e60:	3001      	adds	r0, #1
 8009e62:	d1e9      	bne.n	8009e38 <_printf_float+0x358>
 8009e64:	e699      	b.n	8009b9a <_printf_float+0xba>
 8009e66:	2301      	movs	r3, #1
 8009e68:	464a      	mov	r2, r9
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	47b8      	blx	r7
 8009e70:	3001      	adds	r0, #1
 8009e72:	f43f ae92 	beq.w	8009b9a <_printf_float+0xba>
 8009e76:	f108 0801 	add.w	r8, r8, #1
 8009e7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e7e:	1a9b      	subs	r3, r3, r2
 8009e80:	eba3 030a 	sub.w	r3, r3, sl
 8009e84:	4543      	cmp	r3, r8
 8009e86:	dcee      	bgt.n	8009e66 <_printf_float+0x386>
 8009e88:	e74a      	b.n	8009d20 <_printf_float+0x240>
 8009e8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e8c:	2a01      	cmp	r2, #1
 8009e8e:	dc01      	bgt.n	8009e94 <_printf_float+0x3b4>
 8009e90:	07db      	lsls	r3, r3, #31
 8009e92:	d53a      	bpl.n	8009f0a <_printf_float+0x42a>
 8009e94:	2301      	movs	r3, #1
 8009e96:	4642      	mov	r2, r8
 8009e98:	4631      	mov	r1, r6
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	47b8      	blx	r7
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	f43f ae7b 	beq.w	8009b9a <_printf_float+0xba>
 8009ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4628      	mov	r0, r5
 8009eac:	47b8      	blx	r7
 8009eae:	3001      	adds	r0, #1
 8009eb0:	f108 0801 	add.w	r8, r8, #1
 8009eb4:	f43f ae71 	beq.w	8009b9a <_printf_float+0xba>
 8009eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f103 3aff 	add.w	sl, r3, #4294967295
 8009ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f7f6 fdaf 	bl	8000a28 <__aeabi_dcmpeq>
 8009eca:	b9c8      	cbnz	r0, 8009f00 <_printf_float+0x420>
 8009ecc:	4653      	mov	r3, sl
 8009ece:	4642      	mov	r2, r8
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	d10e      	bne.n	8009ef8 <_printf_float+0x418>
 8009eda:	e65e      	b.n	8009b9a <_printf_float+0xba>
 8009edc:	2301      	movs	r3, #1
 8009ede:	4652      	mov	r2, sl
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	47b8      	blx	r7
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	f43f ae57 	beq.w	8009b9a <_printf_float+0xba>
 8009eec:	f108 0801 	add.w	r8, r8, #1
 8009ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	4543      	cmp	r3, r8
 8009ef6:	dcf1      	bgt.n	8009edc <_printf_float+0x3fc>
 8009ef8:	464b      	mov	r3, r9
 8009efa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009efe:	e6de      	b.n	8009cbe <_printf_float+0x1de>
 8009f00:	f04f 0800 	mov.w	r8, #0
 8009f04:	f104 0a1a 	add.w	sl, r4, #26
 8009f08:	e7f2      	b.n	8009ef0 <_printf_float+0x410>
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e7df      	b.n	8009ece <_printf_float+0x3ee>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	464a      	mov	r2, r9
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f43f ae3e 	beq.w	8009b9a <_printf_float+0xba>
 8009f1e:	f108 0801 	add.w	r8, r8, #1
 8009f22:	68e3      	ldr	r3, [r4, #12]
 8009f24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f26:	1a9b      	subs	r3, r3, r2
 8009f28:	4543      	cmp	r3, r8
 8009f2a:	dcf0      	bgt.n	8009f0e <_printf_float+0x42e>
 8009f2c:	e6fc      	b.n	8009d28 <_printf_float+0x248>
 8009f2e:	f04f 0800 	mov.w	r8, #0
 8009f32:	f104 0919 	add.w	r9, r4, #25
 8009f36:	e7f4      	b.n	8009f22 <_printf_float+0x442>
 8009f38:	2900      	cmp	r1, #0
 8009f3a:	f43f ae8b 	beq.w	8009c54 <_printf_float+0x174>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009f44:	ab09      	add	r3, sp, #36	; 0x24
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	ec49 8b10 	vmov	d0, r8, r9
 8009f4c:	6022      	str	r2, [r4, #0]
 8009f4e:	f8cd a004 	str.w	sl, [sp, #4]
 8009f52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009f56:	4628      	mov	r0, r5
 8009f58:	f7ff fd2d 	bl	80099b6 <__cvt>
 8009f5c:	4680      	mov	r8, r0
 8009f5e:	e648      	b.n	8009bf2 <_printf_float+0x112>

08009f60 <_printf_common>:
 8009f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	4691      	mov	r9, r2
 8009f66:	461f      	mov	r7, r3
 8009f68:	688a      	ldr	r2, [r1, #8]
 8009f6a:	690b      	ldr	r3, [r1, #16]
 8009f6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f70:	4293      	cmp	r3, r2
 8009f72:	bfb8      	it	lt
 8009f74:	4613      	movlt	r3, r2
 8009f76:	f8c9 3000 	str.w	r3, [r9]
 8009f7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f7e:	4606      	mov	r6, r0
 8009f80:	460c      	mov	r4, r1
 8009f82:	b112      	cbz	r2, 8009f8a <_printf_common+0x2a>
 8009f84:	3301      	adds	r3, #1
 8009f86:	f8c9 3000 	str.w	r3, [r9]
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	0699      	lsls	r1, r3, #26
 8009f8e:	bf42      	ittt	mi
 8009f90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f94:	3302      	addmi	r3, #2
 8009f96:	f8c9 3000 	strmi.w	r3, [r9]
 8009f9a:	6825      	ldr	r5, [r4, #0]
 8009f9c:	f015 0506 	ands.w	r5, r5, #6
 8009fa0:	d107      	bne.n	8009fb2 <_printf_common+0x52>
 8009fa2:	f104 0a19 	add.w	sl, r4, #25
 8009fa6:	68e3      	ldr	r3, [r4, #12]
 8009fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8009fac:	1a9b      	subs	r3, r3, r2
 8009fae:	42ab      	cmp	r3, r5
 8009fb0:	dc28      	bgt.n	800a004 <_printf_common+0xa4>
 8009fb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009fb6:	6822      	ldr	r2, [r4, #0]
 8009fb8:	3300      	adds	r3, #0
 8009fba:	bf18      	it	ne
 8009fbc:	2301      	movne	r3, #1
 8009fbe:	0692      	lsls	r2, r2, #26
 8009fc0:	d42d      	bmi.n	800a01e <_printf_common+0xbe>
 8009fc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	4630      	mov	r0, r6
 8009fca:	47c0      	blx	r8
 8009fcc:	3001      	adds	r0, #1
 8009fce:	d020      	beq.n	800a012 <_printf_common+0xb2>
 8009fd0:	6823      	ldr	r3, [r4, #0]
 8009fd2:	68e5      	ldr	r5, [r4, #12]
 8009fd4:	f8d9 2000 	ldr.w	r2, [r9]
 8009fd8:	f003 0306 	and.w	r3, r3, #6
 8009fdc:	2b04      	cmp	r3, #4
 8009fde:	bf08      	it	eq
 8009fe0:	1aad      	subeq	r5, r5, r2
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	6922      	ldr	r2, [r4, #16]
 8009fe6:	bf0c      	ite	eq
 8009fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fec:	2500      	movne	r5, #0
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bfc4      	itt	gt
 8009ff2:	1a9b      	subgt	r3, r3, r2
 8009ff4:	18ed      	addgt	r5, r5, r3
 8009ff6:	f04f 0900 	mov.w	r9, #0
 8009ffa:	341a      	adds	r4, #26
 8009ffc:	454d      	cmp	r5, r9
 8009ffe:	d11a      	bne.n	800a036 <_printf_common+0xd6>
 800a000:	2000      	movs	r0, #0
 800a002:	e008      	b.n	800a016 <_printf_common+0xb6>
 800a004:	2301      	movs	r3, #1
 800a006:	4652      	mov	r2, sl
 800a008:	4639      	mov	r1, r7
 800a00a:	4630      	mov	r0, r6
 800a00c:	47c0      	blx	r8
 800a00e:	3001      	adds	r0, #1
 800a010:	d103      	bne.n	800a01a <_printf_common+0xba>
 800a012:	f04f 30ff 	mov.w	r0, #4294967295
 800a016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01a:	3501      	adds	r5, #1
 800a01c:	e7c3      	b.n	8009fa6 <_printf_common+0x46>
 800a01e:	18e1      	adds	r1, r4, r3
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	2030      	movs	r0, #48	; 0x30
 800a024:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a028:	4422      	add	r2, r4
 800a02a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a02e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a032:	3302      	adds	r3, #2
 800a034:	e7c5      	b.n	8009fc2 <_printf_common+0x62>
 800a036:	2301      	movs	r3, #1
 800a038:	4622      	mov	r2, r4
 800a03a:	4639      	mov	r1, r7
 800a03c:	4630      	mov	r0, r6
 800a03e:	47c0      	blx	r8
 800a040:	3001      	adds	r0, #1
 800a042:	d0e6      	beq.n	800a012 <_printf_common+0xb2>
 800a044:	f109 0901 	add.w	r9, r9, #1
 800a048:	e7d8      	b.n	8009ffc <_printf_common+0x9c>

0800a04a <quorem>:
 800a04a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04e:	6903      	ldr	r3, [r0, #16]
 800a050:	690c      	ldr	r4, [r1, #16]
 800a052:	42a3      	cmp	r3, r4
 800a054:	4680      	mov	r8, r0
 800a056:	f2c0 8082 	blt.w	800a15e <quorem+0x114>
 800a05a:	3c01      	subs	r4, #1
 800a05c:	f101 0714 	add.w	r7, r1, #20
 800a060:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a064:	f100 0614 	add.w	r6, r0, #20
 800a068:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a06c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a070:	eb06 030c 	add.w	r3, r6, ip
 800a074:	3501      	adds	r5, #1
 800a076:	eb07 090c 	add.w	r9, r7, ip
 800a07a:	9301      	str	r3, [sp, #4]
 800a07c:	fbb0 f5f5 	udiv	r5, r0, r5
 800a080:	b395      	cbz	r5, 800a0e8 <quorem+0x9e>
 800a082:	f04f 0a00 	mov.w	sl, #0
 800a086:	4638      	mov	r0, r7
 800a088:	46b6      	mov	lr, r6
 800a08a:	46d3      	mov	fp, sl
 800a08c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a090:	b293      	uxth	r3, r2
 800a092:	fb05 a303 	mla	r3, r5, r3, sl
 800a096:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	ebab 0303 	sub.w	r3, fp, r3
 800a0a0:	0c12      	lsrs	r2, r2, #16
 800a0a2:	f8de b000 	ldr.w	fp, [lr]
 800a0a6:	fb05 a202 	mla	r2, r5, r2, sl
 800a0aa:	fa13 f38b 	uxtah	r3, r3, fp
 800a0ae:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a0b2:	fa1f fb82 	uxth.w	fp, r2
 800a0b6:	f8de 2000 	ldr.w	r2, [lr]
 800a0ba:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a0be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0c8:	4581      	cmp	r9, r0
 800a0ca:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a0ce:	f84e 3b04 	str.w	r3, [lr], #4
 800a0d2:	d2db      	bcs.n	800a08c <quorem+0x42>
 800a0d4:	f856 300c 	ldr.w	r3, [r6, ip]
 800a0d8:	b933      	cbnz	r3, 800a0e8 <quorem+0x9e>
 800a0da:	9b01      	ldr	r3, [sp, #4]
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	429e      	cmp	r6, r3
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	d330      	bcc.n	800a146 <quorem+0xfc>
 800a0e4:	f8c8 4010 	str.w	r4, [r8, #16]
 800a0e8:	4640      	mov	r0, r8
 800a0ea:	f001 f833 	bl	800b154 <__mcmp>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	db25      	blt.n	800a13e <quorem+0xf4>
 800a0f2:	3501      	adds	r5, #1
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f04f 0c00 	mov.w	ip, #0
 800a0fa:	f857 2b04 	ldr.w	r2, [r7], #4
 800a0fe:	f8d0 e000 	ldr.w	lr, [r0]
 800a102:	b293      	uxth	r3, r2
 800a104:	ebac 0303 	sub.w	r3, ip, r3
 800a108:	0c12      	lsrs	r2, r2, #16
 800a10a:	fa13 f38e 	uxtah	r3, r3, lr
 800a10e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a112:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a116:	b29b      	uxth	r3, r3
 800a118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a11c:	45b9      	cmp	r9, r7
 800a11e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a122:	f840 3b04 	str.w	r3, [r0], #4
 800a126:	d2e8      	bcs.n	800a0fa <quorem+0xb0>
 800a128:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a12c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a130:	b92a      	cbnz	r2, 800a13e <quorem+0xf4>
 800a132:	3b04      	subs	r3, #4
 800a134:	429e      	cmp	r6, r3
 800a136:	461a      	mov	r2, r3
 800a138:	d30b      	bcc.n	800a152 <quorem+0x108>
 800a13a:	f8c8 4010 	str.w	r4, [r8, #16]
 800a13e:	4628      	mov	r0, r5
 800a140:	b003      	add	sp, #12
 800a142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a146:	6812      	ldr	r2, [r2, #0]
 800a148:	3b04      	subs	r3, #4
 800a14a:	2a00      	cmp	r2, #0
 800a14c:	d1ca      	bne.n	800a0e4 <quorem+0x9a>
 800a14e:	3c01      	subs	r4, #1
 800a150:	e7c5      	b.n	800a0de <quorem+0x94>
 800a152:	6812      	ldr	r2, [r2, #0]
 800a154:	3b04      	subs	r3, #4
 800a156:	2a00      	cmp	r2, #0
 800a158:	d1ef      	bne.n	800a13a <quorem+0xf0>
 800a15a:	3c01      	subs	r4, #1
 800a15c:	e7ea      	b.n	800a134 <quorem+0xea>
 800a15e:	2000      	movs	r0, #0
 800a160:	e7ee      	b.n	800a140 <quorem+0xf6>
 800a162:	0000      	movs	r0, r0
 800a164:	0000      	movs	r0, r0
	...

0800a168 <_dtoa_r>:
 800a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	ec57 6b10 	vmov	r6, r7, d0
 800a170:	b097      	sub	sp, #92	; 0x5c
 800a172:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a174:	9106      	str	r1, [sp, #24]
 800a176:	4604      	mov	r4, r0
 800a178:	920b      	str	r2, [sp, #44]	; 0x2c
 800a17a:	9312      	str	r3, [sp, #72]	; 0x48
 800a17c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a180:	e9cd 6700 	strd	r6, r7, [sp]
 800a184:	b93d      	cbnz	r5, 800a196 <_dtoa_r+0x2e>
 800a186:	2010      	movs	r0, #16
 800a188:	f000 fdb4 	bl	800acf4 <malloc>
 800a18c:	6260      	str	r0, [r4, #36]	; 0x24
 800a18e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a192:	6005      	str	r5, [r0, #0]
 800a194:	60c5      	str	r5, [r0, #12]
 800a196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a198:	6819      	ldr	r1, [r3, #0]
 800a19a:	b151      	cbz	r1, 800a1b2 <_dtoa_r+0x4a>
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	604a      	str	r2, [r1, #4]
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	4093      	lsls	r3, r2
 800a1a4:	608b      	str	r3, [r1, #8]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fdf2 	bl	800ad90 <_Bfree>
 800a1ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	1e3b      	subs	r3, r7, #0
 800a1b4:	bfbb      	ittet	lt
 800a1b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1ba:	9301      	strlt	r3, [sp, #4]
 800a1bc:	2300      	movge	r3, #0
 800a1be:	2201      	movlt	r2, #1
 800a1c0:	bfac      	ite	ge
 800a1c2:	f8c8 3000 	strge.w	r3, [r8]
 800a1c6:	f8c8 2000 	strlt.w	r2, [r8]
 800a1ca:	4baf      	ldr	r3, [pc, #700]	; (800a488 <_dtoa_r+0x320>)
 800a1cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a1d0:	ea33 0308 	bics.w	r3, r3, r8
 800a1d4:	d114      	bne.n	800a200 <_dtoa_r+0x98>
 800a1d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	9b00      	ldr	r3, [sp, #0]
 800a1e0:	b923      	cbnz	r3, 800a1ec <_dtoa_r+0x84>
 800a1e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	f000 8542 	beq.w	800ac70 <_dtoa_r+0xb08>
 800a1ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a49c <_dtoa_r+0x334>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 8544 	beq.w	800ac80 <_dtoa_r+0xb18>
 800a1f8:	f10b 0303 	add.w	r3, fp, #3
 800a1fc:	f000 bd3e 	b.w	800ac7c <_dtoa_r+0xb14>
 800a200:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a204:	2200      	movs	r2, #0
 800a206:	2300      	movs	r3, #0
 800a208:	4630      	mov	r0, r6
 800a20a:	4639      	mov	r1, r7
 800a20c:	f7f6 fc0c 	bl	8000a28 <__aeabi_dcmpeq>
 800a210:	4681      	mov	r9, r0
 800a212:	b168      	cbz	r0, 800a230 <_dtoa_r+0xc8>
 800a214:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a216:	2301      	movs	r3, #1
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 8524 	beq.w	800ac6a <_dtoa_r+0xb02>
 800a222:	4b9a      	ldr	r3, [pc, #616]	; (800a48c <_dtoa_r+0x324>)
 800a224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a226:	f103 3bff 	add.w	fp, r3, #4294967295
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	f000 bd28 	b.w	800ac80 <_dtoa_r+0xb18>
 800a230:	aa14      	add	r2, sp, #80	; 0x50
 800a232:	a915      	add	r1, sp, #84	; 0x54
 800a234:	ec47 6b10 	vmov	d0, r6, r7
 800a238:	4620      	mov	r0, r4
 800a23a:	f001 f802 	bl	800b242 <__d2b>
 800a23e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a242:	9004      	str	r0, [sp, #16]
 800a244:	2d00      	cmp	r5, #0
 800a246:	d07c      	beq.n	800a342 <_dtoa_r+0x1da>
 800a248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a24c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a250:	46b2      	mov	sl, r6
 800a252:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a25a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a25e:	2200      	movs	r2, #0
 800a260:	4b8b      	ldr	r3, [pc, #556]	; (800a490 <_dtoa_r+0x328>)
 800a262:	4650      	mov	r0, sl
 800a264:	4659      	mov	r1, fp
 800a266:	f7f5 ffbf 	bl	80001e8 <__aeabi_dsub>
 800a26a:	a381      	add	r3, pc, #516	; (adr r3, 800a470 <_dtoa_r+0x308>)
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	f7f6 f972 	bl	8000558 <__aeabi_dmul>
 800a274:	a380      	add	r3, pc, #512	; (adr r3, 800a478 <_dtoa_r+0x310>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f7f5 ffb7 	bl	80001ec <__adddf3>
 800a27e:	4606      	mov	r6, r0
 800a280:	4628      	mov	r0, r5
 800a282:	460f      	mov	r7, r1
 800a284:	f7f6 f8fe 	bl	8000484 <__aeabi_i2d>
 800a288:	a37d      	add	r3, pc, #500	; (adr r3, 800a480 <_dtoa_r+0x318>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f7f6 f963 	bl	8000558 <__aeabi_dmul>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f5 ffa7 	bl	80001ec <__adddf3>
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	f7f6 fc09 	bl	8000ab8 <__aeabi_d2iz>
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	4682      	mov	sl, r0
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	f7f6 fbc4 	bl	8000a3c <__aeabi_dcmplt>
 800a2b4:	b148      	cbz	r0, 800a2ca <_dtoa_r+0x162>
 800a2b6:	4650      	mov	r0, sl
 800a2b8:	f7f6 f8e4 	bl	8000484 <__aeabi_i2d>
 800a2bc:	4632      	mov	r2, r6
 800a2be:	463b      	mov	r3, r7
 800a2c0:	f7f6 fbb2 	bl	8000a28 <__aeabi_dcmpeq>
 800a2c4:	b908      	cbnz	r0, 800a2ca <_dtoa_r+0x162>
 800a2c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2ca:	f1ba 0f16 	cmp.w	sl, #22
 800a2ce:	d859      	bhi.n	800a384 <_dtoa_r+0x21c>
 800a2d0:	4970      	ldr	r1, [pc, #448]	; (800a494 <_dtoa_r+0x32c>)
 800a2d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a2d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2de:	f7f6 fbcb 	bl	8000a78 <__aeabi_dcmpgt>
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d050      	beq.n	800a388 <_dtoa_r+0x220>
 800a2e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2f0:	1b5d      	subs	r5, r3, r5
 800a2f2:	f1b5 0801 	subs.w	r8, r5, #1
 800a2f6:	bf49      	itett	mi
 800a2f8:	f1c5 0301 	rsbmi	r3, r5, #1
 800a2fc:	2300      	movpl	r3, #0
 800a2fe:	9305      	strmi	r3, [sp, #20]
 800a300:	f04f 0800 	movmi.w	r8, #0
 800a304:	bf58      	it	pl
 800a306:	9305      	strpl	r3, [sp, #20]
 800a308:	f1ba 0f00 	cmp.w	sl, #0
 800a30c:	db3e      	blt.n	800a38c <_dtoa_r+0x224>
 800a30e:	2300      	movs	r3, #0
 800a310:	44d0      	add	r8, sl
 800a312:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a316:	9307      	str	r3, [sp, #28]
 800a318:	9b06      	ldr	r3, [sp, #24]
 800a31a:	2b09      	cmp	r3, #9
 800a31c:	f200 8090 	bhi.w	800a440 <_dtoa_r+0x2d8>
 800a320:	2b05      	cmp	r3, #5
 800a322:	bfc4      	itt	gt
 800a324:	3b04      	subgt	r3, #4
 800a326:	9306      	strgt	r3, [sp, #24]
 800a328:	9b06      	ldr	r3, [sp, #24]
 800a32a:	f1a3 0302 	sub.w	r3, r3, #2
 800a32e:	bfcc      	ite	gt
 800a330:	2500      	movgt	r5, #0
 800a332:	2501      	movle	r5, #1
 800a334:	2b03      	cmp	r3, #3
 800a336:	f200 808f 	bhi.w	800a458 <_dtoa_r+0x2f0>
 800a33a:	e8df f003 	tbb	[pc, r3]
 800a33e:	7f7d      	.short	0x7f7d
 800a340:	7131      	.short	0x7131
 800a342:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a346:	441d      	add	r5, r3
 800a348:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a34c:	2820      	cmp	r0, #32
 800a34e:	dd13      	ble.n	800a378 <_dtoa_r+0x210>
 800a350:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a354:	9b00      	ldr	r3, [sp, #0]
 800a356:	fa08 f800 	lsl.w	r8, r8, r0
 800a35a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a35e:	fa23 f000 	lsr.w	r0, r3, r0
 800a362:	ea48 0000 	orr.w	r0, r8, r0
 800a366:	f7f6 f87d 	bl	8000464 <__aeabi_ui2d>
 800a36a:	2301      	movs	r3, #1
 800a36c:	4682      	mov	sl, r0
 800a36e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a372:	3d01      	subs	r5, #1
 800a374:	9313      	str	r3, [sp, #76]	; 0x4c
 800a376:	e772      	b.n	800a25e <_dtoa_r+0xf6>
 800a378:	9b00      	ldr	r3, [sp, #0]
 800a37a:	f1c0 0020 	rsb	r0, r0, #32
 800a37e:	fa03 f000 	lsl.w	r0, r3, r0
 800a382:	e7f0      	b.n	800a366 <_dtoa_r+0x1fe>
 800a384:	2301      	movs	r3, #1
 800a386:	e7b1      	b.n	800a2ec <_dtoa_r+0x184>
 800a388:	900f      	str	r0, [sp, #60]	; 0x3c
 800a38a:	e7b0      	b.n	800a2ee <_dtoa_r+0x186>
 800a38c:	9b05      	ldr	r3, [sp, #20]
 800a38e:	eba3 030a 	sub.w	r3, r3, sl
 800a392:	9305      	str	r3, [sp, #20]
 800a394:	f1ca 0300 	rsb	r3, sl, #0
 800a398:	9307      	str	r3, [sp, #28]
 800a39a:	2300      	movs	r3, #0
 800a39c:	930e      	str	r3, [sp, #56]	; 0x38
 800a39e:	e7bb      	b.n	800a318 <_dtoa_r+0x1b0>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dd59      	ble.n	800a45e <_dtoa_r+0x2f6>
 800a3aa:	9302      	str	r3, [sp, #8]
 800a3ac:	4699      	mov	r9, r3
 800a3ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	6072      	str	r2, [r6, #4]
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	f102 0014 	add.w	r0, r2, #20
 800a3ba:	4298      	cmp	r0, r3
 800a3bc:	6871      	ldr	r1, [r6, #4]
 800a3be:	d953      	bls.n	800a468 <_dtoa_r+0x300>
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 fcb1 	bl	800ad28 <_Balloc>
 800a3c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3c8:	6030      	str	r0, [r6, #0]
 800a3ca:	f1b9 0f0e 	cmp.w	r9, #14
 800a3ce:	f8d3 b000 	ldr.w	fp, [r3]
 800a3d2:	f200 80e6 	bhi.w	800a5a2 <_dtoa_r+0x43a>
 800a3d6:	2d00      	cmp	r5, #0
 800a3d8:	f000 80e3 	beq.w	800a5a2 <_dtoa_r+0x43a>
 800a3dc:	ed9d 7b00 	vldr	d7, [sp]
 800a3e0:	f1ba 0f00 	cmp.w	sl, #0
 800a3e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a3e8:	dd74      	ble.n	800a4d4 <_dtoa_r+0x36c>
 800a3ea:	4a2a      	ldr	r2, [pc, #168]	; (800a494 <_dtoa_r+0x32c>)
 800a3ec:	f00a 030f 	and.w	r3, sl, #15
 800a3f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3f4:	ed93 7b00 	vldr	d7, [r3]
 800a3f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a3fc:	06f0      	lsls	r0, r6, #27
 800a3fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a402:	d565      	bpl.n	800a4d0 <_dtoa_r+0x368>
 800a404:	4b24      	ldr	r3, [pc, #144]	; (800a498 <_dtoa_r+0x330>)
 800a406:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a40a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a40e:	f7f6 f9cd 	bl	80007ac <__aeabi_ddiv>
 800a412:	e9cd 0100 	strd	r0, r1, [sp]
 800a416:	f006 060f 	and.w	r6, r6, #15
 800a41a:	2503      	movs	r5, #3
 800a41c:	4f1e      	ldr	r7, [pc, #120]	; (800a498 <_dtoa_r+0x330>)
 800a41e:	e04c      	b.n	800a4ba <_dtoa_r+0x352>
 800a420:	2301      	movs	r3, #1
 800a422:	930a      	str	r3, [sp, #40]	; 0x28
 800a424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a426:	4453      	add	r3, sl
 800a428:	f103 0901 	add.w	r9, r3, #1
 800a42c:	9302      	str	r3, [sp, #8]
 800a42e:	464b      	mov	r3, r9
 800a430:	2b01      	cmp	r3, #1
 800a432:	bfb8      	it	lt
 800a434:	2301      	movlt	r3, #1
 800a436:	e7ba      	b.n	800a3ae <_dtoa_r+0x246>
 800a438:	2300      	movs	r3, #0
 800a43a:	e7b2      	b.n	800a3a2 <_dtoa_r+0x23a>
 800a43c:	2300      	movs	r3, #0
 800a43e:	e7f0      	b.n	800a422 <_dtoa_r+0x2ba>
 800a440:	2501      	movs	r5, #1
 800a442:	2300      	movs	r3, #0
 800a444:	9306      	str	r3, [sp, #24]
 800a446:	950a      	str	r5, [sp, #40]	; 0x28
 800a448:	f04f 33ff 	mov.w	r3, #4294967295
 800a44c:	9302      	str	r3, [sp, #8]
 800a44e:	4699      	mov	r9, r3
 800a450:	2200      	movs	r2, #0
 800a452:	2312      	movs	r3, #18
 800a454:	920b      	str	r2, [sp, #44]	; 0x2c
 800a456:	e7aa      	b.n	800a3ae <_dtoa_r+0x246>
 800a458:	2301      	movs	r3, #1
 800a45a:	930a      	str	r3, [sp, #40]	; 0x28
 800a45c:	e7f4      	b.n	800a448 <_dtoa_r+0x2e0>
 800a45e:	2301      	movs	r3, #1
 800a460:	9302      	str	r3, [sp, #8]
 800a462:	4699      	mov	r9, r3
 800a464:	461a      	mov	r2, r3
 800a466:	e7f5      	b.n	800a454 <_dtoa_r+0x2ec>
 800a468:	3101      	adds	r1, #1
 800a46a:	6071      	str	r1, [r6, #4]
 800a46c:	0052      	lsls	r2, r2, #1
 800a46e:	e7a2      	b.n	800a3b6 <_dtoa_r+0x24e>
 800a470:	636f4361 	.word	0x636f4361
 800a474:	3fd287a7 	.word	0x3fd287a7
 800a478:	8b60c8b3 	.word	0x8b60c8b3
 800a47c:	3fc68a28 	.word	0x3fc68a28
 800a480:	509f79fb 	.word	0x509f79fb
 800a484:	3fd34413 	.word	0x3fd34413
 800a488:	7ff00000 	.word	0x7ff00000
 800a48c:	0800b741 	.word	0x0800b741
 800a490:	3ff80000 	.word	0x3ff80000
 800a494:	0800b788 	.word	0x0800b788
 800a498:	0800b760 	.word	0x0800b760
 800a49c:	0800b74b 	.word	0x0800b74b
 800a4a0:	07f1      	lsls	r1, r6, #31
 800a4a2:	d508      	bpl.n	800a4b6 <_dtoa_r+0x34e>
 800a4a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ac:	f7f6 f854 	bl	8000558 <__aeabi_dmul>
 800a4b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4b4:	3501      	adds	r5, #1
 800a4b6:	1076      	asrs	r6, r6, #1
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	2e00      	cmp	r6, #0
 800a4bc:	d1f0      	bne.n	800a4a0 <_dtoa_r+0x338>
 800a4be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a4c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4c6:	f7f6 f971 	bl	80007ac <__aeabi_ddiv>
 800a4ca:	e9cd 0100 	strd	r0, r1, [sp]
 800a4ce:	e01a      	b.n	800a506 <_dtoa_r+0x39e>
 800a4d0:	2502      	movs	r5, #2
 800a4d2:	e7a3      	b.n	800a41c <_dtoa_r+0x2b4>
 800a4d4:	f000 80a0 	beq.w	800a618 <_dtoa_r+0x4b0>
 800a4d8:	f1ca 0600 	rsb	r6, sl, #0
 800a4dc:	4b9f      	ldr	r3, [pc, #636]	; (800a75c <_dtoa_r+0x5f4>)
 800a4de:	4fa0      	ldr	r7, [pc, #640]	; (800a760 <_dtoa_r+0x5f8>)
 800a4e0:	f006 020f 	and.w	r2, r6, #15
 800a4e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4f0:	f7f6 f832 	bl	8000558 <__aeabi_dmul>
 800a4f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a4f8:	1136      	asrs	r6, r6, #4
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	2502      	movs	r5, #2
 800a4fe:	2e00      	cmp	r6, #0
 800a500:	d17f      	bne.n	800a602 <_dtoa_r+0x49a>
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1e1      	bne.n	800a4ca <_dtoa_r+0x362>
 800a506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 8087 	beq.w	800a61c <_dtoa_r+0x4b4>
 800a50e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a512:	2200      	movs	r2, #0
 800a514:	4b93      	ldr	r3, [pc, #588]	; (800a764 <_dtoa_r+0x5fc>)
 800a516:	4630      	mov	r0, r6
 800a518:	4639      	mov	r1, r7
 800a51a:	f7f6 fa8f 	bl	8000a3c <__aeabi_dcmplt>
 800a51e:	2800      	cmp	r0, #0
 800a520:	d07c      	beq.n	800a61c <_dtoa_r+0x4b4>
 800a522:	f1b9 0f00 	cmp.w	r9, #0
 800a526:	d079      	beq.n	800a61c <_dtoa_r+0x4b4>
 800a528:	9b02      	ldr	r3, [sp, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	dd35      	ble.n	800a59a <_dtoa_r+0x432>
 800a52e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a532:	9308      	str	r3, [sp, #32]
 800a534:	4639      	mov	r1, r7
 800a536:	2200      	movs	r2, #0
 800a538:	4b8b      	ldr	r3, [pc, #556]	; (800a768 <_dtoa_r+0x600>)
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7f6 f80c 	bl	8000558 <__aeabi_dmul>
 800a540:	e9cd 0100 	strd	r0, r1, [sp]
 800a544:	9f02      	ldr	r7, [sp, #8]
 800a546:	3501      	adds	r5, #1
 800a548:	4628      	mov	r0, r5
 800a54a:	f7f5 ff9b 	bl	8000484 <__aeabi_i2d>
 800a54e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a552:	f7f6 f801 	bl	8000558 <__aeabi_dmul>
 800a556:	2200      	movs	r2, #0
 800a558:	4b84      	ldr	r3, [pc, #528]	; (800a76c <_dtoa_r+0x604>)
 800a55a:	f7f5 fe47 	bl	80001ec <__adddf3>
 800a55e:	4605      	mov	r5, r0
 800a560:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a564:	2f00      	cmp	r7, #0
 800a566:	d15d      	bne.n	800a624 <_dtoa_r+0x4bc>
 800a568:	2200      	movs	r2, #0
 800a56a:	4b81      	ldr	r3, [pc, #516]	; (800a770 <_dtoa_r+0x608>)
 800a56c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a570:	f7f5 fe3a 	bl	80001e8 <__aeabi_dsub>
 800a574:	462a      	mov	r2, r5
 800a576:	4633      	mov	r3, r6
 800a578:	e9cd 0100 	strd	r0, r1, [sp]
 800a57c:	f7f6 fa7c 	bl	8000a78 <__aeabi_dcmpgt>
 800a580:	2800      	cmp	r0, #0
 800a582:	f040 8288 	bne.w	800aa96 <_dtoa_r+0x92e>
 800a586:	462a      	mov	r2, r5
 800a588:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a58c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a590:	f7f6 fa54 	bl	8000a3c <__aeabi_dcmplt>
 800a594:	2800      	cmp	r0, #0
 800a596:	f040 827c 	bne.w	800aa92 <_dtoa_r+0x92a>
 800a59a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a59e:	e9cd 2300 	strd	r2, r3, [sp]
 800a5a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f2c0 8150 	blt.w	800a84a <_dtoa_r+0x6e2>
 800a5aa:	f1ba 0f0e 	cmp.w	sl, #14
 800a5ae:	f300 814c 	bgt.w	800a84a <_dtoa_r+0x6e2>
 800a5b2:	4b6a      	ldr	r3, [pc, #424]	; (800a75c <_dtoa_r+0x5f4>)
 800a5b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5b8:	ed93 7b00 	vldr	d7, [r3]
 800a5bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5c4:	f280 80d8 	bge.w	800a778 <_dtoa_r+0x610>
 800a5c8:	f1b9 0f00 	cmp.w	r9, #0
 800a5cc:	f300 80d4 	bgt.w	800a778 <_dtoa_r+0x610>
 800a5d0:	f040 825e 	bne.w	800aa90 <_dtoa_r+0x928>
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	4b66      	ldr	r3, [pc, #408]	; (800a770 <_dtoa_r+0x608>)
 800a5d8:	ec51 0b17 	vmov	r0, r1, d7
 800a5dc:	f7f5 ffbc 	bl	8000558 <__aeabi_dmul>
 800a5e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5e4:	f7f6 fa3e 	bl	8000a64 <__aeabi_dcmpge>
 800a5e8:	464f      	mov	r7, r9
 800a5ea:	464e      	mov	r6, r9
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	f040 8234 	bne.w	800aa5a <_dtoa_r+0x8f2>
 800a5f2:	2331      	movs	r3, #49	; 0x31
 800a5f4:	f10b 0501 	add.w	r5, fp, #1
 800a5f8:	f88b 3000 	strb.w	r3, [fp]
 800a5fc:	f10a 0a01 	add.w	sl, sl, #1
 800a600:	e22f      	b.n	800aa62 <_dtoa_r+0x8fa>
 800a602:	07f2      	lsls	r2, r6, #31
 800a604:	d505      	bpl.n	800a612 <_dtoa_r+0x4aa>
 800a606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a60a:	f7f5 ffa5 	bl	8000558 <__aeabi_dmul>
 800a60e:	3501      	adds	r5, #1
 800a610:	2301      	movs	r3, #1
 800a612:	1076      	asrs	r6, r6, #1
 800a614:	3708      	adds	r7, #8
 800a616:	e772      	b.n	800a4fe <_dtoa_r+0x396>
 800a618:	2502      	movs	r5, #2
 800a61a:	e774      	b.n	800a506 <_dtoa_r+0x39e>
 800a61c:	f8cd a020 	str.w	sl, [sp, #32]
 800a620:	464f      	mov	r7, r9
 800a622:	e791      	b.n	800a548 <_dtoa_r+0x3e0>
 800a624:	4b4d      	ldr	r3, [pc, #308]	; (800a75c <_dtoa_r+0x5f4>)
 800a626:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a62a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a630:	2b00      	cmp	r3, #0
 800a632:	d047      	beq.n	800a6c4 <_dtoa_r+0x55c>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	2000      	movs	r0, #0
 800a63a:	494e      	ldr	r1, [pc, #312]	; (800a774 <_dtoa_r+0x60c>)
 800a63c:	f7f6 f8b6 	bl	80007ac <__aeabi_ddiv>
 800a640:	462a      	mov	r2, r5
 800a642:	4633      	mov	r3, r6
 800a644:	f7f5 fdd0 	bl	80001e8 <__aeabi_dsub>
 800a648:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a64c:	465d      	mov	r5, fp
 800a64e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a652:	f7f6 fa31 	bl	8000ab8 <__aeabi_d2iz>
 800a656:	4606      	mov	r6, r0
 800a658:	f7f5 ff14 	bl	8000484 <__aeabi_i2d>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a664:	f7f5 fdc0 	bl	80001e8 <__aeabi_dsub>
 800a668:	3630      	adds	r6, #48	; 0x30
 800a66a:	f805 6b01 	strb.w	r6, [r5], #1
 800a66e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a672:	e9cd 0100 	strd	r0, r1, [sp]
 800a676:	f7f6 f9e1 	bl	8000a3c <__aeabi_dcmplt>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d163      	bne.n	800a746 <_dtoa_r+0x5de>
 800a67e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a682:	2000      	movs	r0, #0
 800a684:	4937      	ldr	r1, [pc, #220]	; (800a764 <_dtoa_r+0x5fc>)
 800a686:	f7f5 fdaf 	bl	80001e8 <__aeabi_dsub>
 800a68a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a68e:	f7f6 f9d5 	bl	8000a3c <__aeabi_dcmplt>
 800a692:	2800      	cmp	r0, #0
 800a694:	f040 80b7 	bne.w	800a806 <_dtoa_r+0x69e>
 800a698:	eba5 030b 	sub.w	r3, r5, fp
 800a69c:	429f      	cmp	r7, r3
 800a69e:	f77f af7c 	ble.w	800a59a <_dtoa_r+0x432>
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	4b30      	ldr	r3, [pc, #192]	; (800a768 <_dtoa_r+0x600>)
 800a6a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6aa:	f7f5 ff55 	bl	8000558 <__aeabi_dmul>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6b4:	4b2c      	ldr	r3, [pc, #176]	; (800a768 <_dtoa_r+0x600>)
 800a6b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6ba:	f7f5 ff4d 	bl	8000558 <__aeabi_dmul>
 800a6be:	e9cd 0100 	strd	r0, r1, [sp]
 800a6c2:	e7c4      	b.n	800a64e <_dtoa_r+0x4e6>
 800a6c4:	462a      	mov	r2, r5
 800a6c6:	4633      	mov	r3, r6
 800a6c8:	f7f5 ff46 	bl	8000558 <__aeabi_dmul>
 800a6cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a6d0:	eb0b 0507 	add.w	r5, fp, r7
 800a6d4:	465e      	mov	r6, fp
 800a6d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6da:	f7f6 f9ed 	bl	8000ab8 <__aeabi_d2iz>
 800a6de:	4607      	mov	r7, r0
 800a6e0:	f7f5 fed0 	bl	8000484 <__aeabi_i2d>
 800a6e4:	3730      	adds	r7, #48	; 0x30
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6ee:	f7f5 fd7b 	bl	80001e8 <__aeabi_dsub>
 800a6f2:	f806 7b01 	strb.w	r7, [r6], #1
 800a6f6:	42ae      	cmp	r6, r5
 800a6f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a6fc:	f04f 0200 	mov.w	r2, #0
 800a700:	d126      	bne.n	800a750 <_dtoa_r+0x5e8>
 800a702:	4b1c      	ldr	r3, [pc, #112]	; (800a774 <_dtoa_r+0x60c>)
 800a704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a708:	f7f5 fd70 	bl	80001ec <__adddf3>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a714:	f7f6 f9b0 	bl	8000a78 <__aeabi_dcmpgt>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d174      	bne.n	800a806 <_dtoa_r+0x69e>
 800a71c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a720:	2000      	movs	r0, #0
 800a722:	4914      	ldr	r1, [pc, #80]	; (800a774 <_dtoa_r+0x60c>)
 800a724:	f7f5 fd60 	bl	80001e8 <__aeabi_dsub>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a730:	f7f6 f984 	bl	8000a3c <__aeabi_dcmplt>
 800a734:	2800      	cmp	r0, #0
 800a736:	f43f af30 	beq.w	800a59a <_dtoa_r+0x432>
 800a73a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a73e:	2b30      	cmp	r3, #48	; 0x30
 800a740:	f105 32ff 	add.w	r2, r5, #4294967295
 800a744:	d002      	beq.n	800a74c <_dtoa_r+0x5e4>
 800a746:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a74a:	e04a      	b.n	800a7e2 <_dtoa_r+0x67a>
 800a74c:	4615      	mov	r5, r2
 800a74e:	e7f4      	b.n	800a73a <_dtoa_r+0x5d2>
 800a750:	4b05      	ldr	r3, [pc, #20]	; (800a768 <_dtoa_r+0x600>)
 800a752:	f7f5 ff01 	bl	8000558 <__aeabi_dmul>
 800a756:	e9cd 0100 	strd	r0, r1, [sp]
 800a75a:	e7bc      	b.n	800a6d6 <_dtoa_r+0x56e>
 800a75c:	0800b788 	.word	0x0800b788
 800a760:	0800b760 	.word	0x0800b760
 800a764:	3ff00000 	.word	0x3ff00000
 800a768:	40240000 	.word	0x40240000
 800a76c:	401c0000 	.word	0x401c0000
 800a770:	40140000 	.word	0x40140000
 800a774:	3fe00000 	.word	0x3fe00000
 800a778:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a77c:	465d      	mov	r5, fp
 800a77e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a782:	4630      	mov	r0, r6
 800a784:	4639      	mov	r1, r7
 800a786:	f7f6 f811 	bl	80007ac <__aeabi_ddiv>
 800a78a:	f7f6 f995 	bl	8000ab8 <__aeabi_d2iz>
 800a78e:	4680      	mov	r8, r0
 800a790:	f7f5 fe78 	bl	8000484 <__aeabi_i2d>
 800a794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a798:	f7f5 fede 	bl	8000558 <__aeabi_dmul>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a7a8:	f7f5 fd1e 	bl	80001e8 <__aeabi_dsub>
 800a7ac:	f805 6b01 	strb.w	r6, [r5], #1
 800a7b0:	eba5 060b 	sub.w	r6, r5, fp
 800a7b4:	45b1      	cmp	r9, r6
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	d139      	bne.n	800a830 <_dtoa_r+0x6c8>
 800a7bc:	f7f5 fd16 	bl	80001ec <__adddf3>
 800a7c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	460f      	mov	r7, r1
 800a7c8:	f7f6 f956 	bl	8000a78 <__aeabi_dcmpgt>
 800a7cc:	b9c8      	cbnz	r0, 800a802 <_dtoa_r+0x69a>
 800a7ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f6 f927 	bl	8000a28 <__aeabi_dcmpeq>
 800a7da:	b110      	cbz	r0, 800a7e2 <_dtoa_r+0x67a>
 800a7dc:	f018 0f01 	tst.w	r8, #1
 800a7e0:	d10f      	bne.n	800a802 <_dtoa_r+0x69a>
 800a7e2:	9904      	ldr	r1, [sp, #16]
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 fad3 	bl	800ad90 <_Bfree>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a7ee:	702b      	strb	r3, [r5, #0]
 800a7f0:	f10a 0301 	add.w	r3, sl, #1
 800a7f4:	6013      	str	r3, [r2, #0]
 800a7f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 8241 	beq.w	800ac80 <_dtoa_r+0xb18>
 800a7fe:	601d      	str	r5, [r3, #0]
 800a800:	e23e      	b.n	800ac80 <_dtoa_r+0xb18>
 800a802:	f8cd a020 	str.w	sl, [sp, #32]
 800a806:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a80a:	2a39      	cmp	r2, #57	; 0x39
 800a80c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a810:	d108      	bne.n	800a824 <_dtoa_r+0x6bc>
 800a812:	459b      	cmp	fp, r3
 800a814:	d10a      	bne.n	800a82c <_dtoa_r+0x6c4>
 800a816:	9b08      	ldr	r3, [sp, #32]
 800a818:	3301      	adds	r3, #1
 800a81a:	9308      	str	r3, [sp, #32]
 800a81c:	2330      	movs	r3, #48	; 0x30
 800a81e:	f88b 3000 	strb.w	r3, [fp]
 800a822:	465b      	mov	r3, fp
 800a824:	781a      	ldrb	r2, [r3, #0]
 800a826:	3201      	adds	r2, #1
 800a828:	701a      	strb	r2, [r3, #0]
 800a82a:	e78c      	b.n	800a746 <_dtoa_r+0x5de>
 800a82c:	461d      	mov	r5, r3
 800a82e:	e7ea      	b.n	800a806 <_dtoa_r+0x69e>
 800a830:	2200      	movs	r2, #0
 800a832:	4b9b      	ldr	r3, [pc, #620]	; (800aaa0 <_dtoa_r+0x938>)
 800a834:	f7f5 fe90 	bl	8000558 <__aeabi_dmul>
 800a838:	2200      	movs	r2, #0
 800a83a:	2300      	movs	r3, #0
 800a83c:	4606      	mov	r6, r0
 800a83e:	460f      	mov	r7, r1
 800a840:	f7f6 f8f2 	bl	8000a28 <__aeabi_dcmpeq>
 800a844:	2800      	cmp	r0, #0
 800a846:	d09a      	beq.n	800a77e <_dtoa_r+0x616>
 800a848:	e7cb      	b.n	800a7e2 <_dtoa_r+0x67a>
 800a84a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a84c:	2a00      	cmp	r2, #0
 800a84e:	f000 808b 	beq.w	800a968 <_dtoa_r+0x800>
 800a852:	9a06      	ldr	r2, [sp, #24]
 800a854:	2a01      	cmp	r2, #1
 800a856:	dc6e      	bgt.n	800a936 <_dtoa_r+0x7ce>
 800a858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a85a:	2a00      	cmp	r2, #0
 800a85c:	d067      	beq.n	800a92e <_dtoa_r+0x7c6>
 800a85e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a862:	9f07      	ldr	r7, [sp, #28]
 800a864:	9d05      	ldr	r5, [sp, #20]
 800a866:	9a05      	ldr	r2, [sp, #20]
 800a868:	2101      	movs	r1, #1
 800a86a:	441a      	add	r2, r3
 800a86c:	4620      	mov	r0, r4
 800a86e:	9205      	str	r2, [sp, #20]
 800a870:	4498      	add	r8, r3
 800a872:	f000 fb2d 	bl	800aed0 <__i2b>
 800a876:	4606      	mov	r6, r0
 800a878:	2d00      	cmp	r5, #0
 800a87a:	dd0c      	ble.n	800a896 <_dtoa_r+0x72e>
 800a87c:	f1b8 0f00 	cmp.w	r8, #0
 800a880:	dd09      	ble.n	800a896 <_dtoa_r+0x72e>
 800a882:	4545      	cmp	r5, r8
 800a884:	9a05      	ldr	r2, [sp, #20]
 800a886:	462b      	mov	r3, r5
 800a888:	bfa8      	it	ge
 800a88a:	4643      	movge	r3, r8
 800a88c:	1ad2      	subs	r2, r2, r3
 800a88e:	9205      	str	r2, [sp, #20]
 800a890:	1aed      	subs	r5, r5, r3
 800a892:	eba8 0803 	sub.w	r8, r8, r3
 800a896:	9b07      	ldr	r3, [sp, #28]
 800a898:	b1eb      	cbz	r3, 800a8d6 <_dtoa_r+0x76e>
 800a89a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d067      	beq.n	800a970 <_dtoa_r+0x808>
 800a8a0:	b18f      	cbz	r7, 800a8c6 <_dtoa_r+0x75e>
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	463a      	mov	r2, r7
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f000 fbb2 	bl	800b010 <__pow5mult>
 800a8ac:	9a04      	ldr	r2, [sp, #16]
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 fb15 	bl	800aee2 <__multiply>
 800a8b8:	9904      	ldr	r1, [sp, #16]
 800a8ba:	9008      	str	r0, [sp, #32]
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 fa67 	bl	800ad90 <_Bfree>
 800a8c2:	9b08      	ldr	r3, [sp, #32]
 800a8c4:	9304      	str	r3, [sp, #16]
 800a8c6:	9b07      	ldr	r3, [sp, #28]
 800a8c8:	1bda      	subs	r2, r3, r7
 800a8ca:	d004      	beq.n	800a8d6 <_dtoa_r+0x76e>
 800a8cc:	9904      	ldr	r1, [sp, #16]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 fb9e 	bl	800b010 <__pow5mult>
 800a8d4:	9004      	str	r0, [sp, #16]
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 faf9 	bl	800aed0 <__i2b>
 800a8de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8e0:	4607      	mov	r7, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 81d0 	beq.w	800ac88 <_dtoa_r+0xb20>
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 fb8f 	bl	800b010 <__pow5mult>
 800a8f2:	9b06      	ldr	r3, [sp, #24]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	4607      	mov	r7, r0
 800a8f8:	dc40      	bgt.n	800a97c <_dtoa_r+0x814>
 800a8fa:	9b00      	ldr	r3, [sp, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d139      	bne.n	800a974 <_dtoa_r+0x80c>
 800a900:	9b01      	ldr	r3, [sp, #4]
 800a902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a906:	2b00      	cmp	r3, #0
 800a908:	d136      	bne.n	800a978 <_dtoa_r+0x810>
 800a90a:	9b01      	ldr	r3, [sp, #4]
 800a90c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a910:	0d1b      	lsrs	r3, r3, #20
 800a912:	051b      	lsls	r3, r3, #20
 800a914:	b12b      	cbz	r3, 800a922 <_dtoa_r+0x7ba>
 800a916:	9b05      	ldr	r3, [sp, #20]
 800a918:	3301      	adds	r3, #1
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	f108 0801 	add.w	r8, r8, #1
 800a920:	2301      	movs	r3, #1
 800a922:	9307      	str	r3, [sp, #28]
 800a924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a926:	2b00      	cmp	r3, #0
 800a928:	d12a      	bne.n	800a980 <_dtoa_r+0x818>
 800a92a:	2001      	movs	r0, #1
 800a92c:	e030      	b.n	800a990 <_dtoa_r+0x828>
 800a92e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a930:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a934:	e795      	b.n	800a862 <_dtoa_r+0x6fa>
 800a936:	9b07      	ldr	r3, [sp, #28]
 800a938:	f109 37ff 	add.w	r7, r9, #4294967295
 800a93c:	42bb      	cmp	r3, r7
 800a93e:	bfbf      	itttt	lt
 800a940:	9b07      	ldrlt	r3, [sp, #28]
 800a942:	9707      	strlt	r7, [sp, #28]
 800a944:	1afa      	sublt	r2, r7, r3
 800a946:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a948:	bfbb      	ittet	lt
 800a94a:	189b      	addlt	r3, r3, r2
 800a94c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a94e:	1bdf      	subge	r7, r3, r7
 800a950:	2700      	movlt	r7, #0
 800a952:	f1b9 0f00 	cmp.w	r9, #0
 800a956:	bfb5      	itete	lt
 800a958:	9b05      	ldrlt	r3, [sp, #20]
 800a95a:	9d05      	ldrge	r5, [sp, #20]
 800a95c:	eba3 0509 	sublt.w	r5, r3, r9
 800a960:	464b      	movge	r3, r9
 800a962:	bfb8      	it	lt
 800a964:	2300      	movlt	r3, #0
 800a966:	e77e      	b.n	800a866 <_dtoa_r+0x6fe>
 800a968:	9f07      	ldr	r7, [sp, #28]
 800a96a:	9d05      	ldr	r5, [sp, #20]
 800a96c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a96e:	e783      	b.n	800a878 <_dtoa_r+0x710>
 800a970:	9a07      	ldr	r2, [sp, #28]
 800a972:	e7ab      	b.n	800a8cc <_dtoa_r+0x764>
 800a974:	2300      	movs	r3, #0
 800a976:	e7d4      	b.n	800a922 <_dtoa_r+0x7ba>
 800a978:	9b00      	ldr	r3, [sp, #0]
 800a97a:	e7d2      	b.n	800a922 <_dtoa_r+0x7ba>
 800a97c:	2300      	movs	r3, #0
 800a97e:	9307      	str	r3, [sp, #28]
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a986:	6918      	ldr	r0, [r3, #16]
 800a988:	f000 fa54 	bl	800ae34 <__hi0bits>
 800a98c:	f1c0 0020 	rsb	r0, r0, #32
 800a990:	4440      	add	r0, r8
 800a992:	f010 001f 	ands.w	r0, r0, #31
 800a996:	d047      	beq.n	800aa28 <_dtoa_r+0x8c0>
 800a998:	f1c0 0320 	rsb	r3, r0, #32
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	dd3b      	ble.n	800aa18 <_dtoa_r+0x8b0>
 800a9a0:	9b05      	ldr	r3, [sp, #20]
 800a9a2:	f1c0 001c 	rsb	r0, r0, #28
 800a9a6:	4403      	add	r3, r0
 800a9a8:	9305      	str	r3, [sp, #20]
 800a9aa:	4405      	add	r5, r0
 800a9ac:	4480      	add	r8, r0
 800a9ae:	9b05      	ldr	r3, [sp, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	dd05      	ble.n	800a9c0 <_dtoa_r+0x858>
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	9904      	ldr	r1, [sp, #16]
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fb77 	bl	800b0ac <__lshift>
 800a9be:	9004      	str	r0, [sp, #16]
 800a9c0:	f1b8 0f00 	cmp.w	r8, #0
 800a9c4:	dd05      	ble.n	800a9d2 <_dtoa_r+0x86a>
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f000 fb6e 	bl	800b0ac <__lshift>
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9d4:	b353      	cbz	r3, 800aa2c <_dtoa_r+0x8c4>
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	9804      	ldr	r0, [sp, #16]
 800a9da:	f000 fbbb 	bl	800b154 <__mcmp>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	da24      	bge.n	800aa2c <_dtoa_r+0x8c4>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	220a      	movs	r2, #10
 800a9e6:	9904      	ldr	r1, [sp, #16]
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 f9e8 	bl	800adbe <__multadd>
 800a9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f0:	9004      	str	r0, [sp, #16]
 800a9f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f000 814d 	beq.w	800ac96 <_dtoa_r+0xb2e>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4631      	mov	r1, r6
 800aa00:	220a      	movs	r2, #10
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 f9db 	bl	800adbe <__multadd>
 800aa08:	9b02      	ldr	r3, [sp, #8]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	dc4f      	bgt.n	800aab0 <_dtoa_r+0x948>
 800aa10:	9b06      	ldr	r3, [sp, #24]
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	dd4c      	ble.n	800aab0 <_dtoa_r+0x948>
 800aa16:	e011      	b.n	800aa3c <_dtoa_r+0x8d4>
 800aa18:	d0c9      	beq.n	800a9ae <_dtoa_r+0x846>
 800aa1a:	9a05      	ldr	r2, [sp, #20]
 800aa1c:	331c      	adds	r3, #28
 800aa1e:	441a      	add	r2, r3
 800aa20:	9205      	str	r2, [sp, #20]
 800aa22:	441d      	add	r5, r3
 800aa24:	4498      	add	r8, r3
 800aa26:	e7c2      	b.n	800a9ae <_dtoa_r+0x846>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	e7f6      	b.n	800aa1a <_dtoa_r+0x8b2>
 800aa2c:	f1b9 0f00 	cmp.w	r9, #0
 800aa30:	dc38      	bgt.n	800aaa4 <_dtoa_r+0x93c>
 800aa32:	9b06      	ldr	r3, [sp, #24]
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	dd35      	ble.n	800aaa4 <_dtoa_r+0x93c>
 800aa38:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa3c:	9b02      	ldr	r3, [sp, #8]
 800aa3e:	b963      	cbnz	r3, 800aa5a <_dtoa_r+0x8f2>
 800aa40:	4639      	mov	r1, r7
 800aa42:	2205      	movs	r2, #5
 800aa44:	4620      	mov	r0, r4
 800aa46:	f000 f9ba 	bl	800adbe <__multadd>
 800aa4a:	4601      	mov	r1, r0
 800aa4c:	4607      	mov	r7, r0
 800aa4e:	9804      	ldr	r0, [sp, #16]
 800aa50:	f000 fb80 	bl	800b154 <__mcmp>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	f73f adcc 	bgt.w	800a5f2 <_dtoa_r+0x48a>
 800aa5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa5c:	465d      	mov	r5, fp
 800aa5e:	ea6f 0a03 	mvn.w	sl, r3
 800aa62:	f04f 0900 	mov.w	r9, #0
 800aa66:	4639      	mov	r1, r7
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 f991 	bl	800ad90 <_Bfree>
 800aa6e:	2e00      	cmp	r6, #0
 800aa70:	f43f aeb7 	beq.w	800a7e2 <_dtoa_r+0x67a>
 800aa74:	f1b9 0f00 	cmp.w	r9, #0
 800aa78:	d005      	beq.n	800aa86 <_dtoa_r+0x91e>
 800aa7a:	45b1      	cmp	r9, r6
 800aa7c:	d003      	beq.n	800aa86 <_dtoa_r+0x91e>
 800aa7e:	4649      	mov	r1, r9
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 f985 	bl	800ad90 <_Bfree>
 800aa86:	4631      	mov	r1, r6
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f000 f981 	bl	800ad90 <_Bfree>
 800aa8e:	e6a8      	b.n	800a7e2 <_dtoa_r+0x67a>
 800aa90:	2700      	movs	r7, #0
 800aa92:	463e      	mov	r6, r7
 800aa94:	e7e1      	b.n	800aa5a <_dtoa_r+0x8f2>
 800aa96:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aa9a:	463e      	mov	r6, r7
 800aa9c:	e5a9      	b.n	800a5f2 <_dtoa_r+0x48a>
 800aa9e:	bf00      	nop
 800aaa0:	40240000 	.word	0x40240000
 800aaa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaa6:	f8cd 9008 	str.w	r9, [sp, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 80fa 	beq.w	800aca4 <_dtoa_r+0xb3c>
 800aab0:	2d00      	cmp	r5, #0
 800aab2:	dd05      	ble.n	800aac0 <_dtoa_r+0x958>
 800aab4:	4631      	mov	r1, r6
 800aab6:	462a      	mov	r2, r5
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 faf7 	bl	800b0ac <__lshift>
 800aabe:	4606      	mov	r6, r0
 800aac0:	9b07      	ldr	r3, [sp, #28]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d04c      	beq.n	800ab60 <_dtoa_r+0x9f8>
 800aac6:	6871      	ldr	r1, [r6, #4]
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 f92d 	bl	800ad28 <_Balloc>
 800aace:	6932      	ldr	r2, [r6, #16]
 800aad0:	3202      	adds	r2, #2
 800aad2:	4605      	mov	r5, r0
 800aad4:	0092      	lsls	r2, r2, #2
 800aad6:	f106 010c 	add.w	r1, r6, #12
 800aada:	300c      	adds	r0, #12
 800aadc:	f7fe ff58 	bl	8009990 <memcpy>
 800aae0:	2201      	movs	r2, #1
 800aae2:	4629      	mov	r1, r5
 800aae4:	4620      	mov	r0, r4
 800aae6:	f000 fae1 	bl	800b0ac <__lshift>
 800aaea:	9b00      	ldr	r3, [sp, #0]
 800aaec:	f8cd b014 	str.w	fp, [sp, #20]
 800aaf0:	f003 0301 	and.w	r3, r3, #1
 800aaf4:	46b1      	mov	r9, r6
 800aaf6:	9307      	str	r3, [sp, #28]
 800aaf8:	4606      	mov	r6, r0
 800aafa:	4639      	mov	r1, r7
 800aafc:	9804      	ldr	r0, [sp, #16]
 800aafe:	f7ff faa4 	bl	800a04a <quorem>
 800ab02:	4649      	mov	r1, r9
 800ab04:	4605      	mov	r5, r0
 800ab06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab0a:	9804      	ldr	r0, [sp, #16]
 800ab0c:	f000 fb22 	bl	800b154 <__mcmp>
 800ab10:	4632      	mov	r2, r6
 800ab12:	9000      	str	r0, [sp, #0]
 800ab14:	4639      	mov	r1, r7
 800ab16:	4620      	mov	r0, r4
 800ab18:	f000 fb36 	bl	800b188 <__mdiff>
 800ab1c:	68c3      	ldr	r3, [r0, #12]
 800ab1e:	4602      	mov	r2, r0
 800ab20:	bb03      	cbnz	r3, 800ab64 <_dtoa_r+0x9fc>
 800ab22:	4601      	mov	r1, r0
 800ab24:	9008      	str	r0, [sp, #32]
 800ab26:	9804      	ldr	r0, [sp, #16]
 800ab28:	f000 fb14 	bl	800b154 <__mcmp>
 800ab2c:	9a08      	ldr	r2, [sp, #32]
 800ab2e:	4603      	mov	r3, r0
 800ab30:	4611      	mov	r1, r2
 800ab32:	4620      	mov	r0, r4
 800ab34:	9308      	str	r3, [sp, #32]
 800ab36:	f000 f92b 	bl	800ad90 <_Bfree>
 800ab3a:	9b08      	ldr	r3, [sp, #32]
 800ab3c:	b9a3      	cbnz	r3, 800ab68 <_dtoa_r+0xa00>
 800ab3e:	9a06      	ldr	r2, [sp, #24]
 800ab40:	b992      	cbnz	r2, 800ab68 <_dtoa_r+0xa00>
 800ab42:	9a07      	ldr	r2, [sp, #28]
 800ab44:	b982      	cbnz	r2, 800ab68 <_dtoa_r+0xa00>
 800ab46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab4a:	d029      	beq.n	800aba0 <_dtoa_r+0xa38>
 800ab4c:	9b00      	ldr	r3, [sp, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	dd01      	ble.n	800ab56 <_dtoa_r+0x9ee>
 800ab52:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ab56:	9b05      	ldr	r3, [sp, #20]
 800ab58:	1c5d      	adds	r5, r3, #1
 800ab5a:	f883 8000 	strb.w	r8, [r3]
 800ab5e:	e782      	b.n	800aa66 <_dtoa_r+0x8fe>
 800ab60:	4630      	mov	r0, r6
 800ab62:	e7c2      	b.n	800aaea <_dtoa_r+0x982>
 800ab64:	2301      	movs	r3, #1
 800ab66:	e7e3      	b.n	800ab30 <_dtoa_r+0x9c8>
 800ab68:	9a00      	ldr	r2, [sp, #0]
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	db04      	blt.n	800ab78 <_dtoa_r+0xa10>
 800ab6e:	d125      	bne.n	800abbc <_dtoa_r+0xa54>
 800ab70:	9a06      	ldr	r2, [sp, #24]
 800ab72:	bb1a      	cbnz	r2, 800abbc <_dtoa_r+0xa54>
 800ab74:	9a07      	ldr	r2, [sp, #28]
 800ab76:	bb0a      	cbnz	r2, 800abbc <_dtoa_r+0xa54>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	ddec      	ble.n	800ab56 <_dtoa_r+0x9ee>
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	9904      	ldr	r1, [sp, #16]
 800ab80:	4620      	mov	r0, r4
 800ab82:	f000 fa93 	bl	800b0ac <__lshift>
 800ab86:	4639      	mov	r1, r7
 800ab88:	9004      	str	r0, [sp, #16]
 800ab8a:	f000 fae3 	bl	800b154 <__mcmp>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	dc03      	bgt.n	800ab9a <_dtoa_r+0xa32>
 800ab92:	d1e0      	bne.n	800ab56 <_dtoa_r+0x9ee>
 800ab94:	f018 0f01 	tst.w	r8, #1
 800ab98:	d0dd      	beq.n	800ab56 <_dtoa_r+0x9ee>
 800ab9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab9e:	d1d8      	bne.n	800ab52 <_dtoa_r+0x9ea>
 800aba0:	9b05      	ldr	r3, [sp, #20]
 800aba2:	9a05      	ldr	r2, [sp, #20]
 800aba4:	1c5d      	adds	r5, r3, #1
 800aba6:	2339      	movs	r3, #57	; 0x39
 800aba8:	7013      	strb	r3, [r2, #0]
 800abaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abae:	2b39      	cmp	r3, #57	; 0x39
 800abb0:	f105 32ff 	add.w	r2, r5, #4294967295
 800abb4:	d04f      	beq.n	800ac56 <_dtoa_r+0xaee>
 800abb6:	3301      	adds	r3, #1
 800abb8:	7013      	strb	r3, [r2, #0]
 800abba:	e754      	b.n	800aa66 <_dtoa_r+0x8fe>
 800abbc:	9a05      	ldr	r2, [sp, #20]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f102 0501 	add.w	r5, r2, #1
 800abc4:	dd06      	ble.n	800abd4 <_dtoa_r+0xa6c>
 800abc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800abca:	d0e9      	beq.n	800aba0 <_dtoa_r+0xa38>
 800abcc:	f108 0801 	add.w	r8, r8, #1
 800abd0:	9b05      	ldr	r3, [sp, #20]
 800abd2:	e7c2      	b.n	800ab5a <_dtoa_r+0x9f2>
 800abd4:	9a02      	ldr	r2, [sp, #8]
 800abd6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800abda:	eba5 030b 	sub.w	r3, r5, fp
 800abde:	4293      	cmp	r3, r2
 800abe0:	d021      	beq.n	800ac26 <_dtoa_r+0xabe>
 800abe2:	2300      	movs	r3, #0
 800abe4:	220a      	movs	r2, #10
 800abe6:	9904      	ldr	r1, [sp, #16]
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 f8e8 	bl	800adbe <__multadd>
 800abee:	45b1      	cmp	r9, r6
 800abf0:	9004      	str	r0, [sp, #16]
 800abf2:	f04f 0300 	mov.w	r3, #0
 800abf6:	f04f 020a 	mov.w	r2, #10
 800abfa:	4649      	mov	r1, r9
 800abfc:	4620      	mov	r0, r4
 800abfe:	d105      	bne.n	800ac0c <_dtoa_r+0xaa4>
 800ac00:	f000 f8dd 	bl	800adbe <__multadd>
 800ac04:	4681      	mov	r9, r0
 800ac06:	4606      	mov	r6, r0
 800ac08:	9505      	str	r5, [sp, #20]
 800ac0a:	e776      	b.n	800aafa <_dtoa_r+0x992>
 800ac0c:	f000 f8d7 	bl	800adbe <__multadd>
 800ac10:	4631      	mov	r1, r6
 800ac12:	4681      	mov	r9, r0
 800ac14:	2300      	movs	r3, #0
 800ac16:	220a      	movs	r2, #10
 800ac18:	4620      	mov	r0, r4
 800ac1a:	f000 f8d0 	bl	800adbe <__multadd>
 800ac1e:	4606      	mov	r6, r0
 800ac20:	e7f2      	b.n	800ac08 <_dtoa_r+0xaa0>
 800ac22:	f04f 0900 	mov.w	r9, #0
 800ac26:	2201      	movs	r2, #1
 800ac28:	9904      	ldr	r1, [sp, #16]
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 fa3e 	bl	800b0ac <__lshift>
 800ac30:	4639      	mov	r1, r7
 800ac32:	9004      	str	r0, [sp, #16]
 800ac34:	f000 fa8e 	bl	800b154 <__mcmp>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	dcb6      	bgt.n	800abaa <_dtoa_r+0xa42>
 800ac3c:	d102      	bne.n	800ac44 <_dtoa_r+0xadc>
 800ac3e:	f018 0f01 	tst.w	r8, #1
 800ac42:	d1b2      	bne.n	800abaa <_dtoa_r+0xa42>
 800ac44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac48:	2b30      	cmp	r3, #48	; 0x30
 800ac4a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac4e:	f47f af0a 	bne.w	800aa66 <_dtoa_r+0x8fe>
 800ac52:	4615      	mov	r5, r2
 800ac54:	e7f6      	b.n	800ac44 <_dtoa_r+0xadc>
 800ac56:	4593      	cmp	fp, r2
 800ac58:	d105      	bne.n	800ac66 <_dtoa_r+0xafe>
 800ac5a:	2331      	movs	r3, #49	; 0x31
 800ac5c:	f10a 0a01 	add.w	sl, sl, #1
 800ac60:	f88b 3000 	strb.w	r3, [fp]
 800ac64:	e6ff      	b.n	800aa66 <_dtoa_r+0x8fe>
 800ac66:	4615      	mov	r5, r2
 800ac68:	e79f      	b.n	800abaa <_dtoa_r+0xa42>
 800ac6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800acd0 <_dtoa_r+0xb68>
 800ac6e:	e007      	b.n	800ac80 <_dtoa_r+0xb18>
 800ac70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac72:	f8df b060 	ldr.w	fp, [pc, #96]	; 800acd4 <_dtoa_r+0xb6c>
 800ac76:	b11b      	cbz	r3, 800ac80 <_dtoa_r+0xb18>
 800ac78:	f10b 0308 	add.w	r3, fp, #8
 800ac7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	4658      	mov	r0, fp
 800ac82:	b017      	add	sp, #92	; 0x5c
 800ac84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac88:	9b06      	ldr	r3, [sp, #24]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	f77f ae35 	ble.w	800a8fa <_dtoa_r+0x792>
 800ac90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac92:	9307      	str	r3, [sp, #28]
 800ac94:	e649      	b.n	800a92a <_dtoa_r+0x7c2>
 800ac96:	9b02      	ldr	r3, [sp, #8]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dc03      	bgt.n	800aca4 <_dtoa_r+0xb3c>
 800ac9c:	9b06      	ldr	r3, [sp, #24]
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	f73f aecc 	bgt.w	800aa3c <_dtoa_r+0x8d4>
 800aca4:	465d      	mov	r5, fp
 800aca6:	4639      	mov	r1, r7
 800aca8:	9804      	ldr	r0, [sp, #16]
 800acaa:	f7ff f9ce 	bl	800a04a <quorem>
 800acae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800acb2:	f805 8b01 	strb.w	r8, [r5], #1
 800acb6:	9a02      	ldr	r2, [sp, #8]
 800acb8:	eba5 030b 	sub.w	r3, r5, fp
 800acbc:	429a      	cmp	r2, r3
 800acbe:	ddb0      	ble.n	800ac22 <_dtoa_r+0xaba>
 800acc0:	2300      	movs	r3, #0
 800acc2:	220a      	movs	r2, #10
 800acc4:	9904      	ldr	r1, [sp, #16]
 800acc6:	4620      	mov	r0, r4
 800acc8:	f000 f879 	bl	800adbe <__multadd>
 800accc:	9004      	str	r0, [sp, #16]
 800acce:	e7ea      	b.n	800aca6 <_dtoa_r+0xb3e>
 800acd0:	0800b740 	.word	0x0800b740
 800acd4:	0800b742 	.word	0x0800b742

0800acd8 <_localeconv_r>:
 800acd8:	4b04      	ldr	r3, [pc, #16]	; (800acec <_localeconv_r+0x14>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6a18      	ldr	r0, [r3, #32]
 800acde:	4b04      	ldr	r3, [pc, #16]	; (800acf0 <_localeconv_r+0x18>)
 800ace0:	2800      	cmp	r0, #0
 800ace2:	bf08      	it	eq
 800ace4:	4618      	moveq	r0, r3
 800ace6:	30f0      	adds	r0, #240	; 0xf0
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	200004a4 	.word	0x200004a4
 800acf0:	20000508 	.word	0x20000508

0800acf4 <malloc>:
 800acf4:	4b02      	ldr	r3, [pc, #8]	; (800ad00 <malloc+0xc>)
 800acf6:	4601      	mov	r1, r0
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	f000 baff 	b.w	800b2fc <_malloc_r>
 800acfe:	bf00      	nop
 800ad00:	200004a4 	.word	0x200004a4

0800ad04 <__ascii_mbtowc>:
 800ad04:	b082      	sub	sp, #8
 800ad06:	b901      	cbnz	r1, 800ad0a <__ascii_mbtowc+0x6>
 800ad08:	a901      	add	r1, sp, #4
 800ad0a:	b142      	cbz	r2, 800ad1e <__ascii_mbtowc+0x1a>
 800ad0c:	b14b      	cbz	r3, 800ad22 <__ascii_mbtowc+0x1e>
 800ad0e:	7813      	ldrb	r3, [r2, #0]
 800ad10:	600b      	str	r3, [r1, #0]
 800ad12:	7812      	ldrb	r2, [r2, #0]
 800ad14:	1c10      	adds	r0, r2, #0
 800ad16:	bf18      	it	ne
 800ad18:	2001      	movne	r0, #1
 800ad1a:	b002      	add	sp, #8
 800ad1c:	4770      	bx	lr
 800ad1e:	4610      	mov	r0, r2
 800ad20:	e7fb      	b.n	800ad1a <__ascii_mbtowc+0x16>
 800ad22:	f06f 0001 	mvn.w	r0, #1
 800ad26:	e7f8      	b.n	800ad1a <__ascii_mbtowc+0x16>

0800ad28 <_Balloc>:
 800ad28:	b570      	push	{r4, r5, r6, lr}
 800ad2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	460e      	mov	r6, r1
 800ad30:	b93d      	cbnz	r5, 800ad42 <_Balloc+0x1a>
 800ad32:	2010      	movs	r0, #16
 800ad34:	f7ff ffde 	bl	800acf4 <malloc>
 800ad38:	6260      	str	r0, [r4, #36]	; 0x24
 800ad3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad3e:	6005      	str	r5, [r0, #0]
 800ad40:	60c5      	str	r5, [r0, #12]
 800ad42:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ad44:	68eb      	ldr	r3, [r5, #12]
 800ad46:	b183      	cbz	r3, 800ad6a <_Balloc+0x42>
 800ad48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ad50:	b9b8      	cbnz	r0, 800ad82 <_Balloc+0x5a>
 800ad52:	2101      	movs	r1, #1
 800ad54:	fa01 f506 	lsl.w	r5, r1, r6
 800ad58:	1d6a      	adds	r2, r5, #5
 800ad5a:	0092      	lsls	r2, r2, #2
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f000 fabf 	bl	800b2e0 <_calloc_r>
 800ad62:	b160      	cbz	r0, 800ad7e <_Balloc+0x56>
 800ad64:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ad68:	e00e      	b.n	800ad88 <_Balloc+0x60>
 800ad6a:	2221      	movs	r2, #33	; 0x21
 800ad6c:	2104      	movs	r1, #4
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fab6 	bl	800b2e0 <_calloc_r>
 800ad74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad76:	60e8      	str	r0, [r5, #12]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1e4      	bne.n	800ad48 <_Balloc+0x20>
 800ad7e:	2000      	movs	r0, #0
 800ad80:	bd70      	pop	{r4, r5, r6, pc}
 800ad82:	6802      	ldr	r2, [r0, #0]
 800ad84:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ad88:	2300      	movs	r3, #0
 800ad8a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad8e:	e7f7      	b.n	800ad80 <_Balloc+0x58>

0800ad90 <_Bfree>:
 800ad90:	b570      	push	{r4, r5, r6, lr}
 800ad92:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ad94:	4606      	mov	r6, r0
 800ad96:	460d      	mov	r5, r1
 800ad98:	b93c      	cbnz	r4, 800adaa <_Bfree+0x1a>
 800ad9a:	2010      	movs	r0, #16
 800ad9c:	f7ff ffaa 	bl	800acf4 <malloc>
 800ada0:	6270      	str	r0, [r6, #36]	; 0x24
 800ada2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ada6:	6004      	str	r4, [r0, #0]
 800ada8:	60c4      	str	r4, [r0, #12]
 800adaa:	b13d      	cbz	r5, 800adbc <_Bfree+0x2c>
 800adac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800adae:	686a      	ldr	r2, [r5, #4]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800adb6:	6029      	str	r1, [r5, #0]
 800adb8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800adbc:	bd70      	pop	{r4, r5, r6, pc}

0800adbe <__multadd>:
 800adbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc2:	690d      	ldr	r5, [r1, #16]
 800adc4:	461f      	mov	r7, r3
 800adc6:	4606      	mov	r6, r0
 800adc8:	460c      	mov	r4, r1
 800adca:	f101 0c14 	add.w	ip, r1, #20
 800adce:	2300      	movs	r3, #0
 800add0:	f8dc 0000 	ldr.w	r0, [ip]
 800add4:	b281      	uxth	r1, r0
 800add6:	fb02 7101 	mla	r1, r2, r1, r7
 800adda:	0c0f      	lsrs	r7, r1, #16
 800addc:	0c00      	lsrs	r0, r0, #16
 800adde:	fb02 7000 	mla	r0, r2, r0, r7
 800ade2:	b289      	uxth	r1, r1
 800ade4:	3301      	adds	r3, #1
 800ade6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800adea:	429d      	cmp	r5, r3
 800adec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800adf0:	f84c 1b04 	str.w	r1, [ip], #4
 800adf4:	dcec      	bgt.n	800add0 <__multadd+0x12>
 800adf6:	b1d7      	cbz	r7, 800ae2e <__multadd+0x70>
 800adf8:	68a3      	ldr	r3, [r4, #8]
 800adfa:	42ab      	cmp	r3, r5
 800adfc:	dc12      	bgt.n	800ae24 <__multadd+0x66>
 800adfe:	6861      	ldr	r1, [r4, #4]
 800ae00:	4630      	mov	r0, r6
 800ae02:	3101      	adds	r1, #1
 800ae04:	f7ff ff90 	bl	800ad28 <_Balloc>
 800ae08:	6922      	ldr	r2, [r4, #16]
 800ae0a:	3202      	adds	r2, #2
 800ae0c:	f104 010c 	add.w	r1, r4, #12
 800ae10:	4680      	mov	r8, r0
 800ae12:	0092      	lsls	r2, r2, #2
 800ae14:	300c      	adds	r0, #12
 800ae16:	f7fe fdbb 	bl	8009990 <memcpy>
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	f7ff ffb7 	bl	800ad90 <_Bfree>
 800ae22:	4644      	mov	r4, r8
 800ae24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae28:	3501      	adds	r5, #1
 800ae2a:	615f      	str	r7, [r3, #20]
 800ae2c:	6125      	str	r5, [r4, #16]
 800ae2e:	4620      	mov	r0, r4
 800ae30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ae34 <__hi0bits>:
 800ae34:	0c02      	lsrs	r2, r0, #16
 800ae36:	0412      	lsls	r2, r2, #16
 800ae38:	4603      	mov	r3, r0
 800ae3a:	b9b2      	cbnz	r2, 800ae6a <__hi0bits+0x36>
 800ae3c:	0403      	lsls	r3, r0, #16
 800ae3e:	2010      	movs	r0, #16
 800ae40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ae44:	bf04      	itt	eq
 800ae46:	021b      	lsleq	r3, r3, #8
 800ae48:	3008      	addeq	r0, #8
 800ae4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ae4e:	bf04      	itt	eq
 800ae50:	011b      	lsleq	r3, r3, #4
 800ae52:	3004      	addeq	r0, #4
 800ae54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ae58:	bf04      	itt	eq
 800ae5a:	009b      	lsleq	r3, r3, #2
 800ae5c:	3002      	addeq	r0, #2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	db06      	blt.n	800ae70 <__hi0bits+0x3c>
 800ae62:	005b      	lsls	r3, r3, #1
 800ae64:	d503      	bpl.n	800ae6e <__hi0bits+0x3a>
 800ae66:	3001      	adds	r0, #1
 800ae68:	4770      	bx	lr
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	e7e8      	b.n	800ae40 <__hi0bits+0xc>
 800ae6e:	2020      	movs	r0, #32
 800ae70:	4770      	bx	lr

0800ae72 <__lo0bits>:
 800ae72:	6803      	ldr	r3, [r0, #0]
 800ae74:	f013 0207 	ands.w	r2, r3, #7
 800ae78:	4601      	mov	r1, r0
 800ae7a:	d00b      	beq.n	800ae94 <__lo0bits+0x22>
 800ae7c:	07da      	lsls	r2, r3, #31
 800ae7e:	d423      	bmi.n	800aec8 <__lo0bits+0x56>
 800ae80:	0798      	lsls	r0, r3, #30
 800ae82:	bf49      	itett	mi
 800ae84:	085b      	lsrmi	r3, r3, #1
 800ae86:	089b      	lsrpl	r3, r3, #2
 800ae88:	2001      	movmi	r0, #1
 800ae8a:	600b      	strmi	r3, [r1, #0]
 800ae8c:	bf5c      	itt	pl
 800ae8e:	600b      	strpl	r3, [r1, #0]
 800ae90:	2002      	movpl	r0, #2
 800ae92:	4770      	bx	lr
 800ae94:	b298      	uxth	r0, r3
 800ae96:	b9a8      	cbnz	r0, 800aec4 <__lo0bits+0x52>
 800ae98:	0c1b      	lsrs	r3, r3, #16
 800ae9a:	2010      	movs	r0, #16
 800ae9c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aea0:	bf04      	itt	eq
 800aea2:	0a1b      	lsreq	r3, r3, #8
 800aea4:	3008      	addeq	r0, #8
 800aea6:	071a      	lsls	r2, r3, #28
 800aea8:	bf04      	itt	eq
 800aeaa:	091b      	lsreq	r3, r3, #4
 800aeac:	3004      	addeq	r0, #4
 800aeae:	079a      	lsls	r2, r3, #30
 800aeb0:	bf04      	itt	eq
 800aeb2:	089b      	lsreq	r3, r3, #2
 800aeb4:	3002      	addeq	r0, #2
 800aeb6:	07da      	lsls	r2, r3, #31
 800aeb8:	d402      	bmi.n	800aec0 <__lo0bits+0x4e>
 800aeba:	085b      	lsrs	r3, r3, #1
 800aebc:	d006      	beq.n	800aecc <__lo0bits+0x5a>
 800aebe:	3001      	adds	r0, #1
 800aec0:	600b      	str	r3, [r1, #0]
 800aec2:	4770      	bx	lr
 800aec4:	4610      	mov	r0, r2
 800aec6:	e7e9      	b.n	800ae9c <__lo0bits+0x2a>
 800aec8:	2000      	movs	r0, #0
 800aeca:	4770      	bx	lr
 800aecc:	2020      	movs	r0, #32
 800aece:	4770      	bx	lr

0800aed0 <__i2b>:
 800aed0:	b510      	push	{r4, lr}
 800aed2:	460c      	mov	r4, r1
 800aed4:	2101      	movs	r1, #1
 800aed6:	f7ff ff27 	bl	800ad28 <_Balloc>
 800aeda:	2201      	movs	r2, #1
 800aedc:	6144      	str	r4, [r0, #20]
 800aede:	6102      	str	r2, [r0, #16]
 800aee0:	bd10      	pop	{r4, pc}

0800aee2 <__multiply>:
 800aee2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee6:	4614      	mov	r4, r2
 800aee8:	690a      	ldr	r2, [r1, #16]
 800aeea:	6923      	ldr	r3, [r4, #16]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	bfb8      	it	lt
 800aef0:	460b      	movlt	r3, r1
 800aef2:	4688      	mov	r8, r1
 800aef4:	bfbc      	itt	lt
 800aef6:	46a0      	movlt	r8, r4
 800aef8:	461c      	movlt	r4, r3
 800aefa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aefe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af06:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af0a:	eb07 0609 	add.w	r6, r7, r9
 800af0e:	42b3      	cmp	r3, r6
 800af10:	bfb8      	it	lt
 800af12:	3101      	addlt	r1, #1
 800af14:	f7ff ff08 	bl	800ad28 <_Balloc>
 800af18:	f100 0514 	add.w	r5, r0, #20
 800af1c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800af20:	462b      	mov	r3, r5
 800af22:	2200      	movs	r2, #0
 800af24:	4573      	cmp	r3, lr
 800af26:	d316      	bcc.n	800af56 <__multiply+0x74>
 800af28:	f104 0214 	add.w	r2, r4, #20
 800af2c:	f108 0114 	add.w	r1, r8, #20
 800af30:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800af34:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	9b00      	ldr	r3, [sp, #0]
 800af3c:	9201      	str	r2, [sp, #4]
 800af3e:	4293      	cmp	r3, r2
 800af40:	d80c      	bhi.n	800af5c <__multiply+0x7a>
 800af42:	2e00      	cmp	r6, #0
 800af44:	dd03      	ble.n	800af4e <__multiply+0x6c>
 800af46:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d05d      	beq.n	800b00a <__multiply+0x128>
 800af4e:	6106      	str	r6, [r0, #16]
 800af50:	b003      	add	sp, #12
 800af52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af56:	f843 2b04 	str.w	r2, [r3], #4
 800af5a:	e7e3      	b.n	800af24 <__multiply+0x42>
 800af5c:	f8b2 b000 	ldrh.w	fp, [r2]
 800af60:	f1bb 0f00 	cmp.w	fp, #0
 800af64:	d023      	beq.n	800afae <__multiply+0xcc>
 800af66:	4689      	mov	r9, r1
 800af68:	46ac      	mov	ip, r5
 800af6a:	f04f 0800 	mov.w	r8, #0
 800af6e:	f859 4b04 	ldr.w	r4, [r9], #4
 800af72:	f8dc a000 	ldr.w	sl, [ip]
 800af76:	b2a3      	uxth	r3, r4
 800af78:	fa1f fa8a 	uxth.w	sl, sl
 800af7c:	fb0b a303 	mla	r3, fp, r3, sl
 800af80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800af84:	f8dc 4000 	ldr.w	r4, [ip]
 800af88:	4443      	add	r3, r8
 800af8a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800af8e:	fb0b 840a 	mla	r4, fp, sl, r8
 800af92:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800af96:	46e2      	mov	sl, ip
 800af98:	b29b      	uxth	r3, r3
 800af9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800af9e:	454f      	cmp	r7, r9
 800afa0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800afa4:	f84a 3b04 	str.w	r3, [sl], #4
 800afa8:	d82b      	bhi.n	800b002 <__multiply+0x120>
 800afaa:	f8cc 8004 	str.w	r8, [ip, #4]
 800afae:	9b01      	ldr	r3, [sp, #4]
 800afb0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800afb4:	3204      	adds	r2, #4
 800afb6:	f1ba 0f00 	cmp.w	sl, #0
 800afba:	d020      	beq.n	800affe <__multiply+0x11c>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	4689      	mov	r9, r1
 800afc0:	46a8      	mov	r8, r5
 800afc2:	f04f 0b00 	mov.w	fp, #0
 800afc6:	f8b9 c000 	ldrh.w	ip, [r9]
 800afca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800afce:	fb0a 440c 	mla	r4, sl, ip, r4
 800afd2:	445c      	add	r4, fp
 800afd4:	46c4      	mov	ip, r8
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800afdc:	f84c 3b04 	str.w	r3, [ip], #4
 800afe0:	f859 3b04 	ldr.w	r3, [r9], #4
 800afe4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800afe8:	0c1b      	lsrs	r3, r3, #16
 800afea:	fb0a b303 	mla	r3, sl, r3, fp
 800afee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aff2:	454f      	cmp	r7, r9
 800aff4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aff8:	d805      	bhi.n	800b006 <__multiply+0x124>
 800affa:	f8c8 3004 	str.w	r3, [r8, #4]
 800affe:	3504      	adds	r5, #4
 800b000:	e79b      	b.n	800af3a <__multiply+0x58>
 800b002:	46d4      	mov	ip, sl
 800b004:	e7b3      	b.n	800af6e <__multiply+0x8c>
 800b006:	46e0      	mov	r8, ip
 800b008:	e7dd      	b.n	800afc6 <__multiply+0xe4>
 800b00a:	3e01      	subs	r6, #1
 800b00c:	e799      	b.n	800af42 <__multiply+0x60>
	...

0800b010 <__pow5mult>:
 800b010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b014:	4615      	mov	r5, r2
 800b016:	f012 0203 	ands.w	r2, r2, #3
 800b01a:	4606      	mov	r6, r0
 800b01c:	460f      	mov	r7, r1
 800b01e:	d007      	beq.n	800b030 <__pow5mult+0x20>
 800b020:	3a01      	subs	r2, #1
 800b022:	4c21      	ldr	r4, [pc, #132]	; (800b0a8 <__pow5mult+0x98>)
 800b024:	2300      	movs	r3, #0
 800b026:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b02a:	f7ff fec8 	bl	800adbe <__multadd>
 800b02e:	4607      	mov	r7, r0
 800b030:	10ad      	asrs	r5, r5, #2
 800b032:	d035      	beq.n	800b0a0 <__pow5mult+0x90>
 800b034:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b036:	b93c      	cbnz	r4, 800b048 <__pow5mult+0x38>
 800b038:	2010      	movs	r0, #16
 800b03a:	f7ff fe5b 	bl	800acf4 <malloc>
 800b03e:	6270      	str	r0, [r6, #36]	; 0x24
 800b040:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b044:	6004      	str	r4, [r0, #0]
 800b046:	60c4      	str	r4, [r0, #12]
 800b048:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b04c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b050:	b94c      	cbnz	r4, 800b066 <__pow5mult+0x56>
 800b052:	f240 2171 	movw	r1, #625	; 0x271
 800b056:	4630      	mov	r0, r6
 800b058:	f7ff ff3a 	bl	800aed0 <__i2b>
 800b05c:	2300      	movs	r3, #0
 800b05e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b062:	4604      	mov	r4, r0
 800b064:	6003      	str	r3, [r0, #0]
 800b066:	f04f 0800 	mov.w	r8, #0
 800b06a:	07eb      	lsls	r3, r5, #31
 800b06c:	d50a      	bpl.n	800b084 <__pow5mult+0x74>
 800b06e:	4639      	mov	r1, r7
 800b070:	4622      	mov	r2, r4
 800b072:	4630      	mov	r0, r6
 800b074:	f7ff ff35 	bl	800aee2 <__multiply>
 800b078:	4639      	mov	r1, r7
 800b07a:	4681      	mov	r9, r0
 800b07c:	4630      	mov	r0, r6
 800b07e:	f7ff fe87 	bl	800ad90 <_Bfree>
 800b082:	464f      	mov	r7, r9
 800b084:	106d      	asrs	r5, r5, #1
 800b086:	d00b      	beq.n	800b0a0 <__pow5mult+0x90>
 800b088:	6820      	ldr	r0, [r4, #0]
 800b08a:	b938      	cbnz	r0, 800b09c <__pow5mult+0x8c>
 800b08c:	4622      	mov	r2, r4
 800b08e:	4621      	mov	r1, r4
 800b090:	4630      	mov	r0, r6
 800b092:	f7ff ff26 	bl	800aee2 <__multiply>
 800b096:	6020      	str	r0, [r4, #0]
 800b098:	f8c0 8000 	str.w	r8, [r0]
 800b09c:	4604      	mov	r4, r0
 800b09e:	e7e4      	b.n	800b06a <__pow5mult+0x5a>
 800b0a0:	4638      	mov	r0, r7
 800b0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a6:	bf00      	nop
 800b0a8:	0800b850 	.word	0x0800b850

0800b0ac <__lshift>:
 800b0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0b6:	6923      	ldr	r3, [r4, #16]
 800b0b8:	6849      	ldr	r1, [r1, #4]
 800b0ba:	eb0a 0903 	add.w	r9, sl, r3
 800b0be:	68a3      	ldr	r3, [r4, #8]
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	4616      	mov	r6, r2
 800b0c4:	f109 0501 	add.w	r5, r9, #1
 800b0c8:	42ab      	cmp	r3, r5
 800b0ca:	db32      	blt.n	800b132 <__lshift+0x86>
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff fe2b 	bl	800ad28 <_Balloc>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	4680      	mov	r8, r0
 800b0d6:	f100 0114 	add.w	r1, r0, #20
 800b0da:	461a      	mov	r2, r3
 800b0dc:	4553      	cmp	r3, sl
 800b0de:	db2b      	blt.n	800b138 <__lshift+0x8c>
 800b0e0:	6920      	ldr	r0, [r4, #16]
 800b0e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0e6:	f104 0314 	add.w	r3, r4, #20
 800b0ea:	f016 021f 	ands.w	r2, r6, #31
 800b0ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b0f6:	d025      	beq.n	800b144 <__lshift+0x98>
 800b0f8:	f1c2 0e20 	rsb	lr, r2, #32
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	681e      	ldr	r6, [r3, #0]
 800b100:	468a      	mov	sl, r1
 800b102:	4096      	lsls	r6, r2
 800b104:	4330      	orrs	r0, r6
 800b106:	f84a 0b04 	str.w	r0, [sl], #4
 800b10a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b10e:	459c      	cmp	ip, r3
 800b110:	fa20 f00e 	lsr.w	r0, r0, lr
 800b114:	d814      	bhi.n	800b140 <__lshift+0x94>
 800b116:	6048      	str	r0, [r1, #4]
 800b118:	b108      	cbz	r0, 800b11e <__lshift+0x72>
 800b11a:	f109 0502 	add.w	r5, r9, #2
 800b11e:	3d01      	subs	r5, #1
 800b120:	4638      	mov	r0, r7
 800b122:	f8c8 5010 	str.w	r5, [r8, #16]
 800b126:	4621      	mov	r1, r4
 800b128:	f7ff fe32 	bl	800ad90 <_Bfree>
 800b12c:	4640      	mov	r0, r8
 800b12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b132:	3101      	adds	r1, #1
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	e7c7      	b.n	800b0c8 <__lshift+0x1c>
 800b138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b13c:	3301      	adds	r3, #1
 800b13e:	e7cd      	b.n	800b0dc <__lshift+0x30>
 800b140:	4651      	mov	r1, sl
 800b142:	e7dc      	b.n	800b0fe <__lshift+0x52>
 800b144:	3904      	subs	r1, #4
 800b146:	f853 2b04 	ldr.w	r2, [r3], #4
 800b14a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b14e:	459c      	cmp	ip, r3
 800b150:	d8f9      	bhi.n	800b146 <__lshift+0x9a>
 800b152:	e7e4      	b.n	800b11e <__lshift+0x72>

0800b154 <__mcmp>:
 800b154:	6903      	ldr	r3, [r0, #16]
 800b156:	690a      	ldr	r2, [r1, #16]
 800b158:	1a9b      	subs	r3, r3, r2
 800b15a:	b530      	push	{r4, r5, lr}
 800b15c:	d10c      	bne.n	800b178 <__mcmp+0x24>
 800b15e:	0092      	lsls	r2, r2, #2
 800b160:	3014      	adds	r0, #20
 800b162:	3114      	adds	r1, #20
 800b164:	1884      	adds	r4, r0, r2
 800b166:	4411      	add	r1, r2
 800b168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b16c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b170:	4295      	cmp	r5, r2
 800b172:	d003      	beq.n	800b17c <__mcmp+0x28>
 800b174:	d305      	bcc.n	800b182 <__mcmp+0x2e>
 800b176:	2301      	movs	r3, #1
 800b178:	4618      	mov	r0, r3
 800b17a:	bd30      	pop	{r4, r5, pc}
 800b17c:	42a0      	cmp	r0, r4
 800b17e:	d3f3      	bcc.n	800b168 <__mcmp+0x14>
 800b180:	e7fa      	b.n	800b178 <__mcmp+0x24>
 800b182:	f04f 33ff 	mov.w	r3, #4294967295
 800b186:	e7f7      	b.n	800b178 <__mcmp+0x24>

0800b188 <__mdiff>:
 800b188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b18c:	460d      	mov	r5, r1
 800b18e:	4607      	mov	r7, r0
 800b190:	4611      	mov	r1, r2
 800b192:	4628      	mov	r0, r5
 800b194:	4614      	mov	r4, r2
 800b196:	f7ff ffdd 	bl	800b154 <__mcmp>
 800b19a:	1e06      	subs	r6, r0, #0
 800b19c:	d108      	bne.n	800b1b0 <__mdiff+0x28>
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4638      	mov	r0, r7
 800b1a2:	f7ff fdc1 	bl	800ad28 <_Balloc>
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b0:	bfa4      	itt	ge
 800b1b2:	4623      	movge	r3, r4
 800b1b4:	462c      	movge	r4, r5
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	6861      	ldr	r1, [r4, #4]
 800b1ba:	bfa6      	itte	ge
 800b1bc:	461d      	movge	r5, r3
 800b1be:	2600      	movge	r6, #0
 800b1c0:	2601      	movlt	r6, #1
 800b1c2:	f7ff fdb1 	bl	800ad28 <_Balloc>
 800b1c6:	692b      	ldr	r3, [r5, #16]
 800b1c8:	60c6      	str	r6, [r0, #12]
 800b1ca:	6926      	ldr	r6, [r4, #16]
 800b1cc:	f105 0914 	add.w	r9, r5, #20
 800b1d0:	f104 0214 	add.w	r2, r4, #20
 800b1d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b1d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b1dc:	f100 0514 	add.w	r5, r0, #20
 800b1e0:	f04f 0e00 	mov.w	lr, #0
 800b1e4:	f852 ab04 	ldr.w	sl, [r2], #4
 800b1e8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b1ec:	fa1e f18a 	uxtah	r1, lr, sl
 800b1f0:	b2a3      	uxth	r3, r4
 800b1f2:	1ac9      	subs	r1, r1, r3
 800b1f4:	0c23      	lsrs	r3, r4, #16
 800b1f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b1fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b1fe:	b289      	uxth	r1, r1
 800b200:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b204:	45c8      	cmp	r8, r9
 800b206:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b20a:	4694      	mov	ip, r2
 800b20c:	f845 3b04 	str.w	r3, [r5], #4
 800b210:	d8e8      	bhi.n	800b1e4 <__mdiff+0x5c>
 800b212:	45bc      	cmp	ip, r7
 800b214:	d304      	bcc.n	800b220 <__mdiff+0x98>
 800b216:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b21a:	b183      	cbz	r3, 800b23e <__mdiff+0xb6>
 800b21c:	6106      	str	r6, [r0, #16]
 800b21e:	e7c5      	b.n	800b1ac <__mdiff+0x24>
 800b220:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b224:	fa1e f381 	uxtah	r3, lr, r1
 800b228:	141a      	asrs	r2, r3, #16
 800b22a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b22e:	b29b      	uxth	r3, r3
 800b230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b234:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b238:	f845 3b04 	str.w	r3, [r5], #4
 800b23c:	e7e9      	b.n	800b212 <__mdiff+0x8a>
 800b23e:	3e01      	subs	r6, #1
 800b240:	e7e9      	b.n	800b216 <__mdiff+0x8e>

0800b242 <__d2b>:
 800b242:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b246:	460e      	mov	r6, r1
 800b248:	2101      	movs	r1, #1
 800b24a:	ec59 8b10 	vmov	r8, r9, d0
 800b24e:	4615      	mov	r5, r2
 800b250:	f7ff fd6a 	bl	800ad28 <_Balloc>
 800b254:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b258:	4607      	mov	r7, r0
 800b25a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b25e:	bb34      	cbnz	r4, 800b2ae <__d2b+0x6c>
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	f1b8 0300 	subs.w	r3, r8, #0
 800b266:	d027      	beq.n	800b2b8 <__d2b+0x76>
 800b268:	a802      	add	r0, sp, #8
 800b26a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b26e:	f7ff fe00 	bl	800ae72 <__lo0bits>
 800b272:	9900      	ldr	r1, [sp, #0]
 800b274:	b1f0      	cbz	r0, 800b2b4 <__d2b+0x72>
 800b276:	9a01      	ldr	r2, [sp, #4]
 800b278:	f1c0 0320 	rsb	r3, r0, #32
 800b27c:	fa02 f303 	lsl.w	r3, r2, r3
 800b280:	430b      	orrs	r3, r1
 800b282:	40c2      	lsrs	r2, r0
 800b284:	617b      	str	r3, [r7, #20]
 800b286:	9201      	str	r2, [sp, #4]
 800b288:	9b01      	ldr	r3, [sp, #4]
 800b28a:	61bb      	str	r3, [r7, #24]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	bf14      	ite	ne
 800b290:	2102      	movne	r1, #2
 800b292:	2101      	moveq	r1, #1
 800b294:	6139      	str	r1, [r7, #16]
 800b296:	b1c4      	cbz	r4, 800b2ca <__d2b+0x88>
 800b298:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b29c:	4404      	add	r4, r0
 800b29e:	6034      	str	r4, [r6, #0]
 800b2a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2a4:	6028      	str	r0, [r5, #0]
 800b2a6:	4638      	mov	r0, r7
 800b2a8:	b003      	add	sp, #12
 800b2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2b2:	e7d5      	b.n	800b260 <__d2b+0x1e>
 800b2b4:	6179      	str	r1, [r7, #20]
 800b2b6:	e7e7      	b.n	800b288 <__d2b+0x46>
 800b2b8:	a801      	add	r0, sp, #4
 800b2ba:	f7ff fdda 	bl	800ae72 <__lo0bits>
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	6139      	str	r1, [r7, #16]
 800b2c6:	3020      	adds	r0, #32
 800b2c8:	e7e5      	b.n	800b296 <__d2b+0x54>
 800b2ca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b2ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2d2:	6030      	str	r0, [r6, #0]
 800b2d4:	6918      	ldr	r0, [r3, #16]
 800b2d6:	f7ff fdad 	bl	800ae34 <__hi0bits>
 800b2da:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b2de:	e7e1      	b.n	800b2a4 <__d2b+0x62>

0800b2e0 <_calloc_r>:
 800b2e0:	b538      	push	{r3, r4, r5, lr}
 800b2e2:	fb02 f401 	mul.w	r4, r2, r1
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	f000 f808 	bl	800b2fc <_malloc_r>
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	b118      	cbz	r0, 800b2f8 <_calloc_r+0x18>
 800b2f0:	4622      	mov	r2, r4
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	f7fe fb57 	bl	80099a6 <memset>
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	bd38      	pop	{r3, r4, r5, pc}

0800b2fc <_malloc_r>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	1ccd      	adds	r5, r1, #3
 800b300:	f025 0503 	bic.w	r5, r5, #3
 800b304:	3508      	adds	r5, #8
 800b306:	2d0c      	cmp	r5, #12
 800b308:	bf38      	it	cc
 800b30a:	250c      	movcc	r5, #12
 800b30c:	2d00      	cmp	r5, #0
 800b30e:	4606      	mov	r6, r0
 800b310:	db01      	blt.n	800b316 <_malloc_r+0x1a>
 800b312:	42a9      	cmp	r1, r5
 800b314:	d903      	bls.n	800b31e <_malloc_r+0x22>
 800b316:	230c      	movs	r3, #12
 800b318:	6033      	str	r3, [r6, #0]
 800b31a:	2000      	movs	r0, #0
 800b31c:	bd70      	pop	{r4, r5, r6, pc}
 800b31e:	f000 f864 	bl	800b3ea <__malloc_lock>
 800b322:	4a21      	ldr	r2, [pc, #132]	; (800b3a8 <_malloc_r+0xac>)
 800b324:	6814      	ldr	r4, [r2, #0]
 800b326:	4621      	mov	r1, r4
 800b328:	b991      	cbnz	r1, 800b350 <_malloc_r+0x54>
 800b32a:	4c20      	ldr	r4, [pc, #128]	; (800b3ac <_malloc_r+0xb0>)
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	b91b      	cbnz	r3, 800b338 <_malloc_r+0x3c>
 800b330:	4630      	mov	r0, r6
 800b332:	f000 f83d 	bl	800b3b0 <_sbrk_r>
 800b336:	6020      	str	r0, [r4, #0]
 800b338:	4629      	mov	r1, r5
 800b33a:	4630      	mov	r0, r6
 800b33c:	f000 f838 	bl	800b3b0 <_sbrk_r>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d124      	bne.n	800b38e <_malloc_r+0x92>
 800b344:	230c      	movs	r3, #12
 800b346:	6033      	str	r3, [r6, #0]
 800b348:	4630      	mov	r0, r6
 800b34a:	f000 f84f 	bl	800b3ec <__malloc_unlock>
 800b34e:	e7e4      	b.n	800b31a <_malloc_r+0x1e>
 800b350:	680b      	ldr	r3, [r1, #0]
 800b352:	1b5b      	subs	r3, r3, r5
 800b354:	d418      	bmi.n	800b388 <_malloc_r+0x8c>
 800b356:	2b0b      	cmp	r3, #11
 800b358:	d90f      	bls.n	800b37a <_malloc_r+0x7e>
 800b35a:	600b      	str	r3, [r1, #0]
 800b35c:	50cd      	str	r5, [r1, r3]
 800b35e:	18cc      	adds	r4, r1, r3
 800b360:	4630      	mov	r0, r6
 800b362:	f000 f843 	bl	800b3ec <__malloc_unlock>
 800b366:	f104 000b 	add.w	r0, r4, #11
 800b36a:	1d23      	adds	r3, r4, #4
 800b36c:	f020 0007 	bic.w	r0, r0, #7
 800b370:	1ac3      	subs	r3, r0, r3
 800b372:	d0d3      	beq.n	800b31c <_malloc_r+0x20>
 800b374:	425a      	negs	r2, r3
 800b376:	50e2      	str	r2, [r4, r3]
 800b378:	e7d0      	b.n	800b31c <_malloc_r+0x20>
 800b37a:	428c      	cmp	r4, r1
 800b37c:	684b      	ldr	r3, [r1, #4]
 800b37e:	bf16      	itet	ne
 800b380:	6063      	strne	r3, [r4, #4]
 800b382:	6013      	streq	r3, [r2, #0]
 800b384:	460c      	movne	r4, r1
 800b386:	e7eb      	b.n	800b360 <_malloc_r+0x64>
 800b388:	460c      	mov	r4, r1
 800b38a:	6849      	ldr	r1, [r1, #4]
 800b38c:	e7cc      	b.n	800b328 <_malloc_r+0x2c>
 800b38e:	1cc4      	adds	r4, r0, #3
 800b390:	f024 0403 	bic.w	r4, r4, #3
 800b394:	42a0      	cmp	r0, r4
 800b396:	d005      	beq.n	800b3a4 <_malloc_r+0xa8>
 800b398:	1a21      	subs	r1, r4, r0
 800b39a:	4630      	mov	r0, r6
 800b39c:	f000 f808 	bl	800b3b0 <_sbrk_r>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d0cf      	beq.n	800b344 <_malloc_r+0x48>
 800b3a4:	6025      	str	r5, [r4, #0]
 800b3a6:	e7db      	b.n	800b360 <_malloc_r+0x64>
 800b3a8:	20004634 	.word	0x20004634
 800b3ac:	20004638 	.word	0x20004638

0800b3b0 <_sbrk_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4c06      	ldr	r4, [pc, #24]	; (800b3cc <_sbrk_r+0x1c>)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	f7f8 fb20 	bl	8003a00 <_sbrk>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_sbrk_r+0x1a>
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_sbrk_r+0x1a>
 800b3c8:	602b      	str	r3, [r5, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	200055b8 	.word	0x200055b8

0800b3d0 <__ascii_wctomb>:
 800b3d0:	b149      	cbz	r1, 800b3e6 <__ascii_wctomb+0x16>
 800b3d2:	2aff      	cmp	r2, #255	; 0xff
 800b3d4:	bf85      	ittet	hi
 800b3d6:	238a      	movhi	r3, #138	; 0x8a
 800b3d8:	6003      	strhi	r3, [r0, #0]
 800b3da:	700a      	strbls	r2, [r1, #0]
 800b3dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b3e0:	bf98      	it	ls
 800b3e2:	2001      	movls	r0, #1
 800b3e4:	4770      	bx	lr
 800b3e6:	4608      	mov	r0, r1
 800b3e8:	4770      	bx	lr

0800b3ea <__malloc_lock>:
 800b3ea:	4770      	bx	lr

0800b3ec <__malloc_unlock>:
 800b3ec:	4770      	bx	lr
	...

0800b3f0 <_init>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	bf00      	nop
 800b3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3f6:	bc08      	pop	{r3}
 800b3f8:	469e      	mov	lr, r3
 800b3fa:	4770      	bx	lr

0800b3fc <_fini>:
 800b3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fe:	bf00      	nop
 800b400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b402:	bc08      	pop	{r3}
 800b404:	469e      	mov	lr, r3
 800b406:	4770      	bx	lr
