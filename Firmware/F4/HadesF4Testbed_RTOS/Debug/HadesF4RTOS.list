
HadesF4RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08008938  08008938  00018938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c70  08008c70  00020650  2**0
                  CONTENTS
  4 .ARM          00000008  08008c70  08008c70  00018c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c78  08008c78  00020650  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c78  08008c78  00018c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c7c  08008c7c  00018c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000650  20000000  08008c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb0  20000650  080092d0  00020650  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005500  080092d0  00025500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020650  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018709  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003634  00000000  00000000  00038d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a8  00000000  00000000  0003c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001310  00000000  00000000  0003d868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022059  00000000  00000000  0003eb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011716  00000000  00000000  00060bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca780  00000000  00000000  000722e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ca67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d70  00000000  00000000  0013cae4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000650 	.word	0x20000650
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008920 	.word	0x08008920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000654 	.word	0x20000654
 80001cc:	08008920 	.word	0x08008920

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_uldivmod>:
 8000b08:	b953      	cbnz	r3, 8000b20 <__aeabi_uldivmod+0x18>
 8000b0a:	b94a      	cbnz	r2, 8000b20 <__aeabi_uldivmod+0x18>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bf08      	it	eq
 8000b10:	2800      	cmpeq	r0, #0
 8000b12:	bf1c      	itt	ne
 8000b14:	f04f 31ff 	movne.w	r1, #4294967295
 8000b18:	f04f 30ff 	movne.w	r0, #4294967295
 8000b1c:	f000 b972 	b.w	8000e04 <__aeabi_idiv0>
 8000b20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b28:	f000 f806 	bl	8000b38 <__udivmoddi4>
 8000b2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b34:	b004      	add	sp, #16
 8000b36:	4770      	bx	lr

08000b38 <__udivmoddi4>:
 8000b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b3c:	9e08      	ldr	r6, [sp, #32]
 8000b3e:	4604      	mov	r4, r0
 8000b40:	4688      	mov	r8, r1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d14b      	bne.n	8000bde <__udivmoddi4+0xa6>
 8000b46:	428a      	cmp	r2, r1
 8000b48:	4615      	mov	r5, r2
 8000b4a:	d967      	bls.n	8000c1c <__udivmoddi4+0xe4>
 8000b4c:	fab2 f282 	clz	r2, r2
 8000b50:	b14a      	cbz	r2, 8000b66 <__udivmoddi4+0x2e>
 8000b52:	f1c2 0720 	rsb	r7, r2, #32
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b5e:	4095      	lsls	r5, r2
 8000b60:	ea47 0803 	orr.w	r8, r7, r3
 8000b64:	4094      	lsls	r4, r2
 8000b66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b6a:	0c23      	lsrs	r3, r4, #16
 8000b6c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b70:	fa1f fc85 	uxth.w	ip, r5
 8000b74:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b80:	4299      	cmp	r1, r3
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x60>
 8000b84:	18eb      	adds	r3, r5, r3
 8000b86:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b8a:	f080 811b 	bcs.w	8000dc4 <__udivmoddi4+0x28c>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 8118 	bls.w	8000dc4 <__udivmoddi4+0x28c>
 8000b94:	3f02      	subs	r7, #2
 8000b96:	442b      	add	r3, r5
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bac:	45a4      	cmp	ip, r4
 8000bae:	d909      	bls.n	8000bc4 <__udivmoddi4+0x8c>
 8000bb0:	192c      	adds	r4, r5, r4
 8000bb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb6:	f080 8107 	bcs.w	8000dc8 <__udivmoddi4+0x290>
 8000bba:	45a4      	cmp	ip, r4
 8000bbc:	f240 8104 	bls.w	8000dc8 <__udivmoddi4+0x290>
 8000bc0:	3802      	subs	r0, #2
 8000bc2:	442c      	add	r4, r5
 8000bc4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc8:	eba4 040c 	sub.w	r4, r4, ip
 8000bcc:	2700      	movs	r7, #0
 8000bce:	b11e      	cbz	r6, 8000bd8 <__udivmoddi4+0xa0>
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd8:	4639      	mov	r1, r7
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0xbe>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	f000 80eb 	beq.w	8000dbe <__udivmoddi4+0x286>
 8000be8:	2700      	movs	r7, #0
 8000bea:	e9c6 0100 	strd	r0, r1, [r6]
 8000bee:	4638      	mov	r0, r7
 8000bf0:	4639      	mov	r1, r7
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f783 	clz	r7, r3
 8000bfa:	2f00      	cmp	r7, #0
 8000bfc:	d147      	bne.n	8000c8e <__udivmoddi4+0x156>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xd0>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80fa 	bhi.w	8000dfc <__udivmoddi4+0x2c4>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	4698      	mov	r8, r3
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d0e0      	beq.n	8000bd8 <__udivmoddi4+0xa0>
 8000c16:	e9c6 4800 	strd	r4, r8, [r6]
 8000c1a:	e7dd      	b.n	8000bd8 <__udivmoddi4+0xa0>
 8000c1c:	b902      	cbnz	r2, 8000c20 <__udivmoddi4+0xe8>
 8000c1e:	deff      	udf	#255	; 0xff
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	f040 808f 	bne.w	8000d48 <__udivmoddi4+0x210>
 8000c2a:	1b49      	subs	r1, r1, r5
 8000c2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c30:	fa1f f885 	uxth.w	r8, r5
 8000c34:	2701      	movs	r7, #1
 8000c36:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c44:	fb08 f10c 	mul.w	r1, r8, ip
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	d907      	bls.n	8000c5c <__udivmoddi4+0x124>
 8000c4c:	18eb      	adds	r3, r5, r3
 8000c4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c52:	d202      	bcs.n	8000c5a <__udivmoddi4+0x122>
 8000c54:	4299      	cmp	r1, r3
 8000c56:	f200 80cd 	bhi.w	8000df4 <__udivmoddi4+0x2bc>
 8000c5a:	4684      	mov	ip, r0
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	b2a3      	uxth	r3, r4
 8000c60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c64:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c6c:	fb08 f800 	mul.w	r8, r8, r0
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x14c>
 8000c74:	192c      	adds	r4, r5, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x14a>
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	f200 80b6 	bhi.w	8000dee <__udivmoddi4+0x2b6>
 8000c82:	4618      	mov	r0, r3
 8000c84:	eba4 0408 	sub.w	r4, r4, r8
 8000c88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c8c:	e79f      	b.n	8000bce <__udivmoddi4+0x96>
 8000c8e:	f1c7 0c20 	rsb	ip, r7, #32
 8000c92:	40bb      	lsls	r3, r7
 8000c94:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c98:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c9c:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ca4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cac:	4325      	orrs	r5, r4
 8000cae:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cb2:	0c2c      	lsrs	r4, r5, #16
 8000cb4:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb8:	fa1f fa8e 	uxth.w	sl, lr
 8000cbc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc0:	fb09 f40a 	mul.w	r4, r9, sl
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	fa02 f207 	lsl.w	r2, r2, r7
 8000cca:	fa00 f107 	lsl.w	r1, r0, r7
 8000cce:	d90b      	bls.n	8000ce8 <__udivmoddi4+0x1b0>
 8000cd0:	eb1e 0303 	adds.w	r3, lr, r3
 8000cd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd8:	f080 8087 	bcs.w	8000dea <__udivmoddi4+0x2b2>
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	f240 8084 	bls.w	8000dea <__udivmoddi4+0x2b2>
 8000ce2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce6:	4473      	add	r3, lr
 8000ce8:	1b1b      	subs	r3, r3, r4
 8000cea:	b2ad      	uxth	r5, r5
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cfc:	45a2      	cmp	sl, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x1da>
 8000d00:	eb1e 0404 	adds.w	r4, lr, r4
 8000d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d08:	d26b      	bcs.n	8000de2 <__udivmoddi4+0x2aa>
 8000d0a:	45a2      	cmp	sl, r4
 8000d0c:	d969      	bls.n	8000de2 <__udivmoddi4+0x2aa>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	4474      	add	r4, lr
 8000d12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d16:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1a:	eba4 040a 	sub.w	r4, r4, sl
 8000d1e:	454c      	cmp	r4, r9
 8000d20:	46c2      	mov	sl, r8
 8000d22:	464b      	mov	r3, r9
 8000d24:	d354      	bcc.n	8000dd0 <__udivmoddi4+0x298>
 8000d26:	d051      	beq.n	8000dcc <__udivmoddi4+0x294>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d069      	beq.n	8000e00 <__udivmoddi4+0x2c8>
 8000d2c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d30:	eb64 0403 	sbc.w	r4, r4, r3
 8000d34:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d38:	40fd      	lsrs	r5, r7
 8000d3a:	40fc      	lsrs	r4, r7
 8000d3c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d40:	e9c6 5400 	strd	r5, r4, [r6]
 8000d44:	2700      	movs	r7, #0
 8000d46:	e747      	b.n	8000bd8 <__udivmoddi4+0xa0>
 8000d48:	f1c2 0320 	rsb	r3, r2, #32
 8000d4c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d50:	4095      	lsls	r5, r2
 8000d52:	fa01 f002 	lsl.w	r0, r1, r2
 8000d56:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d5e:	4338      	orrs	r0, r7
 8000d60:	0c01      	lsrs	r1, r0, #16
 8000d62:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d66:	fa1f f885 	uxth.w	r8, r5
 8000d6a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d72:	fb07 f308 	mul.w	r3, r7, r8
 8000d76:	428b      	cmp	r3, r1
 8000d78:	fa04 f402 	lsl.w	r4, r4, r2
 8000d7c:	d907      	bls.n	8000d8e <__udivmoddi4+0x256>
 8000d7e:	1869      	adds	r1, r5, r1
 8000d80:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d84:	d22f      	bcs.n	8000de6 <__udivmoddi4+0x2ae>
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d92d      	bls.n	8000de6 <__udivmoddi4+0x2ae>
 8000d8a:	3f02      	subs	r7, #2
 8000d8c:	4429      	add	r1, r5
 8000d8e:	1acb      	subs	r3, r1, r3
 8000d90:	b281      	uxth	r1, r0
 8000d92:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d96:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9e:	fb00 f308 	mul.w	r3, r0, r8
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x27e>
 8000da6:	1869      	adds	r1, r5, r1
 8000da8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dac:	d217      	bcs.n	8000dde <__udivmoddi4+0x2a6>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d915      	bls.n	8000dde <__udivmoddi4+0x2a6>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4429      	add	r1, r5
 8000db6:	1ac9      	subs	r1, r1, r3
 8000db8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dbc:	e73b      	b.n	8000c36 <__udivmoddi4+0xfe>
 8000dbe:	4637      	mov	r7, r6
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e709      	b.n	8000bd8 <__udivmoddi4+0xa0>
 8000dc4:	4607      	mov	r7, r0
 8000dc6:	e6e7      	b.n	8000b98 <__udivmoddi4+0x60>
 8000dc8:	4618      	mov	r0, r3
 8000dca:	e6fb      	b.n	8000bc4 <__udivmoddi4+0x8c>
 8000dcc:	4541      	cmp	r1, r8
 8000dce:	d2ab      	bcs.n	8000d28 <__udivmoddi4+0x1f0>
 8000dd0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dd4:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd8:	3801      	subs	r0, #1
 8000dda:	4613      	mov	r3, r2
 8000ddc:	e7a4      	b.n	8000d28 <__udivmoddi4+0x1f0>
 8000dde:	4660      	mov	r0, ip
 8000de0:	e7e9      	b.n	8000db6 <__udivmoddi4+0x27e>
 8000de2:	4618      	mov	r0, r3
 8000de4:	e795      	b.n	8000d12 <__udivmoddi4+0x1da>
 8000de6:	4667      	mov	r7, ip
 8000de8:	e7d1      	b.n	8000d8e <__udivmoddi4+0x256>
 8000dea:	4681      	mov	r9, r0
 8000dec:	e77c      	b.n	8000ce8 <__udivmoddi4+0x1b0>
 8000dee:	3802      	subs	r0, #2
 8000df0:	442c      	add	r4, r5
 8000df2:	e747      	b.n	8000c84 <__udivmoddi4+0x14c>
 8000df4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df8:	442b      	add	r3, r5
 8000dfa:	e72f      	b.n	8000c5c <__udivmoddi4+0x124>
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	e708      	b.n	8000c12 <__udivmoddi4+0xda>
 8000e00:	4637      	mov	r7, r6
 8000e02:	e6e9      	b.n	8000bd8 <__udivmoddi4+0xa0>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <BMI088_Init>:
#include "BMI088.h"

uint8_t BMI088_Init(BMI088IMU *imu, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intAccPinBank, uint16_t intAccPin, GPIO_TypeDef *intGyrPinBank, uint16_t intGyrPin) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af04      	add	r7, sp, #16
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	807b      	strh	r3, [r7, #2]
	imu->I2Chandle     = I2Chandle;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	601a      	str	r2, [r3, #0]
	imu->intAccPinBank = intAccPinBank;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	605a      	str	r2, [r3, #4]
	imu->intAccPin     = intAccPin;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	887a      	ldrh	r2, [r7, #2]
 8000e26:	811a      	strh	r2, [r3, #8]
	imu->intGyrPinBank = intGyrPinBank;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e2c:	60da      	str	r2, [r3, #12]
	imu->intGyrPin     = intGyrPin;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000e32:	821a      	strh	r2, [r3, #16]
	imu->acc[0] = 0.0f;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
	imu->acc[1] = 0.0f;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
	imu->acc[2] = 0.0f;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
	imu->gyr[0] = 0.0f;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
	imu->gyr[1] = 0.0f;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
	imu->gyr[2] = 0.0f;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f04f 0200 	mov.w	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28

	/* Soft reset */
//	txBuf[0] = BMI088_ACC_SOFTRESET; txBuf[1] = 0xB6;
//	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);

	HAL_Delay(50);
 8000e64:	2032      	movs	r0, #50	; 0x32
 8000e66:	f001 fc99 	bl	800279c <HAL_Delay>

	/* Check chip ID */
	uint8_t chipID;
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	2364      	movs	r3, #100	; 0x64
 8000e70:	9302      	str	r3, [sp, #8]
 8000e72:	2301      	movs	r3, #1
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	f107 0317 	add.w	r3, r7, #23
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2132      	movs	r1, #50	; 0x32
 8000e82:	f002 fbe3 	bl	800364c <HAL_I2C_Mem_Read>

	if (chipID != 0x1E) {
 8000e86:	7dfb      	ldrb	r3, [r7, #23]
 8000e88:	2b1e      	cmp	r3, #30
 8000e8a:	d001      	beq.n	8000e90 <BMI088_Init+0x88>
		return 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e0ca      	b.n	8001026 <BMI088_Init+0x21e>
	}

	/* Configure accelerometer LPF bandwidth (OSR4, 1000) and ODR (200 Hz, 1001) --> Actual bandwidth = 20 Hz */
	uint8_t accConf = 0x89;
 8000e90:	2389      	movs	r3, #137	; 0x89
 8000e92:	77fb      	strb	r3, [r7, #31]
	txBuf[0] = BMI088_ACC_CONF; txBuf[1] = accConf;
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	763b      	strb	r3, [r7, #24]
 8000e98:	7ffb      	ldrb	r3, [r7, #31]
 8000e9a:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f107 0218 	add.w	r2, r7, #24
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	2132      	movs	r1, #50	; 0x32
 8000eac:	f002 f8aa 	bl	8003004 <HAL_I2C_Master_Transmit>

	/* Accelerometer range (+-6G = 0x01) */
	uint8_t accRange = 0x01;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	77bb      	strb	r3, [r7, #30]
	txBuf[0] = BMI088_ACC_RANGE; txBuf[1] = accRange;
 8000eb4:	2341      	movs	r3, #65	; 0x41
 8000eb6:	763b      	strb	r3, [r7, #24]
 8000eb8:	7fbb      	ldrb	r3, [r7, #30]
 8000eba:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	f107 0218 	add.w	r2, r7, #24
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2302      	movs	r3, #2
 8000eca:	2132      	movs	r1, #50	; 0x32
 8000ecc:	f002 f89a 	bl	8003004 <HAL_I2C_Master_Transmit>

	/* Configure INT1 and INT2 pin */
	uint8_t intConf = 0x0A;
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	777b      	strb	r3, [r7, #29]
	txBuf[0] = BMI088_INT1_IO_CONF; txBuf[1] = intConf;
 8000ed4:	2353      	movs	r3, #83	; 0x53
 8000ed6:	763b      	strb	r3, [r7, #24]
 8000ed8:	7f7b      	ldrb	r3, [r7, #29]
 8000eda:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	f107 0218 	add.w	r2, r7, #24
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2302      	movs	r3, #2
 8000eea:	2132      	movs	r1, #50	; 0x32
 8000eec:	f002 f88a 	bl	8003004 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_INT2_IO_CONF;
 8000ef0:	2354      	movs	r3, #84	; 0x54
 8000ef2:	763b      	strb	r3, [r7, #24]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	f107 0218 	add.w	r2, r7, #24
 8000efc:	2364      	movs	r3, #100	; 0x64
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2302      	movs	r3, #2
 8000f02:	2132      	movs	r1, #50	; 0x32
 8000f04:	f002 f87e 	bl	8003004 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_INT1_INT2_MAP_DATA; txBuf[1] = 0x44;
 8000f08:	2358      	movs	r3, #88	; 0x58
 8000f0a:	763b      	strb	r3, [r7, #24]
 8000f0c:	2344      	movs	r3, #68	; 0x44
 8000f0e:	767b      	strb	r3, [r7, #25]

	/* Set accelerometer to active mode */
	txBuf[0] = BMI088_ACC_PWR_CONF; txBuf[1] = 0x00;
 8000f10:	237c      	movs	r3, #124	; 0x7c
 8000f12:	763b      	strb	r3, [r7, #24]
 8000f14:	2300      	movs	r3, #0
 8000f16:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	f107 0218 	add.w	r2, r7, #24
 8000f20:	2364      	movs	r3, #100	; 0x64
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2302      	movs	r3, #2
 8000f26:	2132      	movs	r1, #50	; 0x32
 8000f28:	f002 f86c 	bl	8003004 <HAL_I2C_Master_Transmit>

	/* Switch accelerometer on */
	txBuf[0] = BMI088_ACC_PWR_CTRL; txBuf[1] = 0x04;
 8000f2c:	237d      	movs	r3, #125	; 0x7d
 8000f2e:	763b      	strb	r3, [r7, #24]
 8000f30:	2304      	movs	r3, #4
 8000f32:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	f107 0218 	add.w	r2, r7, #24
 8000f3c:	2364      	movs	r3, #100	; 0x64
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2302      	movs	r3, #2
 8000f42:	2132      	movs	r1, #50	; 0x32
 8000f44:	f002 f85e 	bl	8003004 <HAL_I2C_Master_Transmit>

	/* Soft reset */
//	txBuf[0] = BMI088_GYR_SOFTRESET; txBuf[1] = 0xB6;
//	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);

	HAL_Delay(35);
 8000f48:	2023      	movs	r0, #35	; 0x23
 8000f4a:	f001 fc27 	bl	800279c <HAL_Delay>

	/* Check chip ID */
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_GYR_I2C_ADDR, BMI088_GYR_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f107 0317 	add.w	r3, r7, #23
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	2200      	movs	r2, #0
 8000f64:	21d2      	movs	r1, #210	; 0xd2
 8000f66:	f002 fb71 	bl	800364c <HAL_I2C_Mem_Read>

	if (chipID != 0x0F) {
 8000f6a:	7dfb      	ldrb	r3, [r7, #23]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d001      	beq.n	8000f74 <BMI088_Init+0x16c>
			return 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e058      	b.n	8001026 <BMI088_Init+0x21e>
	}

	/* Gyro range (+- 500deg/s) */
	uint8_t gyrRange = 0x01;
 8000f74:	2301      	movs	r3, #1
 8000f76:	773b      	strb	r3, [r7, #28]
	txBuf[0] = BMI088_GYR_RANGE; txBuf[1] = gyrRange;
 8000f78:	230f      	movs	r3, #15
 8000f7a:	763b      	strb	r3, [r7, #24]
 8000f7c:	7f3b      	ldrb	r3, [r7, #28]
 8000f7e:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	f107 0218 	add.w	r2, r7, #24
 8000f88:	2364      	movs	r3, #100	; 0x64
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	21d2      	movs	r1, #210	; 0xd2
 8000f90:	f002 f838 	bl	8003004 <HAL_I2C_Master_Transmit>

	/* Gyro bandwidth/ODR (116Hz / 1000 Hz) */
	uint8_t gyrBandwidth = 0x02;
 8000f94:	2302      	movs	r3, #2
 8000f96:	76fb      	strb	r3, [r7, #27]
	txBuf[0] = BMI088_GYR_BANDWIDTH; txBuf[1] = gyrBandwidth;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	763b      	strb	r3, [r7, #24]
 8000f9c:	7efb      	ldrb	r3, [r7, #27]
 8000f9e:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6818      	ldr	r0, [r3, #0]
 8000fa4:	f107 0218 	add.w	r2, r7, #24
 8000fa8:	2364      	movs	r3, #100	; 0x64
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2302      	movs	r3, #2
 8000fae:	21d2      	movs	r1, #210	; 0xd2
 8000fb0:	f002 f828 	bl	8003004 <HAL_I2C_Master_Transmit>

	/* Gyro power mode */
	txBuf[0] = BMI088_GYR_LPM1; txBuf[1] = 0x00;
 8000fb4:	2311      	movs	r3, #17
 8000fb6:	763b      	strb	r3, [r7, #24]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f107 0218 	add.w	r2, r7, #24
 8000fc4:	2364      	movs	r3, #100	; 0x64
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2302      	movs	r3, #2
 8000fca:	21d2      	movs	r1, #210	; 0xd2
 8000fcc:	f002 f81a 	bl	8003004 <HAL_I2C_Master_Transmit>

	/* Enable gyro interrupt and map to pins */
	txBuf[0] = BMI088_GYR_INT_CTRL; txBuf[1] = 0x80;
 8000fd0:	2315      	movs	r3, #21
 8000fd2:	763b      	strb	r3, [r7, #24]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	f107 0218 	add.w	r2, r7, #24
 8000fe0:	2364      	movs	r3, #100	; 0x64
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	21d2      	movs	r1, #210	; 0xd2
 8000fe8:	f002 f80c 	bl	8003004 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_GYR_INT3_INT4_IO_CONF; txBuf[1] = 0x05;
 8000fec:	2316      	movs	r3, #22
 8000fee:	763b      	strb	r3, [r7, #24]
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0218 	add.w	r2, r7, #24
 8000ffc:	2364      	movs	r3, #100	; 0x64
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2302      	movs	r3, #2
 8001002:	21d2      	movs	r1, #210	; 0xd2
 8001004:	f001 fffe 	bl	8003004 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_GYR_INT3_INT4_IO_MAP; txBuf[1] = 0x81;
 8001008:	2318      	movs	r3, #24
 800100a:	763b      	strb	r3, [r7, #24]
 800100c:	2381      	movs	r3, #129	; 0x81
 800100e:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	f107 0218 	add.w	r2, r7, #24
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2302      	movs	r3, #2
 800101e:	21d2      	movs	r1, #210	; 0xd2
 8001020:	f001 fff0 	bl	8003004 <HAL_I2C_Master_Transmit>

	return 1;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <BMI088_ReadAcc>:

void BMI088_ReadAcc(BMI088IMU *imu) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af04      	add	r7, sp, #16
 8001036:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[6];
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_DATA, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, BMI088_I2C_TIMEOUT);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2306      	movs	r3, #6
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	2212      	movs	r2, #18
 800104e:	2132      	movs	r1, #50	; 0x32
 8001050:	f002 fafc 	bl	800364c <HAL_I2C_Mem_Read>

	int16_t accX = rxBuf[1];
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	82fb      	strh	r3, [r7, #22]
			accX <<= 8;
 8001058:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	82fb      	strh	r3, [r7, #22]
			accX |= rxBuf[0];
 8001060:	7b3b      	ldrb	r3, [r7, #12]
 8001062:	b21a      	sxth	r2, r3
 8001064:	8afb      	ldrh	r3, [r7, #22]
 8001066:	4313      	orrs	r3, r2
 8001068:	82fb      	strh	r3, [r7, #22]

	int16_t accY = rxBuf[3];
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	82bb      	strh	r3, [r7, #20]
			accY <<= 8;
 800106e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	82bb      	strh	r3, [r7, #20]
			accY |= rxBuf[2];
 8001076:	7bbb      	ldrb	r3, [r7, #14]
 8001078:	b21a      	sxth	r2, r3
 800107a:	8abb      	ldrh	r3, [r7, #20]
 800107c:	4313      	orrs	r3, r2
 800107e:	82bb      	strh	r3, [r7, #20]

	int16_t accZ = rxBuf[5];
 8001080:	7c7b      	ldrb	r3, [r7, #17]
 8001082:	827b      	strh	r3, [r7, #18]
			accZ <<= 8;
 8001084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	827b      	strh	r3, [r7, #18]
			accZ |= rxBuf[4];
 800108c:	7c3b      	ldrb	r3, [r7, #16]
 800108e:	b21a      	sxth	r2, r3
 8001090:	8a7b      	ldrh	r3, [r7, #18]
 8001092:	4313      	orrs	r3, r2
 8001094:	827b      	strh	r3, [r7, #18]

	/* Scale (to m/s^2) and re-map axes */
	imu->acc[0] = -accY * 0.00179626456f;
 8001096:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800109a:	425b      	negs	r3, r3
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80010f4 <BMI088_ReadAcc+0xc4>
 80010a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	edc3 7a05 	vstr	s15, [r3, #20]
	imu->acc[1] = -accX * 0.00179626456f;
 80010b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010b6:	425b      	negs	r3, r3
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80010f4 <BMI088_ReadAcc+0xc4>
 80010c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edc3 7a06 	vstr	s15, [r3, #24]
	imu->acc[2] = -accZ * 0.00179626456f;
 80010ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010d2:	425b      	negs	r3, r3
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010dc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80010f4 <BMI088_ReadAcc+0xc4>
 80010e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	3aeb70a3 	.word	0x3aeb70a3

080010f8 <BMI088_ReadGyr>:

void BMI088_ReadGyr(BMI088IMU *imu) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[6];
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_GYR_I2C_ADDR, BMI088_GYR_DATA, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, BMI088_I2C_TIMEOUT);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	2364      	movs	r3, #100	; 0x64
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2306      	movs	r3, #6
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2202      	movs	r2, #2
 8001116:	21d2      	movs	r1, #210	; 0xd2
 8001118:	f002 fa98 	bl	800364c <HAL_I2C_Mem_Read>

	int16_t gyrX = rxBuf[1];
 800111c:	7b7b      	ldrb	r3, [r7, #13]
 800111e:	82fb      	strh	r3, [r7, #22]
			gyrX <<= 8;
 8001120:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	82fb      	strh	r3, [r7, #22]
			gyrX |= rxBuf[0];
 8001128:	7b3b      	ldrb	r3, [r7, #12]
 800112a:	b21a      	sxth	r2, r3
 800112c:	8afb      	ldrh	r3, [r7, #22]
 800112e:	4313      	orrs	r3, r2
 8001130:	82fb      	strh	r3, [r7, #22]

	int16_t gyrY = rxBuf[3];
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	82bb      	strh	r3, [r7, #20]
			gyrY <<= 8;
 8001136:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	82bb      	strh	r3, [r7, #20]
			gyrY |= rxBuf[2];
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	b21a      	sxth	r2, r3
 8001142:	8abb      	ldrh	r3, [r7, #20]
 8001144:	4313      	orrs	r3, r2
 8001146:	82bb      	strh	r3, [r7, #20]

	int16_t gyrZ = rxBuf[5];
 8001148:	7c7b      	ldrb	r3, [r7, #17]
 800114a:	827b      	strh	r3, [r7, #18]
			gyrZ <<= 8;
 800114c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	827b      	strh	r3, [r7, #18]
			gyrZ |= rxBuf[4];
 8001154:	7c3b      	ldrb	r3, [r7, #16]
 8001156:	b21a      	sxth	r2, r3
 8001158:	8a7b      	ldrh	r3, [r7, #18]
 800115a:	4313      	orrs	r3, r2
 800115c:	827b      	strh	r3, [r7, #18]

	/* Scale (to rad/s) and re-map axes */
	imu->gyr[0] = -gyrY * 0.00026632423f;
 800115e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001162:	425b      	negs	r3, r3
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80011bc <BMI088_ReadGyr+0xc4>
 8001170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edc3 7a08 	vstr	s15, [r3, #32]
	imu->gyr[1] = -gyrX * 0.00026632423f;
 800117a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800117e:	425b      	negs	r3, r3
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80011bc <BMI088_ReadGyr+0xc4>
 800118c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	imu->gyr[2] = -gyrZ * 0.00026632423f;
 8001196:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800119a:	425b      	negs	r3, r3
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80011bc <BMI088_ReadGyr+0xc4>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	398ba16f 	.word	0x398ba16f

080011c0 <IISMagnetometer_Init>:
#include "IIS2MDC.h"

uint8_t IISMagnetometer_Init(IISMagnetometer *mag, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intPinBank, uint16_t intPin) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	; 0x28
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	807b      	strh	r3, [r7, #2]
	mag->I2Chandle  = I2Chandle;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	601a      	str	r2, [r3, #0]
	mag->intPinBank = intPinBank;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	605a      	str	r2, [r3, #4]
	mag->intPin     = intPin;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	887a      	ldrh	r2, [r7, #2]
 80011de:	811a      	strh	r2, [r3, #8]
	mag->xyz[0]     = 0;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
	mag->xyz[1]     = 0;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
	mag->xyz[2]     = 0;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	615a      	str	r2, [r3, #20]
	mag->tempC      = 0.0f;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]

	/* Check device ID register */
	uint8_t whoAmI;
	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_WHOAMI_REG, I2C_MEMADD_SIZE_8BIT, &whoAmI, 1, IIS_I2C_TIMEOUT);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	2364      	movs	r3, #100	; 0x64
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	2301      	movs	r3, #1
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	224f      	movs	r2, #79	; 0x4f
 8001216:	213c      	movs	r1, #60	; 0x3c
 8001218:	f002 fa18 	bl	800364c <HAL_I2C_Mem_Read>

	if (whoAmI != IIS_WHOAMI) {
 800121c:	7d3b      	ldrb	r3, [r7, #20]
 800121e:	2b40      	cmp	r3, #64	; 0x40
 8001220:	d001      	beq.n	8001226 <IISMagnetometer_Init+0x66>
		return 0;
 8001222:	2300      	movs	r3, #0
 8001224:	e030      	b.n	8001288 <IISMagnetometer_Init+0xc8>

	/* Configure sensor */
	uint8_t txBuf[2];

	/* Temperature compensation = 1, Reboot = 0, Soft_Rst = 0, Low Power = 0, ODR 100 Hz = 11, MODE CONTINUOUS 00 */
	uint8_t cfgRegA = 0x8C;
 8001226:	238c      	movs	r3, #140	; 0x8c
 8001228:	75fb      	strb	r3, [r7, #23]
	txBuf[0] = IIS_CFG_REG_A; txBuf[1] = cfgRegA;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	743b      	strb	r3, [r7, #16]
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f107 0210 	add.w	r2, r7, #16
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2302      	movs	r3, #2
 8001240:	213c      	movs	r1, #60	; 0x3c
 8001242:	f001 fedf 	bl	8003004 <HAL_I2C_Master_Transmit>

	/* 0 0 0, Offset cancellation = 0, INT_on_DataOff = 0, Set_Freq = 0, Offset cancellation = 0, Low-pass filter = 1 */
	uint8_t cfgRegB = 0x01;
 8001246:	2301      	movs	r3, #1
 8001248:	75bb      	strb	r3, [r7, #22]
	txBuf[0] = IIS_CFG_REG_B; txBuf[1] = cfgRegB;
 800124a:	2361      	movs	r3, #97	; 0x61
 800124c:	743b      	strb	r3, [r7, #16]
 800124e:	7dbb      	ldrb	r3, [r7, #22]
 8001250:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	f107 0210 	add.w	r2, r7, #16
 800125a:	2364      	movs	r3, #100	; 0x64
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2302      	movs	r3, #2
 8001260:	213c      	movs	r1, #60	; 0x3c
 8001262:	f001 fecf 	bl	8003004 <HAL_I2C_Master_Transmit>

	/* 0, INT_on_PIN = 0, I2C_DIS = 0, BDU = 0, BLE = 0, 0, Self_test = 0, DRDY_on_PIN = 1 */
	uint8_t cfgRegC = 0x01;
 8001266:	2301      	movs	r3, #1
 8001268:	757b      	strb	r3, [r7, #21]
	txBuf[0] = IIS_CFG_REG_C; txBuf[1] = cfgRegC;
 800126a:	2362      	movs	r3, #98	; 0x62
 800126c:	743b      	strb	r3, [r7, #16]
 800126e:	7d7b      	ldrb	r3, [r7, #21]
 8001270:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f107 0210 	add.w	r2, r7, #16
 800127a:	2364      	movs	r3, #100	; 0x64
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2302      	movs	r3, #2
 8001280:	213c      	movs	r1, #60	; 0x3c
 8001282:	f001 febf 	bl	8003004 <HAL_I2C_Master_Transmit>

	return 1;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <MPRLSBarometer_Init>:
#include "MPRLS.h"

uint8_t MPRLSBarometer_Init(MPRLSBarometer *bar, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *rstPinBank, uint16_t rstPin, GPIO_TypeDef *intPinBank, uint16_t intPin) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	807b      	strh	r3, [r7, #2]
	bar->I2Chandle  = I2Chandle;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	601a      	str	r2, [r3, #0]
	bar->rstPinBank = rstPinBank;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	605a      	str	r2, [r3, #4]
	bar->rstPin     = rstPin;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	887a      	ldrh	r2, [r7, #2]
 80012ae:	811a      	strh	r2, [r3, #8]
	bar->intPinBank = intPinBank;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6a3a      	ldr	r2, [r7, #32]
 80012b4:	60da      	str	r2, [r3, #12]
	bar->intPin     = intPin;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012ba:	821a      	strh	r2, [r3, #16]
	bar->pressurePa = 0.0f;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]

	MPRLSBarometer_Reset(bar);
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 f80d 	bl	80012e4 <MPRLSBarometer_Reset>

	HAL_Delay(10);
 80012ca:	200a      	movs	r0, #10
 80012cc:	f001 fa66 	bl	800279c <HAL_Delay>

	uint8_t status = MPRLSBarometer_ReadStatus(bar);
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 f82a 	bl	800132a <MPRLSBarometer_ReadStatus>
 80012d6:	4603      	mov	r3, r0
 80012d8:	75fb      	strb	r3, [r7, #23]

	return status;
 80012da:	7dfb      	ldrb	r3, [r7, #23]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <MPRLSBarometer_Reset>:

void MPRLSBarometer_Reset(MPRLSBarometer *bar) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_SET);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6858      	ldr	r0, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	891b      	ldrh	r3, [r3, #8]
 80012f4:	2201      	movs	r2, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	f001 fd28 	bl	8002d4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_RESET);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6858      	ldr	r0, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	891b      	ldrh	r3, [r3, #8]
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	f001 fd20 	bl	8002d4c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800130c:	200a      	movs	r0, #10
 800130e:	f001 fa45 	bl	800279c <HAL_Delay>
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_SET);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6858      	ldr	r0, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	891b      	ldrh	r3, [r3, #8]
 800131a:	2201      	movs	r2, #1
 800131c:	4619      	mov	r1, r3
 800131e:	f001 fd15 	bl	8002d4c <HAL_GPIO_WritePin>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <MPRLSBarometer_ReadStatus>:

uint8_t MPRLSBarometer_ReadStatus(MPRLSBarometer *bar) {
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af02      	add	r7, sp, #8
 8001330:	6078      	str	r0, [r7, #4]
	uint8_t status;
	HAL_I2C_Master_Receive(bar->I2Chandle, MPRLS_I2C_ADDR, &status, 1, MPRLS_I2C_TIMEOUT);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	f107 020f 	add.w	r2, r7, #15
 800133a:	2364      	movs	r3, #100	; 0x64
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2301      	movs	r3, #1
 8001340:	2130      	movs	r1, #48	; 0x30
 8001342:	f001 ff5d 	bl	8003200 <HAL_I2C_Master_Receive>

	return status;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <MPRLSBarometer_ReadPressure>:

uint8_t MPRLSBarometer_ReadPressure(MPRLSBarometer *bar) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af02      	add	r7, sp, #8
 8001356:	6078      	str	r0, [r7, #4]
	/* Send read data request */
	uint8_t txBuf[3] = {0xAA, 0x00, 0x00};
 8001358:	23aa      	movs	r3, #170	; 0xaa
 800135a:	733b      	strb	r3, [r7, #12]
 800135c:	2300      	movs	r3, #0
 800135e:	737b      	strb	r3, [r7, #13]
 8001360:	2300      	movs	r3, #0
 8001362:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(bar->I2Chandle, MPRLS_I2C_ADDR, txBuf, 3, MPRLS_I2C_TIMEOUT);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	f107 020c 	add.w	r2, r7, #12
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2303      	movs	r3, #3
 8001372:	2130      	movs	r1, #48	; 0x30
 8001374:	f001 fe46 	bl	8003004 <HAL_I2C_Master_Transmit>

	/* Wait until EOC indicator is set */
	while (!HAL_GPIO_ReadPin(bar->intPinBank, bar->intPin)) {
 8001378:	e002      	b.n	8001380 <MPRLSBarometer_ReadPressure+0x30>
		HAL_Delay(5);
 800137a:	2005      	movs	r0, #5
 800137c:	f001 fa0e 	bl	800279c <HAL_Delay>
	while (!HAL_GPIO_ReadPin(bar->intPinBank, bar->intPin)) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	8a1b      	ldrh	r3, [r3, #16]
 8001388:	4619      	mov	r1, r3
 800138a:	4610      	mov	r0, r2
 800138c:	f001 fcc6 	bl	8002d1c <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f1      	beq.n	800137a <MPRLSBarometer_ReadPressure+0x2a>
	}

	/* Request four bytes (1x status, 3x data) */
	uint8_t rxBuf[4];
	HAL_I2C_Master_Receive(bar->I2Chandle, MPRLS_I2C_ADDR, rxBuf, 4, MPRLS_I2C_TIMEOUT);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	f107 0208 	add.w	r2, r7, #8
 800139e:	2364      	movs	r3, #100	; 0x64
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2304      	movs	r3, #4
 80013a4:	2130      	movs	r1, #48	; 0x30
 80013a6:	f001 ff2b 	bl	8003200 <HAL_I2C_Master_Receive>

	/* Check status byte */
	if ((rxBuf[0] & MPRLS_STATUS_MATHSAT) || (rxBuf[0] & MPRLS_STATUS_FAILED)) {
 80013aa:	7a3b      	ldrb	r3, [r7, #8]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d104      	bne.n	80013be <MPRLSBarometer_ReadPressure+0x6e>
 80013b4:	7a3b      	ldrb	r3, [r7, #8]
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MPRLSBarometer_ReadPressure+0x72>
		return 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	e03a      	b.n	8001438 <MPRLSBarometer_ReadPressure+0xe8>
	}

	/* Compute raw pressure reading */
	uint32_t pressureRaw = rxBuf[1];
 80013c2:	7a7b      	ldrb	r3, [r7, #9]
 80013c4:	617b      	str	r3, [r7, #20]
			 pressureRaw <<= 8;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	617b      	str	r3, [r7, #20]
			 pressureRaw |= rxBuf[2];
 80013cc:	7abb      	ldrb	r3, [r7, #10]
 80013ce:	461a      	mov	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	617b      	str	r3, [r7, #20]
			 pressureRaw <<= 8;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	617b      	str	r3, [r7, #20]
			 pressureRaw |= rxBuf[3];
 80013dc:	7afb      	ldrb	r3, [r7, #11]
 80013de:	461a      	mov	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]

	/* Convert to pressure reading in Pascal */
	float psi  = (pressureRaw - 0x19999A) * (MPRLS_PSI_MAX - MPRLS_PSI_MIN);
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4613      	mov	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	009a      	lsls	r2, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	f1a3 7320 	sub.w	r3, r3, #41943040	; 0x2800000
 80013f6:	3b0a      	subs	r3, #10
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001400:	edc7 7a04 	vstr	s15, [r7, #16]
		  psi /= (float) (0xE66666 - 0x19999A);
 8001404:	ed97 7a04 	vldr	s14, [r7, #16]
 8001408:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001440 <MPRLSBarometer_ReadPressure+0xf0>
 800140c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001410:	edc7 7a04 	vstr	s15, [r7, #16]
		  psi += MPRLS_PSI_MIN;
 8001414:	edd7 7a04 	vldr	s15, [r7, #16]
 8001418:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001444 <MPRLSBarometer_ReadPressure+0xf4>
 800141c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001420:	edc7 7a04 	vstr	s15, [r7, #16]

	bar->pressurePa = MPRLS_PSI_TO_PA * psi;
 8001424:	edd7 7a04 	vldr	s15, [r7, #16]
 8001428:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001448 <MPRLSBarometer_ReadPressure+0xf8>
 800142c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Success */
	return 1;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	4b4ccccc 	.word	0x4b4ccccc
 8001444:	00000000 	.word	0x00000000
 8001448:	45d7760f 	.word	0x45d7760f

0800144c <TMP100_Init>:
#include "TMP100.h"

void TMP100_Init(TMP100 *tmp, I2C_HandleTypeDef *I2Chandle) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af02      	add	r7, sp, #8
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	tmp->I2Chandle = I2Chandle;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	601a      	str	r2, [r3, #0]
	tmp->temp_C = 0.0f;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	605a      	str	r2, [r3, #4]

	/* Configure sensor */
	uint8_t txBuf[] = {TMP100_REG_CONF,  0x60};
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <TMP100_Init+0x3c>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(tmp->I2Chandle, TMP100_I2C_ADDR, txBuf, 2, TMP100_I2C_TIMEOUT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2302      	movs	r3, #2
 8001478:	219c      	movs	r1, #156	; 0x9c
 800147a:	f001 fdc3 	bl	8003004 <HAL_I2C_Master_Transmit>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	08008938 	.word	0x08008938

0800148c <UAVDataLink_Pack>:
#include "UAVDataLink.h"

uint8_t UAVDataLink_Pack(const uint8_t IDA, const uint8_t IDB, const uint8_t PAYLOADLENGTH, const uint8_t *PAYLOAD, uint8_t *byteStreamOut) {
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
 8001498:	460b      	mov	r3, r1
 800149a:	71bb      	strb	r3, [r7, #6]
 800149c:	4613      	mov	r3, r2
 800149e:	717b      	strb	r3, [r7, #5]
 80014a0:	466b      	mov	r3, sp
 80014a2:	461d      	mov	r5, r3

    static uint8_t SEQUENCE = 1;
    uint8_t n;

    /* Create array to store packet data */
    uint8_t rawDataLength = 4 + PAYLOADLENGTH + 1; /* 4 header bytes, payload bytes, and checksum byte */
 80014a4:	797b      	ldrb	r3, [r7, #5]
 80014a6:	3305      	adds	r3, #5
 80014a8:	757b      	strb	r3, [r7, #21]
    uint8_t rawData[rawDataLength];
 80014aa:	7d78      	ldrb	r0, [r7, #21]
 80014ac:	4603      	mov	r3, r0
 80014ae:	3b01      	subs	r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	b2c1      	uxtb	r1, r0
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	f04f 0400 	mov.w	r4, #0
 80014c0:	00d4      	lsls	r4, r2, #3
 80014c2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80014c6:	00cb      	lsls	r3, r1, #3
 80014c8:	b2c1      	uxtb	r1, r0
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	f04f 0400 	mov.w	r4, #0
 80014d6:	00d4      	lsls	r4, r2, #3
 80014d8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80014dc:	00cb      	lsls	r3, r1, #3
 80014de:	4603      	mov	r3, r0
 80014e0:	3307      	adds	r3, #7
 80014e2:	08db      	lsrs	r3, r3, #3
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	ebad 0d03 	sub.w	sp, sp, r3
 80014ea:	466b      	mov	r3, sp
 80014ec:	3300      	adds	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]

    /* Set packet header */
    rawData[0] = SEQUENCE;
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <UAVDataLink_Pack+0x10c>)
 80014f2:	781a      	ldrb	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	701a      	strb	r2, [r3, #0]
    rawData[1] = IDA;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	79fa      	ldrb	r2, [r7, #7]
 80014fc:	705a      	strb	r2, [r3, #1]
    rawData[2] = IDB;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	79ba      	ldrb	r2, [r7, #6]
 8001502:	709a      	strb	r2, [r3, #2]
    rawData[3] = PAYLOADLENGTH;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	797a      	ldrb	r2, [r7, #5]
 8001508:	70da      	strb	r2, [r3, #3]

    /* Attach payload */
    for (n = 0; n < PAYLOADLENGTH; n++) {
 800150a:	2300      	movs	r3, #0
 800150c:	75bb      	strb	r3, [r7, #22]
 800150e:	e00a      	b.n	8001526 <UAVDataLink_Pack+0x9a>

        rawData[4 + n] = PAYLOAD[n];
 8001510:	7dbb      	ldrb	r3, [r7, #22]
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	441a      	add	r2, r3
 8001516:	7dbb      	ldrb	r3, [r7, #22]
 8001518:	3304      	adds	r3, #4
 800151a:	7811      	ldrb	r1, [r2, #0]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	54d1      	strb	r1, [r2, r3]
    for (n = 0; n < PAYLOADLENGTH; n++) {
 8001520:	7dbb      	ldrb	r3, [r7, #22]
 8001522:	3301      	adds	r3, #1
 8001524:	75bb      	strb	r3, [r7, #22]
 8001526:	7dba      	ldrb	r2, [r7, #22]
 8001528:	797b      	ldrb	r3, [r7, #5]
 800152a:	429a      	cmp	r2, r3
 800152c:	d3f0      	bcc.n	8001510 <UAVDataLink_Pack+0x84>

    }

    /* Calculate checksum and set as last byte of packet */
    uint8_t cs = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    for (n = 0; n < PAYLOADLENGTH; n++) {
 8001532:	2300      	movs	r3, #0
 8001534:	75bb      	strb	r3, [r7, #22]
 8001536:	e009      	b.n	800154c <UAVDataLink_Pack+0xc0>

        cs ^= PAYLOAD[n];
 8001538:	7dbb      	ldrb	r3, [r7, #22]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	4413      	add	r3, r2
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	4053      	eors	r3, r2
 8001544:	75fb      	strb	r3, [r7, #23]
    for (n = 0; n < PAYLOADLENGTH; n++) {
 8001546:	7dbb      	ldrb	r3, [r7, #22]
 8001548:	3301      	adds	r3, #1
 800154a:	75bb      	strb	r3, [r7, #22]
 800154c:	7dba      	ldrb	r2, [r7, #22]
 800154e:	797b      	ldrb	r3, [r7, #5]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3f1      	bcc.n	8001538 <UAVDataLink_Pack+0xac>

    }

    rawData[rawDataLength - 1] = cs;
 8001554:	7d7b      	ldrb	r3, [r7, #21]
 8001556:	3b01      	subs	r3, #1
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	7df9      	ldrb	r1, [r7, #23]
 800155c:	54d1      	strb	r1, [r2, r3]

    /* Encode with consistent overhead byte stuffing */
    uint8_t encodedPacketLength = UAVDataLink_EncodeCOBS(rawData, rawDataLength, byteStreamOut);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	7d79      	ldrb	r1, [r7, #21]
 8001562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001564:	4618      	mov	r0, r3
 8001566:	f000 f819 	bl	800159c <UAVDataLink_EncodeCOBS>
 800156a:	4603      	mov	r3, r0
 800156c:	72fb      	strb	r3, [r7, #11]

    /* Increment sequence number */
    if (SEQUENCE == 255) {
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <UAVDataLink_Pack+0x10c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2bff      	cmp	r3, #255	; 0xff
 8001574:	d103      	bne.n	800157e <UAVDataLink_Pack+0xf2>

        SEQUENCE = 1;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <UAVDataLink_Pack+0x10c>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e005      	b.n	800158a <UAVDataLink_Pack+0xfe>

    } else {

        SEQUENCE++;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <UAVDataLink_Pack+0x10c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <UAVDataLink_Pack+0x10c>)
 8001588:	701a      	strb	r2, [r3, #0]

    }

    return encodedPacketLength;
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	46ad      	mov	sp, r5

}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bdb0      	pop	{r4, r5, r7, pc}
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000

0800159c <UAVDataLink_EncodeCOBS>:

    return nFloats;

}

uint8_t UAVDataLink_EncodeCOBS(const uint8_t *dataIn, const uint8_t dataInLength, uint8_t *dataOut) {
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	460b      	mov	r3, r1
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	72fb      	strb	r3, [r7, #11]

    uint8_t dataOutLength = 1; /* At least one header byte (set here) and one end byte (0x00) (set at end of function) */
 80015aa:	2301      	movs	r3, #1
 80015ac:	75fb      	strb	r3, [r7, #23]
    uint8_t dataOutIndex  = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	75bb      	strb	r3, [r7, #22]
    uint8_t nextZeroIndex = 1; /* Initially, assume first byte is a zero */
 80015b2:	2301      	movs	r3, #1
 80015b4:	757b      	strb	r3, [r7, #21]

    for (uint8_t dataInIndex = 0; dataInIndex < dataInLength; dataInIndex++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	753b      	strb	r3, [r7, #20]
 80015ba:	e020      	b.n	80015fe <UAVDataLink_EncodeCOBS+0x62>

        if (dataIn[dataInIndex] == 0) {
 80015bc:	7d3b      	ldrb	r3, [r7, #20]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <UAVDataLink_EncodeCOBS+0x40>

            dataOut[dataOutIndex] = nextZeroIndex;
 80015c8:	7dbb      	ldrb	r3, [r7, #22]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	7d7a      	ldrb	r2, [r7, #21]
 80015d0:	701a      	strb	r2, [r3, #0]

            nextZeroIndex = 1;
 80015d2:	2301      	movs	r3, #1
 80015d4:	757b      	strb	r3, [r7, #21]
            dataOutIndex  = dataOutLength;
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	75bb      	strb	r3, [r7, #22]
 80015da:	e00a      	b.n	80015f2 <UAVDataLink_EncodeCOBS+0x56>

        } else {

            dataOut[dataOutLength] = dataIn[dataInIndex];
 80015dc:	7d3b      	ldrb	r3, [r7, #20]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	441a      	add	r2, r3
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	440b      	add	r3, r1
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	701a      	strb	r2, [r3, #0]

            nextZeroIndex++;
 80015ec:	7d7b      	ldrb	r3, [r7, #21]
 80015ee:	3301      	adds	r3, #1
 80015f0:	757b      	strb	r3, [r7, #21]

        }

        dataOutLength++;
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	3301      	adds	r3, #1
 80015f6:	75fb      	strb	r3, [r7, #23]
    for (uint8_t dataInIndex = 0; dataInIndex < dataInLength; dataInIndex++) {
 80015f8:	7d3b      	ldrb	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	753b      	strb	r3, [r7, #20]
 80015fe:	7d3a      	ldrb	r2, [r7, #20]
 8001600:	7afb      	ldrb	r3, [r7, #11]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3da      	bcc.n	80015bc <UAVDataLink_EncodeCOBS+0x20>

    }

    dataOut[dataOutIndex] = nextZeroIndex;
 8001606:	7dbb      	ldrb	r3, [r7, #22]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	7d7a      	ldrb	r2, [r7, #21]
 800160e:	701a      	strb	r2, [r3, #0]

    /* Append final, delimiting zero to mark end of packet */
    dataOut[dataOutLength] = 0;
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
    dataOutLength++;
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	3301      	adds	r3, #1
 800161e:	75fb      	strb	r3, [r7, #23]

    return dataOutLength;
 8001620:	7dfb      	ldrb	r3, [r7, #23]

}
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <UBloxGPS_Init>:
#include "UBLOX.h"

void UBloxGPS_Init(UBloxGPS *gps, UART_HandleTypeDef *uart, GPIO_TypeDef *rstPinBank, uint16_t rstPin, GPIO_TypeDef *ppsPinBank, uint16_t ppsPin, GPIO_TypeDef *lnaEnablePinBank, uint16_t lnaEnablePin) {
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	807b      	strh	r3, [r7, #2]
	gps->uart             = uart;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	601a      	str	r2, [r3, #0]
	gps->rstPinBank       = rstPinBank;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	605a      	str	r2, [r3, #4]
	gps->rstPin           = rstPin;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	811a      	strh	r2, [r3, #8]
	gps->ppsPinBank       = ppsPinBank;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	60da      	str	r2, [r3, #12]
	gps->ppsPin           = ppsPin;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8bba      	ldrh	r2, [r7, #28]
 8001658:	821a      	strh	r2, [r3, #16]
	gps->lnaEnablePinBank = lnaEnablePinBank;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a3a      	ldr	r2, [r7, #32]
 800165e:	615a      	str	r2, [r3, #20]
	gps->lnaEnablePin     = lnaEnablePin;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001664:	831a      	strh	r2, [r3, #24]

	gps->latitude    = 0.0f;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
	gps->longitude   = 0.0f;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
	gps->altitude    = 0.0f;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
	gps->course      = 0.0f;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
	gps->groundSpeed = 0.0f;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	62da      	str	r2, [r3, #44]	; 0x2c

	gps->uartBufIndex  = 0;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	gps->uartBufLength = 0;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <UBloxGPS_Reset>:

void UBloxGPS_Reset(UBloxGPS *gps) {
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_SET);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6858      	ldr	r0, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	891b      	ldrh	r3, [r3, #8]
 80016ba:	2201      	movs	r2, #1
 80016bc:	4619      	mov	r1, r3
 80016be:	f001 fb45 	bl	8002d4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_RESET);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6858      	ldr	r0, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	891b      	ldrh	r3, [r3, #8]
 80016ca:	2200      	movs	r2, #0
 80016cc:	4619      	mov	r1, r3
 80016ce:	f001 fb3d 	bl	8002d4c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80016d2:	2032      	movs	r0, #50	; 0x32
 80016d4:	f001 f862 	bl	800279c <HAL_Delay>
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_SET);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6858      	ldr	r0, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	891b      	ldrh	r3, [r3, #8]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4619      	mov	r1, r3
 80016e4:	f001 fb32 	bl	8002d4c <HAL_GPIO_WritePin>
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <vApplicationGetIdleTaskMemory+0x2c>)
 8001700:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <vApplicationGetIdleTaskMemory+0x30>)
 8001706:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2280      	movs	r2, #128	; 0x80
 800170c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000066c 	.word	0x2000066c
 8001720:	200006c0 	.word	0x200006c0

08001724 <FIRFilter_Init>:
	float *buf;
	uint8_t order;
	uint8_t putIndex;
} FIRFilter ;

void FIRFilter_Init(FIRFilter *filt, float *coeff, float *buf, const uint8_t order) {
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	70fb      	strb	r3, [r7, #3]
	filt->out = 0.0f;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
	
	filt->coeff = coeff;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	605a      	str	r2, [r3, #4]
	filt->buf   = buf;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	609a      	str	r2, [r3, #8]
	filt->order = order;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	731a      	strb	r2, [r3, #12]
	filt->putIndex = 0;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	735a      	strb	r2, [r3, #13]

	for (uint8_t n = 0; n < order; n++) {
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]
 8001756:	e00a      	b.n	800176e <FIRFilter_Init+0x4a>
		filt->buf[n] = 0.0f;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
	for (uint8_t n = 0; n < order; n++) {
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	3301      	adds	r3, #1
 800176c:	75fb      	strb	r3, [r7, #23]
 800176e:	7dfa      	ldrb	r2, [r7, #23]
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	429a      	cmp	r2, r3
 8001774:	d3f0      	bcc.n	8001758 <FIRFilter_Init+0x34>
	}
}
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *filt, float in) {
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	ed87 0a00 	vstr	s0, [r7]
    /* Store newest input value in circular buffer */
    filt->buf[filt->putIndex] = in;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	7b5b      	ldrb	r3, [r3, #13]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	601a      	str	r2, [r3, #0]
    
    /* Compute filter output */
    uint8_t getIndex = filt->putIndex;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7b5b      	ldrb	r3, [r3, #13]
 80017a2:	73fb      	strb	r3, [r7, #15]
    
    filt->out = 0.0f;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
    for (uint8_t n = 0; n < filt->order; n++) {
 80017ac:	2300      	movs	r3, #0
 80017ae:	73bb      	strb	r3, [r7, #14]
 80017b0:	e025      	b.n	80017fe <FIRFilter_Update+0x7c>
        filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	7bbb      	ldrb	r3, [r7, #14]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	edd3 6a00 	vldr	s13, [r3]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	edc3 7a00 	vstr	s15, [r3]
        
        if (getIndex == 0) {
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d104      	bne.n	80017f2 <FIRFilter_Update+0x70>
            getIndex = filt->order - 1;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7b1b      	ldrb	r3, [r3, #12]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e002      	b.n	80017f8 <FIRFilter_Update+0x76>
        } else {
           getIndex--; 
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t n = 0; n < filt->order; n++) {
 80017f8:	7bbb      	ldrb	r3, [r7, #14]
 80017fa:	3301      	adds	r3, #1
 80017fc:	73bb      	strb	r3, [r7, #14]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7b1b      	ldrb	r3, [r3, #12]
 8001802:	7bba      	ldrb	r2, [r7, #14]
 8001804:	429a      	cmp	r2, r3
 8001806:	d3d4      	bcc.n	80017b2 <FIRFilter_Update+0x30>
        }
    }
    
    /* Increment buffer index */
    filt->putIndex++;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7b5b      	ldrb	r3, [r3, #13]
 800180c:	3301      	adds	r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	735a      	strb	r2, [r3, #13]
    if (filt->putIndex == filt->order) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7b5a      	ldrb	r2, [r3, #13]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7b1b      	ldrb	r3, [r3, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d102      	bne.n	8001826 <FIRFilter_Update+0xa4>
        filt->putIndex = 0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	735a      	strb	r2, [r3, #13]
    }
    
    /* Return output */
    return filt->out;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	ee07 3a90 	vmov	s15, r3
}
 800182e:	eeb0 0a67 	vmov.f32	s0, s15
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <main>:
FIRFilter firAcc[3];
FIRFilter firMag[3];
FIRFilter firBar;

int main(void)
{
 800183c:	b5b0      	push	{r4, r5, r7, lr}
 800183e:	b0a4      	sub	sp, #144	; 0x90
 8001840:	af00      	add	r7, sp, #0
  HAL_Init();
 8001842:	f000 ff69 	bl	8002718 <HAL_Init>

  SystemClock_Config();
 8001846:	f000 fa57 	bl	8001cf8 <SystemClock_Config>

  MX_GPIO_Init();
 800184a:	f000 fbc7 	bl	8001fdc <MX_GPIO_Init>
  MX_I2C1_Init();
 800184e:	f000 fabd 	bl	8001dcc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001852:	f000 fae9 	bl	8001e28 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001856:	f000 fb15 	bl	8001e84 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800185a:	f000 fb41 	bl	8001ee0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800185e:	f000 fb69 	bl	8001f34 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001862:	f000 fb91 	bl	8001f88 <MX_USART3_UART_Init>

  initPeripherals();
 8001866:	f000 f9d7 	bl	8001c18 <initPeripherals>

  FIRFilter_Init(&firGyr[0], firCoeffGyr, firGyrXBuf, FIRGYRN);
 800186a:	2349      	movs	r3, #73	; 0x49
 800186c:	4a4d      	ldr	r2, [pc, #308]	; (80019a4 <main+0x168>)
 800186e:	494e      	ldr	r1, [pc, #312]	; (80019a8 <main+0x16c>)
 8001870:	484e      	ldr	r0, [pc, #312]	; (80019ac <main+0x170>)
 8001872:	f7ff ff57 	bl	8001724 <FIRFilter_Init>
  FIRFilter_Init(&firGyr[1], firCoeffGyr, firGyrYBuf, FIRGYRN);
 8001876:	2349      	movs	r3, #73	; 0x49
 8001878:	4a4d      	ldr	r2, [pc, #308]	; (80019b0 <main+0x174>)
 800187a:	494b      	ldr	r1, [pc, #300]	; (80019a8 <main+0x16c>)
 800187c:	484d      	ldr	r0, [pc, #308]	; (80019b4 <main+0x178>)
 800187e:	f7ff ff51 	bl	8001724 <FIRFilter_Init>
  FIRFilter_Init(&firGyr[2], firCoeffGyr, firGyrZBuf, FIRGYRN);
 8001882:	2349      	movs	r3, #73	; 0x49
 8001884:	4a4c      	ldr	r2, [pc, #304]	; (80019b8 <main+0x17c>)
 8001886:	4948      	ldr	r1, [pc, #288]	; (80019a8 <main+0x16c>)
 8001888:	484c      	ldr	r0, [pc, #304]	; (80019bc <main+0x180>)
 800188a:	f7ff ff4b 	bl	8001724 <FIRFilter_Init>

  FIRFilter_Init(&firAcc[0], firCoeffAcc, firAccXBuf, FIRACCN);
 800188e:	2341      	movs	r3, #65	; 0x41
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <main+0x184>)
 8001892:	494c      	ldr	r1, [pc, #304]	; (80019c4 <main+0x188>)
 8001894:	484c      	ldr	r0, [pc, #304]	; (80019c8 <main+0x18c>)
 8001896:	f7ff ff45 	bl	8001724 <FIRFilter_Init>
  FIRFilter_Init(&firAcc[1], firCoeffAcc, firAccYBuf, FIRACCN);
 800189a:	2341      	movs	r3, #65	; 0x41
 800189c:	4a4b      	ldr	r2, [pc, #300]	; (80019cc <main+0x190>)
 800189e:	4949      	ldr	r1, [pc, #292]	; (80019c4 <main+0x188>)
 80018a0:	484b      	ldr	r0, [pc, #300]	; (80019d0 <main+0x194>)
 80018a2:	f7ff ff3f 	bl	8001724 <FIRFilter_Init>
  FIRFilter_Init(&firAcc[2], firCoeffAcc, firAccZBuf, FIRACCN);
 80018a6:	2341      	movs	r3, #65	; 0x41
 80018a8:	4a4a      	ldr	r2, [pc, #296]	; (80019d4 <main+0x198>)
 80018aa:	4946      	ldr	r1, [pc, #280]	; (80019c4 <main+0x188>)
 80018ac:	484a      	ldr	r0, [pc, #296]	; (80019d8 <main+0x19c>)
 80018ae:	f7ff ff39 	bl	8001724 <FIRFilter_Init>

  FIRFilter_Init(&firMag[0], firCoeffMag, firMagXBuf, FIRMAGN);
 80018b2:	2339      	movs	r3, #57	; 0x39
 80018b4:	4a49      	ldr	r2, [pc, #292]	; (80019dc <main+0x1a0>)
 80018b6:	494a      	ldr	r1, [pc, #296]	; (80019e0 <main+0x1a4>)
 80018b8:	484a      	ldr	r0, [pc, #296]	; (80019e4 <main+0x1a8>)
 80018ba:	f7ff ff33 	bl	8001724 <FIRFilter_Init>
  FIRFilter_Init(&firMag[1], firCoeffMag, firMagYBuf, FIRMAGN);
 80018be:	2339      	movs	r3, #57	; 0x39
 80018c0:	4a49      	ldr	r2, [pc, #292]	; (80019e8 <main+0x1ac>)
 80018c2:	4947      	ldr	r1, [pc, #284]	; (80019e0 <main+0x1a4>)
 80018c4:	4849      	ldr	r0, [pc, #292]	; (80019ec <main+0x1b0>)
 80018c6:	f7ff ff2d 	bl	8001724 <FIRFilter_Init>
  FIRFilter_Init(&firMag[2], firCoeffMag, firMagZBuf, FIRMAGN);
 80018ca:	2339      	movs	r3, #57	; 0x39
 80018cc:	4a48      	ldr	r2, [pc, #288]	; (80019f0 <main+0x1b4>)
 80018ce:	4944      	ldr	r1, [pc, #272]	; (80019e0 <main+0x1a4>)
 80018d0:	4848      	ldr	r0, [pc, #288]	; (80019f4 <main+0x1b8>)
 80018d2:	f7ff ff27 	bl	8001724 <FIRFilter_Init>

  FIRFilter_Init(&firBar, firCoeffBar, firBarBuf, FIRBARN);
 80018d6:	2359      	movs	r3, #89	; 0x59
 80018d8:	4a47      	ldr	r2, [pc, #284]	; (80019f8 <main+0x1bc>)
 80018da:	4948      	ldr	r1, [pc, #288]	; (80019fc <main+0x1c0>)
 80018dc:	4848      	ldr	r0, [pc, #288]	; (8001a00 <main+0x1c4>)
 80018de:	f7ff ff21 	bl	8001724 <FIRFilter_Init>

  osThreadDef(heartbeatLEDTask, heartbeatTask, osPriorityNormal, 0, 128);
 80018e2:	4b48      	ldr	r3, [pc, #288]	; (8001a04 <main+0x1c8>)
 80018e4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80018e8:	461d      	mov	r5, r3
 80018ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatHandle = osThreadCreate(osThread(heartbeatLEDTask), NULL);
 80018f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f004 f8b4 	bl	8005a6a <osThreadCreate>
 8001902:	4602      	mov	r2, r0
 8001904:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <main+0x1cc>)
 8001906:	601a      	str	r2, [r3, #0]

  /* Sensor tasks */
  osThreadDef(barometerReadTask, barometerReadTask, osPriorityNormal, 0, 128);
 8001908:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <main+0x1d0>)
 800190a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800190e:	461d      	mov	r5, r3
 8001910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001914:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  barometerReadHandle = osThreadCreate(osThread(barometerReadTask), NULL);
 800191c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f004 f8a1 	bl	8005a6a <osThreadCreate>
 8001928:	4602      	mov	r2, r0
 800192a:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <main+0x1d4>)
 800192c:	601a      	str	r2, [r3, #0]

  osThreadDef(imuGyroReadTask, imuGyroReadTask, osPriorityNormal, 0, 128);
 800192e:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <main+0x1d8>)
 8001930:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001934:	461d      	mov	r5, r3
 8001936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800193a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800193e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuGyroReadHandle = osThreadCreate(osThread(imuGyroReadTask), NULL);
 8001942:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f004 f88e 	bl	8005a6a <osThreadCreate>
 800194e:	4602      	mov	r2, r0
 8001950:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <main+0x1dc>)
 8001952:	601a      	str	r2, [r3, #0]

  osThreadDef(imuAccReadTask, imuAccReadTask, osPriorityNormal, 0, 128);
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <main+0x1e0>)
 8001956:	f107 0420 	add.w	r4, r7, #32
 800195a:	461d      	mov	r5, r3
 800195c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001960:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001964:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  imuAccReadHandle = osThreadCreate(osThread(imuAccReadTask), NULL);
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f004 f87b 	bl	8005a6a <osThreadCreate>
 8001974:	4602      	mov	r2, r0
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <main+0x1e4>)
 8001978:	601a      	str	r2, [r3, #0]

  /* Serial debug output task */
  osThreadDef(debugSerialTask, debugSerialTask, osPriorityAboveNormal, 0, 2048);
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <main+0x1e8>)
 800197c:	1d3c      	adds	r4, r7, #4
 800197e:	461d      	mov	r5, r3
 8001980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001984:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  debugSerialHandle = osThreadCreate(osThread(debugSerialTask), NULL);
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2100      	movs	r1, #0
 8001990:	4618      	mov	r0, r3
 8001992:	f004 f86a 	bl	8005a6a <osThreadCreate>
 8001996:	4602      	mov	r2, r0
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <main+0x1ec>)
 800199a:	601a      	str	r2, [r3, #0]

  osKernelStart();
 800199c:	f004 f85e 	bl	8005a5c <osKernelStart>
  
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <main+0x164>
 80019a2:	bf00      	nop
 80019a4:	20005394 	.word	0x20005394
 80019a8:	20000004 	.word	0x20000004
 80019ac:	200050d0 	.word	0x200050d0
 80019b0:	20005254 	.word	0x20005254
 80019b4:	200050e0 	.word	0x200050e0
 80019b8:	20004bac 	.word	0x20004bac
 80019bc:	200050f0 	.word	0x200050f0
 80019c0:	2000472c 	.word	0x2000472c
 80019c4:	20000128 	.word	0x20000128
 80019c8:	200050a0 	.word	0x200050a0
 80019cc:	20004864 	.word	0x20004864
 80019d0:	200050b0 	.word	0x200050b0
 80019d4:	20004cd0 	.word	0x20004cd0
 80019d8:	200050c0 	.word	0x200050c0
 80019dc:	20004fbc 	.word	0x20004fbc
 80019e0:	2000022c 	.word	0x2000022c
 80019e4:	20004ae0 	.word	0x20004ae0
 80019e8:	200049fc 	.word	0x200049fc
 80019ec:	20004af0 	.word	0x20004af0
 80019f0:	20005114 	.word	0x20005114
 80019f4:	20004b00 	.word	0x20004b00
 80019f8:	20004dd4 	.word	0x20004dd4
 80019fc:	20000310 	.word	0x20000310
 8001a00:	20005104 	.word	0x20005104
 8001a04:	08008954 	.word	0x08008954
 8001a08:	20005100 	.word	0x20005100
 8001a0c:	08008984 	.word	0x08008984
 8001a10:	20004830 	.word	0x20004830
 8001a14:	080089b0 	.word	0x080089b0
 8001a18:	20004fb8 	.word	0x20004fb8
 8001a1c:	080089dc 	.word	0x080089dc
 8001a20:	20004728 	.word	0x20004728
 8001a24:	08008a08 	.word	0x08008a08
 8001a28:	20004860 	.word	0x20004860

08001a2c <heartbeatTask>:
  }

}

void heartbeatTask(void const * argument)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 8001a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <heartbeatTask+0x1c>)
 8001a3a:	f001 f9a0 	bl	8002d7e <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f004 f85e 	bl	8005b02 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 8001a46:	e7f5      	b.n	8001a34 <heartbeatTask+0x8>
 8001a48:	40020400 	.word	0x40020400

08001a4c <imuGyroReadTask>:
  }

}

void imuGyroReadTask (void const *argument) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

	for (;;) {
		BMI088_ReadGyr(&imu);
 8001a54:	480f      	ldr	r0, [pc, #60]	; (8001a94 <imuGyroReadTask+0x48>)
 8001a56:	f7ff fb4f 	bl	80010f8 <BMI088_ReadGyr>

		/* Filter measurements */
		FIRFilter_Update(&firGyr[0], imu.gyr[0]);
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <imuGyroReadTask+0x48>)
 8001a5c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a60:	eeb0 0a67 	vmov.f32	s0, s15
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <imuGyroReadTask+0x4c>)
 8001a66:	f7ff fe8c 	bl	8001782 <FIRFilter_Update>
		FIRFilter_Update(&firGyr[1], imu.gyr[1]);
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <imuGyroReadTask+0x48>)
 8001a6c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a70:	eeb0 0a67 	vmov.f32	s0, s15
 8001a74:	4809      	ldr	r0, [pc, #36]	; (8001a9c <imuGyroReadTask+0x50>)
 8001a76:	f7ff fe84 	bl	8001782 <FIRFilter_Update>
		FIRFilter_Update(&firGyr[2], imu.gyr[2]);
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <imuGyroReadTask+0x48>)
 8001a7c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a80:	eeb0 0a67 	vmov.f32	s0, s15
 8001a84:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <imuGyroReadTask+0x54>)
 8001a86:	f7ff fe7c 	bl	8001782 <FIRFilter_Update>

		osDelay(1);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f004 f839 	bl	8005b02 <osDelay>
		BMI088_ReadGyr(&imu);
 8001a90:	e7e0      	b.n	8001a54 <imuGyroReadTask+0x8>
 8001a92:	bf00      	nop
 8001a94:	20004834 	.word	0x20004834
 8001a98:	200050d0 	.word	0x200050d0
 8001a9c:	200050e0 	.word	0x200050e0
 8001aa0:	200050f0 	.word	0x200050f0

08001aa4 <imuAccReadTask>:
	}

}

void imuAccReadTask (void const *argument) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

	for (;;) {
		BMI088_ReadAcc(&imu);
 8001aac:	480f      	ldr	r0, [pc, #60]	; (8001aec <imuAccReadTask+0x48>)
 8001aae:	f7ff fabf 	bl	8001030 <BMI088_ReadAcc>

		/* Filter measurements */
		FIRFilter_Update(&firAcc[0], imu.acc[0]);
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <imuAccReadTask+0x48>)
 8001ab4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <imuAccReadTask+0x4c>)
 8001abe:	f7ff fe60 	bl	8001782 <FIRFilter_Update>
		FIRFilter_Update(&firAcc[1], imu.acc[1]);
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <imuAccReadTask+0x48>)
 8001ac4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8001acc:	4809      	ldr	r0, [pc, #36]	; (8001af4 <imuAccReadTask+0x50>)
 8001ace:	f7ff fe58 	bl	8001782 <FIRFilter_Update>
		FIRFilter_Update(&firAcc[2], imu.acc[2]);
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <imuAccReadTask+0x48>)
 8001ad4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <imuAccReadTask+0x54>)
 8001ade:	f7ff fe50 	bl	8001782 <FIRFilter_Update>

		osDelay(5);
 8001ae2:	2005      	movs	r0, #5
 8001ae4:	f004 f80d 	bl	8005b02 <osDelay>
		BMI088_ReadAcc(&imu);
 8001ae8:	e7e0      	b.n	8001aac <imuAccReadTask+0x8>
 8001aea:	bf00      	nop
 8001aec:	20004834 	.word	0x20004834
 8001af0:	200050a0 	.word	0x200050a0
 8001af4:	200050b0 	.word	0x200050b0
 8001af8:	200050c0 	.word	0x200050c0

08001afc <barometerReadTask>:
		osDelay(5);
	}

}

void barometerReadTask (void const *argument) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

	for (;;) {
		MPRLSBarometer_ReadPressure(&bar);
 8001b04:	4807      	ldr	r0, [pc, #28]	; (8001b24 <barometerReadTask+0x28>)
 8001b06:	f7ff fc23 	bl	8001350 <MPRLSBarometer_ReadPressure>

		/* Filter measurement */
		FIRFilter_Update(&firBar, bar.pressurePa);
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <barometerReadTask+0x28>)
 8001b0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <barometerReadTask+0x2c>)
 8001b16:	f7ff fe34 	bl	8001782 <FIRFilter_Update>

		osDelay(10);
 8001b1a:	200a      	movs	r0, #10
 8001b1c:	f003 fff1 	bl	8005b02 <osDelay>
		MPRLSBarometer_ReadPressure(&bar);
 8001b20:	e7f0      	b.n	8001b04 <barometerReadTask+0x8>
 8001b22:	bf00      	nop
 8001b24:	20005238 	.word	0x20005238
 8001b28:	20005104 	.word	0x20005104

08001b2c <debugSerialTask>:
	}

}

void debugSerialTask (void const *argument) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0a6      	sub	sp, #152	; 0x98
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	6078      	str	r0, [r7, #4]
	for (;;) {
		//printDebug((char *) SensorData.uiData);

		NavData.acc[0] = firAcc[0].out;
 8001b34:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <debugSerialTask+0xd0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <debugSerialTask+0xd4>)
 8001b3a:	6013      	str	r3, [r2, #0]
		NavData.acc[1] = firAcc[1].out;
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <debugSerialTask+0xd0>)
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	4a2f      	ldr	r2, [pc, #188]	; (8001c00 <debugSerialTask+0xd4>)
 8001b42:	6053      	str	r3, [r2, #4]
		NavData.acc[2] = firAcc[2].out;
 8001b44:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <debugSerialTask+0xd0>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a2d      	ldr	r2, [pc, #180]	; (8001c00 <debugSerialTask+0xd4>)
 8001b4a:	6093      	str	r3, [r2, #8]
		NavData.gyr[0] = firGyr[0].out;
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <debugSerialTask+0xd8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2b      	ldr	r2, [pc, #172]	; (8001c00 <debugSerialTask+0xd4>)
 8001b52:	60d3      	str	r3, [r2, #12]
		NavData.gyr[1] = firGyr[1].out;
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <debugSerialTask+0xd8>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4a29      	ldr	r2, [pc, #164]	; (8001c00 <debugSerialTask+0xd4>)
 8001b5a:	6113      	str	r3, [r2, #16]
		NavData.gyr[2] = firGyr[2].out;
 8001b5c:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <debugSerialTask+0xd8>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <debugSerialTask+0xd4>)
 8001b62:	6153      	str	r3, [r2, #20]
		NavData.mag[0] = firMag[0].out;
 8001b64:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <debugSerialTask+0xdc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a25      	ldr	r2, [pc, #148]	; (8001c00 <debugSerialTask+0xd4>)
 8001b6a:	6193      	str	r3, [r2, #24]
		NavData.mag[1] = firMag[1].out;
 8001b6c:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <debugSerialTask+0xdc>)
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <debugSerialTask+0xd4>)
 8001b72:	61d3      	str	r3, [r2, #28]
		NavData.mag[2] = firMag[2].out;
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <debugSerialTask+0xdc>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <debugSerialTask+0xd4>)
 8001b7a:	6213      	str	r3, [r2, #32]
		NavData.bar = firBar.out;
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <debugSerialTask+0xe0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <debugSerialTask+0xd4>)
 8001b82:	6253      	str	r3, [r2, #36]	; 0x24
		NavData.Va = 0.0f;
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <debugSerialTask+0xd4>)
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28
		NavData.fix = gpsData.fixQuality;
 8001b8c:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <debugSerialTask+0xe4>)
 8001b8e:	7f5a      	ldrb	r2, [r3, #29]
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <debugSerialTask+0xd4>)
 8001b92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		NavData.lat = gpsData.latitude_dec;
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <debugSerialTask+0xe4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <debugSerialTask+0xd4>)
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
		NavData.lon = gpsData.longitude_dec;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <debugSerialTask+0xe4>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <debugSerialTask+0xd4>)
 8001ba4:	6353      	str	r3, [r2, #52]	; 0x34
		NavData.Vg = gpsData.groundSpeed_mps;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <debugSerialTask+0xe4>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	4a15      	ldr	r2, [pc, #84]	; (8001c00 <debugSerialTask+0xd4>)
 8001bac:	6393      	str	r3, [r2, #56]	; 0x38
		NavData.roll = 0.0f;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <debugSerialTask+0xd4>)
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	63da      	str	r2, [r3, #60]	; 0x3c
		NavData.pitch = 0.0f;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <debugSerialTask+0xd4>)
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
		NavData.yaw = 0.0f;
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <debugSerialTask+0xd4>)
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44

		uint8_t UAVDataPacket[128];
		uint8_t UAVDataPacketLength = UAVDataLink_Pack(0, 0, sizeof(NavData), (const uint8_t *) &NavData, UAVDataPacket);
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <debugSerialTask+0xd4>)
 8001bce:	2248      	movs	r2, #72	; 0x48
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff fc5a 	bl	800148c <UAVDataLink_Pack>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

		HAL_UART_Transmit(&huart3, UAVDataPacket, UAVDataPacketLength, HAL_MAX_DELAY);
 8001bde:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	f107 010c 	add.w	r1, r7, #12
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	4809      	ldr	r0, [pc, #36]	; (8001c14 <debugSerialTask+0xe8>)
 8001bee:	f003 f9f4 	bl	8004fda <HAL_UART_Transmit>

		osDelay(1000);
 8001bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bf6:	f003 ff84 	bl	8005b02 <osDelay>
	for (;;) {
 8001bfa:	e79b      	b.n	8001b34 <debugSerialTask+0x8>
 8001bfc:	200050a0 	.word	0x200050a0
 8001c00:	20004b64 	.word	0x20004b64
 8001c04:	200050d0 	.word	0x200050d0
 8001c08:	20004ae0 	.word	0x20004ae0
 8001c0c:	20005104 	.word	0x20005104
 8001c10:	20004f38 	.word	0x20004f38
 8001c14:	20004968 	.word	0x20004968

08001c18 <initPeripherals>:
	}
}

void initPeripherals() {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af04      	add	r7, sp, #16
	/* Initialise pressure sensor */
	uint8_t statBar = (MPRLSBarometer_Init(&bar, &hi2c1, BARNRST_GPIO_Port, BARNRST_Pin, INTBAR_GPIO_Port, INTBAR_Pin) == MPRLS_STATUS_POWERED);
 8001c1e:	2301      	movs	r3, #1
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <initPeripherals+0xb8>)
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	4a2a      	ldr	r2, [pc, #168]	; (8001cd4 <initPeripherals+0xbc>)
 8001c2a:	492b      	ldr	r1, [pc, #172]	; (8001cd8 <initPeripherals+0xc0>)
 8001c2c:	482b      	ldr	r0, [pc, #172]	; (8001cdc <initPeripherals+0xc4>)
 8001c2e:	f7ff fb2f 	bl	8001290 <MPRLSBarometer_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b40      	cmp	r3, #64	; 0x40
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	71fb      	strb	r3, [r7, #7]

	/* Initialise magnetometer */
	uint8_t statMag = IISMagnetometer_Init(&mag, &hi2c1, GPIOA, INTMAG_Pin);
 8001c40:	2340      	movs	r3, #64	; 0x40
 8001c42:	4a24      	ldr	r2, [pc, #144]	; (8001cd4 <initPeripherals+0xbc>)
 8001c44:	4924      	ldr	r1, [pc, #144]	; (8001cd8 <initPeripherals+0xc0>)
 8001c46:	4826      	ldr	r0, [pc, #152]	; (8001ce0 <initPeripherals+0xc8>)
 8001c48:	f7ff faba 	bl	80011c0 <IISMagnetometer_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71bb      	strb	r3, [r7, #6]

	/* Initialise IMU */
	uint8_t statIMU = BMI088_Init(&imu, &hi2c1, GPIOA, INTACC_Pin, GPIOA, INTGYR_Pin);
 8001c50:	2320      	movs	r3, #32
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <initPeripherals+0xbc>)
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2310      	movs	r3, #16
 8001c5a:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <initPeripherals+0xbc>)
 8001c5c:	491e      	ldr	r1, [pc, #120]	; (8001cd8 <initPeripherals+0xc0>)
 8001c5e:	4821      	ldr	r0, [pc, #132]	; (8001ce4 <initPeripherals+0xcc>)
 8001c60:	f7ff f8d2 	bl	8000e08 <BMI088_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	717b      	strb	r3, [r7, #5]

	/* Initialise temperature sensor */
	TMP100_Init(&tmp, &hi2c1);
 8001c68:	491b      	ldr	r1, [pc, #108]	; (8001cd8 <initPeripherals+0xc0>)
 8001c6a:	481f      	ldr	r0, [pc, #124]	; (8001ce8 <initPeripherals+0xd0>)
 8001c6c:	f7ff fbee 	bl	800144c <TMP100_Init>

	/* Initialise GPS receiver */
	UBloxGPS_Init(&gps, &huart1, GPIOC, GPSNRST_Pin, GPIOC, GPSPPS_Pin, GPIOC, GPSLNAEN_Pin);
 8001c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c74:	9303      	str	r3, [sp, #12]
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <initPeripherals+0xd4>)
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <initPeripherals+0xd4>)
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c88:	4a18      	ldr	r2, [pc, #96]	; (8001cec <initPeripherals+0xd4>)
 8001c8a:	4919      	ldr	r1, [pc, #100]	; (8001cf0 <initPeripherals+0xd8>)
 8001c8c:	4819      	ldr	r0, [pc, #100]	; (8001cf4 <initPeripherals+0xdc>)
 8001c8e:	f7ff fcce 	bl	800162e <UBloxGPS_Init>
	UBloxGPS_Reset(&gps);
 8001c92:	4818      	ldr	r0, [pc, #96]	; (8001cf4 <initPeripherals+0xdc>)
 8001c94:	f7ff fd09 	bl	80016aa <UBloxGPS_Reset>

	uint8_t status = statBar + statMag + statIMU;
 8001c98:	79fa      	ldrb	r2, [r7, #7]
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	797b      	ldrb	r3, [r7, #5]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	713b      	strb	r3, [r7, #4]
	if (status < 3) {
 8001ca6:	793b      	ldrb	r3, [r7, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d806      	bhi.n	8001cba <initPeripherals+0xa2>
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb2:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <initPeripherals+0xb8>)
 8001cb4:	f001 f84a 	bl	8002d4c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_RESET);
	}
}
 8001cb8:	e005      	b.n	8001cc6 <initPeripherals+0xae>
		HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc0:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <initPeripherals+0xb8>)
 8001cc2:	f001 f843 	bl	8002d4c <HAL_GPIO_WritePin>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	200049a8 	.word	0x200049a8
 8001cdc:	20005238 	.word	0x20005238
 8001ce0:	20005378 	.word	0x20005378
 8001ce4:	20004834 	.word	0x20004834
 8001ce8:	20004618 	.word	0x20004618
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	20004f78 	.word	0x20004f78
 8001cf4:	20004620 	.word	0x20004620

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b094      	sub	sp, #80	; 0x50
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	2230      	movs	r2, #48	; 0x30
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 f8e7 	bl	8006eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <SystemClock_Config+0xcc>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	4a27      	ldr	r2, [pc, #156]	; (8001dc4 <SystemClock_Config+0xcc>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <SystemClock_Config+0xcc>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d38:	2300      	movs	r3, #0
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <SystemClock_Config+0xd0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <SystemClock_Config+0xd0>)
 8001d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <SystemClock_Config+0xd0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d54:	2301      	movs	r3, #1
 8001d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d68:	2319      	movs	r3, #25
 8001d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d72:	2302      	movs	r3, #2
 8001d74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d76:	2304      	movs	r3, #4
 8001d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fa64 	bl	800424c <HAL_RCC_OscConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d8a:	f000 f9eb 	bl	8002164 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d8e:	230f      	movs	r3, #15
 8001d90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d92:	2302      	movs	r3, #2
 8001d94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	2105      	movs	r1, #5
 8001dac:	4618      	mov	r0, r3
 8001dae:	f002 fc8f 	bl	80046d0 <HAL_RCC_ClockConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001db8:	f000 f9d4 	bl	8002164 <Error_Handler>
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	3750      	adds	r7, #80	; 0x50
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40007000 	.word	0x40007000

08001dcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001dd2:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <MX_I2C1_Init+0x54>)
 8001dd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001dd8:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <MX_I2C1_Init+0x58>)
 8001dda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e08:	4804      	ldr	r0, [pc, #16]	; (8001e1c <MX_I2C1_Init+0x50>)
 8001e0a:	f000 ffd3 	bl	8002db4 <HAL_I2C_Init>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e14:	f000 f9a6 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	200049a8 	.word	0x200049a8
 8001e20:	40005400 	.word	0x40005400
 8001e24:	000186a0 	.word	0x000186a0

08001e28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_I2C2_Init+0x50>)
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <MX_I2C2_Init+0x54>)
 8001e30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_I2C2_Init+0x50>)
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <MX_I2C2_Init+0x58>)
 8001e36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_I2C2_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_I2C2_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_I2C2_Init+0x50>)
 8001e46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <MX_I2C2_Init+0x50>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_I2C2_Init+0x50>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <MX_I2C2_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_I2C2_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e64:	4804      	ldr	r0, [pc, #16]	; (8001e78 <MX_I2C2_Init+0x50>)
 8001e66:	f000 ffa5 	bl	8002db4 <HAL_I2C_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e70:	f000 f978 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20004b10 	.word	0x20004b10
 8001e7c:	40005800 	.word	0x40005800
 8001e80:	000186a0 	.word	0x000186a0

08001e84 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <MX_I2C3_Init+0x50>)
 8001e8a:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <MX_I2C3_Init+0x54>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <MX_I2C3_Init+0x50>)
 8001e90:	4a12      	ldr	r2, [pc, #72]	; (8001edc <MX_I2C3_Init+0x58>)
 8001e92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <MX_I2C3_Init+0x50>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MX_I2C3_Init+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <MX_I2C3_Init+0x50>)
 8001ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ea6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <MX_I2C3_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MX_I2C3_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eb4:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <MX_I2C3_Init+0x50>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_I2C3_Init+0x50>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ec0:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <MX_I2C3_Init+0x50>)
 8001ec2:	f000 ff77 	bl	8002db4 <HAL_I2C_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ecc:	f000 f94a 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	200046d4 	.word	0x200046d4
 8001ed8:	40005c00 	.word	0x40005c00
 8001edc:	000186a0 	.word	0x000186a0

08001ee0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <MX_USART1_UART_Init+0x4c>)
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <MX_USART1_UART_Init+0x50>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9800;
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <MX_USART1_UART_Init+0x4c>)
 8001eec:	f242 6248 	movw	r2, #9800	; 0x2648
 8001ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <MX_USART1_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <MX_USART1_UART_Init+0x4c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <MX_USART1_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <MX_USART1_UART_Init+0x4c>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <MX_USART1_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <MX_USART1_UART_Init+0x4c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f16:	4805      	ldr	r0, [pc, #20]	; (8001f2c <MX_USART1_UART_Init+0x4c>)
 8001f18:	f003 f812 	bl	8004f40 <HAL_UART_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f22:	f000 f91f 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20004f78 	.word	0x20004f78
 8001f30:	40011000 	.word	0x40011000

08001f34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <MX_USART2_UART_Init+0x50>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_USART2_UART_Init+0x4c>)
 8001f6c:	f002 ffe8 	bl	8004f40 <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f76:	f000 f8f5 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200051f8 	.word	0x200051f8
 8001f84:	40004400 	.word	0x40004400

08001f88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <MX_USART3_UART_Init+0x50>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_USART3_UART_Init+0x4c>)
 8001fc0:	f002 ffbe 	bl	8004f40 <HAL_UART_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fca:	f000 f8cb 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20004968 	.word	0x20004968
 8001fd8:	40004800 	.word	0x40004800

08001fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b4e      	ldr	r3, [pc, #312]	; (8002130 <MX_GPIO_Init+0x154>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a4d      	ldr	r2, [pc, #308]	; (8002130 <MX_GPIO_Init+0x154>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b4b      	ldr	r3, [pc, #300]	; (8002130 <MX_GPIO_Init+0x154>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <MX_GPIO_Init+0x154>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a46      	ldr	r2, [pc, #280]	; (8002130 <MX_GPIO_Init+0x154>)
 8002018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b44      	ldr	r3, [pc, #272]	; (8002130 <MX_GPIO_Init+0x154>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b40      	ldr	r3, [pc, #256]	; (8002130 <MX_GPIO_Init+0x154>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a3f      	ldr	r2, [pc, #252]	; (8002130 <MX_GPIO_Init+0x154>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <MX_GPIO_Init+0x154>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <MX_GPIO_Init+0x154>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a38      	ldr	r2, [pc, #224]	; (8002130 <MX_GPIO_Init+0x154>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b36      	ldr	r3, [pc, #216]	; (8002130 <MX_GPIO_Init+0x154>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPSNRST_Pin|FCCTXA_Pin|FCCTXB_Pin|FCCTXC_Pin 
 8002062:	2200      	movs	r2, #0
 8002064:	f244 01f0 	movw	r1, #16624	; 0x40f0
 8002068:	4832      	ldr	r0, [pc, #200]	; (8002134 <MX_GPIO_Init+0x158>)
 800206a:	f000 fe6f 	bl	8002d4c <HAL_GPIO_WritePin>
                          |FCCTXD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BARNRST_GPIO_Port, BARNRST_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	4831      	ldr	r0, [pc, #196]	; (8002138 <MX_GPIO_Init+0x15c>)
 8002074:	f000 fe6a 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800207e:	482f      	ldr	r0, [pc, #188]	; (800213c <MX_GPIO_Init+0x160>)
 8002080:	f000 fe64 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPSLNAEN_Pin FCCRXA_Pin FCCRXB_Pin FCCRXC_Pin 
                           FCCRXD_Pin GPSPPS_Pin */
  GPIO_InitStruct.Pin = GPSLNAEN_Pin|FCCRXA_Pin|FCCRXB_Pin|FCCRXC_Pin 
 8002084:	f243 030f 	movw	r3, #12303	; 0x300f
 8002088:	617b      	str	r3, [r7, #20]
                          |FCCRXD_Pin|GPSPPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	4826      	ldr	r0, [pc, #152]	; (8002134 <MX_GPIO_Init+0x158>)
 800209a:	f000 fca5 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPSNRST_Pin FCCTXA_Pin FCCTXB_Pin FCCTXC_Pin 
                           FCCTXD_Pin */
  GPIO_InitStruct.Pin = GPSNRST_Pin|FCCTXA_Pin|FCCTXB_Pin|FCCTXC_Pin 
 800209e:	f244 03f0 	movw	r3, #16624	; 0x40f0
 80020a2:	617b      	str	r3, [r7, #20]
                          |FCCTXD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	481f      	ldr	r0, [pc, #124]	; (8002134 <MX_GPIO_Init+0x158>)
 80020b8:	f000 fc96 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTACC_Pin INTGYR_Pin INTMAG_Pin */
  GPIO_InitStruct.Pin = INTACC_Pin|INTGYR_Pin|INTMAG_Pin;
 80020bc:	2370      	movs	r3, #112	; 0x70
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	481a      	ldr	r0, [pc, #104]	; (8002138 <MX_GPIO_Init+0x15c>)
 80020d0:	f000 fc8a 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BARNRST_Pin */
  GPIO_InitStruct.Pin = BARNRST_Pin;
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d8:	2301      	movs	r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARNRST_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	4813      	ldr	r0, [pc, #76]	; (8002138 <MX_GPIO_Init+0x15c>)
 80020ec:	f000 fc7c 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTBAR_Pin */
  GPIO_InitStruct.Pin = INTBAR_Pin;
 80020f0:	2301      	movs	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTBAR_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	480e      	ldr	r0, [pc, #56]	; (800213c <MX_GPIO_Init+0x160>)
 8002104:	f000 fc70 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin;
 8002108:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800210c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4806      	ldr	r0, [pc, #24]	; (800213c <MX_GPIO_Init+0x160>)
 8002122:	f000 fc61 	bl	80029e8 <HAL_GPIO_Init>

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40020800 	.word	0x40020800
 8002138:	40020000 	.word	0x40020000
 800213c:	40020400 	.word	0x40020400

08002140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002152:	f000 fb03 	bl	800275c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40010000 	.word	0x40010000

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_MspInit+0x54>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_MspInit+0x54>)
 8002184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <HAL_MspInit+0x54>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_MspInit+0x54>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_MspInit+0x54>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_MspInit+0x54>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021b2:	2200      	movs	r2, #0
 80021b4:	210f      	movs	r1, #15
 80021b6:	f06f 0001 	mvn.w	r0, #1
 80021ba:	f000 fbc9 	bl	8002950 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800

080021cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08e      	sub	sp, #56	; 0x38
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a5c      	ldr	r2, [pc, #368]	; (800235c <HAL_I2C_MspInit+0x190>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d12d      	bne.n	800224a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
 80021f2:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_I2C_MspInit+0x194>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a5a      	ldr	r2, [pc, #360]	; (8002360 <HAL_I2C_MspInit+0x194>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b58      	ldr	r3, [pc, #352]	; (8002360 <HAL_I2C_MspInit+0x194>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	623b      	str	r3, [r7, #32]
 8002208:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800220a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002210:	2312      	movs	r3, #18
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002214:	2301      	movs	r3, #1
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800221c:	2304      	movs	r3, #4
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4619      	mov	r1, r3
 8002226:	484f      	ldr	r0, [pc, #316]	; (8002364 <HAL_I2C_MspInit+0x198>)
 8002228:	f000 fbde 	bl	80029e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_I2C_MspInit+0x194>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a4a      	ldr	r2, [pc, #296]	; (8002360 <HAL_I2C_MspInit+0x194>)
 8002236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
 800223c:	4b48      	ldr	r3, [pc, #288]	; (8002360 <HAL_I2C_MspInit+0x194>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002248:	e083      	b.n	8002352 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a46      	ldr	r2, [pc, #280]	; (8002368 <HAL_I2C_MspInit+0x19c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d12d      	bne.n	80022b0 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_I2C_MspInit+0x194>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	4a40      	ldr	r2, [pc, #256]	; (8002360 <HAL_I2C_MspInit+0x194>)
 800225e:	f043 0302 	orr.w	r3, r3, #2
 8002262:	6313      	str	r3, [r2, #48]	; 0x30
 8002264:	4b3e      	ldr	r3, [pc, #248]	; (8002360 <HAL_I2C_MspInit+0x194>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002270:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002276:	2312      	movs	r3, #18
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227a:	2301      	movs	r3, #1
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002282:	2304      	movs	r3, #4
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228a:	4619      	mov	r1, r3
 800228c:	4835      	ldr	r0, [pc, #212]	; (8002364 <HAL_I2C_MspInit+0x198>)
 800228e:	f000 fbab 	bl	80029e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HAL_I2C_MspInit+0x194>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a31      	ldr	r2, [pc, #196]	; (8002360 <HAL_I2C_MspInit+0x194>)
 800229c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_I2C_MspInit+0x194>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
}
 80022ae:	e050      	b.n	8002352 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2d      	ldr	r2, [pc, #180]	; (800236c <HAL_I2C_MspInit+0x1a0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d14b      	bne.n	8002352 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_I2C_MspInit+0x194>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a27      	ldr	r2, [pc, #156]	; (8002360 <HAL_I2C_MspInit+0x194>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_I2C_MspInit+0x194>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_I2C_MspInit+0x194>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a20      	ldr	r2, [pc, #128]	; (8002360 <HAL_I2C_MspInit+0x194>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <HAL_I2C_MspInit+0x194>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80022f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f8:	2312      	movs	r3, #18
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002304:	2304      	movs	r3, #4
 8002306:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230c:	4619      	mov	r1, r3
 800230e:	4818      	ldr	r0, [pc, #96]	; (8002370 <HAL_I2C_MspInit+0x1a4>)
 8002310:	f000 fb6a 	bl	80029e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231a:	2312      	movs	r3, #18
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231e:	2301      	movs	r3, #1
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002326:	2304      	movs	r3, #4
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232e:	4619      	mov	r1, r3
 8002330:	4810      	ldr	r0, [pc, #64]	; (8002374 <HAL_I2C_MspInit+0x1a8>)
 8002332:	f000 fb59 	bl	80029e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_I2C_MspInit+0x194>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_I2C_MspInit+0x194>)
 8002340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_I2C_MspInit+0x194>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
}
 8002352:	bf00      	nop
 8002354:	3738      	adds	r7, #56	; 0x38
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40005400 	.word	0x40005400
 8002360:	40023800 	.word	0x40023800
 8002364:	40020400 	.word	0x40020400
 8002368:	40005800 	.word	0x40005800
 800236c:	40005c00 	.word	0x40005c00
 8002370:	40020800 	.word	0x40020800
 8002374:	40020000 	.word	0x40020000

08002378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08e      	sub	sp, #56	; 0x38
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a4f      	ldr	r2, [pc, #316]	; (80024d4 <HAL_UART_MspInit+0x15c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d134      	bne.n	8002404 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	4b4e      	ldr	r3, [pc, #312]	; (80024d8 <HAL_UART_MspInit+0x160>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a4d      	ldr	r2, [pc, #308]	; (80024d8 <HAL_UART_MspInit+0x160>)
 80023a4:	f043 0310 	orr.w	r3, r3, #16
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b4b      	ldr	r3, [pc, #300]	; (80024d8 <HAL_UART_MspInit+0x160>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_UART_MspInit+0x160>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a46      	ldr	r2, [pc, #280]	; (80024d8 <HAL_UART_MspInit+0x160>)
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <HAL_UART_MspInit+0x160>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023d2:	23c0      	movs	r3, #192	; 0xc0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023da:	2301      	movs	r3, #1
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023e2:	2307      	movs	r3, #7
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ea:	4619      	mov	r1, r3
 80023ec:	483b      	ldr	r0, [pc, #236]	; (80024dc <HAL_UART_MspInit+0x164>)
 80023ee:	f000 fafb 	bl	80029e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2105      	movs	r1, #5
 80023f6:	2025      	movs	r0, #37	; 0x25
 80023f8:	f000 faaa 	bl	8002950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023fc:	2025      	movs	r0, #37	; 0x25
 80023fe:	f000 fac3 	bl	8002988 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002402:	e063      	b.n	80024cc <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a35      	ldr	r2, [pc, #212]	; (80024e0 <HAL_UART_MspInit+0x168>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d12c      	bne.n	8002468 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_UART_MspInit+0x160>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a30      	ldr	r2, [pc, #192]	; (80024d8 <HAL_UART_MspInit+0x160>)
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_UART_MspInit+0x160>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_UART_MspInit+0x160>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_UART_MspInit+0x160>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6313      	str	r3, [r2, #48]	; 0x30
 800243a:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <HAL_UART_MspInit+0x160>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002446:	230c      	movs	r3, #12
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244e:	2301      	movs	r3, #1
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002456:	2307      	movs	r3, #7
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245e:	4619      	mov	r1, r3
 8002460:	4820      	ldr	r0, [pc, #128]	; (80024e4 <HAL_UART_MspInit+0x16c>)
 8002462:	f000 fac1 	bl	80029e8 <HAL_GPIO_Init>
}
 8002466:	e031      	b.n	80024cc <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_UART_MspInit+0x170>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12c      	bne.n	80024cc <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_UART_MspInit+0x160>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_UART_MspInit+0x160>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_UART_MspInit+0x160>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_UART_MspInit+0x160>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_UART_MspInit+0x160>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_UART_MspInit+0x160>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b4:	2301      	movs	r3, #1
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024bc:	2307      	movs	r3, #7
 80024be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c4:	4619      	mov	r1, r3
 80024c6:	4809      	ldr	r0, [pc, #36]	; (80024ec <HAL_UART_MspInit+0x174>)
 80024c8:	f000 fa8e 	bl	80029e8 <HAL_GPIO_Init>
}
 80024cc:	bf00      	nop
 80024ce:	3738      	adds	r7, #56	; 0x38
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40011000 	.word	0x40011000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020400 	.word	0x40020400
 80024e0:	40004400 	.word	0x40004400
 80024e4:	40020000 	.word	0x40020000
 80024e8:	40004800 	.word	0x40004800
 80024ec:	40020800 	.word	0x40020800

080024f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08c      	sub	sp, #48	; 0x30
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	2019      	movs	r0, #25
 8002506:	f000 fa23 	bl	8002950 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800250a:	2019      	movs	r0, #25
 800250c:	f000 fa3c 	bl	8002988 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <HAL_InitTick+0xa4>)
 8002516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002518:	4a1e      	ldr	r2, [pc, #120]	; (8002594 <HAL_InitTick+0xa4>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6453      	str	r3, [r2, #68]	; 0x44
 8002520:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <HAL_InitTick+0xa4>)
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800252c:	f107 0210 	add.w	r2, r7, #16
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fa92 	bl	8004a60 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800253c:	f002 fa7c 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8002540:	4603      	mov	r3, r0
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	4a13      	ldr	r2, [pc, #76]	; (8002598 <HAL_InitTick+0xa8>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	0c9b      	lsrs	r3, r3, #18
 8002550:	3b01      	subs	r3, #1
 8002552:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_InitTick+0xac>)
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <HAL_InitTick+0xb0>)
 8002558:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_InitTick+0xac>)
 800255c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002560:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002562:	4a0e      	ldr	r2, [pc, #56]	; (800259c <HAL_InitTick+0xac>)
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_InitTick+0xac>)
 800256a:	2200      	movs	r2, #0
 800256c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_InitTick+0xac>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002574:	4809      	ldr	r0, [pc, #36]	; (800259c <HAL_InitTick+0xac>)
 8002576:	f002 faa5 	bl	8004ac4 <HAL_TIM_Base_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d104      	bne.n	800258a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002580:	4806      	ldr	r0, [pc, #24]	; (800259c <HAL_InitTick+0xac>)
 8002582:	f002 fad4 	bl	8004b2e <HAL_TIM_Base_Start_IT>
 8002586:	4603      	mov	r3, r0
 8002588:	e000      	b.n	800258c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
}
 800258c:	4618      	mov	r0, r3
 800258e:	3730      	adds	r7, #48	; 0x30
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40023800 	.word	0x40023800
 8002598:	431bde83 	.word	0x431bde83
 800259c:	200054b8 	.word	0x200054b8
 80025a0:	40010000 	.word	0x40010000

080025a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b6:	e7fe      	b.n	80025b6 <HardFault_Handler+0x4>

080025b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <MemManage_Handler+0x4>

080025be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c2:	e7fe      	b.n	80025c2 <BusFault_Handler+0x4>

080025c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <UsageFault_Handler+0x4>

080025ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025de:	f002 faca 	bl	8004b76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200054b8 	.word	0x200054b8

080025ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <USART1_IRQHandler+0x10>)
 80025f2:	f002 fd8b 	bl	800510c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20004f78 	.word	0x20004f78

08002600 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002608:	4b11      	ldr	r3, [pc, #68]	; (8002650 <_sbrk+0x50>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <_sbrk+0x16>
		heap_end = &end;
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <_sbrk+0x50>)
 8002612:	4a10      	ldr	r2, [pc, #64]	; (8002654 <_sbrk+0x54>)
 8002614:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <_sbrk+0x50>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <_sbrk+0x50>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	466a      	mov	r2, sp
 8002626:	4293      	cmp	r3, r2
 8002628:	d907      	bls.n	800263a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800262a:	f004 fc21 	bl	8006e70 <__errno>
 800262e:	4602      	mov	r2, r0
 8002630:	230c      	movs	r3, #12
 8002632:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
 8002638:	e006      	b.n	8002648 <_sbrk+0x48>
	}

	heap_end += incr;
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <_sbrk+0x50>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	4a03      	ldr	r2, [pc, #12]	; (8002650 <_sbrk+0x50>)
 8002644:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200008c0 	.word	0x200008c0
 8002654:	20005500 	.word	0x20005500

08002658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <SystemInit+0x60>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <SystemInit+0x60>)
 8002664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <SystemInit+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <SystemInit+0x64>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <SystemInit+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <SystemInit+0x64>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <SystemInit+0x64>)
 8002684:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <SystemInit+0x64>)
 8002690:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <SystemInit+0x68>)
 8002692:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <SystemInit+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a08      	ldr	r2, [pc, #32]	; (80026bc <SystemInit+0x64>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <SystemInit+0x64>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <SystemInit+0x60>)
 80026a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ac:	609a      	str	r2, [r3, #8]
#endif
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00
 80026bc:	40023800 	.word	0x40023800
 80026c0:	24003010 	.word	0x24003010

080026c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026ca:	e003      	b.n	80026d4 <LoopCopyDataInit>

080026cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026d2:	3104      	adds	r1, #4

080026d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026d4:	480b      	ldr	r0, [pc, #44]	; (8002704 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026dc:	d3f6      	bcc.n	80026cc <CopyDataInit>
  ldr  r2, =_sbss
 80026de:	4a0b      	ldr	r2, [pc, #44]	; (800270c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026e0:	e002      	b.n	80026e8 <LoopFillZerobss>

080026e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026e4:	f842 3b04 	str.w	r3, [r2], #4

080026e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026ec:	d3f9      	bcc.n	80026e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ee:	f7ff ffb3 	bl	8002658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f2:	f004 fbc3 	bl	8006e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f6:	f7ff f8a1 	bl	800183c <main>
  bx  lr    
 80026fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002700:	08008c80 	.word	0x08008c80
  ldr  r0, =_sdata
 8002704:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002708:	20000650 	.word	0x20000650
  ldr  r2, =_sbss
 800270c:	20000650 	.word	0x20000650
  ldr  r3, = _ebss
 8002710:	20005500 	.word	0x20005500

08002714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002714:	e7fe      	b.n	8002714 <ADC_IRQHandler>
	...

08002718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_Init+0x40>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <HAL_Init+0x40>)
 8002722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_Init+0x40>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_Init+0x40>)
 800272e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_Init+0x40>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_Init+0x40>)
 800273a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002740:	2003      	movs	r0, #3
 8002742:	f000 f8fa 	bl	800293a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002746:	2000      	movs	r0, #0
 8002748:	f7ff fed2 	bl	80024f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800274c:	f7ff fd12 	bl	8002174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00

0800275c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_IncTick+0x20>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_IncTick+0x24>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4413      	add	r3, r2
 800276c:	4a04      	ldr	r2, [pc, #16]	; (8002780 <HAL_IncTick+0x24>)
 800276e:	6013      	str	r3, [r2, #0]
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20000478 	.word	0x20000478
 8002780:	200054f8 	.word	0x200054f8

08002784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return uwTick;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_GetTick+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	200054f8 	.word	0x200054f8

0800279c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a4:	f7ff ffee 	bl	8002784 <HAL_GetTick>
 80027a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d005      	beq.n	80027c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_Delay+0x40>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4413      	add	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027c2:	bf00      	nop
 80027c4:	f7ff ffde 	bl	8002784 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d8f7      	bhi.n	80027c4 <HAL_Delay+0x28>
  {
  }
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000478 	.word	0x20000478

080027e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027fc:	4013      	ands	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800280c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002812:	4a04      	ldr	r2, [pc, #16]	; (8002824 <__NVIC_SetPriorityGrouping+0x44>)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	60d3      	str	r3, [r2, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <__NVIC_GetPriorityGrouping+0x18>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0a1b      	lsrs	r3, r3, #8
 8002832:	f003 0307 	and.w	r3, r3, #7
}
 8002836:	4618      	mov	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	2b00      	cmp	r3, #0
 8002854:	db0b      	blt.n	800286e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	4907      	ldr	r1, [pc, #28]	; (800287c <__NVIC_EnableIRQ+0x38>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2001      	movs	r0, #1
 8002866:	fa00 f202 	lsl.w	r2, r0, r2
 800286a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	e000e100 	.word	0xe000e100

08002880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	db0a      	blt.n	80028aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <__NVIC_SetPriority+0x4c>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	440b      	add	r3, r1
 80028a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028a8:	e00a      	b.n	80028c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4908      	ldr	r1, [pc, #32]	; (80028d0 <__NVIC_SetPriority+0x50>)
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	3b04      	subs	r3, #4
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	440b      	add	r3, r1
 80028be:	761a      	strb	r2, [r3, #24]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	e000e100 	.word	0xe000e100
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f1c3 0307 	rsb	r3, r3, #7
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	bf28      	it	cs
 80028f2:	2304      	movcs	r3, #4
 80028f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d902      	bls.n	8002904 <NVIC_EncodePriority+0x30>
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3b03      	subs	r3, #3
 8002902:	e000      	b.n	8002906 <NVIC_EncodePriority+0x32>
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43da      	mvns	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	401a      	ands	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800291c:	f04f 31ff 	mov.w	r1, #4294967295
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	43d9      	mvns	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	4313      	orrs	r3, r2
         );
}
 800292e:	4618      	mov	r0, r3
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ff4c 	bl	80027e0 <__NVIC_SetPriorityGrouping>
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
 800295c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002962:	f7ff ff61 	bl	8002828 <__NVIC_GetPriorityGrouping>
 8002966:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	6978      	ldr	r0, [r7, #20]
 800296e:	f7ff ffb1 	bl	80028d4 <NVIC_EncodePriority>
 8002972:	4602      	mov	r2, r0
 8002974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff80 	bl	8002880 <__NVIC_SetPriority>
}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff54 	bl	8002844 <__NVIC_EnableIRQ>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d004      	beq.n	80029c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e00c      	b.n	80029dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2205      	movs	r2, #5
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e16b      	b.n	8002cdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	f040 815a 	bne.w	8002cd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x4a>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b12      	cmp	r3, #18
 8002a30:	d123      	bne.n	8002a7a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	08da      	lsrs	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3208      	adds	r2, #8
 8002a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	220f      	movs	r2, #15
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4013      	ands	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	69b9      	ldr	r1, [r7, #24]
 8002a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0203 	and.w	r2, r3, #3
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d00b      	beq.n	8002ace <HAL_GPIO_Init+0xe6>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d007      	beq.n	8002ace <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac2:	2b11      	cmp	r3, #17
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b12      	cmp	r3, #18
 8002acc:	d130      	bne.n	8002b30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2203      	movs	r2, #3
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 0201 	and.w	r2, r3, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80b4 	beq.w	8002cd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b5f      	ldr	r3, [pc, #380]	; (8002cf0 <HAL_GPIO_Init+0x308>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	4a5e      	ldr	r2, [pc, #376]	; (8002cf0 <HAL_GPIO_Init+0x308>)
 8002b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7e:	4b5c      	ldr	r3, [pc, #368]	; (8002cf0 <HAL_GPIO_Init+0x308>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b8a:	4a5a      	ldr	r2, [pc, #360]	; (8002cf4 <HAL_GPIO_Init+0x30c>)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a51      	ldr	r2, [pc, #324]	; (8002cf8 <HAL_GPIO_Init+0x310>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d02b      	beq.n	8002c0e <HAL_GPIO_Init+0x226>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a50      	ldr	r2, [pc, #320]	; (8002cfc <HAL_GPIO_Init+0x314>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d025      	beq.n	8002c0a <HAL_GPIO_Init+0x222>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4f      	ldr	r2, [pc, #316]	; (8002d00 <HAL_GPIO_Init+0x318>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <HAL_GPIO_Init+0x21e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4e      	ldr	r2, [pc, #312]	; (8002d04 <HAL_GPIO_Init+0x31c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x21a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4d      	ldr	r2, [pc, #308]	; (8002d08 <HAL_GPIO_Init+0x320>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x216>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4c      	ldr	r2, [pc, #304]	; (8002d0c <HAL_GPIO_Init+0x324>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x212>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4b      	ldr	r2, [pc, #300]	; (8002d10 <HAL_GPIO_Init+0x328>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x20e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4a      	ldr	r2, [pc, #296]	; (8002d14 <HAL_GPIO_Init+0x32c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x20a>
 8002bee:	2307      	movs	r3, #7
 8002bf0:	e00e      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	e00c      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	e00a      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bfa:	2305      	movs	r3, #5
 8002bfc:	e008      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c02:	2303      	movs	r3, #3
 8002c04:	e004      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e002      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f002 0203 	and.w	r2, r2, #3
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	4093      	lsls	r3, r2
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c20:	4934      	ldr	r1, [pc, #208]	; (8002cf4 <HAL_GPIO_Init+0x30c>)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c2e:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c52:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c58:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c7c:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ca6:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cac:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cd0:	4a11      	ldr	r2, [pc, #68]	; (8002d18 <HAL_GPIO_Init+0x330>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	f67f ae90 	bls.w	8002a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	3724      	adds	r7, #36	; 0x24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	40020400 	.word	0x40020400
 8002d00:	40020800 	.word	0x40020800
 8002d04:	40020c00 	.word	0x40020c00
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40021400 	.word	0x40021400
 8002d10:	40021800 	.word	0x40021800
 8002d14:	40021c00 	.word	0x40021c00
 8002d18:	40013c00 	.word	0x40013c00

08002d1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
 8002d38:	e001      	b.n	8002d3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d5c:	787b      	ldrb	r3, [r7, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d68:	e003      	b.n	8002d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	041a      	lsls	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	619a      	str	r2, [r3, #24]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	460b      	mov	r3, r1
 8002d88:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	401a      	ands	r2, r3
 8002d92:	887b      	ldrh	r3, [r7, #2]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d104      	bne.n	8002da2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d98:	887b      	ldrh	r3, [r7, #2]
 8002d9a:	041a      	lsls	r2, r3, #16
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	619a      	str	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e10f      	b.n	8002fe6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff f9f6 	bl	80021cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df8:	f001 fe0a 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8002dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a7b      	ldr	r2, [pc, #492]	; (8002ff0 <HAL_I2C_Init+0x23c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d807      	bhi.n	8002e18 <HAL_I2C_Init+0x64>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <HAL_I2C_Init+0x240>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e006      	b.n	8002e26 <HAL_I2C_Init+0x72>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a77      	ldr	r2, [pc, #476]	; (8002ff8 <HAL_I2C_Init+0x244>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bf94      	ite	ls
 8002e20:	2301      	movls	r3, #1
 8002e22:	2300      	movhi	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0db      	b.n	8002fe6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a72      	ldr	r2, [pc, #456]	; (8002ffc <HAL_I2C_Init+0x248>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a64      	ldr	r2, [pc, #400]	; (8002ff0 <HAL_I2C_Init+0x23c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d802      	bhi.n	8002e68 <HAL_I2C_Init+0xb4>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3301      	adds	r3, #1
 8002e66:	e009      	b.n	8002e7c <HAL_I2C_Init+0xc8>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	4a63      	ldr	r2, [pc, #396]	; (8003000 <HAL_I2C_Init+0x24c>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4956      	ldr	r1, [pc, #344]	; (8002ff0 <HAL_I2C_Init+0x23c>)
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	d80d      	bhi.n	8002eb8 <HAL_I2C_Init+0x104>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e59      	subs	r1, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	bf38      	it	cc
 8002eb4:	2304      	movcc	r3, #4
 8002eb6:	e04f      	b.n	8002f58 <HAL_I2C_Init+0x1a4>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d111      	bne.n	8002ee4 <HAL_I2C_Init+0x130>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1e58      	subs	r0, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	440b      	add	r3, r1
 8002ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e012      	b.n	8002f0a <HAL_I2C_Init+0x156>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	1e58      	subs	r0, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	0099      	lsls	r1, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Init+0x15e>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e022      	b.n	8002f58 <HAL_I2C_Init+0x1a4>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10e      	bne.n	8002f38 <HAL_I2C_Init+0x184>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1e58      	subs	r0, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6859      	ldr	r1, [r3, #4]
 8002f22:	460b      	mov	r3, r1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	440b      	add	r3, r1
 8002f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f36:	e00f      	b.n	8002f58 <HAL_I2C_Init+0x1a4>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1e58      	subs	r0, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	0099      	lsls	r1, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	6809      	ldr	r1, [r1, #0]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6911      	ldr	r1, [r2, #16]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68d2      	ldr	r2, [r2, #12]
 8002f92:	4311      	orrs	r1, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	000186a0 	.word	0x000186a0
 8002ff4:	001e847f 	.word	0x001e847f
 8002ff8:	003d08ff 	.word	0x003d08ff
 8002ffc:	431bde83 	.word	0x431bde83
 8003000:	10624dd3 	.word	0x10624dd3

08003004 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	461a      	mov	r2, r3
 8003010:	460b      	mov	r3, r1
 8003012:	817b      	strh	r3, [r7, #10]
 8003014:	4613      	mov	r3, r2
 8003016:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003018:	f7ff fbb4 	bl	8002784 <HAL_GetTick>
 800301c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b20      	cmp	r3, #32
 8003028:	f040 80e0 	bne.w	80031ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2319      	movs	r3, #25
 8003032:	2201      	movs	r2, #1
 8003034:	4970      	ldr	r1, [pc, #448]	; (80031f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 ff2a 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
 8003044:	e0d3      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_I2C_Master_Transmit+0x50>
 8003050:	2302      	movs	r3, #2
 8003052:	e0cc      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d007      	beq.n	800307a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003088:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2221      	movs	r2, #33	; 0x21
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2210      	movs	r2, #16
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	893a      	ldrh	r2, [r7, #8]
 80030aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a50      	ldr	r2, [pc, #320]	; (80031fc <HAL_I2C_Master_Transmit+0x1f8>)
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	6a3a      	ldr	r2, [r7, #32]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 fce8 	bl	8003a98 <I2C_MasterRequestWrite>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e08d      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030e8:	e066      	b.n	80031b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	6a39      	ldr	r1, [r7, #32]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 ffa4 	bl	800403c <I2C_WaitOnTXEFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d107      	bne.n	8003112 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06b      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	781a      	ldrb	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d11b      	bne.n	800318c <HAL_I2C_Master_Transmit+0x188>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d017      	beq.n	800318c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	6a39      	ldr	r1, [r7, #32]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 ff94 	bl	80040be <I2C_WaitOnBTFFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d107      	bne.n	80031b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e01a      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d194      	bne.n	80030ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	00100002 	.word	0x00100002
 80031fc:	ffff0000 	.word	0xffff0000

08003200 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	461a      	mov	r2, r3
 800320c:	460b      	mov	r3, r1
 800320e:	817b      	strh	r3, [r7, #10]
 8003210:	4613      	mov	r3, r2
 8003212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7ff fab6 	bl	8002784 <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b20      	cmp	r3, #32
 8003224:	f040 820b 	bne.w	800363e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2319      	movs	r3, #25
 800322e:	2201      	movs	r2, #1
 8003230:	497c      	ldr	r1, [pc, #496]	; (8003424 <HAL_I2C_Master_Receive+0x224>)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fe2c 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
 8003240:	e1fe      	b.n	8003640 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_I2C_Master_Receive+0x50>
 800324c:	2302      	movs	r3, #2
 800324e:	e1f7      	b.n	8003640 <HAL_I2C_Master_Receive+0x440>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d007      	beq.n	8003276 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2222      	movs	r2, #34	; 0x22
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2210      	movs	r2, #16
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	893a      	ldrh	r2, [r7, #8]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a5c      	ldr	r2, [pc, #368]	; (8003428 <HAL_I2C_Master_Receive+0x228>)
 80032b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fc60 	bl	8003b84 <I2C_MasterRequestRead>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e1b8      	b.n	8003640 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d113      	bne.n	80032fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e18c      	b.n	8003618 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	2b01      	cmp	r3, #1
 8003304:	d11b      	bne.n	800333e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e16c      	b.n	8003618 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	2b02      	cmp	r3, #2
 8003344:	d11b      	bne.n	800337e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	e14c      	b.n	8003618 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800338c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	617b      	str	r3, [r7, #20]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033a4:	e138      	b.n	8003618 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	f200 80f1 	bhi.w	8003592 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d123      	bne.n	8003400 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 febf 	bl	8004140 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e139      	b.n	8003640 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033fe:	e10b      	b.n	8003618 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	2b02      	cmp	r3, #2
 8003406:	d14e      	bne.n	80034a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	2200      	movs	r2, #0
 8003410:	4906      	ldr	r1, [pc, #24]	; (800342c <HAL_I2C_Master_Receive+0x22c>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fd3c 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e10e      	b.n	8003640 <HAL_I2C_Master_Receive+0x440>
 8003422:	bf00      	nop
 8003424:	00100002 	.word	0x00100002
 8003428:	ffff0000 	.word	0xffff0000
 800342c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a4:	e0b8      	b.n	8003618 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	2200      	movs	r2, #0
 80034ae:	4966      	ldr	r1, [pc, #408]	; (8003648 <HAL_I2C_Master_Receive+0x448>)
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fced 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0bf      	b.n	8003640 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	2200      	movs	r2, #0
 800350a:	494f      	ldr	r1, [pc, #316]	; (8003648 <HAL_I2C_Master_Receive+0x448>)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fcbf 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e091      	b.n	8003640 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003590:	e042      	b.n	8003618 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fdd2 	bl	8004140 <I2C_WaitOnRXNEFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e04c      	b.n	8003640 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d118      	bne.n	8003618 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	f47f aec2 	bne.w	80033a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e000      	b.n	8003640 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800363e:	2302      	movs	r3, #2
  }
}
 8003640:	4618      	mov	r0, r3
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	00010004 	.word	0x00010004

0800364c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	; 0x30
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	4608      	mov	r0, r1
 8003656:	4611      	mov	r1, r2
 8003658:	461a      	mov	r2, r3
 800365a:	4603      	mov	r3, r0
 800365c:	817b      	strh	r3, [r7, #10]
 800365e:	460b      	mov	r3, r1
 8003660:	813b      	strh	r3, [r7, #8]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003666:	f7ff f88d 	bl	8002784 <HAL_GetTick>
 800366a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b20      	cmp	r3, #32
 8003676:	f040 8208 	bne.w	8003a8a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2319      	movs	r3, #25
 8003680:	2201      	movs	r2, #1
 8003682:	497b      	ldr	r1, [pc, #492]	; (8003870 <HAL_I2C_Mem_Read+0x224>)
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fc03 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
 8003692:	e1fb      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_I2C_Mem_Read+0x56>
 800369e:	2302      	movs	r3, #2
 80036a0:	e1f4      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d007      	beq.n	80036c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2222      	movs	r2, #34	; 0x22
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2240      	movs	r2, #64	; 0x40
 80036e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a5b      	ldr	r2, [pc, #364]	; (8003874 <HAL_I2C_Mem_Read+0x228>)
 8003708:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800370a:	88f8      	ldrh	r0, [r7, #6]
 800370c:	893a      	ldrh	r2, [r7, #8]
 800370e:	8979      	ldrh	r1, [r7, #10]
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	4603      	mov	r3, r0
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fae8 	bl	8003cf0 <I2C_RequestMemoryRead>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e1b0      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d113      	bne.n	800375a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003732:	2300      	movs	r3, #0
 8003734:	623b      	str	r3, [r7, #32]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	623b      	str	r3, [r7, #32]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	623b      	str	r3, [r7, #32]
 8003746:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e184      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	2b01      	cmp	r3, #1
 8003760:	d11b      	bne.n	800379a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e164      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d11b      	bne.n	80037da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c2:	2300      	movs	r3, #0
 80037c4:	61bb      	str	r3, [r7, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	e144      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037f0:	e138      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	f200 80f1 	bhi.w	80039de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	2b01      	cmp	r3, #1
 8003802:	d123      	bne.n	800384c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003806:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 fc99 	bl	8004140 <I2C_WaitOnRXNEFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e139      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	855a      	strh	r2, [r3, #42]	; 0x2a
 800384a:	e10b      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	2b02      	cmp	r3, #2
 8003852:	d14e      	bne.n	80038f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385a:	2200      	movs	r2, #0
 800385c:	4906      	ldr	r1, [pc, #24]	; (8003878 <HAL_I2C_Mem_Read+0x22c>)
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fb16 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e10e      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
 800386e:	bf00      	nop
 8003870:	00100002 	.word	0x00100002
 8003874:	ffff0000 	.word	0xffff0000
 8003878:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	1c5a      	adds	r2, r3, #1
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038f0:	e0b8      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	2200      	movs	r2, #0
 80038fa:	4966      	ldr	r1, [pc, #408]	; (8003a94 <HAL_I2C_Mem_Read+0x448>)
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fac7 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e0bf      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	2200      	movs	r2, #0
 8003956:	494f      	ldr	r1, [pc, #316]	; (8003a94 <HAL_I2C_Mem_Read+0x448>)
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fa99 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e091      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039dc:	e042      	b.n	8003a64 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fbac 	bl	8004140 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e04c      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d118      	bne.n	8003a64 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f47f aec2 	bne.w	80037f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3728      	adds	r7, #40	; 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	00010004 	.word	0x00010004

08003a98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d006      	beq.n	8003ac2 <I2C_MasterRequestWrite+0x2a>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d003      	beq.n	8003ac2 <I2C_MasterRequestWrite+0x2a>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ac0:	d108      	bne.n	8003ad4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e00b      	b.n	8003aec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	2b12      	cmp	r3, #18
 8003ada:	d107      	bne.n	8003aec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f9c9 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e035      	b.n	8003b74 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b10:	d108      	bne.n	8003b24 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b12:	897b      	ldrh	r3, [r7, #10]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b20:	611a      	str	r2, [r3, #16]
 8003b22:	e01b      	b.n	8003b5c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b24:	897b      	ldrh	r3, [r7, #10]
 8003b26:	11db      	asrs	r3, r3, #7
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0306 	and.w	r3, r3, #6
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f063 030f 	orn	r3, r3, #15
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	490e      	ldr	r1, [pc, #56]	; (8003b7c <I2C_MasterRequestWrite+0xe4>)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f9fb 	bl	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e010      	b.n	8003b74 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4907      	ldr	r1, [pc, #28]	; (8003b80 <I2C_MasterRequestWrite+0xe8>)
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f9eb 	bl	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	00010008 	.word	0x00010008
 8003b80:	00010002 	.word	0x00010002

08003b84 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	460b      	mov	r3, r1
 8003b92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ba8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d006      	beq.n	8003bbe <I2C_MasterRequestRead+0x3a>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d003      	beq.n	8003bbe <I2C_MasterRequestRead+0x3a>
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bbc:	d108      	bne.n	8003bd0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e00b      	b.n	8003be8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	2b11      	cmp	r3, #17
 8003bd6:	d107      	bne.n	8003be8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f94b 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e06d      	b.n	8003ce0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0c:	d108      	bne.n	8003c20 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c0e:	897b      	ldrh	r3, [r7, #10]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	611a      	str	r2, [r3, #16]
 8003c1e:	e053      	b.n	8003cc8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c20:	897b      	ldrh	r3, [r7, #10]
 8003c22:	11db      	asrs	r3, r3, #7
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	f003 0306 	and.w	r3, r3, #6
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f063 030f 	orn	r3, r3, #15
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	492a      	ldr	r1, [pc, #168]	; (8003ce8 <I2C_MasterRequestRead+0x164>)
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f97d 	bl	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e048      	b.n	8003ce0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c4e:	897b      	ldrh	r3, [r7, #10]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4923      	ldr	r1, [pc, #140]	; (8003cec <I2C_MasterRequestRead+0x168>)
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f96d 	bl	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e038      	b.n	8003ce0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f8f5 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e017      	b.n	8003ce0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003cb0:	897b      	ldrh	r3, [r7, #10]
 8003cb2:	11db      	asrs	r3, r3, #7
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f003 0306 	and.w	r3, r3, #6
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f063 030e 	orn	r3, r3, #14
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4907      	ldr	r1, [pc, #28]	; (8003cec <I2C_MasterRequestRead+0x168>)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f935 	bl	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	00010008 	.word	0x00010008
 8003cec:	00010002 	.word	0x00010002

08003cf0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	817b      	strh	r3, [r7, #10]
 8003d02:	460b      	mov	r3, r1
 8003d04:	813b      	strh	r3, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f8aa 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e09e      	b.n	8003e84 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d46:	897b      	ldrh	r3, [r7, #10]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	6a3a      	ldr	r2, [r7, #32]
 8003d5a:	494c      	ldr	r1, [pc, #304]	; (8003e8c <I2C_RequestMemoryRead+0x19c>)
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f8ee 	bl	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e08b      	b.n	8003e84 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d84:	6a39      	ldr	r1, [r7, #32]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f958 	bl	800403c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00d      	beq.n	8003dae <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d107      	bne.n	8003daa <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e06a      	b.n	8003e84 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db4:	893b      	ldrh	r3, [r7, #8]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	611a      	str	r2, [r3, #16]
 8003dbe:	e021      	b.n	8003e04 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dc0:	893b      	ldrh	r3, [r7, #8]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f932 	bl	800403c <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d107      	bne.n	8003df6 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e044      	b.n	8003e84 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dfa:	893b      	ldrh	r3, [r7, #8]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	6a39      	ldr	r1, [r7, #32]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f917 	bl	800403c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00d      	beq.n	8003e30 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d107      	bne.n	8003e2c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e029      	b.n	8003e84 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f81f 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e013      	b.n	8003e84 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e5c:	897b      	ldrh	r3, [r7, #10]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	6a3a      	ldr	r2, [r7, #32]
 8003e70:	4906      	ldr	r1, [pc, #24]	; (8003e8c <I2C_RequestMemoryRead+0x19c>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f863 	bl	8003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	00010002 	.word	0x00010002

08003e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea0:	e025      	b.n	8003eee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d021      	beq.n	8003eee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eaa:	f7fe fc6b 	bl	8002784 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d302      	bcc.n	8003ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d116      	bne.n	8003eee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e023      	b.n	8003f36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d10d      	bne.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	43da      	mvns	r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4013      	ands	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	e00c      	b.n	8003f2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d0b6      	beq.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]
 8003f4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f4c:	e051      	b.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5c:	d123      	bne.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f043 0204 	orr.w	r2, r3, #4
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e046      	b.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d021      	beq.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fae:	f7fe fbe9 	bl	8002784 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d302      	bcc.n	8003fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d116      	bne.n	8003ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f043 0220 	orr.w	r2, r3, #32
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e020      	b.n	8004034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d10c      	bne.n	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	43da      	mvns	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4013      	ands	r3, r2
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	bf14      	ite	ne
 800400e:	2301      	movne	r3, #1
 8004010:	2300      	moveq	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	e00b      	b.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	43da      	mvns	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d18d      	bne.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004048:	e02d      	b.n	80040a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8ce 	bl	80041ec <I2C_IsAcknowledgeFailed>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e02d      	b.n	80040b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d021      	beq.n	80040a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004062:	f7fe fb8f 	bl	8002784 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d116      	bne.n	80040a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f043 0220 	orr.w	r2, r3, #32
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e007      	b.n	80040b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b0:	2b80      	cmp	r3, #128	; 0x80
 80040b2:	d1ca      	bne.n	800404a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ca:	e02d      	b.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f88d 	bl	80041ec <I2C_IsAcknowledgeFailed>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e02d      	b.n	8004138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e2:	d021      	beq.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e4:	f7fe fb4e 	bl	8002784 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d116      	bne.n	8004128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e007      	b.n	8004138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d1ca      	bne.n	80040cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800414c:	e042      	b.n	80041d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b10      	cmp	r3, #16
 800415a:	d119      	bne.n	8004190 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0210 	mvn.w	r2, #16
 8004164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e029      	b.n	80041e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004190:	f7fe faf8 	bl	8002784 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	d302      	bcc.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d116      	bne.n	80041d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e007      	b.n	80041e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d1b5      	bne.n	800414e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004202:	d11b      	bne.n	800423c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800420c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f043 0204 	orr.w	r2, r3, #4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
	...

0800424c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e22d      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d075      	beq.n	8004356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800426a:	4ba3      	ldr	r3, [pc, #652]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 030c 	and.w	r3, r3, #12
 8004272:	2b04      	cmp	r3, #4
 8004274:	d00c      	beq.n	8004290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004276:	4ba0      	ldr	r3, [pc, #640]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800427e:	2b08      	cmp	r3, #8
 8004280:	d112      	bne.n	80042a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004282:	4b9d      	ldr	r3, [pc, #628]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800428e:	d10b      	bne.n	80042a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	4b99      	ldr	r3, [pc, #612]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d05b      	beq.n	8004354 <HAL_RCC_OscConfig+0x108>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d157      	bne.n	8004354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e208      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b0:	d106      	bne.n	80042c0 <HAL_RCC_OscConfig+0x74>
 80042b2:	4b91      	ldr	r3, [pc, #580]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a90      	ldr	r2, [pc, #576]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e01d      	b.n	80042fc <HAL_RCC_OscConfig+0xb0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x98>
 80042ca:	4b8b      	ldr	r3, [pc, #556]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a8a      	ldr	r2, [pc, #552]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b88      	ldr	r3, [pc, #544]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a87      	ldr	r2, [pc, #540]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e00b      	b.n	80042fc <HAL_RCC_OscConfig+0xb0>
 80042e4:	4b84      	ldr	r3, [pc, #528]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a83      	ldr	r2, [pc, #524]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80042ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	4b81      	ldr	r3, [pc, #516]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a80      	ldr	r2, [pc, #512]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80042f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d013      	beq.n	800432c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fe fa3e 	bl	8002784 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800430c:	f7fe fa3a 	bl	8002784 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e1cd      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431e:	4b76      	ldr	r3, [pc, #472]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0xc0>
 800432a:	e014      	b.n	8004356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fe fa2a 	bl	8002784 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004334:	f7fe fa26 	bl	8002784 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e1b9      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004346:	4b6c      	ldr	r3, [pc, #432]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0xe8>
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d063      	beq.n	800442a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004362:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436e:	4b62      	ldr	r3, [pc, #392]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004376:	2b08      	cmp	r3, #8
 8004378:	d11c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437a:	4b5f      	ldr	r3, [pc, #380]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d116      	bne.n	80043b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004386:	4b5c      	ldr	r3, [pc, #368]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_RCC_OscConfig+0x152>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d001      	beq.n	800439e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e18d      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439e:	4b56      	ldr	r3, [pc, #344]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4952      	ldr	r1, [pc, #328]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b2:	e03a      	b.n	800442a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d020      	beq.n	80043fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043bc:	4b4f      	ldr	r3, [pc, #316]	; (80044fc <HAL_RCC_OscConfig+0x2b0>)
 80043be:	2201      	movs	r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c2:	f7fe f9df 	bl	8002784 <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fe f9db 	bl	8002784 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e16e      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043dc:	4b46      	ldr	r3, [pc, #280]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0f0      	beq.n	80043ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e8:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4940      	ldr	r1, [pc, #256]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	600b      	str	r3, [r1, #0]
 80043fc:	e015      	b.n	800442a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fe:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <HAL_RCC_OscConfig+0x2b0>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fe f9be 	bl	8002784 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800440c:	f7fe f9ba 	bl	8002784 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e14d      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441e:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d030      	beq.n	8004498 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443e:	4b30      	ldr	r3, [pc, #192]	; (8004500 <HAL_RCC_OscConfig+0x2b4>)
 8004440:	2201      	movs	r2, #1
 8004442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fe f99e 	bl	8002784 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800444c:	f7fe f99a 	bl	8002784 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e12d      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445e:	4b26      	ldr	r3, [pc, #152]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 8004460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x200>
 800446a:	e015      	b.n	8004498 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800446c:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCC_OscConfig+0x2b4>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004472:	f7fe f987 	bl	8002784 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800447a:	f7fe f983 	bl	8002784 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e116      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448c:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 800448e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f0      	bne.n	800447a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80a0 	beq.w	80045e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044aa:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10f      	bne.n	80044d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	4a0e      	ldr	r2, [pc, #56]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6413      	str	r3, [r2, #64]	; 0x40
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044d2:	2301      	movs	r3, #1
 80044d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <HAL_RCC_OscConfig+0x2b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d121      	bne.n	8004526 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <HAL_RCC_OscConfig+0x2b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a07      	ldr	r2, [pc, #28]	; (8004504 <HAL_RCC_OscConfig+0x2b8>)
 80044e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ee:	f7fe f949 	bl	8002784 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	e011      	b.n	800451a <HAL_RCC_OscConfig+0x2ce>
 80044f6:	bf00      	nop
 80044f8:	40023800 	.word	0x40023800
 80044fc:	42470000 	.word	0x42470000
 8004500:	42470e80 	.word	0x42470e80
 8004504:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004508:	f7fe f93c 	bl	8002784 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0cf      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451a:	4b6a      	ldr	r3, [pc, #424]	; (80046c4 <HAL_RCC_OscConfig+0x478>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d106      	bne.n	800453c <HAL_RCC_OscConfig+0x2f0>
 800452e:	4b66      	ldr	r3, [pc, #408]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a65      	ldr	r2, [pc, #404]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
 800453a:	e01c      	b.n	8004576 <HAL_RCC_OscConfig+0x32a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b05      	cmp	r3, #5
 8004542:	d10c      	bne.n	800455e <HAL_RCC_OscConfig+0x312>
 8004544:	4b60      	ldr	r3, [pc, #384]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	4a5f      	ldr	r2, [pc, #380]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 800454a:	f043 0304 	orr.w	r3, r3, #4
 800454e:	6713      	str	r3, [r2, #112]	; 0x70
 8004550:	4b5d      	ldr	r3, [pc, #372]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	4a5c      	ldr	r2, [pc, #368]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6713      	str	r3, [r2, #112]	; 0x70
 800455c:	e00b      	b.n	8004576 <HAL_RCC_OscConfig+0x32a>
 800455e:	4b5a      	ldr	r3, [pc, #360]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	4a59      	ldr	r2, [pc, #356]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 8004564:	f023 0301 	bic.w	r3, r3, #1
 8004568:	6713      	str	r3, [r2, #112]	; 0x70
 800456a:	4b57      	ldr	r3, [pc, #348]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a56      	ldr	r2, [pc, #344]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 8004570:	f023 0304 	bic.w	r3, r3, #4
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d015      	beq.n	80045aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457e:	f7fe f901 	bl	8002784 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004586:	f7fe f8fd 	bl	8002784 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e08e      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459c:	4b4a      	ldr	r3, [pc, #296]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ee      	beq.n	8004586 <HAL_RCC_OscConfig+0x33a>
 80045a8:	e014      	b.n	80045d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045aa:	f7fe f8eb 	bl	8002784 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fe f8e7 	bl	8002784 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e078      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c8:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1ee      	bne.n	80045b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d105      	bne.n	80045e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045da:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a3a      	ldr	r2, [pc, #232]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 80045e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d064      	beq.n	80046b8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ee:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d05c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d141      	bne.n	8004686 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b32      	ldr	r3, [pc, #200]	; (80046cc <HAL_RCC_OscConfig+0x480>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fe f8bc 	bl	8002784 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004610:	f7fe f8b8 	bl	8002784 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e04b      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b29      	ldr	r3, [pc, #164]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	019b      	lsls	r3, r3, #6
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	3b01      	subs	r3, #1
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	491d      	ldr	r1, [pc, #116]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004658:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <HAL_RCC_OscConfig+0x480>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465e:	f7fe f891 	bl	8002784 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004666:	f7fe f88d 	bl	8002784 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e020      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x41a>
 8004684:	e018      	b.n	80046b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004686:	4b11      	ldr	r3, [pc, #68]	; (80046cc <HAL_RCC_OscConfig+0x480>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fe f87a 	bl	8002784 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004694:	f7fe f876 	bl	8002784 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e009      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <HAL_RCC_OscConfig+0x47c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x448>
 80046b2:	e001      	b.n	80046b8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40007000 	.word	0x40007000
 80046c8:	40023800 	.word	0x40023800
 80046cc:	42470060 	.word	0x42470060

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0ca      	b.n	800487a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046e4:	4b67      	ldr	r3, [pc, #412]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d90c      	bls.n	800470c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b64      	ldr	r3, [pc, #400]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b62      	ldr	r3, [pc, #392]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0b6      	b.n	800487a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d020      	beq.n	800475a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004724:	4b58      	ldr	r3, [pc, #352]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a57      	ldr	r2, [pc, #348]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 800472a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800472e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800473c:	4b52      	ldr	r3, [pc, #328]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4a51      	ldr	r2, [pc, #324]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004748:	4b4f      	ldr	r3, [pc, #316]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	494c      	ldr	r1, [pc, #304]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d044      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b46      	ldr	r3, [pc, #280]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d119      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e07d      	b.n	800487a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d003      	beq.n	800478e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478a:	2b03      	cmp	r3, #3
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	4b3e      	ldr	r3, [pc, #248]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e06d      	b.n	800487a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479e:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e065      	b.n	800487a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ae:	4b36      	ldr	r3, [pc, #216]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4933      	ldr	r1, [pc, #204]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c0:	f7fd ffe0 	bl	8002784 <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	e00a      	b.n	80047de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c8:	f7fd ffdc 	bl	8002784 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e04d      	b.n	800487a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 020c 	and.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1eb      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047f0:	4b24      	ldr	r3, [pc, #144]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d20c      	bcs.n	8004818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b21      	ldr	r3, [pc, #132]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <HAL_RCC_ClockConfig+0x1b4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e030      	b.n	800487a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d008      	beq.n	8004836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4915      	ldr	r1, [pc, #84]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004842:	4b11      	ldr	r3, [pc, #68]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	490d      	ldr	r1, [pc, #52]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004856:	f000 f81d 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 800485a:	4601      	mov	r1, r0
 800485c:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <HAL_RCC_ClockConfig+0x1b8>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	091b      	lsrs	r3, r3, #4
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	5cd3      	ldrb	r3, [r2, r3]
 800486a:	fa21 f303 	lsr.w	r3, r1, r3
 800486e:	4a08      	ldr	r2, [pc, #32]	; (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004872:	2000      	movs	r0, #0
 8004874:	f7fd fe3c 	bl	80024f0 <HAL_InitTick>

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40023c00 	.word	0x40023c00
 8004888:	40023800 	.word	0x40023800
 800488c:	08008a2c 	.word	0x08008a2c
 8004890:	20000474 	.word	0x20000474

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048aa:	4b50      	ldr	r3, [pc, #320]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d007      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x32>
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d008      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x38>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f040 808d 	bne.w	80049da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4b4b      	ldr	r3, [pc, #300]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80048c2:	60bb      	str	r3, [r7, #8]
       break;
 80048c4:	e08c      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048c6:	4b4b      	ldr	r3, [pc, #300]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048c8:	60bb      	str	r3, [r7, #8]
      break;
 80048ca:	e089      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048cc:	4b47      	ldr	r3, [pc, #284]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048d6:	4b45      	ldr	r3, [pc, #276]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d023      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e2:	4b42      	ldr	r3, [pc, #264]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	099b      	lsrs	r3, r3, #6
 80048e8:	f04f 0400 	mov.w	r4, #0
 80048ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	ea03 0501 	and.w	r5, r3, r1
 80048f8:	ea04 0602 	and.w	r6, r4, r2
 80048fc:	4a3d      	ldr	r2, [pc, #244]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048fe:	fb02 f106 	mul.w	r1, r2, r6
 8004902:	2200      	movs	r2, #0
 8004904:	fb02 f205 	mul.w	r2, r2, r5
 8004908:	440a      	add	r2, r1
 800490a:	493a      	ldr	r1, [pc, #232]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800490c:	fba5 0101 	umull	r0, r1, r5, r1
 8004910:	1853      	adds	r3, r2, r1
 8004912:	4619      	mov	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f04f 0400 	mov.w	r4, #0
 800491a:	461a      	mov	r2, r3
 800491c:	4623      	mov	r3, r4
 800491e:	f7fc f8f3 	bl	8000b08 <__aeabi_uldivmod>
 8004922:	4603      	mov	r3, r0
 8004924:	460c      	mov	r4, r1
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	e049      	b.n	80049be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492a:	4b30      	ldr	r3, [pc, #192]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	f04f 0400 	mov.w	r4, #0
 8004934:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	ea03 0501 	and.w	r5, r3, r1
 8004940:	ea04 0602 	and.w	r6, r4, r2
 8004944:	4629      	mov	r1, r5
 8004946:	4632      	mov	r2, r6
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	f04f 0400 	mov.w	r4, #0
 8004950:	0154      	lsls	r4, r2, #5
 8004952:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004956:	014b      	lsls	r3, r1, #5
 8004958:	4619      	mov	r1, r3
 800495a:	4622      	mov	r2, r4
 800495c:	1b49      	subs	r1, r1, r5
 800495e:	eb62 0206 	sbc.w	r2, r2, r6
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	f04f 0400 	mov.w	r4, #0
 800496a:	0194      	lsls	r4, r2, #6
 800496c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004970:	018b      	lsls	r3, r1, #6
 8004972:	1a5b      	subs	r3, r3, r1
 8004974:	eb64 0402 	sbc.w	r4, r4, r2
 8004978:	f04f 0100 	mov.w	r1, #0
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	00e2      	lsls	r2, r4, #3
 8004982:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004986:	00d9      	lsls	r1, r3, #3
 8004988:	460b      	mov	r3, r1
 800498a:	4614      	mov	r4, r2
 800498c:	195b      	adds	r3, r3, r5
 800498e:	eb44 0406 	adc.w	r4, r4, r6
 8004992:	f04f 0100 	mov.w	r1, #0
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	02a2      	lsls	r2, r4, #10
 800499c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049a0:	0299      	lsls	r1, r3, #10
 80049a2:	460b      	mov	r3, r1
 80049a4:	4614      	mov	r4, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	4621      	mov	r1, r4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f04f 0400 	mov.w	r4, #0
 80049b0:	461a      	mov	r2, r3
 80049b2:	4623      	mov	r3, r4
 80049b4:	f7fc f8a8 	bl	8000b08 <__aeabi_uldivmod>
 80049b8:	4603      	mov	r3, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049be:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_RCC_GetSysClockFreq+0x158>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	3301      	adds	r3, #1
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	60bb      	str	r3, [r7, #8]
      break;
 80049d8:	e002      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80049dc:	60bb      	str	r3, [r7, #8]
      break;
 80049de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e0:	68bb      	ldr	r3, [r7, #8]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	00f42400 	.word	0x00f42400
 80049f4:	017d7840 	.word	0x017d7840

080049f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80049fe:	681b      	ldr	r3, [r3, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000474 	.word	0x20000474

08004a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a14:	f7ff fff0 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a18:	4601      	mov	r1, r0
 8004a1a:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	0a9b      	lsrs	r3, r3, #10
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4a03      	ldr	r2, [pc, #12]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a26:	5cd3      	ldrb	r3, [r2, r3]
 8004a28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40023800 	.word	0x40023800
 8004a34:	08008a3c 	.word	0x08008a3c

08004a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a3c:	f7ff ffdc 	bl	80049f8 <HAL_RCC_GetHCLKFreq>
 8004a40:	4601      	mov	r1, r0
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	0b5b      	lsrs	r3, r3, #13
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	4a03      	ldr	r2, [pc, #12]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	08008a3c 	.word	0x08008a3c

08004a60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a70:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_RCC_GetClockConfig+0x5c>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 0203 	and.w	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <HAL_RCC_GetClockConfig+0x5c>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <HAL_RCC_GetClockConfig+0x5c>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a94:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_RCC_GetClockConfig+0x5c>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	08db      	lsrs	r3, r3, #3
 8004a9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004aa2:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <HAL_RCC_GetClockConfig+0x60>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 020f 	and.w	r2, r3, #15
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	601a      	str	r2, [r3, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	40023c00 	.word	0x40023c00

08004ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e01d      	b.n	8004b12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f815 	bl	8004b1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f000 f968 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b06      	cmp	r3, #6
 8004b56:	d007      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d122      	bne.n	8004bd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d11b      	bne.n	8004bd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f06f 0202 	mvn.w	r2, #2
 8004ba2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f8ee 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004bbe:	e005      	b.n	8004bcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f8e0 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8f1 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d122      	bne.n	8004c26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d11b      	bne.n	8004c26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f06f 0204 	mvn.w	r2, #4
 8004bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8c4 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004c12:	e005      	b.n	8004c20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f8b6 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f8c7 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d122      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d11b      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f06f 0208 	mvn.w	r2, #8
 8004c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f89a 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004c66:	e005      	b.n	8004c74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f88c 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f89d 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d122      	bne.n	8004cce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b10      	cmp	r3, #16
 8004c94:	d11b      	bne.n	8004cce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f06f 0210 	mvn.w	r2, #16
 8004c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2208      	movs	r2, #8
 8004ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f870 	bl	8004d9a <HAL_TIM_IC_CaptureCallback>
 8004cba:	e005      	b.n	8004cc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f862 	bl	8004d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f873 	bl	8004dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d10e      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d107      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f06f 0201 	mvn.w	r2, #1
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fd fa23 	bl	8002140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d10e      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d12:	2b80      	cmp	r3, #128	; 0x80
 8004d14:	d107      	bne.n	8004d26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f903 	bl	8004f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d10e      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f838 	bl	8004dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d10e      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d107      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f06f 0220 	mvn.w	r2, #32
 8004d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f8cd 	bl	8004f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a40      	ldr	r2, [pc, #256]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d00f      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3d      	ldr	r2, [pc, #244]	; (8004ef0 <TIM_Base_SetConfig+0x118>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a3c      	ldr	r2, [pc, #240]	; (8004ef4 <TIM_Base_SetConfig+0x11c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a3b      	ldr	r2, [pc, #236]	; (8004ef8 <TIM_Base_SetConfig+0x120>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a3a      	ldr	r2, [pc, #232]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d108      	bne.n	8004e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d02b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e38:	d027      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <TIM_Base_SetConfig+0x118>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d023      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <TIM_Base_SetConfig+0x11c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01f      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <TIM_Base_SetConfig+0x120>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a29      	ldr	r2, [pc, #164]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d017      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a28      	ldr	r2, [pc, #160]	; (8004f00 <TIM_Base_SetConfig+0x128>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d013      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a27      	ldr	r2, [pc, #156]	; (8004f04 <TIM_Base_SetConfig+0x12c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00f      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a26      	ldr	r2, [pc, #152]	; (8004f08 <TIM_Base_SetConfig+0x130>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00b      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <TIM_Base_SetConfig+0x134>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d007      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a24      	ldr	r2, [pc, #144]	; (8004f10 <TIM_Base_SetConfig+0x138>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d003      	beq.n	8004e8a <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a23      	ldr	r2, [pc, #140]	; (8004f14 <TIM_Base_SetConfig+0x13c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d108      	bne.n	8004e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	; (8004eec <TIM_Base_SetConfig+0x114>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0xf8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a0c      	ldr	r2, [pc, #48]	; (8004efc <TIM_Base_SetConfig+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d103      	bne.n	8004ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	615a      	str	r2, [r3, #20]
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40010400 	.word	0x40010400
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40014400 	.word	0x40014400
 8004f08:	40014800 	.word	0x40014800
 8004f0c:	40001800 	.word	0x40001800
 8004f10:	40001c00 	.word	0x40001c00
 8004f14:	40002000 	.word	0x40002000

08004f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e03f      	b.n	8004fd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fd fa06 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2224      	movs	r2, #36	; 0x24
 8004f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fb47 	bl	8005618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695a      	ldr	r2, [r3, #20]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b088      	sub	sp, #32
 8004fde:	af02      	add	r7, sp, #8
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	603b      	str	r3, [r7, #0]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	f040 8083 	bne.w	8005102 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_UART_Transmit+0x2e>
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e07b      	b.n	8005104 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_UART_Transmit+0x40>
 8005016:	2302      	movs	r3, #2
 8005018:	e074      	b.n	8005104 <HAL_UART_Transmit+0x12a>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2221      	movs	r2, #33	; 0x21
 800502c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005030:	f7fd fba8 	bl	8002784 <HAL_GetTick>
 8005034:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	88fa      	ldrh	r2, [r7, #6]
 800503a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	88fa      	ldrh	r2, [r7, #6]
 8005040:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005042:	e042      	b.n	80050ca <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505a:	d122      	bne.n	80050a2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2200      	movs	r2, #0
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f96a 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e046      	b.n	8005104 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005088:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	3302      	adds	r3, #2
 8005096:	60bb      	str	r3, [r7, #8]
 8005098:	e017      	b.n	80050ca <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	3301      	adds	r3, #1
 800509e:	60bb      	str	r3, [r7, #8]
 80050a0:	e013      	b.n	80050ca <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2180      	movs	r1, #128	; 0x80
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f947 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e023      	b.n	8005104 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	60ba      	str	r2, [r7, #8]
 80050c2:	781a      	ldrb	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1b7      	bne.n	8005044 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2200      	movs	r2, #0
 80050dc:	2140      	movs	r1, #64	; 0x40
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f92e 	bl	8005340 <UART_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e00a      	b.n	8005104 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800512c:	2300      	movs	r3, #0
 800512e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10d      	bne.n	800515e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_UART_IRQHandler+0x52>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f9dc 	bl	8005514 <UART_Receive_IT>
      return;
 800515c:	e0cc      	b.n	80052f8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80ab 	beq.w	80052bc <HAL_UART_IRQHandler+0x1b0>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d105      	bne.n	800517c <HAL_UART_IRQHandler+0x70>
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005176:	2b00      	cmp	r3, #0
 8005178:	f000 80a0 	beq.w	80052bc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_UART_IRQHandler+0x90>
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005194:	f043 0201 	orr.w	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_UART_IRQHandler+0xb0>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	f043 0202 	orr.w	r2, r3, #2
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_UART_IRQHandler+0xd0>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d4:	f043 0204 	orr.w	r2, r3, #4
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_UART_IRQHandler+0xf0>
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f4:	f043 0208 	orr.w	r2, r3, #8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d078      	beq.n	80052f6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	f003 0320 	and.w	r3, r3, #32
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <HAL_UART_IRQHandler+0x112>
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f97b 	bl	8005514 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d102      	bne.n	8005246 <HAL_UART_IRQHandler+0x13a>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d031      	beq.n	80052aa <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f8c4 	bl	80053d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d123      	bne.n	80052a2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005268:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	2b00      	cmp	r3, #0
 8005270:	d013      	beq.n	800529a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	4a22      	ldr	r2, [pc, #136]	; (8005300 <HAL_UART_IRQHandler+0x1f4>)
 8005278:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	4618      	mov	r0, r3
 8005280:	f7fd fb90 	bl	80029a4 <HAL_DMA_Abort_IT>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d016      	beq.n	80052b8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005294:	4610      	mov	r0, r2
 8005296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005298:	e00e      	b.n	80052b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f846 	bl	800532c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a0:	e00a      	b.n	80052b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f842 	bl	800532c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052a8:	e006      	b.n	80052b8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f83e 	bl	800532c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80052b6:	e01e      	b.n	80052f6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	bf00      	nop
    return;
 80052ba:	e01c      	b.n	80052f6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d008      	beq.n	80052d8 <HAL_UART_IRQHandler+0x1cc>
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f8b1 	bl	8005438 <UART_Transmit_IT>
    return;
 80052d6:	e00f      	b.n	80052f8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00a      	beq.n	80052f8 <HAL_UART_IRQHandler+0x1ec>
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8f9 	bl	80054e4 <UART_EndTransmit_IT>
    return;
 80052f2:	bf00      	nop
 80052f4:	e000      	b.n	80052f8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80052f6:	bf00      	nop
  }
}
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	08005411 	.word	0x08005411

08005304 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	4613      	mov	r3, r2
 800534e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005350:	e02c      	b.n	80053ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d028      	beq.n	80053ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <UART_WaitOnFlagUntilTimeout+0x30>
 8005360:	f7fd fa10 	bl	8002784 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	429a      	cmp	r2, r3
 800536e:	d21d      	bcs.n	80053ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800537e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e00f      	b.n	80053cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	4013      	ands	r3, r2
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	bf0c      	ite	eq
 80053bc:	2301      	moveq	r3, #1
 80053be:	2300      	movne	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d0c3      	beq.n	8005352 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff ff7e 	bl	800532c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b21      	cmp	r3, #33	; 0x21
 800544a:	d144      	bne.n	80054d6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d11a      	bne.n	800548c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	461a      	mov	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800546a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d105      	bne.n	8005480 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	621a      	str	r2, [r3, #32]
 800547e:	e00e      	b.n	800549e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	621a      	str	r2, [r3, #32]
 800548a:	e008      	b.n	800549e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	1c59      	adds	r1, r3, #1
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6211      	str	r1, [r2, #32]
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4619      	mov	r1, r3
 80054ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10f      	bne.n	80054d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e000      	b.n	80054d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
  }
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff fefd 	bl	8005304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b22      	cmp	r3, #34	; 0x22
 8005526:	d171      	bne.n	800560c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005530:	d123      	bne.n	800557a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10e      	bne.n	800555e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	b29b      	uxth	r3, r3
 8005548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	1c9a      	adds	r2, r3, #2
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	629a      	str	r2, [r3, #40]	; 0x28
 800555c:	e029      	b.n	80055b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	b29b      	uxth	r3, r3
 8005566:	b2db      	uxtb	r3, r3
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	629a      	str	r2, [r3, #40]	; 0x28
 8005578:	e01b      	b.n	80055b2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6858      	ldr	r0, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	1c59      	adds	r1, r3, #1
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6291      	str	r1, [r2, #40]	; 0x28
 8005592:	b2c2      	uxtb	r2, r0
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e00c      	b.n	80055b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	1c58      	adds	r0, r3, #1
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	6288      	str	r0, [r1, #40]	; 0x28
 80055aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4619      	mov	r1, r3
 80055c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d120      	bne.n	8005608 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0220 	bic.w	r2, r2, #32
 80055d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695a      	ldr	r2, [r3, #20]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fe8a 	bl	8005318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	e002      	b.n	800560e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	e000      	b.n	800560e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800560c:	2302      	movs	r3, #2
  }
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005618:	b5b0      	push	{r4, r5, r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005658:	f023 030c 	bic.w	r3, r3, #12
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	68f9      	ldr	r1, [r7, #12]
 8005662:	430b      	orrs	r3, r1
 8005664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699a      	ldr	r2, [r3, #24]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005684:	f040 80e4 	bne.w	8005850 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4aab      	ldr	r2, [pc, #684]	; (800593c <UART_SetConfig+0x324>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <UART_SetConfig+0x84>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4aaa      	ldr	r2, [pc, #680]	; (8005940 <UART_SetConfig+0x328>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d16c      	bne.n	8005776 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800569c:	f7ff f9cc 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 80056a0:	4602      	mov	r2, r0
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009a      	lsls	r2, r3, #2
 80056aa:	441a      	add	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	4aa3      	ldr	r2, [pc, #652]	; (8005944 <UART_SetConfig+0x32c>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	011c      	lsls	r4, r3, #4
 80056c0:	f7ff f9ba 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	009a      	lsls	r2, r3, #2
 80056ce:	441a      	add	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	fbb2 f5f3 	udiv	r5, r2, r3
 80056da:	f7ff f9ad 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 80056de:	4602      	mov	r2, r0
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	009a      	lsls	r2, r3, #2
 80056e8:	441a      	add	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f4:	4a93      	ldr	r2, [pc, #588]	; (8005944 <UART_SetConfig+0x32c>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	2264      	movs	r2, #100	; 0x64
 80056fe:	fb02 f303 	mul.w	r3, r2, r3
 8005702:	1aeb      	subs	r3, r5, r3
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	3332      	adds	r3, #50	; 0x32
 8005708:	4a8e      	ldr	r2, [pc, #568]	; (8005944 <UART_SetConfig+0x32c>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005716:	441c      	add	r4, r3
 8005718:	f7ff f98e 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 800571c:	4602      	mov	r2, r0
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	009a      	lsls	r2, r3, #2
 8005726:	441a      	add	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005732:	f7ff f981 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8005736:	4602      	mov	r2, r0
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	009a      	lsls	r2, r3, #2
 8005740:	441a      	add	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	4a7d      	ldr	r2, [pc, #500]	; (8005944 <UART_SetConfig+0x32c>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	2264      	movs	r2, #100	; 0x64
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	1aeb      	subs	r3, r5, r3
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	3332      	adds	r3, #50	; 0x32
 8005760:	4a78      	ldr	r2, [pc, #480]	; (8005944 <UART_SetConfig+0x32c>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	f003 0207 	and.w	r2, r3, #7
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4422      	add	r2, r4
 8005772:	609a      	str	r2, [r3, #8]
 8005774:	e154      	b.n	8005a20 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005776:	f7ff f94b 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 800577a:	4602      	mov	r2, r0
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009a      	lsls	r2, r3, #2
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	4a6c      	ldr	r2, [pc, #432]	; (8005944 <UART_SetConfig+0x32c>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	011c      	lsls	r4, r3, #4
 800579a:	f7ff f939 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 800579e:	4602      	mov	r2, r0
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	009a      	lsls	r2, r3, #2
 80057a8:	441a      	add	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80057b4:	f7ff f92c 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 80057b8:	4602      	mov	r2, r0
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	009a      	lsls	r2, r3, #2
 80057c2:	441a      	add	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ce:	4a5d      	ldr	r2, [pc, #372]	; (8005944 <UART_SetConfig+0x32c>)
 80057d0:	fba2 2303 	umull	r2, r3, r2, r3
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	2264      	movs	r2, #100	; 0x64
 80057d8:	fb02 f303 	mul.w	r3, r2, r3
 80057dc:	1aeb      	subs	r3, r5, r3
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	3332      	adds	r3, #50	; 0x32
 80057e2:	4a58      	ldr	r2, [pc, #352]	; (8005944 <UART_SetConfig+0x32c>)
 80057e4:	fba2 2303 	umull	r2, r3, r2, r3
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057f0:	441c      	add	r4, r3
 80057f2:	f7ff f90d 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 80057f6:	4602      	mov	r2, r0
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	009a      	lsls	r2, r3, #2
 8005800:	441a      	add	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	fbb2 f5f3 	udiv	r5, r2, r3
 800580c:	f7ff f900 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8005810:	4602      	mov	r2, r0
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009a      	lsls	r2, r3, #2
 800581a:	441a      	add	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	fbb2 f3f3 	udiv	r3, r2, r3
 8005826:	4a47      	ldr	r2, [pc, #284]	; (8005944 <UART_SetConfig+0x32c>)
 8005828:	fba2 2303 	umull	r2, r3, r2, r3
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	2264      	movs	r2, #100	; 0x64
 8005830:	fb02 f303 	mul.w	r3, r2, r3
 8005834:	1aeb      	subs	r3, r5, r3
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	3332      	adds	r3, #50	; 0x32
 800583a:	4a42      	ldr	r2, [pc, #264]	; (8005944 <UART_SetConfig+0x32c>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f003 0207 	and.w	r2, r3, #7
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4422      	add	r2, r4
 800584c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800584e:	e0e7      	b.n	8005a20 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a39      	ldr	r2, [pc, #228]	; (800593c <UART_SetConfig+0x324>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <UART_SetConfig+0x24c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a38      	ldr	r2, [pc, #224]	; (8005940 <UART_SetConfig+0x328>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d171      	bne.n	8005948 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005864:	f7ff f8e8 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 8005868:	4602      	mov	r2, r0
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009a      	lsls	r2, r3, #2
 8005872:	441a      	add	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	fbb2 f3f3 	udiv	r3, r2, r3
 800587e:	4a31      	ldr	r2, [pc, #196]	; (8005944 <UART_SetConfig+0x32c>)
 8005880:	fba2 2303 	umull	r2, r3, r2, r3
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	011c      	lsls	r4, r3, #4
 8005888:	f7ff f8d6 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 800588c:	4602      	mov	r2, r0
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009a      	lsls	r2, r3, #2
 8005896:	441a      	add	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	fbb2 f5f3 	udiv	r5, r2, r3
 80058a2:	f7ff f8c9 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 80058a6:	4602      	mov	r2, r0
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009a      	lsls	r2, r3, #2
 80058b0:	441a      	add	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058bc:	4a21      	ldr	r2, [pc, #132]	; (8005944 <UART_SetConfig+0x32c>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	2264      	movs	r2, #100	; 0x64
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	1aeb      	subs	r3, r5, r3
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	3332      	adds	r3, #50	; 0x32
 80058d0:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <UART_SetConfig+0x32c>)
 80058d2:	fba2 2303 	umull	r2, r3, r2, r3
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058dc:	441c      	add	r4, r3
 80058de:	f7ff f8ab 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 80058e2:	4602      	mov	r2, r0
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	009a      	lsls	r2, r3, #2
 80058ec:	441a      	add	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80058f8:	f7ff f89e 	bl	8004a38 <HAL_RCC_GetPCLK2Freq>
 80058fc:	4602      	mov	r2, r0
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	009a      	lsls	r2, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <UART_SetConfig+0x32c>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	2264      	movs	r2, #100	; 0x64
 800591c:	fb02 f303 	mul.w	r3, r2, r3
 8005920:	1aeb      	subs	r3, r5, r3
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	3332      	adds	r3, #50	; 0x32
 8005926:	4a07      	ldr	r2, [pc, #28]	; (8005944 <UART_SetConfig+0x32c>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	f003 020f 	and.w	r2, r3, #15
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4422      	add	r2, r4
 8005938:	609a      	str	r2, [r3, #8]
 800593a:	e071      	b.n	8005a20 <UART_SetConfig+0x408>
 800593c:	40011000 	.word	0x40011000
 8005940:	40011400 	.word	0x40011400
 8005944:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005948:	f7ff f862 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 800594c:	4602      	mov	r2, r0
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009a      	lsls	r2, r3, #2
 8005956:	441a      	add	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	4a31      	ldr	r2, [pc, #196]	; (8005a28 <UART_SetConfig+0x410>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	095b      	lsrs	r3, r3, #5
 800596a:	011c      	lsls	r4, r3, #4
 800596c:	f7ff f850 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 8005970:	4602      	mov	r2, r0
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009a      	lsls	r2, r3, #2
 800597a:	441a      	add	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	fbb2 f5f3 	udiv	r5, r2, r3
 8005986:	f7ff f843 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 800598a:	4602      	mov	r2, r0
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009a      	lsls	r2, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a0:	4a21      	ldr	r2, [pc, #132]	; (8005a28 <UART_SetConfig+0x410>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	2264      	movs	r2, #100	; 0x64
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	1aeb      	subs	r3, r5, r3
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	3332      	adds	r3, #50	; 0x32
 80059b4:	4a1c      	ldr	r2, [pc, #112]	; (8005a28 <UART_SetConfig+0x410>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	095b      	lsrs	r3, r3, #5
 80059bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c0:	441c      	add	r4, r3
 80059c2:	f7ff f825 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 80059c6:	4602      	mov	r2, r0
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009a      	lsls	r2, r3, #2
 80059d0:	441a      	add	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	fbb2 f5f3 	udiv	r5, r2, r3
 80059dc:	f7ff f818 	bl	8004a10 <HAL_RCC_GetPCLK1Freq>
 80059e0:	4602      	mov	r2, r0
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009a      	lsls	r2, r3, #2
 80059ea:	441a      	add	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f6:	4a0c      	ldr	r2, [pc, #48]	; (8005a28 <UART_SetConfig+0x410>)
 80059f8:	fba2 2303 	umull	r2, r3, r2, r3
 80059fc:	095b      	lsrs	r3, r3, #5
 80059fe:	2264      	movs	r2, #100	; 0x64
 8005a00:	fb02 f303 	mul.w	r3, r2, r3
 8005a04:	1aeb      	subs	r3, r5, r3
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	3332      	adds	r3, #50	; 0x32
 8005a0a:	4a07      	ldr	r2, [pc, #28]	; (8005a28 <UART_SetConfig+0x410>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	f003 020f 	and.w	r2, r3, #15
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4422      	add	r2, r4
 8005a1c:	609a      	str	r2, [r3, #8]
}
 8005a1e:	e7ff      	b.n	8005a20 <UART_SetConfig+0x408>
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bdb0      	pop	{r4, r5, r7, pc}
 8005a28:	51eb851f 	.word	0x51eb851f

08005a2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a3e:	2b84      	cmp	r3, #132	; 0x84
 8005a40:	d005      	beq.n	8005a4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005a42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	3303      	adds	r3, #3
 8005a4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a60:	f000 fad2 	bl	8006008 <vTaskStartScheduler>
  
  return osOK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a6c:	b089      	sub	sp, #36	; 0x24
 8005a6e:	af04      	add	r7, sp, #16
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d020      	beq.n	8005abe <osThreadCreate+0x54>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01c      	beq.n	8005abe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685c      	ldr	r4, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681d      	ldr	r5, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691e      	ldr	r6, [r3, #16]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff ffc8 	bl	8005a2c <makeFreeRtosPriority>
 8005a9c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aa6:	9202      	str	r2, [sp, #8]
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	9100      	str	r1, [sp, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	4632      	mov	r2, r6
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f8ed 	bl	8005c92 <xTaskCreateStatic>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	e01c      	b.n	8005af8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685c      	ldr	r4, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aca:	b29e      	uxth	r6, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff ffaa 	bl	8005a2c <makeFreeRtosPriority>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	9200      	str	r2, [sp, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 f92b 	bl	8005d44 <xTaskCreate>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d001      	beq.n	8005af8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005af8:	68fb      	ldr	r3, [r7, #12]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b02 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <osDelay+0x16>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	e000      	b.n	8005b1a <osDelay+0x18>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fa40 	bl	8005fa0 <vTaskDelay>
  
  return osOK;
 8005b20:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f103 0208 	add.w	r2, r3, #8
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b42:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f103 0208 	add.w	r2, r3, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f103 0208 	add.w	r2, r3, #8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	683a      	ldr	r2, [r7, #0]
 8005ba8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	601a      	str	r2, [r3, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be2:	d103      	bne.n	8005bec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	e00c      	b.n	8005c06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e002      	b.n	8005bfa <vListInsert+0x2e>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d2f6      	bcs.n	8005bf4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
}
 8005c32:	bf00      	nop
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6892      	ldr	r2, [r2, #8]
 8005c54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6852      	ldr	r2, [r2, #4]
 8005c5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d103      	bne.n	8005c72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	1e5a      	subs	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b08e      	sub	sp, #56	; 0x38
 8005c96:	af04      	add	r7, sp, #16
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	623b      	str	r3, [r7, #32]
 8005cb8:	e7fe      	b.n	8005cb8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d109      	bne.n	8005cd4 <xTaskCreateStatic+0x42>
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e7fe      	b.n	8005cd2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cd4:	2354      	movs	r3, #84	; 0x54
 8005cd6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b54      	cmp	r3, #84	; 0x54
 8005cdc:	d009      	beq.n	8005cf2 <xTaskCreateStatic+0x60>
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	e7fe      	b.n	8005cf0 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01e      	beq.n	8005d36 <xTaskCreateStatic+0xa4>
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d01b      	beq.n	8005d36 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d10:	2300      	movs	r3, #0
 8005d12:	9303      	str	r3, [sp, #12]
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	9302      	str	r3, [sp, #8]
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f850 	bl	8005dce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d30:	f000 f8cc 	bl	8005ecc <prvAddNewTaskToReadyList>
 8005d34:	e001      	b.n	8005d3a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d3a:	697b      	ldr	r3, [r7, #20]
	}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3728      	adds	r7, #40	; 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08c      	sub	sp, #48	; 0x30
 8005d48:	af04      	add	r7, sp, #16
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 feb3 	bl	8006ac4 <pvPortMalloc>
 8005d5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00e      	beq.n	8005d84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005d66:	2054      	movs	r0, #84	; 0x54
 8005d68:	f000 feac 	bl	8006ac4 <pvPortMalloc>
 8005d6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
 8005d7a:	e005      	b.n	8005d88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d7c:	6978      	ldr	r0, [r7, #20]
 8005d7e:	f000 ff63 	bl	8006c48 <vPortFree>
 8005d82:	e001      	b.n	8005d88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d017      	beq.n	8005dbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	9302      	str	r3, [sp, #8]
 8005da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f80e 	bl	8005dce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005db2:	69f8      	ldr	r0, [r7, #28]
 8005db4:	f000 f88a 	bl	8005ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005db8:	2301      	movs	r3, #1
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e002      	b.n	8005dc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
	}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b088      	sub	sp, #32
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005de6:	3b01      	subs	r3, #1
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f023 0307 	bic.w	r3, r3, #7
 8005df4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	f003 0307 	and.w	r3, r3, #7
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <prvInitialiseNewTask+0x46>
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	e7fe      	b.n	8005e12 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	e012      	b.n	8005e40 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	4413      	add	r3, r2
 8005e20:	7819      	ldrb	r1, [r3, #0]
 8005e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	3334      	adds	r3, #52	; 0x34
 8005e2a:	460a      	mov	r2, r1
 8005e2c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d006      	beq.n	8005e48 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	2b0f      	cmp	r3, #15
 8005e44:	d9e9      	bls.n	8005e1a <prvInitialiseNewTask+0x4c>
 8005e46:	e000      	b.n	8005e4a <prvInitialiseNewTask+0x7c>
		{
			break;
 8005e48:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d901      	bls.n	8005e5c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e58:	2306      	movs	r3, #6
 8005e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e66:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	3304      	adds	r3, #4
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fe79 	bl	8005b6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	3318      	adds	r3, #24
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fe74 	bl	8005b6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	f1c3 0207 	rsb	r2, r3, #7
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	68f9      	ldr	r1, [r7, #12]
 8005eaa:	69b8      	ldr	r0, [r7, #24]
 8005eac:	f000 fc08 	bl	80066c0 <pxPortInitialiseStack>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ec2:	bf00      	nop
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ed4:	f000 fd1a 	bl	800690c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ed8:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <prvAddNewTaskToReadyList+0xb8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	4a29      	ldr	r2, [pc, #164]	; (8005f84 <prvAddNewTaskToReadyList+0xb8>)
 8005ee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ee2:	4b29      	ldr	r3, [pc, #164]	; (8005f88 <prvAddNewTaskToReadyList+0xbc>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005eea:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <prvAddNewTaskToReadyList+0xbc>)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ef0:	4b24      	ldr	r3, [pc, #144]	; (8005f84 <prvAddNewTaskToReadyList+0xb8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d110      	bne.n	8005f1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ef8:	f000 fabc 	bl	8006474 <prvInitialiseTaskLists>
 8005efc:	e00d      	b.n	8005f1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005efe:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <prvAddNewTaskToReadyList+0xc0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f06:	4b20      	ldr	r3, [pc, #128]	; (8005f88 <prvAddNewTaskToReadyList+0xbc>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d802      	bhi.n	8005f1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f14:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <prvAddNewTaskToReadyList+0xbc>)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f1a:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <prvAddNewTaskToReadyList+0xc4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	4a1b      	ldr	r2, [pc, #108]	; (8005f90 <prvAddNewTaskToReadyList+0xc4>)
 8005f22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	2201      	movs	r2, #1
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <prvAddNewTaskToReadyList+0xc8>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <prvAddNewTaskToReadyList+0xc8>)
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4a15      	ldr	r2, [pc, #84]	; (8005f98 <prvAddNewTaskToReadyList+0xcc>)
 8005f44:	441a      	add	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	f7ff fe19 	bl	8005b84 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f52:	f000 fd09 	bl	8006968 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <prvAddNewTaskToReadyList+0xc0>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00e      	beq.n	8005f7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <prvAddNewTaskToReadyList+0xbc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d207      	bcs.n	8005f7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <prvAddNewTaskToReadyList+0xd0>)
 8005f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f7c:	bf00      	nop
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	200009c4 	.word	0x200009c4
 8005f88:	200008c4 	.word	0x200008c4
 8005f8c:	200009d0 	.word	0x200009d0
 8005f90:	200009e0 	.word	0x200009e0
 8005f94:	200009cc 	.word	0x200009cc
 8005f98:	200008c8 	.word	0x200008c8
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d016      	beq.n	8005fe0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <vTaskDelay+0x60>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <vTaskDelay+0x2e>
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	e7fe      	b.n	8005fcc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005fce:	f000 f879 	bl	80060c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fb0d 	bl	80065f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fda:	f000 f881 	bl	80060e0 <xTaskResumeAll>
 8005fde:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005fe6:	4b07      	ldr	r3, [pc, #28]	; (8006004 <vTaskDelay+0x64>)
 8005fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	200009ec 	.word	0x200009ec
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006016:	463a      	mov	r2, r7
 8006018:	1d39      	adds	r1, r7, #4
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4618      	mov	r0, r3
 8006020:	f7fb fb66 	bl	80016f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	9202      	str	r2, [sp, #8]
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	2300      	movs	r3, #0
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	2300      	movs	r3, #0
 8006034:	460a      	mov	r2, r1
 8006036:	491d      	ldr	r1, [pc, #116]	; (80060ac <vTaskStartScheduler+0xa4>)
 8006038:	481d      	ldr	r0, [pc, #116]	; (80060b0 <vTaskStartScheduler+0xa8>)
 800603a:	f7ff fe2a 	bl	8005c92 <xTaskCreateStatic>
 800603e:	4602      	mov	r2, r0
 8006040:	4b1c      	ldr	r3, [pc, #112]	; (80060b4 <vTaskStartScheduler+0xac>)
 8006042:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006044:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <vTaskStartScheduler+0xac>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e001      	b.n	8006056 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d115      	bne.n	8006088 <vTaskStartScheduler+0x80>
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800606e:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <vTaskStartScheduler+0xb0>)
 8006070:	f04f 32ff 	mov.w	r2, #4294967295
 8006074:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006076:	4b11      	ldr	r3, [pc, #68]	; (80060bc <vTaskStartScheduler+0xb4>)
 8006078:	2201      	movs	r2, #1
 800607a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800607c:	4b10      	ldr	r3, [pc, #64]	; (80060c0 <vTaskStartScheduler+0xb8>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006082:	f000 fba5 	bl	80067d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006086:	e00d      	b.n	80060a4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d109      	bne.n	80060a4 <vTaskStartScheduler+0x9c>
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	e7fe      	b.n	80060a2 <vTaskStartScheduler+0x9a>
}
 80060a4:	bf00      	nop
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	08008a24 	.word	0x08008a24
 80060b0:	08006445 	.word	0x08006445
 80060b4:	200009e8 	.word	0x200009e8
 80060b8:	200009e4 	.word	0x200009e4
 80060bc:	200009d0 	.word	0x200009d0
 80060c0:	200009c8 	.word	0x200009c8

080060c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80060c8:	4b04      	ldr	r3, [pc, #16]	; (80060dc <vTaskSuspendAll+0x18>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	4a03      	ldr	r2, [pc, #12]	; (80060dc <vTaskSuspendAll+0x18>)
 80060d0:	6013      	str	r3, [r2, #0]
}
 80060d2:	bf00      	nop
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	200009ec 	.word	0x200009ec

080060e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060ee:	4b41      	ldr	r3, [pc, #260]	; (80061f4 <xTaskResumeAll+0x114>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <xTaskResumeAll+0x2a>
 80060f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	e7fe      	b.n	8006108 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800610a:	f000 fbff 	bl	800690c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800610e:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <xTaskResumeAll+0x114>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3b01      	subs	r3, #1
 8006114:	4a37      	ldr	r2, [pc, #220]	; (80061f4 <xTaskResumeAll+0x114>)
 8006116:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006118:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <xTaskResumeAll+0x114>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d161      	bne.n	80061e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006120:	4b35      	ldr	r3, [pc, #212]	; (80061f8 <xTaskResumeAll+0x118>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05d      	beq.n	80061e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006128:	e02e      	b.n	8006188 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800612a:	4b34      	ldr	r3, [pc, #208]	; (80061fc <xTaskResumeAll+0x11c>)
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3318      	adds	r3, #24
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fd81 	bl	8005c3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3304      	adds	r3, #4
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff fd7c 	bl	8005c3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	2201      	movs	r2, #1
 800614c:	409a      	lsls	r2, r3
 800614e:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <xTaskResumeAll+0x120>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4313      	orrs	r3, r2
 8006154:	4a2a      	ldr	r2, [pc, #168]	; (8006200 <xTaskResumeAll+0x120>)
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4a27      	ldr	r2, [pc, #156]	; (8006204 <xTaskResumeAll+0x124>)
 8006166:	441a      	add	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3304      	adds	r3, #4
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f7ff fd08 	bl	8005b84 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006178:	4b23      	ldr	r3, [pc, #140]	; (8006208 <xTaskResumeAll+0x128>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	429a      	cmp	r2, r3
 8006180:	d302      	bcc.n	8006188 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006182:	4b22      	ldr	r3, [pc, #136]	; (800620c <xTaskResumeAll+0x12c>)
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006188:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <xTaskResumeAll+0x11c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1cc      	bne.n	800612a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006196:	f000 fa07 	bl	80065a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800619a:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <xTaskResumeAll+0x130>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d010      	beq.n	80061c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061a6:	f000 f837 	bl	8006218 <xTaskIncrementTick>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80061b0:	4b16      	ldr	r3, [pc, #88]	; (800620c <xTaskResumeAll+0x12c>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f1      	bne.n	80061a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80061c2:	4b13      	ldr	r3, [pc, #76]	; (8006210 <xTaskResumeAll+0x130>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061c8:	4b10      	ldr	r3, [pc, #64]	; (800620c <xTaskResumeAll+0x12c>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061d4:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <xTaskResumeAll+0x134>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061e4:	f000 fbc0 	bl	8006968 <vPortExitCritical>

	return xAlreadyYielded;
 80061e8:	68bb      	ldr	r3, [r7, #8]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	200009ec 	.word	0x200009ec
 80061f8:	200009c4 	.word	0x200009c4
 80061fc:	20000984 	.word	0x20000984
 8006200:	200009cc 	.word	0x200009cc
 8006204:	200008c8 	.word	0x200008c8
 8006208:	200008c4 	.word	0x200008c4
 800620c:	200009d8 	.word	0x200009d8
 8006210:	200009d4 	.word	0x200009d4
 8006214:	e000ed04 	.word	0xe000ed04

08006218 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006222:	4b50      	ldr	r3, [pc, #320]	; (8006364 <xTaskIncrementTick+0x14c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f040 808c 	bne.w	8006344 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800622c:	4b4e      	ldr	r3, [pc, #312]	; (8006368 <xTaskIncrementTick+0x150>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006234:	4a4c      	ldr	r2, [pc, #304]	; (8006368 <xTaskIncrementTick+0x150>)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d11f      	bne.n	8006280 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006240:	4b4a      	ldr	r3, [pc, #296]	; (800636c <xTaskIncrementTick+0x154>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <xTaskIncrementTick+0x46>
 800624a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	e7fe      	b.n	800625c <xTaskIncrementTick+0x44>
 800625e:	4b43      	ldr	r3, [pc, #268]	; (800636c <xTaskIncrementTick+0x154>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	4b42      	ldr	r3, [pc, #264]	; (8006370 <xTaskIncrementTick+0x158>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a40      	ldr	r2, [pc, #256]	; (800636c <xTaskIncrementTick+0x154>)
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4a40      	ldr	r2, [pc, #256]	; (8006370 <xTaskIncrementTick+0x158>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	4b40      	ldr	r3, [pc, #256]	; (8006374 <xTaskIncrementTick+0x15c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3301      	adds	r3, #1
 8006278:	4a3e      	ldr	r2, [pc, #248]	; (8006374 <xTaskIncrementTick+0x15c>)
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	f000 f994 	bl	80065a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006280:	4b3d      	ldr	r3, [pc, #244]	; (8006378 <xTaskIncrementTick+0x160>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	429a      	cmp	r2, r3
 8006288:	d34d      	bcc.n	8006326 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800628a:	4b38      	ldr	r3, [pc, #224]	; (800636c <xTaskIncrementTick+0x154>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <xTaskIncrementTick+0x80>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <xTaskIncrementTick+0x82>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800629e:	4b36      	ldr	r3, [pc, #216]	; (8006378 <xTaskIncrementTick+0x160>)
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295
 80062a4:	601a      	str	r2, [r3, #0]
					break;
 80062a6:	e03e      	b.n	8006326 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062a8:	4b30      	ldr	r3, [pc, #192]	; (800636c <xTaskIncrementTick+0x154>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d203      	bcs.n	80062c8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062c0:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <xTaskIncrementTick+0x160>)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6013      	str	r3, [r2, #0]
						break;
 80062c6:	e02e      	b.n	8006326 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	3304      	adds	r3, #4
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff fcb6 	bl	8005c3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	3318      	adds	r3, #24
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff fcad 	bl	8005c3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	2201      	movs	r2, #1
 80062ea:	409a      	lsls	r2, r3
 80062ec:	4b23      	ldr	r3, [pc, #140]	; (800637c <xTaskIncrementTick+0x164>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	4a22      	ldr	r2, [pc, #136]	; (800637c <xTaskIncrementTick+0x164>)
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4a1f      	ldr	r2, [pc, #124]	; (8006380 <xTaskIncrementTick+0x168>)
 8006304:	441a      	add	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	3304      	adds	r3, #4
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f7ff fc39 	bl	8005b84 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006316:	4b1b      	ldr	r3, [pc, #108]	; (8006384 <xTaskIncrementTick+0x16c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	429a      	cmp	r2, r3
 800631e:	d3b4      	bcc.n	800628a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006320:	2301      	movs	r3, #1
 8006322:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006324:	e7b1      	b.n	800628a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006326:	4b17      	ldr	r3, [pc, #92]	; (8006384 <xTaskIncrementTick+0x16c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	4914      	ldr	r1, [pc, #80]	; (8006380 <xTaskIncrementTick+0x168>)
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d907      	bls.n	800634e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800633e:	2301      	movs	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	e004      	b.n	800634e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006344:	4b10      	ldr	r3, [pc, #64]	; (8006388 <xTaskIncrementTick+0x170>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	4a0f      	ldr	r2, [pc, #60]	; (8006388 <xTaskIncrementTick+0x170>)
 800634c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <xTaskIncrementTick+0x174>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006356:	2301      	movs	r3, #1
 8006358:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800635a:	697b      	ldr	r3, [r7, #20]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	200009ec 	.word	0x200009ec
 8006368:	200009c8 	.word	0x200009c8
 800636c:	2000097c 	.word	0x2000097c
 8006370:	20000980 	.word	0x20000980
 8006374:	200009dc 	.word	0x200009dc
 8006378:	200009e4 	.word	0x200009e4
 800637c:	200009cc 	.word	0x200009cc
 8006380:	200008c8 	.word	0x200008c8
 8006384:	200008c4 	.word	0x200008c4
 8006388:	200009d4 	.word	0x200009d4
 800638c:	200009d8 	.word	0x200009d8

08006390 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006396:	4b26      	ldr	r3, [pc, #152]	; (8006430 <vTaskSwitchContext+0xa0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800639e:	4b25      	ldr	r3, [pc, #148]	; (8006434 <vTaskSwitchContext+0xa4>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063a4:	e03e      	b.n	8006424 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80063a6:	4b23      	ldr	r3, [pc, #140]	; (8006434 <vTaskSwitchContext+0xa4>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80063ac:	4b22      	ldr	r3, [pc, #136]	; (8006438 <vTaskSwitchContext+0xa8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	fab3 f383 	clz	r3, r3
 80063b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80063ba:	7afb      	ldrb	r3, [r7, #11]
 80063bc:	f1c3 031f 	rsb	r3, r3, #31
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	491e      	ldr	r1, [pc, #120]	; (800643c <vTaskSwitchContext+0xac>)
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	440b      	add	r3, r1
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <vTaskSwitchContext+0x5a>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	607b      	str	r3, [r7, #4]
 80063e8:	e7fe      	b.n	80063e8 <vTaskSwitchContext+0x58>
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4a11      	ldr	r2, [pc, #68]	; (800643c <vTaskSwitchContext+0xac>)
 80063f6:	4413      	add	r3, r2
 80063f8:	613b      	str	r3, [r7, #16]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	3308      	adds	r3, #8
 800640c:	429a      	cmp	r2, r3
 800640e:	d104      	bne.n	800641a <vTaskSwitchContext+0x8a>
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	4a07      	ldr	r2, [pc, #28]	; (8006440 <vTaskSwitchContext+0xb0>)
 8006422:	6013      	str	r3, [r2, #0]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	200009ec 	.word	0x200009ec
 8006434:	200009d8 	.word	0x200009d8
 8006438:	200009cc 	.word	0x200009cc
 800643c:	200008c8 	.word	0x200008c8
 8006440:	200008c4 	.word	0x200008c4

08006444 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800644c:	f000 f852 	bl	80064f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006450:	4b06      	ldr	r3, [pc, #24]	; (800646c <prvIdleTask+0x28>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d9f9      	bls.n	800644c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <prvIdleTask+0x2c>)
 800645a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006468:	e7f0      	b.n	800644c <prvIdleTask+0x8>
 800646a:	bf00      	nop
 800646c:	200008c8 	.word	0x200008c8
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	e00c      	b.n	800649a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4a12      	ldr	r2, [pc, #72]	; (80064d4 <prvInitialiseTaskLists+0x60>)
 800648c:	4413      	add	r3, r2
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff fb4b 	bl	8005b2a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	3301      	adds	r3, #1
 8006498:	607b      	str	r3, [r7, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b06      	cmp	r3, #6
 800649e:	d9ef      	bls.n	8006480 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064a0:	480d      	ldr	r0, [pc, #52]	; (80064d8 <prvInitialiseTaskLists+0x64>)
 80064a2:	f7ff fb42 	bl	8005b2a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064a6:	480d      	ldr	r0, [pc, #52]	; (80064dc <prvInitialiseTaskLists+0x68>)
 80064a8:	f7ff fb3f 	bl	8005b2a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064ac:	480c      	ldr	r0, [pc, #48]	; (80064e0 <prvInitialiseTaskLists+0x6c>)
 80064ae:	f7ff fb3c 	bl	8005b2a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064b2:	480c      	ldr	r0, [pc, #48]	; (80064e4 <prvInitialiseTaskLists+0x70>)
 80064b4:	f7ff fb39 	bl	8005b2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064b8:	480b      	ldr	r0, [pc, #44]	; (80064e8 <prvInitialiseTaskLists+0x74>)
 80064ba:	f7ff fb36 	bl	8005b2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <prvInitialiseTaskLists+0x78>)
 80064c0:	4a05      	ldr	r2, [pc, #20]	; (80064d8 <prvInitialiseTaskLists+0x64>)
 80064c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064c4:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <prvInitialiseTaskLists+0x7c>)
 80064c6:	4a05      	ldr	r2, [pc, #20]	; (80064dc <prvInitialiseTaskLists+0x68>)
 80064c8:	601a      	str	r2, [r3, #0]
}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	200008c8 	.word	0x200008c8
 80064d8:	20000954 	.word	0x20000954
 80064dc:	20000968 	.word	0x20000968
 80064e0:	20000984 	.word	0x20000984
 80064e4:	20000998 	.word	0x20000998
 80064e8:	200009b0 	.word	0x200009b0
 80064ec:	2000097c 	.word	0x2000097c
 80064f0:	20000980 	.word	0x20000980

080064f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064fa:	e019      	b.n	8006530 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064fc:	f000 fa06 	bl	800690c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006500:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <prvCheckTasksWaitingTermination+0x4c>)
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3304      	adds	r3, #4
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fb96 	bl	8005c3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006512:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <prvCheckTasksWaitingTermination+0x50>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3b01      	subs	r3, #1
 8006518:	4a0a      	ldr	r2, [pc, #40]	; (8006544 <prvCheckTasksWaitingTermination+0x50>)
 800651a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <prvCheckTasksWaitingTermination+0x54>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3b01      	subs	r3, #1
 8006522:	4a09      	ldr	r2, [pc, #36]	; (8006548 <prvCheckTasksWaitingTermination+0x54>)
 8006524:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006526:	f000 fa1f 	bl	8006968 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f80e 	bl	800654c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006530:	4b05      	ldr	r3, [pc, #20]	; (8006548 <prvCheckTasksWaitingTermination+0x54>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d1e1      	bne.n	80064fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000998 	.word	0x20000998
 8006544:	200009c4 	.word	0x200009c4
 8006548:	200009ac 	.word	0x200009ac

0800654c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800655a:	2b00      	cmp	r3, #0
 800655c:	d108      	bne.n	8006570 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fb70 	bl	8006c48 <vPortFree>
				vPortFree( pxTCB );
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fb6d 	bl	8006c48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800656e:	e017      	b.n	80065a0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006576:	2b01      	cmp	r3, #1
 8006578:	d103      	bne.n	8006582 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fb64 	bl	8006c48 <vPortFree>
	}
 8006580:	e00e      	b.n	80065a0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006588:	2b02      	cmp	r3, #2
 800658a:	d009      	beq.n	80065a0 <prvDeleteTCB+0x54>
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	e7fe      	b.n	800659e <prvDeleteTCB+0x52>
	}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ae:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <prvResetNextTaskUnblockTime+0x44>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <prvResetNextTaskUnblockTime+0x14>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <prvResetNextTaskUnblockTime+0x16>
 80065bc:	2300      	movs	r3, #0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065c2:	4b0b      	ldr	r3, [pc, #44]	; (80065f0 <prvResetNextTaskUnblockTime+0x48>)
 80065c4:	f04f 32ff 	mov.w	r2, #4294967295
 80065c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065ca:	e008      	b.n	80065de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065cc:	4b07      	ldr	r3, [pc, #28]	; (80065ec <prvResetNextTaskUnblockTime+0x44>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	4a05      	ldr	r2, [pc, #20]	; (80065f0 <prvResetNextTaskUnblockTime+0x48>)
 80065dc:	6013      	str	r3, [r2, #0]
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	2000097c 	.word	0x2000097c
 80065f0:	200009e4 	.word	0x200009e4

080065f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065fe:	4b29      	ldr	r3, [pc, #164]	; (80066a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006604:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3304      	adds	r3, #4
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fb17 	bl	8005c3e <uxListRemove>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10b      	bne.n	800662e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006616:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	2201      	movs	r2, #1
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	43da      	mvns	r2, r3
 8006624:	4b21      	ldr	r3, [pc, #132]	; (80066ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4013      	ands	r3, r2
 800662a:	4a20      	ldr	r2, [pc, #128]	; (80066ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800662c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006634:	d10a      	bne.n	800664c <prvAddCurrentTaskToDelayedList+0x58>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800663c:	4b1a      	ldr	r3, [pc, #104]	; (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3304      	adds	r3, #4
 8006642:	4619      	mov	r1, r3
 8006644:	481a      	ldr	r0, [pc, #104]	; (80066b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006646:	f7ff fa9d 	bl	8005b84 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800664a:	e026      	b.n	800669a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006654:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	429a      	cmp	r2, r3
 8006662:	d209      	bcs.n	8006678 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006664:	4b13      	ldr	r3, [pc, #76]	; (80066b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3304      	adds	r3, #4
 800666e:	4619      	mov	r1, r3
 8006670:	4610      	mov	r0, r2
 8006672:	f7ff faab 	bl	8005bcc <vListInsert>
}
 8006676:	e010      	b.n	800669a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006678:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3304      	adds	r3, #4
 8006682:	4619      	mov	r1, r3
 8006684:	4610      	mov	r0, r2
 8006686:	f7ff faa1 	bl	8005bcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800668a:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	429a      	cmp	r2, r3
 8006692:	d202      	bcs.n	800669a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006694:	4a09      	ldr	r2, [pc, #36]	; (80066bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6013      	str	r3, [r2, #0]
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	200009c8 	.word	0x200009c8
 80066a8:	200008c4 	.word	0x200008c4
 80066ac:	200009cc 	.word	0x200009cc
 80066b0:	200009b0 	.word	0x200009b0
 80066b4:	20000980 	.word	0x20000980
 80066b8:	2000097c 	.word	0x2000097c
 80066bc:	200009e4 	.word	0x200009e4

080066c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3b04      	subs	r3, #4
 80066d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3b04      	subs	r3, #4
 80066de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f023 0201 	bic.w	r2, r3, #1
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3b04      	subs	r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066f0:	4a0c      	ldr	r2, [pc, #48]	; (8006724 <pxPortInitialiseStack+0x64>)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	3b14      	subs	r3, #20
 80066fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3b04      	subs	r3, #4
 8006706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f06f 0202 	mvn.w	r2, #2
 800670e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3b20      	subs	r3, #32
 8006714:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	08006729 	.word	0x08006729

08006728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006732:	4b11      	ldr	r3, [pc, #68]	; (8006778 <prvTaskExitError+0x50>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673a:	d009      	beq.n	8006750 <prvTaskExitError+0x28>
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	e7fe      	b.n	800674e <prvTaskExitError+0x26>
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006762:	bf00      	nop
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0fc      	beq.n	8006764 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	2000047c 	.word	0x2000047c
 800677c:	00000000 	.word	0x00000000

08006780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006780:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <pxCurrentTCBConst2>)
 8006782:	6819      	ldr	r1, [r3, #0]
 8006784:	6808      	ldr	r0, [r1, #0]
 8006786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678a:	f380 8809 	msr	PSP, r0
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f04f 0000 	mov.w	r0, #0
 8006796:	f380 8811 	msr	BASEPRI, r0
 800679a:	4770      	bx	lr
 800679c:	f3af 8000 	nop.w

080067a0 <pxCurrentTCBConst2>:
 80067a0:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop

080067a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067a8:	4808      	ldr	r0, [pc, #32]	; (80067cc <prvPortStartFirstTask+0x24>)
 80067aa:	6800      	ldr	r0, [r0, #0]
 80067ac:	6800      	ldr	r0, [r0, #0]
 80067ae:	f380 8808 	msr	MSP, r0
 80067b2:	f04f 0000 	mov.w	r0, #0
 80067b6:	f380 8814 	msr	CONTROL, r0
 80067ba:	b662      	cpsie	i
 80067bc:	b661      	cpsie	f
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	df00      	svc	0
 80067c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067ca:	bf00      	nop
 80067cc:	e000ed08 	.word	0xe000ed08

080067d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067d6:	4b44      	ldr	r3, [pc, #272]	; (80068e8 <xPortStartScheduler+0x118>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a44      	ldr	r2, [pc, #272]	; (80068ec <xPortStartScheduler+0x11c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d109      	bne.n	80067f4 <xPortStartScheduler+0x24>
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	e7fe      	b.n	80067f2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067f4:	4b3c      	ldr	r3, [pc, #240]	; (80068e8 <xPortStartScheduler+0x118>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a3d      	ldr	r2, [pc, #244]	; (80068f0 <xPortStartScheduler+0x120>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d109      	bne.n	8006812 <xPortStartScheduler+0x42>
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e7fe      	b.n	8006810 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006812:	4b38      	ldr	r3, [pc, #224]	; (80068f4 <xPortStartScheduler+0x124>)
 8006814:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	22ff      	movs	r2, #255	; 0xff
 8006822:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006834:	b2da      	uxtb	r2, r3
 8006836:	4b30      	ldr	r3, [pc, #192]	; (80068f8 <xPortStartScheduler+0x128>)
 8006838:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800683a:	4b30      	ldr	r3, [pc, #192]	; (80068fc <xPortStartScheduler+0x12c>)
 800683c:	2207      	movs	r2, #7
 800683e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006840:	e009      	b.n	8006856 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006842:	4b2e      	ldr	r3, [pc, #184]	; (80068fc <xPortStartScheduler+0x12c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3b01      	subs	r3, #1
 8006848:	4a2c      	ldr	r2, [pc, #176]	; (80068fc <xPortStartScheduler+0x12c>)
 800684a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	b2db      	uxtb	r3, r3
 8006854:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685e:	2b80      	cmp	r3, #128	; 0x80
 8006860:	d0ef      	beq.n	8006842 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006862:	4b26      	ldr	r3, [pc, #152]	; (80068fc <xPortStartScheduler+0x12c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f1c3 0307 	rsb	r3, r3, #7
 800686a:	2b04      	cmp	r3, #4
 800686c:	d009      	beq.n	8006882 <xPortStartScheduler+0xb2>
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	60bb      	str	r3, [r7, #8]
 8006880:	e7fe      	b.n	8006880 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006882:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <xPortStartScheduler+0x12c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	4a1c      	ldr	r2, [pc, #112]	; (80068fc <xPortStartScheduler+0x12c>)
 800688a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800688c:	4b1b      	ldr	r3, [pc, #108]	; (80068fc <xPortStartScheduler+0x12c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006894:	4a19      	ldr	r2, [pc, #100]	; (80068fc <xPortStartScheduler+0x12c>)
 8006896:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068a0:	4b17      	ldr	r3, [pc, #92]	; (8006900 <xPortStartScheduler+0x130>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a16      	ldr	r2, [pc, #88]	; (8006900 <xPortStartScheduler+0x130>)
 80068a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068ac:	4b14      	ldr	r3, [pc, #80]	; (8006900 <xPortStartScheduler+0x130>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a13      	ldr	r2, [pc, #76]	; (8006900 <xPortStartScheduler+0x130>)
 80068b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068b8:	f000 f8d6 	bl	8006a68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068bc:	4b11      	ldr	r3, [pc, #68]	; (8006904 <xPortStartScheduler+0x134>)
 80068be:	2200      	movs	r2, #0
 80068c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068c2:	f000 f8f5 	bl	8006ab0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068c6:	4b10      	ldr	r3, [pc, #64]	; (8006908 <xPortStartScheduler+0x138>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a0f      	ldr	r2, [pc, #60]	; (8006908 <xPortStartScheduler+0x138>)
 80068cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068d2:	f7ff ff69 	bl	80067a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068d6:	f7ff fd5b 	bl	8006390 <vTaskSwitchContext>
	prvTaskExitError();
 80068da:	f7ff ff25 	bl	8006728 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	e000ed00 	.word	0xe000ed00
 80068ec:	410fc271 	.word	0x410fc271
 80068f0:	410fc270 	.word	0x410fc270
 80068f4:	e000e400 	.word	0xe000e400
 80068f8:	200009f0 	.word	0x200009f0
 80068fc:	200009f4 	.word	0x200009f4
 8006900:	e000ed20 	.word	0xe000ed20
 8006904:	2000047c 	.word	0x2000047c
 8006908:	e000ef34 	.word	0xe000ef34

0800690c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006924:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <vPortEnterCritical+0x54>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3301      	adds	r3, #1
 800692a:	4a0d      	ldr	r2, [pc, #52]	; (8006960 <vPortEnterCritical+0x54>)
 800692c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800692e:	4b0c      	ldr	r3, [pc, #48]	; (8006960 <vPortEnterCritical+0x54>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d10e      	bne.n	8006954 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006936:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <vPortEnterCritical+0x58>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d009      	beq.n	8006954 <vPortEnterCritical+0x48>
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	603b      	str	r3, [r7, #0]
 8006952:	e7fe      	b.n	8006952 <vPortEnterCritical+0x46>
	}
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	2000047c 	.word	0x2000047c
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800696e:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <vPortExitCritical+0x4c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <vPortExitCritical+0x22>
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	607b      	str	r3, [r7, #4]
 8006988:	e7fe      	b.n	8006988 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <vPortExitCritical+0x4c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3b01      	subs	r3, #1
 8006990:	4a08      	ldr	r2, [pc, #32]	; (80069b4 <vPortExitCritical+0x4c>)
 8006992:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006994:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <vPortExitCritical+0x4c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d104      	bne.n	80069a6 <vPortExitCritical+0x3e>
 800699c:	2300      	movs	r3, #0
 800699e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	2000047c 	.word	0x2000047c
	...

080069c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069c0:	f3ef 8009 	mrs	r0, PSP
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <pxCurrentTCBConst>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	f01e 0f10 	tst.w	lr, #16
 80069d0:	bf08      	it	eq
 80069d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069da:	6010      	str	r0, [r2, #0]
 80069dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069e4:	f380 8811 	msr	BASEPRI, r0
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f7ff fcce 	bl	8006390 <vTaskSwitchContext>
 80069f4:	f04f 0000 	mov.w	r0, #0
 80069f8:	f380 8811 	msr	BASEPRI, r0
 80069fc:	bc09      	pop	{r0, r3}
 80069fe:	6819      	ldr	r1, [r3, #0]
 8006a00:	6808      	ldr	r0, [r1, #0]
 8006a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a06:	f01e 0f10 	tst.w	lr, #16
 8006a0a:	bf08      	it	eq
 8006a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a10:	f380 8809 	msr	PSP, r0
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst>:
 8006a20:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a40:	f7ff fbea 	bl	8006218 <xTaskIncrementTick>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <SysTick_Handler+0x3c>)
 8006a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	2300      	movs	r3, #0
 8006a54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <vPortSetupTimerInterrupt+0x34>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a72:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <vPortSetupTimerInterrupt+0x38>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a78:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <vPortSetupTimerInterrupt+0x3c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <vPortSetupTimerInterrupt+0x40>)
 8006a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a82:	099b      	lsrs	r3, r3, #6
 8006a84:	4a09      	ldr	r2, [pc, #36]	; (8006aac <vPortSetupTimerInterrupt+0x44>)
 8006a86:	3b01      	subs	r3, #1
 8006a88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a8a:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <vPortSetupTimerInterrupt+0x34>)
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	601a      	str	r2, [r3, #0]
}
 8006a90:	bf00      	nop
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	e000e010 	.word	0xe000e010
 8006aa0:	e000e018 	.word	0xe000e018
 8006aa4:	20000474 	.word	0x20000474
 8006aa8:	10624dd3 	.word	0x10624dd3
 8006aac:	e000e014 	.word	0xe000e014

08006ab0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ab0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ac0 <vPortEnableVFP+0x10>
 8006ab4:	6801      	ldr	r1, [r0, #0]
 8006ab6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006aba:	6001      	str	r1, [r0, #0]
 8006abc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006abe:	bf00      	nop
 8006ac0:	e000ed88 	.word	0xe000ed88

08006ac4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08a      	sub	sp, #40	; 0x28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ad0:	f7ff faf8 	bl	80060c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ad4:	4b57      	ldr	r3, [pc, #348]	; (8006c34 <pvPortMalloc+0x170>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006adc:	f000 f90c 	bl	8006cf8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ae0:	4b55      	ldr	r3, [pc, #340]	; (8006c38 <pvPortMalloc+0x174>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f040 808c 	bne.w	8006c06 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01c      	beq.n	8006b2e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006af4:	2208      	movs	r2, #8
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d013      	beq.n	8006b2e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f023 0307 	bic.w	r3, r3, #7
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <pvPortMalloc+0x6a>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e7fe      	b.n	8006b2c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d068      	beq.n	8006c06 <pvPortMalloc+0x142>
 8006b34:	4b41      	ldr	r3, [pc, #260]	; (8006c3c <pvPortMalloc+0x178>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d863      	bhi.n	8006c06 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b3e:	4b40      	ldr	r3, [pc, #256]	; (8006c40 <pvPortMalloc+0x17c>)
 8006b40:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b42:	4b3f      	ldr	r3, [pc, #252]	; (8006c40 <pvPortMalloc+0x17c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b48:	e004      	b.n	8006b54 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d903      	bls.n	8006b66 <pvPortMalloc+0xa2>
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f1      	bne.n	8006b4a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b66:	4b33      	ldr	r3, [pc, #204]	; (8006c34 <pvPortMalloc+0x170>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d04a      	beq.n	8006c06 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2208      	movs	r2, #8
 8006b76:	4413      	add	r3, r2
 8006b78:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	1ad2      	subs	r2, r2, r3
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d91e      	bls.n	8006bd0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4413      	add	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d009      	beq.n	8006bb8 <pvPortMalloc+0xf4>
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	e7fe      	b.n	8006bb6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bca:	69b8      	ldr	r0, [r7, #24]
 8006bcc:	f000 f8f6 	bl	8006dbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bd0:	4b1a      	ldr	r3, [pc, #104]	; (8006c3c <pvPortMalloc+0x178>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	4a18      	ldr	r2, [pc, #96]	; (8006c3c <pvPortMalloc+0x178>)
 8006bdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bde:	4b17      	ldr	r3, [pc, #92]	; (8006c3c <pvPortMalloc+0x178>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	4b18      	ldr	r3, [pc, #96]	; (8006c44 <pvPortMalloc+0x180>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d203      	bcs.n	8006bf2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bea:	4b14      	ldr	r3, [pc, #80]	; (8006c3c <pvPortMalloc+0x178>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <pvPortMalloc+0x180>)
 8006bf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <pvPortMalloc+0x174>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c06:	f7ff fa6b 	bl	80060e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <pvPortMalloc+0x164>
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e7fe      	b.n	8006c26 <pvPortMalloc+0x162>
	return pvReturn;
 8006c28:	69fb      	ldr	r3, [r7, #28]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3728      	adds	r7, #40	; 0x28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20004600 	.word	0x20004600
 8006c38:	2000460c 	.word	0x2000460c
 8006c3c:	20004604 	.word	0x20004604
 8006c40:	200045f8 	.word	0x200045f8
 8006c44:	20004608 	.word	0x20004608

08006c48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d046      	beq.n	8006ce8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c5a:	2308      	movs	r3, #8
 8006c5c:	425b      	negs	r3, r3
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4413      	add	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <vPortFree+0xa8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <vPortFree+0x42>
 8006c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7a:	f383 8811 	msr	BASEPRI, r3
 8006c7e:	f3bf 8f6f 	isb	sy
 8006c82:	f3bf 8f4f 	dsb	sy
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	e7fe      	b.n	8006c88 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d009      	beq.n	8006ca6 <vPortFree+0x5e>
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	60bb      	str	r3, [r7, #8]
 8006ca4:	e7fe      	b.n	8006ca4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <vPortFree+0xa8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d019      	beq.n	8006ce8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d115      	bne.n	8006ce8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	; (8006cf0 <vPortFree+0xa8>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ccc:	f7ff f9fa 	bl	80060c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	4b07      	ldr	r3, [pc, #28]	; (8006cf4 <vPortFree+0xac>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4413      	add	r3, r2
 8006cda:	4a06      	ldr	r2, [pc, #24]	; (8006cf4 <vPortFree+0xac>)
 8006cdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cde:	6938      	ldr	r0, [r7, #16]
 8006ce0:	f000 f86c 	bl	8006dbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ce4:	f7ff f9fc 	bl	80060e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ce8:	bf00      	nop
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	2000460c 	.word	0x2000460c
 8006cf4:	20004604 	.word	0x20004604

08006cf8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cfe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d04:	4b27      	ldr	r3, [pc, #156]	; (8006da4 <prvHeapInit+0xac>)
 8006d06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00c      	beq.n	8006d2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3307      	adds	r3, #7
 8006d16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0307 	bic.w	r3, r3, #7
 8006d1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <prvHeapInit+0xac>)
 8006d28:	4413      	add	r3, r2
 8006d2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d30:	4a1d      	ldr	r2, [pc, #116]	; (8006da8 <prvHeapInit+0xb0>)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d36:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <prvHeapInit+0xb0>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	4413      	add	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d44:	2208      	movs	r2, #8
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1a9b      	subs	r3, r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0307 	bic.w	r3, r3, #7
 8006d52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a15      	ldr	r2, [pc, #84]	; (8006dac <prvHeapInit+0xb4>)
 8006d58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <prvHeapInit+0xb4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d62:	4b12      	ldr	r3, [pc, #72]	; (8006dac <prvHeapInit+0xb4>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	1ad2      	subs	r2, r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <prvHeapInit+0xb4>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <prvHeapInit+0xb8>)
 8006d86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <prvHeapInit+0xbc>)
 8006d8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d90:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <prvHeapInit+0xc0>)
 8006d92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d96:	601a      	str	r2, [r3, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	200009f8 	.word	0x200009f8
 8006da8:	200045f8 	.word	0x200045f8
 8006dac:	20004600 	.word	0x20004600
 8006db0:	20004608 	.word	0x20004608
 8006db4:	20004604 	.word	0x20004604
 8006db8:	2000460c 	.word	0x2000460c

08006dbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dc4:	4b28      	ldr	r3, [pc, #160]	; (8006e68 <prvInsertBlockIntoFreeList+0xac>)
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	e002      	b.n	8006dd0 <prvInsertBlockIntoFreeList+0x14>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d8f7      	bhi.n	8006dca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	4413      	add	r3, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d108      	bne.n	8006dfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	441a      	add	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	441a      	add	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d118      	bne.n	8006e44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <prvInsertBlockIntoFreeList+0xb0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d00d      	beq.n	8006e3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	441a      	add	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e008      	b.n	8006e4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e3a:	4b0c      	ldr	r3, [pc, #48]	; (8006e6c <prvInsertBlockIntoFreeList+0xb0>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e003      	b.n	8006e4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d002      	beq.n	8006e5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	200045f8 	.word	0x200045f8
 8006e6c:	20004600 	.word	0x20004600

08006e70 <__errno>:
 8006e70:	4b01      	ldr	r3, [pc, #4]	; (8006e78 <__errno+0x8>)
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20000480 	.word	0x20000480

08006e7c <__libc_init_array>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	4e0d      	ldr	r6, [pc, #52]	; (8006eb4 <__libc_init_array+0x38>)
 8006e80:	4c0d      	ldr	r4, [pc, #52]	; (8006eb8 <__libc_init_array+0x3c>)
 8006e82:	1ba4      	subs	r4, r4, r6
 8006e84:	10a4      	asrs	r4, r4, #2
 8006e86:	2500      	movs	r5, #0
 8006e88:	42a5      	cmp	r5, r4
 8006e8a:	d109      	bne.n	8006ea0 <__libc_init_array+0x24>
 8006e8c:	4e0b      	ldr	r6, [pc, #44]	; (8006ebc <__libc_init_array+0x40>)
 8006e8e:	4c0c      	ldr	r4, [pc, #48]	; (8006ec0 <__libc_init_array+0x44>)
 8006e90:	f001 fd46 	bl	8008920 <_init>
 8006e94:	1ba4      	subs	r4, r4, r6
 8006e96:	10a4      	asrs	r4, r4, #2
 8006e98:	2500      	movs	r5, #0
 8006e9a:	42a5      	cmp	r5, r4
 8006e9c:	d105      	bne.n	8006eaa <__libc_init_array+0x2e>
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ea4:	4798      	blx	r3
 8006ea6:	3501      	adds	r5, #1
 8006ea8:	e7ee      	b.n	8006e88 <__libc_init_array+0xc>
 8006eaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006eae:	4798      	blx	r3
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	e7f2      	b.n	8006e9a <__libc_init_array+0x1e>
 8006eb4:	08008c78 	.word	0x08008c78
 8006eb8:	08008c78 	.word	0x08008c78
 8006ebc:	08008c78 	.word	0x08008c78
 8006ec0:	08008c7c 	.word	0x08008c7c

08006ec4 <memcpy>:
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	1e43      	subs	r3, r0, #1
 8006ec8:	440a      	add	r2, r1
 8006eca:	4291      	cmp	r1, r2
 8006ecc:	d100      	bne.n	8006ed0 <memcpy+0xc>
 8006ece:	bd10      	pop	{r4, pc}
 8006ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ed4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ed8:	e7f7      	b.n	8006eca <memcpy+0x6>

08006eda <memset>:
 8006eda:	4402      	add	r2, r0
 8006edc:	4603      	mov	r3, r0
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d100      	bne.n	8006ee4 <memset+0xa>
 8006ee2:	4770      	bx	lr
 8006ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee8:	e7f9      	b.n	8006ede <memset+0x4>

08006eea <__cvt>:
 8006eea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006eee:	ec55 4b10 	vmov	r4, r5, d0
 8006ef2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006ef4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	460e      	mov	r6, r1
 8006efc:	4691      	mov	r9, r2
 8006efe:	4619      	mov	r1, r3
 8006f00:	bfb8      	it	lt
 8006f02:	4622      	movlt	r2, r4
 8006f04:	462b      	mov	r3, r5
 8006f06:	f027 0720 	bic.w	r7, r7, #32
 8006f0a:	bfbb      	ittet	lt
 8006f0c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f10:	461d      	movlt	r5, r3
 8006f12:	2300      	movge	r3, #0
 8006f14:	232d      	movlt	r3, #45	; 0x2d
 8006f16:	bfb8      	it	lt
 8006f18:	4614      	movlt	r4, r2
 8006f1a:	2f46      	cmp	r7, #70	; 0x46
 8006f1c:	700b      	strb	r3, [r1, #0]
 8006f1e:	d004      	beq.n	8006f2a <__cvt+0x40>
 8006f20:	2f45      	cmp	r7, #69	; 0x45
 8006f22:	d100      	bne.n	8006f26 <__cvt+0x3c>
 8006f24:	3601      	adds	r6, #1
 8006f26:	2102      	movs	r1, #2
 8006f28:	e000      	b.n	8006f2c <__cvt+0x42>
 8006f2a:	2103      	movs	r1, #3
 8006f2c:	ab03      	add	r3, sp, #12
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	ab02      	add	r3, sp, #8
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	4632      	mov	r2, r6
 8006f36:	4653      	mov	r3, sl
 8006f38:	ec45 4b10 	vmov	d0, r4, r5
 8006f3c:	f000 fbac 	bl	8007698 <_dtoa_r>
 8006f40:	2f47      	cmp	r7, #71	; 0x47
 8006f42:	4680      	mov	r8, r0
 8006f44:	d102      	bne.n	8006f4c <__cvt+0x62>
 8006f46:	f019 0f01 	tst.w	r9, #1
 8006f4a:	d026      	beq.n	8006f9a <__cvt+0xb0>
 8006f4c:	2f46      	cmp	r7, #70	; 0x46
 8006f4e:	eb08 0906 	add.w	r9, r8, r6
 8006f52:	d111      	bne.n	8006f78 <__cvt+0x8e>
 8006f54:	f898 3000 	ldrb.w	r3, [r8]
 8006f58:	2b30      	cmp	r3, #48	; 0x30
 8006f5a:	d10a      	bne.n	8006f72 <__cvt+0x88>
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2300      	movs	r3, #0
 8006f60:	4620      	mov	r0, r4
 8006f62:	4629      	mov	r1, r5
 8006f64:	f7f9 fd60 	bl	8000a28 <__aeabi_dcmpeq>
 8006f68:	b918      	cbnz	r0, 8006f72 <__cvt+0x88>
 8006f6a:	f1c6 0601 	rsb	r6, r6, #1
 8006f6e:	f8ca 6000 	str.w	r6, [sl]
 8006f72:	f8da 3000 	ldr.w	r3, [sl]
 8006f76:	4499      	add	r9, r3
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	4629      	mov	r1, r5
 8006f80:	f7f9 fd52 	bl	8000a28 <__aeabi_dcmpeq>
 8006f84:	b938      	cbnz	r0, 8006f96 <__cvt+0xac>
 8006f86:	2230      	movs	r2, #48	; 0x30
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	454b      	cmp	r3, r9
 8006f8c:	d205      	bcs.n	8006f9a <__cvt+0xb0>
 8006f8e:	1c59      	adds	r1, r3, #1
 8006f90:	9103      	str	r1, [sp, #12]
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	e7f8      	b.n	8006f88 <__cvt+0x9e>
 8006f96:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f9e:	eba3 0308 	sub.w	r3, r3, r8
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	b004      	add	sp, #16
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006fac <__exponent>:
 8006fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fae:	2900      	cmp	r1, #0
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	bfba      	itte	lt
 8006fb4:	4249      	neglt	r1, r1
 8006fb6:	232d      	movlt	r3, #45	; 0x2d
 8006fb8:	232b      	movge	r3, #43	; 0x2b
 8006fba:	2909      	cmp	r1, #9
 8006fbc:	f804 2b02 	strb.w	r2, [r4], #2
 8006fc0:	7043      	strb	r3, [r0, #1]
 8006fc2:	dd20      	ble.n	8007006 <__exponent+0x5a>
 8006fc4:	f10d 0307 	add.w	r3, sp, #7
 8006fc8:	461f      	mov	r7, r3
 8006fca:	260a      	movs	r6, #10
 8006fcc:	fb91 f5f6 	sdiv	r5, r1, r6
 8006fd0:	fb06 1115 	mls	r1, r6, r5, r1
 8006fd4:	3130      	adds	r1, #48	; 0x30
 8006fd6:	2d09      	cmp	r5, #9
 8006fd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fdc:	f103 32ff 	add.w	r2, r3, #4294967295
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	dc09      	bgt.n	8006ff8 <__exponent+0x4c>
 8006fe4:	3130      	adds	r1, #48	; 0x30
 8006fe6:	3b02      	subs	r3, #2
 8006fe8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006fec:	42bb      	cmp	r3, r7
 8006fee:	4622      	mov	r2, r4
 8006ff0:	d304      	bcc.n	8006ffc <__exponent+0x50>
 8006ff2:	1a10      	subs	r0, r2, r0
 8006ff4:	b003      	add	sp, #12
 8006ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	e7e7      	b.n	8006fcc <__exponent+0x20>
 8006ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007000:	f804 2b01 	strb.w	r2, [r4], #1
 8007004:	e7f2      	b.n	8006fec <__exponent+0x40>
 8007006:	2330      	movs	r3, #48	; 0x30
 8007008:	4419      	add	r1, r3
 800700a:	7083      	strb	r3, [r0, #2]
 800700c:	1d02      	adds	r2, r0, #4
 800700e:	70c1      	strb	r1, [r0, #3]
 8007010:	e7ef      	b.n	8006ff2 <__exponent+0x46>
	...

08007014 <_printf_float>:
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	b08d      	sub	sp, #52	; 0x34
 800701a:	460c      	mov	r4, r1
 800701c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007020:	4616      	mov	r6, r2
 8007022:	461f      	mov	r7, r3
 8007024:	4605      	mov	r5, r0
 8007026:	f001 f8ef 	bl	8008208 <_localeconv_r>
 800702a:	6803      	ldr	r3, [r0, #0]
 800702c:	9304      	str	r3, [sp, #16]
 800702e:	4618      	mov	r0, r3
 8007030:	f7f9 f8ce 	bl	80001d0 <strlen>
 8007034:	2300      	movs	r3, #0
 8007036:	930a      	str	r3, [sp, #40]	; 0x28
 8007038:	f8d8 3000 	ldr.w	r3, [r8]
 800703c:	9005      	str	r0, [sp, #20]
 800703e:	3307      	adds	r3, #7
 8007040:	f023 0307 	bic.w	r3, r3, #7
 8007044:	f103 0208 	add.w	r2, r3, #8
 8007048:	f894 a018 	ldrb.w	sl, [r4, #24]
 800704c:	f8d4 b000 	ldr.w	fp, [r4]
 8007050:	f8c8 2000 	str.w	r2, [r8]
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800705c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007060:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007064:	9307      	str	r3, [sp, #28]
 8007066:	f8cd 8018 	str.w	r8, [sp, #24]
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	4ba7      	ldr	r3, [pc, #668]	; (800730c <_printf_float+0x2f8>)
 8007070:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007074:	f7f9 fd0a 	bl	8000a8c <__aeabi_dcmpun>
 8007078:	bb70      	cbnz	r0, 80070d8 <_printf_float+0xc4>
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	4ba3      	ldr	r3, [pc, #652]	; (800730c <_printf_float+0x2f8>)
 8007080:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007084:	f7f9 fce4 	bl	8000a50 <__aeabi_dcmple>
 8007088:	bb30      	cbnz	r0, 80070d8 <_printf_float+0xc4>
 800708a:	2200      	movs	r2, #0
 800708c:	2300      	movs	r3, #0
 800708e:	4640      	mov	r0, r8
 8007090:	4649      	mov	r1, r9
 8007092:	f7f9 fcd3 	bl	8000a3c <__aeabi_dcmplt>
 8007096:	b110      	cbz	r0, 800709e <_printf_float+0x8a>
 8007098:	232d      	movs	r3, #45	; 0x2d
 800709a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800709e:	4a9c      	ldr	r2, [pc, #624]	; (8007310 <_printf_float+0x2fc>)
 80070a0:	4b9c      	ldr	r3, [pc, #624]	; (8007314 <_printf_float+0x300>)
 80070a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80070a6:	bf8c      	ite	hi
 80070a8:	4690      	movhi	r8, r2
 80070aa:	4698      	movls	r8, r3
 80070ac:	2303      	movs	r3, #3
 80070ae:	f02b 0204 	bic.w	r2, fp, #4
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	6022      	str	r2, [r4, #0]
 80070b6:	f04f 0900 	mov.w	r9, #0
 80070ba:	9700      	str	r7, [sp, #0]
 80070bc:	4633      	mov	r3, r6
 80070be:	aa0b      	add	r2, sp, #44	; 0x2c
 80070c0:	4621      	mov	r1, r4
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 f9e6 	bl	8007494 <_printf_common>
 80070c8:	3001      	adds	r0, #1
 80070ca:	f040 808d 	bne.w	80071e8 <_printf_float+0x1d4>
 80070ce:	f04f 30ff 	mov.w	r0, #4294967295
 80070d2:	b00d      	add	sp, #52	; 0x34
 80070d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d8:	4642      	mov	r2, r8
 80070da:	464b      	mov	r3, r9
 80070dc:	4640      	mov	r0, r8
 80070de:	4649      	mov	r1, r9
 80070e0:	f7f9 fcd4 	bl	8000a8c <__aeabi_dcmpun>
 80070e4:	b110      	cbz	r0, 80070ec <_printf_float+0xd8>
 80070e6:	4a8c      	ldr	r2, [pc, #560]	; (8007318 <_printf_float+0x304>)
 80070e8:	4b8c      	ldr	r3, [pc, #560]	; (800731c <_printf_float+0x308>)
 80070ea:	e7da      	b.n	80070a2 <_printf_float+0x8e>
 80070ec:	6861      	ldr	r1, [r4, #4]
 80070ee:	1c4b      	adds	r3, r1, #1
 80070f0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80070f4:	a80a      	add	r0, sp, #40	; 0x28
 80070f6:	d13e      	bne.n	8007176 <_printf_float+0x162>
 80070f8:	2306      	movs	r3, #6
 80070fa:	6063      	str	r3, [r4, #4]
 80070fc:	2300      	movs	r3, #0
 80070fe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007102:	ab09      	add	r3, sp, #36	; 0x24
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	ec49 8b10 	vmov	d0, r8, r9
 800710a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800710e:	6022      	str	r2, [r4, #0]
 8007110:	f8cd a004 	str.w	sl, [sp, #4]
 8007114:	6861      	ldr	r1, [r4, #4]
 8007116:	4628      	mov	r0, r5
 8007118:	f7ff fee7 	bl	8006eea <__cvt>
 800711c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007120:	2b47      	cmp	r3, #71	; 0x47
 8007122:	4680      	mov	r8, r0
 8007124:	d109      	bne.n	800713a <_printf_float+0x126>
 8007126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007128:	1cd8      	adds	r0, r3, #3
 800712a:	db02      	blt.n	8007132 <_printf_float+0x11e>
 800712c:	6862      	ldr	r2, [r4, #4]
 800712e:	4293      	cmp	r3, r2
 8007130:	dd47      	ble.n	80071c2 <_printf_float+0x1ae>
 8007132:	f1aa 0a02 	sub.w	sl, sl, #2
 8007136:	fa5f fa8a 	uxtb.w	sl, sl
 800713a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800713e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007140:	d824      	bhi.n	800718c <_printf_float+0x178>
 8007142:	3901      	subs	r1, #1
 8007144:	4652      	mov	r2, sl
 8007146:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800714a:	9109      	str	r1, [sp, #36]	; 0x24
 800714c:	f7ff ff2e 	bl	8006fac <__exponent>
 8007150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007152:	1813      	adds	r3, r2, r0
 8007154:	2a01      	cmp	r2, #1
 8007156:	4681      	mov	r9, r0
 8007158:	6123      	str	r3, [r4, #16]
 800715a:	dc02      	bgt.n	8007162 <_printf_float+0x14e>
 800715c:	6822      	ldr	r2, [r4, #0]
 800715e:	07d1      	lsls	r1, r2, #31
 8007160:	d501      	bpl.n	8007166 <_printf_float+0x152>
 8007162:	3301      	adds	r3, #1
 8007164:	6123      	str	r3, [r4, #16]
 8007166:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800716a:	2b00      	cmp	r3, #0
 800716c:	d0a5      	beq.n	80070ba <_printf_float+0xa6>
 800716e:	232d      	movs	r3, #45	; 0x2d
 8007170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007174:	e7a1      	b.n	80070ba <_printf_float+0xa6>
 8007176:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800717a:	f000 8177 	beq.w	800746c <_printf_float+0x458>
 800717e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007182:	d1bb      	bne.n	80070fc <_printf_float+0xe8>
 8007184:	2900      	cmp	r1, #0
 8007186:	d1b9      	bne.n	80070fc <_printf_float+0xe8>
 8007188:	2301      	movs	r3, #1
 800718a:	e7b6      	b.n	80070fa <_printf_float+0xe6>
 800718c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007190:	d119      	bne.n	80071c6 <_printf_float+0x1b2>
 8007192:	2900      	cmp	r1, #0
 8007194:	6863      	ldr	r3, [r4, #4]
 8007196:	dd0c      	ble.n	80071b2 <_printf_float+0x19e>
 8007198:	6121      	str	r1, [r4, #16]
 800719a:	b913      	cbnz	r3, 80071a2 <_printf_float+0x18e>
 800719c:	6822      	ldr	r2, [r4, #0]
 800719e:	07d2      	lsls	r2, r2, #31
 80071a0:	d502      	bpl.n	80071a8 <_printf_float+0x194>
 80071a2:	3301      	adds	r3, #1
 80071a4:	440b      	add	r3, r1
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80071ac:	f04f 0900 	mov.w	r9, #0
 80071b0:	e7d9      	b.n	8007166 <_printf_float+0x152>
 80071b2:	b913      	cbnz	r3, 80071ba <_printf_float+0x1a6>
 80071b4:	6822      	ldr	r2, [r4, #0]
 80071b6:	07d0      	lsls	r0, r2, #31
 80071b8:	d501      	bpl.n	80071be <_printf_float+0x1aa>
 80071ba:	3302      	adds	r3, #2
 80071bc:	e7f3      	b.n	80071a6 <_printf_float+0x192>
 80071be:	2301      	movs	r3, #1
 80071c0:	e7f1      	b.n	80071a6 <_printf_float+0x192>
 80071c2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80071c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80071ca:	4293      	cmp	r3, r2
 80071cc:	db05      	blt.n	80071da <_printf_float+0x1c6>
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	6123      	str	r3, [r4, #16]
 80071d2:	07d1      	lsls	r1, r2, #31
 80071d4:	d5e8      	bpl.n	80071a8 <_printf_float+0x194>
 80071d6:	3301      	adds	r3, #1
 80071d8:	e7e5      	b.n	80071a6 <_printf_float+0x192>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	bfd4      	ite	le
 80071de:	f1c3 0302 	rsble	r3, r3, #2
 80071e2:	2301      	movgt	r3, #1
 80071e4:	4413      	add	r3, r2
 80071e6:	e7de      	b.n	80071a6 <_printf_float+0x192>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	055a      	lsls	r2, r3, #21
 80071ec:	d407      	bmi.n	80071fe <_printf_float+0x1ea>
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	4642      	mov	r2, r8
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	d12b      	bne.n	8007254 <_printf_float+0x240>
 80071fc:	e767      	b.n	80070ce <_printf_float+0xba>
 80071fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007202:	f240 80dc 	bls.w	80073be <_printf_float+0x3aa>
 8007206:	2200      	movs	r2, #0
 8007208:	2300      	movs	r3, #0
 800720a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800720e:	f7f9 fc0b 	bl	8000a28 <__aeabi_dcmpeq>
 8007212:	2800      	cmp	r0, #0
 8007214:	d033      	beq.n	800727e <_printf_float+0x26a>
 8007216:	2301      	movs	r3, #1
 8007218:	4a41      	ldr	r2, [pc, #260]	; (8007320 <_printf_float+0x30c>)
 800721a:	4631      	mov	r1, r6
 800721c:	4628      	mov	r0, r5
 800721e:	47b8      	blx	r7
 8007220:	3001      	adds	r0, #1
 8007222:	f43f af54 	beq.w	80070ce <_printf_float+0xba>
 8007226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800722a:	429a      	cmp	r2, r3
 800722c:	db02      	blt.n	8007234 <_printf_float+0x220>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	07d8      	lsls	r0, r3, #31
 8007232:	d50f      	bpl.n	8007254 <_printf_float+0x240>
 8007234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007238:	4631      	mov	r1, r6
 800723a:	4628      	mov	r0, r5
 800723c:	47b8      	blx	r7
 800723e:	3001      	adds	r0, #1
 8007240:	f43f af45 	beq.w	80070ce <_printf_float+0xba>
 8007244:	f04f 0800 	mov.w	r8, #0
 8007248:	f104 091a 	add.w	r9, r4, #26
 800724c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724e:	3b01      	subs	r3, #1
 8007250:	4543      	cmp	r3, r8
 8007252:	dc09      	bgt.n	8007268 <_printf_float+0x254>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	079b      	lsls	r3, r3, #30
 8007258:	f100 8103 	bmi.w	8007462 <_printf_float+0x44e>
 800725c:	68e0      	ldr	r0, [r4, #12]
 800725e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007260:	4298      	cmp	r0, r3
 8007262:	bfb8      	it	lt
 8007264:	4618      	movlt	r0, r3
 8007266:	e734      	b.n	80070d2 <_printf_float+0xbe>
 8007268:	2301      	movs	r3, #1
 800726a:	464a      	mov	r2, r9
 800726c:	4631      	mov	r1, r6
 800726e:	4628      	mov	r0, r5
 8007270:	47b8      	blx	r7
 8007272:	3001      	adds	r0, #1
 8007274:	f43f af2b 	beq.w	80070ce <_printf_float+0xba>
 8007278:	f108 0801 	add.w	r8, r8, #1
 800727c:	e7e6      	b.n	800724c <_printf_float+0x238>
 800727e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007280:	2b00      	cmp	r3, #0
 8007282:	dc2b      	bgt.n	80072dc <_printf_float+0x2c8>
 8007284:	2301      	movs	r3, #1
 8007286:	4a26      	ldr	r2, [pc, #152]	; (8007320 <_printf_float+0x30c>)
 8007288:	4631      	mov	r1, r6
 800728a:	4628      	mov	r0, r5
 800728c:	47b8      	blx	r7
 800728e:	3001      	adds	r0, #1
 8007290:	f43f af1d 	beq.w	80070ce <_printf_float+0xba>
 8007294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007296:	b923      	cbnz	r3, 80072a2 <_printf_float+0x28e>
 8007298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800729a:	b913      	cbnz	r3, 80072a2 <_printf_float+0x28e>
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	07d9      	lsls	r1, r3, #31
 80072a0:	d5d8      	bpl.n	8007254 <_printf_float+0x240>
 80072a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	f43f af0e 	beq.w	80070ce <_printf_float+0xba>
 80072b2:	f04f 0900 	mov.w	r9, #0
 80072b6:	f104 0a1a 	add.w	sl, r4, #26
 80072ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072bc:	425b      	negs	r3, r3
 80072be:	454b      	cmp	r3, r9
 80072c0:	dc01      	bgt.n	80072c6 <_printf_float+0x2b2>
 80072c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c4:	e794      	b.n	80071f0 <_printf_float+0x1dc>
 80072c6:	2301      	movs	r3, #1
 80072c8:	4652      	mov	r2, sl
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	47b8      	blx	r7
 80072d0:	3001      	adds	r0, #1
 80072d2:	f43f aefc 	beq.w	80070ce <_printf_float+0xba>
 80072d6:	f109 0901 	add.w	r9, r9, #1
 80072da:	e7ee      	b.n	80072ba <_printf_float+0x2a6>
 80072dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072e0:	429a      	cmp	r2, r3
 80072e2:	bfa8      	it	ge
 80072e4:	461a      	movge	r2, r3
 80072e6:	2a00      	cmp	r2, #0
 80072e8:	4691      	mov	r9, r2
 80072ea:	dd07      	ble.n	80072fc <_printf_float+0x2e8>
 80072ec:	4613      	mov	r3, r2
 80072ee:	4631      	mov	r1, r6
 80072f0:	4642      	mov	r2, r8
 80072f2:	4628      	mov	r0, r5
 80072f4:	47b8      	blx	r7
 80072f6:	3001      	adds	r0, #1
 80072f8:	f43f aee9 	beq.w	80070ce <_printf_float+0xba>
 80072fc:	f104 031a 	add.w	r3, r4, #26
 8007300:	f04f 0b00 	mov.w	fp, #0
 8007304:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007308:	9306      	str	r3, [sp, #24]
 800730a:	e015      	b.n	8007338 <_printf_float+0x324>
 800730c:	7fefffff 	.word	0x7fefffff
 8007310:	08008a48 	.word	0x08008a48
 8007314:	08008a44 	.word	0x08008a44
 8007318:	08008a50 	.word	0x08008a50
 800731c:	08008a4c 	.word	0x08008a4c
 8007320:	08008a54 	.word	0x08008a54
 8007324:	2301      	movs	r3, #1
 8007326:	9a06      	ldr	r2, [sp, #24]
 8007328:	4631      	mov	r1, r6
 800732a:	4628      	mov	r0, r5
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	f43f aecd 	beq.w	80070ce <_printf_float+0xba>
 8007334:	f10b 0b01 	add.w	fp, fp, #1
 8007338:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800733c:	ebaa 0309 	sub.w	r3, sl, r9
 8007340:	455b      	cmp	r3, fp
 8007342:	dcef      	bgt.n	8007324 <_printf_float+0x310>
 8007344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007348:	429a      	cmp	r2, r3
 800734a:	44d0      	add	r8, sl
 800734c:	db15      	blt.n	800737a <_printf_float+0x366>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	07da      	lsls	r2, r3, #31
 8007352:	d412      	bmi.n	800737a <_printf_float+0x366>
 8007354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007356:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007358:	eba3 020a 	sub.w	r2, r3, sl
 800735c:	eba3 0a01 	sub.w	sl, r3, r1
 8007360:	4592      	cmp	sl, r2
 8007362:	bfa8      	it	ge
 8007364:	4692      	movge	sl, r2
 8007366:	f1ba 0f00 	cmp.w	sl, #0
 800736a:	dc0e      	bgt.n	800738a <_printf_float+0x376>
 800736c:	f04f 0800 	mov.w	r8, #0
 8007370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007374:	f104 091a 	add.w	r9, r4, #26
 8007378:	e019      	b.n	80073ae <_printf_float+0x39a>
 800737a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800737e:	4631      	mov	r1, r6
 8007380:	4628      	mov	r0, r5
 8007382:	47b8      	blx	r7
 8007384:	3001      	adds	r0, #1
 8007386:	d1e5      	bne.n	8007354 <_printf_float+0x340>
 8007388:	e6a1      	b.n	80070ce <_printf_float+0xba>
 800738a:	4653      	mov	r3, sl
 800738c:	4642      	mov	r2, r8
 800738e:	4631      	mov	r1, r6
 8007390:	4628      	mov	r0, r5
 8007392:	47b8      	blx	r7
 8007394:	3001      	adds	r0, #1
 8007396:	d1e9      	bne.n	800736c <_printf_float+0x358>
 8007398:	e699      	b.n	80070ce <_printf_float+0xba>
 800739a:	2301      	movs	r3, #1
 800739c:	464a      	mov	r2, r9
 800739e:	4631      	mov	r1, r6
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b8      	blx	r7
 80073a4:	3001      	adds	r0, #1
 80073a6:	f43f ae92 	beq.w	80070ce <_printf_float+0xba>
 80073aa:	f108 0801 	add.w	r8, r8, #1
 80073ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073b2:	1a9b      	subs	r3, r3, r2
 80073b4:	eba3 030a 	sub.w	r3, r3, sl
 80073b8:	4543      	cmp	r3, r8
 80073ba:	dcee      	bgt.n	800739a <_printf_float+0x386>
 80073bc:	e74a      	b.n	8007254 <_printf_float+0x240>
 80073be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c0:	2a01      	cmp	r2, #1
 80073c2:	dc01      	bgt.n	80073c8 <_printf_float+0x3b4>
 80073c4:	07db      	lsls	r3, r3, #31
 80073c6:	d53a      	bpl.n	800743e <_printf_float+0x42a>
 80073c8:	2301      	movs	r3, #1
 80073ca:	4642      	mov	r2, r8
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f ae7b 	beq.w	80070ce <_printf_float+0xba>
 80073d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f108 0801 	add.w	r8, r8, #1
 80073e8:	f43f ae71 	beq.w	80070ce <_printf_float+0xba>
 80073ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ee:	2200      	movs	r2, #0
 80073f0:	f103 3aff 	add.w	sl, r3, #4294967295
 80073f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073f8:	2300      	movs	r3, #0
 80073fa:	f7f9 fb15 	bl	8000a28 <__aeabi_dcmpeq>
 80073fe:	b9c8      	cbnz	r0, 8007434 <_printf_float+0x420>
 8007400:	4653      	mov	r3, sl
 8007402:	4642      	mov	r2, r8
 8007404:	4631      	mov	r1, r6
 8007406:	4628      	mov	r0, r5
 8007408:	47b8      	blx	r7
 800740a:	3001      	adds	r0, #1
 800740c:	d10e      	bne.n	800742c <_printf_float+0x418>
 800740e:	e65e      	b.n	80070ce <_printf_float+0xba>
 8007410:	2301      	movs	r3, #1
 8007412:	4652      	mov	r2, sl
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	f43f ae57 	beq.w	80070ce <_printf_float+0xba>
 8007420:	f108 0801 	add.w	r8, r8, #1
 8007424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007426:	3b01      	subs	r3, #1
 8007428:	4543      	cmp	r3, r8
 800742a:	dcf1      	bgt.n	8007410 <_printf_float+0x3fc>
 800742c:	464b      	mov	r3, r9
 800742e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007432:	e6de      	b.n	80071f2 <_printf_float+0x1de>
 8007434:	f04f 0800 	mov.w	r8, #0
 8007438:	f104 0a1a 	add.w	sl, r4, #26
 800743c:	e7f2      	b.n	8007424 <_printf_float+0x410>
 800743e:	2301      	movs	r3, #1
 8007440:	e7df      	b.n	8007402 <_printf_float+0x3ee>
 8007442:	2301      	movs	r3, #1
 8007444:	464a      	mov	r2, r9
 8007446:	4631      	mov	r1, r6
 8007448:	4628      	mov	r0, r5
 800744a:	47b8      	blx	r7
 800744c:	3001      	adds	r0, #1
 800744e:	f43f ae3e 	beq.w	80070ce <_printf_float+0xba>
 8007452:	f108 0801 	add.w	r8, r8, #1
 8007456:	68e3      	ldr	r3, [r4, #12]
 8007458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	4543      	cmp	r3, r8
 800745e:	dcf0      	bgt.n	8007442 <_printf_float+0x42e>
 8007460:	e6fc      	b.n	800725c <_printf_float+0x248>
 8007462:	f04f 0800 	mov.w	r8, #0
 8007466:	f104 0919 	add.w	r9, r4, #25
 800746a:	e7f4      	b.n	8007456 <_printf_float+0x442>
 800746c:	2900      	cmp	r1, #0
 800746e:	f43f ae8b 	beq.w	8007188 <_printf_float+0x174>
 8007472:	2300      	movs	r3, #0
 8007474:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007478:	ab09      	add	r3, sp, #36	; 0x24
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	ec49 8b10 	vmov	d0, r8, r9
 8007480:	6022      	str	r2, [r4, #0]
 8007482:	f8cd a004 	str.w	sl, [sp, #4]
 8007486:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800748a:	4628      	mov	r0, r5
 800748c:	f7ff fd2d 	bl	8006eea <__cvt>
 8007490:	4680      	mov	r8, r0
 8007492:	e648      	b.n	8007126 <_printf_float+0x112>

08007494 <_printf_common>:
 8007494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007498:	4691      	mov	r9, r2
 800749a:	461f      	mov	r7, r3
 800749c:	688a      	ldr	r2, [r1, #8]
 800749e:	690b      	ldr	r3, [r1, #16]
 80074a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074a4:	4293      	cmp	r3, r2
 80074a6:	bfb8      	it	lt
 80074a8:	4613      	movlt	r3, r2
 80074aa:	f8c9 3000 	str.w	r3, [r9]
 80074ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074b2:	4606      	mov	r6, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	b112      	cbz	r2, 80074be <_printf_common+0x2a>
 80074b8:	3301      	adds	r3, #1
 80074ba:	f8c9 3000 	str.w	r3, [r9]
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	0699      	lsls	r1, r3, #26
 80074c2:	bf42      	ittt	mi
 80074c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80074c8:	3302      	addmi	r3, #2
 80074ca:	f8c9 3000 	strmi.w	r3, [r9]
 80074ce:	6825      	ldr	r5, [r4, #0]
 80074d0:	f015 0506 	ands.w	r5, r5, #6
 80074d4:	d107      	bne.n	80074e6 <_printf_common+0x52>
 80074d6:	f104 0a19 	add.w	sl, r4, #25
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	f8d9 2000 	ldr.w	r2, [r9]
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	42ab      	cmp	r3, r5
 80074e4:	dc28      	bgt.n	8007538 <_printf_common+0xa4>
 80074e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80074ea:	6822      	ldr	r2, [r4, #0]
 80074ec:	3300      	adds	r3, #0
 80074ee:	bf18      	it	ne
 80074f0:	2301      	movne	r3, #1
 80074f2:	0692      	lsls	r2, r2, #26
 80074f4:	d42d      	bmi.n	8007552 <_printf_common+0xbe>
 80074f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074fa:	4639      	mov	r1, r7
 80074fc:	4630      	mov	r0, r6
 80074fe:	47c0      	blx	r8
 8007500:	3001      	adds	r0, #1
 8007502:	d020      	beq.n	8007546 <_printf_common+0xb2>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	68e5      	ldr	r5, [r4, #12]
 8007508:	f8d9 2000 	ldr.w	r2, [r9]
 800750c:	f003 0306 	and.w	r3, r3, #6
 8007510:	2b04      	cmp	r3, #4
 8007512:	bf08      	it	eq
 8007514:	1aad      	subeq	r5, r5, r2
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	6922      	ldr	r2, [r4, #16]
 800751a:	bf0c      	ite	eq
 800751c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007520:	2500      	movne	r5, #0
 8007522:	4293      	cmp	r3, r2
 8007524:	bfc4      	itt	gt
 8007526:	1a9b      	subgt	r3, r3, r2
 8007528:	18ed      	addgt	r5, r5, r3
 800752a:	f04f 0900 	mov.w	r9, #0
 800752e:	341a      	adds	r4, #26
 8007530:	454d      	cmp	r5, r9
 8007532:	d11a      	bne.n	800756a <_printf_common+0xd6>
 8007534:	2000      	movs	r0, #0
 8007536:	e008      	b.n	800754a <_printf_common+0xb6>
 8007538:	2301      	movs	r3, #1
 800753a:	4652      	mov	r2, sl
 800753c:	4639      	mov	r1, r7
 800753e:	4630      	mov	r0, r6
 8007540:	47c0      	blx	r8
 8007542:	3001      	adds	r0, #1
 8007544:	d103      	bne.n	800754e <_printf_common+0xba>
 8007546:	f04f 30ff 	mov.w	r0, #4294967295
 800754a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754e:	3501      	adds	r5, #1
 8007550:	e7c3      	b.n	80074da <_printf_common+0x46>
 8007552:	18e1      	adds	r1, r4, r3
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	2030      	movs	r0, #48	; 0x30
 8007558:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800755c:	4422      	add	r2, r4
 800755e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007562:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007566:	3302      	adds	r3, #2
 8007568:	e7c5      	b.n	80074f6 <_printf_common+0x62>
 800756a:	2301      	movs	r3, #1
 800756c:	4622      	mov	r2, r4
 800756e:	4639      	mov	r1, r7
 8007570:	4630      	mov	r0, r6
 8007572:	47c0      	blx	r8
 8007574:	3001      	adds	r0, #1
 8007576:	d0e6      	beq.n	8007546 <_printf_common+0xb2>
 8007578:	f109 0901 	add.w	r9, r9, #1
 800757c:	e7d8      	b.n	8007530 <_printf_common+0x9c>

0800757e <quorem>:
 800757e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007582:	6903      	ldr	r3, [r0, #16]
 8007584:	690c      	ldr	r4, [r1, #16]
 8007586:	42a3      	cmp	r3, r4
 8007588:	4680      	mov	r8, r0
 800758a:	f2c0 8082 	blt.w	8007692 <quorem+0x114>
 800758e:	3c01      	subs	r4, #1
 8007590:	f101 0714 	add.w	r7, r1, #20
 8007594:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007598:	f100 0614 	add.w	r6, r0, #20
 800759c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80075a0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80075a4:	eb06 030c 	add.w	r3, r6, ip
 80075a8:	3501      	adds	r5, #1
 80075aa:	eb07 090c 	add.w	r9, r7, ip
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	fbb0 f5f5 	udiv	r5, r0, r5
 80075b4:	b395      	cbz	r5, 800761c <quorem+0x9e>
 80075b6:	f04f 0a00 	mov.w	sl, #0
 80075ba:	4638      	mov	r0, r7
 80075bc:	46b6      	mov	lr, r6
 80075be:	46d3      	mov	fp, sl
 80075c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80075c4:	b293      	uxth	r3, r2
 80075c6:	fb05 a303 	mla	r3, r5, r3, sl
 80075ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	ebab 0303 	sub.w	r3, fp, r3
 80075d4:	0c12      	lsrs	r2, r2, #16
 80075d6:	f8de b000 	ldr.w	fp, [lr]
 80075da:	fb05 a202 	mla	r2, r5, r2, sl
 80075de:	fa13 f38b 	uxtah	r3, r3, fp
 80075e2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80075e6:	fa1f fb82 	uxth.w	fp, r2
 80075ea:	f8de 2000 	ldr.w	r2, [lr]
 80075ee:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80075f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075fc:	4581      	cmp	r9, r0
 80075fe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007602:	f84e 3b04 	str.w	r3, [lr], #4
 8007606:	d2db      	bcs.n	80075c0 <quorem+0x42>
 8007608:	f856 300c 	ldr.w	r3, [r6, ip]
 800760c:	b933      	cbnz	r3, 800761c <quorem+0x9e>
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	3b04      	subs	r3, #4
 8007612:	429e      	cmp	r6, r3
 8007614:	461a      	mov	r2, r3
 8007616:	d330      	bcc.n	800767a <quorem+0xfc>
 8007618:	f8c8 4010 	str.w	r4, [r8, #16]
 800761c:	4640      	mov	r0, r8
 800761e:	f001 f831 	bl	8008684 <__mcmp>
 8007622:	2800      	cmp	r0, #0
 8007624:	db25      	blt.n	8007672 <quorem+0xf4>
 8007626:	3501      	adds	r5, #1
 8007628:	4630      	mov	r0, r6
 800762a:	f04f 0c00 	mov.w	ip, #0
 800762e:	f857 2b04 	ldr.w	r2, [r7], #4
 8007632:	f8d0 e000 	ldr.w	lr, [r0]
 8007636:	b293      	uxth	r3, r2
 8007638:	ebac 0303 	sub.w	r3, ip, r3
 800763c:	0c12      	lsrs	r2, r2, #16
 800763e:	fa13 f38e 	uxtah	r3, r3, lr
 8007642:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007646:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800764a:	b29b      	uxth	r3, r3
 800764c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007650:	45b9      	cmp	r9, r7
 8007652:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007656:	f840 3b04 	str.w	r3, [r0], #4
 800765a:	d2e8      	bcs.n	800762e <quorem+0xb0>
 800765c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007660:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007664:	b92a      	cbnz	r2, 8007672 <quorem+0xf4>
 8007666:	3b04      	subs	r3, #4
 8007668:	429e      	cmp	r6, r3
 800766a:	461a      	mov	r2, r3
 800766c:	d30b      	bcc.n	8007686 <quorem+0x108>
 800766e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007672:	4628      	mov	r0, r5
 8007674:	b003      	add	sp, #12
 8007676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	3b04      	subs	r3, #4
 800767e:	2a00      	cmp	r2, #0
 8007680:	d1ca      	bne.n	8007618 <quorem+0x9a>
 8007682:	3c01      	subs	r4, #1
 8007684:	e7c5      	b.n	8007612 <quorem+0x94>
 8007686:	6812      	ldr	r2, [r2, #0]
 8007688:	3b04      	subs	r3, #4
 800768a:	2a00      	cmp	r2, #0
 800768c:	d1ef      	bne.n	800766e <quorem+0xf0>
 800768e:	3c01      	subs	r4, #1
 8007690:	e7ea      	b.n	8007668 <quorem+0xea>
 8007692:	2000      	movs	r0, #0
 8007694:	e7ee      	b.n	8007674 <quorem+0xf6>
	...

08007698 <_dtoa_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	ec57 6b10 	vmov	r6, r7, d0
 80076a0:	b097      	sub	sp, #92	; 0x5c
 80076a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076a4:	9106      	str	r1, [sp, #24]
 80076a6:	4604      	mov	r4, r0
 80076a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80076aa:	9312      	str	r3, [sp, #72]	; 0x48
 80076ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076b0:	e9cd 6700 	strd	r6, r7, [sp]
 80076b4:	b93d      	cbnz	r5, 80076c6 <_dtoa_r+0x2e>
 80076b6:	2010      	movs	r0, #16
 80076b8:	f000 fdb4 	bl	8008224 <malloc>
 80076bc:	6260      	str	r0, [r4, #36]	; 0x24
 80076be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076c2:	6005      	str	r5, [r0, #0]
 80076c4:	60c5      	str	r5, [r0, #12]
 80076c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076c8:	6819      	ldr	r1, [r3, #0]
 80076ca:	b151      	cbz	r1, 80076e2 <_dtoa_r+0x4a>
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	604a      	str	r2, [r1, #4]
 80076d0:	2301      	movs	r3, #1
 80076d2:	4093      	lsls	r3, r2
 80076d4:	608b      	str	r3, [r1, #8]
 80076d6:	4620      	mov	r0, r4
 80076d8:	f000 fdf2 	bl	80082c0 <_Bfree>
 80076dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	1e3b      	subs	r3, r7, #0
 80076e4:	bfbb      	ittet	lt
 80076e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076ea:	9301      	strlt	r3, [sp, #4]
 80076ec:	2300      	movge	r3, #0
 80076ee:	2201      	movlt	r2, #1
 80076f0:	bfac      	ite	ge
 80076f2:	f8c8 3000 	strge.w	r3, [r8]
 80076f6:	f8c8 2000 	strlt.w	r2, [r8]
 80076fa:	4baf      	ldr	r3, [pc, #700]	; (80079b8 <_dtoa_r+0x320>)
 80076fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007700:	ea33 0308 	bics.w	r3, r3, r8
 8007704:	d114      	bne.n	8007730 <_dtoa_r+0x98>
 8007706:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007708:	f242 730f 	movw	r3, #9999	; 0x270f
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	9b00      	ldr	r3, [sp, #0]
 8007710:	b923      	cbnz	r3, 800771c <_dtoa_r+0x84>
 8007712:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007716:	2800      	cmp	r0, #0
 8007718:	f000 8542 	beq.w	80081a0 <_dtoa_r+0xb08>
 800771c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800771e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80079cc <_dtoa_r+0x334>
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8544 	beq.w	80081b0 <_dtoa_r+0xb18>
 8007728:	f10b 0303 	add.w	r3, fp, #3
 800772c:	f000 bd3e 	b.w	80081ac <_dtoa_r+0xb14>
 8007730:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007734:	2200      	movs	r2, #0
 8007736:	2300      	movs	r3, #0
 8007738:	4630      	mov	r0, r6
 800773a:	4639      	mov	r1, r7
 800773c:	f7f9 f974 	bl	8000a28 <__aeabi_dcmpeq>
 8007740:	4681      	mov	r9, r0
 8007742:	b168      	cbz	r0, 8007760 <_dtoa_r+0xc8>
 8007744:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007746:	2301      	movs	r3, #1
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8524 	beq.w	800819a <_dtoa_r+0xb02>
 8007752:	4b9a      	ldr	r3, [pc, #616]	; (80079bc <_dtoa_r+0x324>)
 8007754:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007756:	f103 3bff 	add.w	fp, r3, #4294967295
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	f000 bd28 	b.w	80081b0 <_dtoa_r+0xb18>
 8007760:	aa14      	add	r2, sp, #80	; 0x50
 8007762:	a915      	add	r1, sp, #84	; 0x54
 8007764:	ec47 6b10 	vmov	d0, r6, r7
 8007768:	4620      	mov	r0, r4
 800776a:	f001 f802 	bl	8008772 <__d2b>
 800776e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007772:	9004      	str	r0, [sp, #16]
 8007774:	2d00      	cmp	r5, #0
 8007776:	d07c      	beq.n	8007872 <_dtoa_r+0x1da>
 8007778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800777c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007780:	46b2      	mov	sl, r6
 8007782:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007786:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800778a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800778e:	2200      	movs	r2, #0
 8007790:	4b8b      	ldr	r3, [pc, #556]	; (80079c0 <_dtoa_r+0x328>)
 8007792:	4650      	mov	r0, sl
 8007794:	4659      	mov	r1, fp
 8007796:	f7f8 fd27 	bl	80001e8 <__aeabi_dsub>
 800779a:	a381      	add	r3, pc, #516	; (adr r3, 80079a0 <_dtoa_r+0x308>)
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	f7f8 feda 	bl	8000558 <__aeabi_dmul>
 80077a4:	a380      	add	r3, pc, #512	; (adr r3, 80079a8 <_dtoa_r+0x310>)
 80077a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077aa:	f7f8 fd1f 	bl	80001ec <__adddf3>
 80077ae:	4606      	mov	r6, r0
 80077b0:	4628      	mov	r0, r5
 80077b2:	460f      	mov	r7, r1
 80077b4:	f7f8 fe66 	bl	8000484 <__aeabi_i2d>
 80077b8:	a37d      	add	r3, pc, #500	; (adr r3, 80079b0 <_dtoa_r+0x318>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fecb 	bl	8000558 <__aeabi_dmul>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4630      	mov	r0, r6
 80077c8:	4639      	mov	r1, r7
 80077ca:	f7f8 fd0f 	bl	80001ec <__adddf3>
 80077ce:	4606      	mov	r6, r0
 80077d0:	460f      	mov	r7, r1
 80077d2:	f7f9 f971 	bl	8000ab8 <__aeabi_d2iz>
 80077d6:	2200      	movs	r2, #0
 80077d8:	4682      	mov	sl, r0
 80077da:	2300      	movs	r3, #0
 80077dc:	4630      	mov	r0, r6
 80077de:	4639      	mov	r1, r7
 80077e0:	f7f9 f92c 	bl	8000a3c <__aeabi_dcmplt>
 80077e4:	b148      	cbz	r0, 80077fa <_dtoa_r+0x162>
 80077e6:	4650      	mov	r0, sl
 80077e8:	f7f8 fe4c 	bl	8000484 <__aeabi_i2d>
 80077ec:	4632      	mov	r2, r6
 80077ee:	463b      	mov	r3, r7
 80077f0:	f7f9 f91a 	bl	8000a28 <__aeabi_dcmpeq>
 80077f4:	b908      	cbnz	r0, 80077fa <_dtoa_r+0x162>
 80077f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077fa:	f1ba 0f16 	cmp.w	sl, #22
 80077fe:	d859      	bhi.n	80078b4 <_dtoa_r+0x21c>
 8007800:	4970      	ldr	r1, [pc, #448]	; (80079c4 <_dtoa_r+0x32c>)
 8007802:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800780a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800780e:	f7f9 f933 	bl	8000a78 <__aeabi_dcmpgt>
 8007812:	2800      	cmp	r0, #0
 8007814:	d050      	beq.n	80078b8 <_dtoa_r+0x220>
 8007816:	f10a 3aff 	add.w	sl, sl, #4294967295
 800781a:	2300      	movs	r3, #0
 800781c:	930f      	str	r3, [sp, #60]	; 0x3c
 800781e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007820:	1b5d      	subs	r5, r3, r5
 8007822:	f1b5 0801 	subs.w	r8, r5, #1
 8007826:	bf49      	itett	mi
 8007828:	f1c5 0301 	rsbmi	r3, r5, #1
 800782c:	2300      	movpl	r3, #0
 800782e:	9305      	strmi	r3, [sp, #20]
 8007830:	f04f 0800 	movmi.w	r8, #0
 8007834:	bf58      	it	pl
 8007836:	9305      	strpl	r3, [sp, #20]
 8007838:	f1ba 0f00 	cmp.w	sl, #0
 800783c:	db3e      	blt.n	80078bc <_dtoa_r+0x224>
 800783e:	2300      	movs	r3, #0
 8007840:	44d0      	add	r8, sl
 8007842:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007846:	9307      	str	r3, [sp, #28]
 8007848:	9b06      	ldr	r3, [sp, #24]
 800784a:	2b09      	cmp	r3, #9
 800784c:	f200 8090 	bhi.w	8007970 <_dtoa_r+0x2d8>
 8007850:	2b05      	cmp	r3, #5
 8007852:	bfc4      	itt	gt
 8007854:	3b04      	subgt	r3, #4
 8007856:	9306      	strgt	r3, [sp, #24]
 8007858:	9b06      	ldr	r3, [sp, #24]
 800785a:	f1a3 0302 	sub.w	r3, r3, #2
 800785e:	bfcc      	ite	gt
 8007860:	2500      	movgt	r5, #0
 8007862:	2501      	movle	r5, #1
 8007864:	2b03      	cmp	r3, #3
 8007866:	f200 808f 	bhi.w	8007988 <_dtoa_r+0x2f0>
 800786a:	e8df f003 	tbb	[pc, r3]
 800786e:	7f7d      	.short	0x7f7d
 8007870:	7131      	.short	0x7131
 8007872:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007876:	441d      	add	r5, r3
 8007878:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800787c:	2820      	cmp	r0, #32
 800787e:	dd13      	ble.n	80078a8 <_dtoa_r+0x210>
 8007880:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007884:	9b00      	ldr	r3, [sp, #0]
 8007886:	fa08 f800 	lsl.w	r8, r8, r0
 800788a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800788e:	fa23 f000 	lsr.w	r0, r3, r0
 8007892:	ea48 0000 	orr.w	r0, r8, r0
 8007896:	f7f8 fde5 	bl	8000464 <__aeabi_ui2d>
 800789a:	2301      	movs	r3, #1
 800789c:	4682      	mov	sl, r0
 800789e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80078a2:	3d01      	subs	r5, #1
 80078a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80078a6:	e772      	b.n	800778e <_dtoa_r+0xf6>
 80078a8:	9b00      	ldr	r3, [sp, #0]
 80078aa:	f1c0 0020 	rsb	r0, r0, #32
 80078ae:	fa03 f000 	lsl.w	r0, r3, r0
 80078b2:	e7f0      	b.n	8007896 <_dtoa_r+0x1fe>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e7b1      	b.n	800781c <_dtoa_r+0x184>
 80078b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80078ba:	e7b0      	b.n	800781e <_dtoa_r+0x186>
 80078bc:	9b05      	ldr	r3, [sp, #20]
 80078be:	eba3 030a 	sub.w	r3, r3, sl
 80078c2:	9305      	str	r3, [sp, #20]
 80078c4:	f1ca 0300 	rsb	r3, sl, #0
 80078c8:	9307      	str	r3, [sp, #28]
 80078ca:	2300      	movs	r3, #0
 80078cc:	930e      	str	r3, [sp, #56]	; 0x38
 80078ce:	e7bb      	b.n	8007848 <_dtoa_r+0x1b0>
 80078d0:	2301      	movs	r3, #1
 80078d2:	930a      	str	r3, [sp, #40]	; 0x28
 80078d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dd59      	ble.n	800798e <_dtoa_r+0x2f6>
 80078da:	9302      	str	r3, [sp, #8]
 80078dc:	4699      	mov	r9, r3
 80078de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80078e0:	2200      	movs	r2, #0
 80078e2:	6072      	str	r2, [r6, #4]
 80078e4:	2204      	movs	r2, #4
 80078e6:	f102 0014 	add.w	r0, r2, #20
 80078ea:	4298      	cmp	r0, r3
 80078ec:	6871      	ldr	r1, [r6, #4]
 80078ee:	d953      	bls.n	8007998 <_dtoa_r+0x300>
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fcb1 	bl	8008258 <_Balloc>
 80078f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078f8:	6030      	str	r0, [r6, #0]
 80078fa:	f1b9 0f0e 	cmp.w	r9, #14
 80078fe:	f8d3 b000 	ldr.w	fp, [r3]
 8007902:	f200 80e6 	bhi.w	8007ad2 <_dtoa_r+0x43a>
 8007906:	2d00      	cmp	r5, #0
 8007908:	f000 80e3 	beq.w	8007ad2 <_dtoa_r+0x43a>
 800790c:	ed9d 7b00 	vldr	d7, [sp]
 8007910:	f1ba 0f00 	cmp.w	sl, #0
 8007914:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007918:	dd74      	ble.n	8007a04 <_dtoa_r+0x36c>
 800791a:	4a2a      	ldr	r2, [pc, #168]	; (80079c4 <_dtoa_r+0x32c>)
 800791c:	f00a 030f 	and.w	r3, sl, #15
 8007920:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007924:	ed93 7b00 	vldr	d7, [r3]
 8007928:	ea4f 162a 	mov.w	r6, sl, asr #4
 800792c:	06f0      	lsls	r0, r6, #27
 800792e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007932:	d565      	bpl.n	8007a00 <_dtoa_r+0x368>
 8007934:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <_dtoa_r+0x330>)
 8007936:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800793a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800793e:	f7f8 ff35 	bl	80007ac <__aeabi_ddiv>
 8007942:	e9cd 0100 	strd	r0, r1, [sp]
 8007946:	f006 060f 	and.w	r6, r6, #15
 800794a:	2503      	movs	r5, #3
 800794c:	4f1e      	ldr	r7, [pc, #120]	; (80079c8 <_dtoa_r+0x330>)
 800794e:	e04c      	b.n	80079ea <_dtoa_r+0x352>
 8007950:	2301      	movs	r3, #1
 8007952:	930a      	str	r3, [sp, #40]	; 0x28
 8007954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007956:	4453      	add	r3, sl
 8007958:	f103 0901 	add.w	r9, r3, #1
 800795c:	9302      	str	r3, [sp, #8]
 800795e:	464b      	mov	r3, r9
 8007960:	2b01      	cmp	r3, #1
 8007962:	bfb8      	it	lt
 8007964:	2301      	movlt	r3, #1
 8007966:	e7ba      	b.n	80078de <_dtoa_r+0x246>
 8007968:	2300      	movs	r3, #0
 800796a:	e7b2      	b.n	80078d2 <_dtoa_r+0x23a>
 800796c:	2300      	movs	r3, #0
 800796e:	e7f0      	b.n	8007952 <_dtoa_r+0x2ba>
 8007970:	2501      	movs	r5, #1
 8007972:	2300      	movs	r3, #0
 8007974:	9306      	str	r3, [sp, #24]
 8007976:	950a      	str	r5, [sp, #40]	; 0x28
 8007978:	f04f 33ff 	mov.w	r3, #4294967295
 800797c:	9302      	str	r3, [sp, #8]
 800797e:	4699      	mov	r9, r3
 8007980:	2200      	movs	r2, #0
 8007982:	2312      	movs	r3, #18
 8007984:	920b      	str	r2, [sp, #44]	; 0x2c
 8007986:	e7aa      	b.n	80078de <_dtoa_r+0x246>
 8007988:	2301      	movs	r3, #1
 800798a:	930a      	str	r3, [sp, #40]	; 0x28
 800798c:	e7f4      	b.n	8007978 <_dtoa_r+0x2e0>
 800798e:	2301      	movs	r3, #1
 8007990:	9302      	str	r3, [sp, #8]
 8007992:	4699      	mov	r9, r3
 8007994:	461a      	mov	r2, r3
 8007996:	e7f5      	b.n	8007984 <_dtoa_r+0x2ec>
 8007998:	3101      	adds	r1, #1
 800799a:	6071      	str	r1, [r6, #4]
 800799c:	0052      	lsls	r2, r2, #1
 800799e:	e7a2      	b.n	80078e6 <_dtoa_r+0x24e>
 80079a0:	636f4361 	.word	0x636f4361
 80079a4:	3fd287a7 	.word	0x3fd287a7
 80079a8:	8b60c8b3 	.word	0x8b60c8b3
 80079ac:	3fc68a28 	.word	0x3fc68a28
 80079b0:	509f79fb 	.word	0x509f79fb
 80079b4:	3fd34413 	.word	0x3fd34413
 80079b8:	7ff00000 	.word	0x7ff00000
 80079bc:	08008a55 	.word	0x08008a55
 80079c0:	3ff80000 	.word	0x3ff80000
 80079c4:	08008a98 	.word	0x08008a98
 80079c8:	08008a70 	.word	0x08008a70
 80079cc:	08008a5f 	.word	0x08008a5f
 80079d0:	07f1      	lsls	r1, r6, #31
 80079d2:	d508      	bpl.n	80079e6 <_dtoa_r+0x34e>
 80079d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079dc:	f7f8 fdbc 	bl	8000558 <__aeabi_dmul>
 80079e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079e4:	3501      	adds	r5, #1
 80079e6:	1076      	asrs	r6, r6, #1
 80079e8:	3708      	adds	r7, #8
 80079ea:	2e00      	cmp	r6, #0
 80079ec:	d1f0      	bne.n	80079d0 <_dtoa_r+0x338>
 80079ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80079f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079f6:	f7f8 fed9 	bl	80007ac <__aeabi_ddiv>
 80079fa:	e9cd 0100 	strd	r0, r1, [sp]
 80079fe:	e01a      	b.n	8007a36 <_dtoa_r+0x39e>
 8007a00:	2502      	movs	r5, #2
 8007a02:	e7a3      	b.n	800794c <_dtoa_r+0x2b4>
 8007a04:	f000 80a0 	beq.w	8007b48 <_dtoa_r+0x4b0>
 8007a08:	f1ca 0600 	rsb	r6, sl, #0
 8007a0c:	4b9f      	ldr	r3, [pc, #636]	; (8007c8c <_dtoa_r+0x5f4>)
 8007a0e:	4fa0      	ldr	r7, [pc, #640]	; (8007c90 <_dtoa_r+0x5f8>)
 8007a10:	f006 020f 	and.w	r2, r6, #15
 8007a14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007a20:	f7f8 fd9a 	bl	8000558 <__aeabi_dmul>
 8007a24:	e9cd 0100 	strd	r0, r1, [sp]
 8007a28:	1136      	asrs	r6, r6, #4
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2502      	movs	r5, #2
 8007a2e:	2e00      	cmp	r6, #0
 8007a30:	d17f      	bne.n	8007b32 <_dtoa_r+0x49a>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e1      	bne.n	80079fa <_dtoa_r+0x362>
 8007a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 8087 	beq.w	8007b4c <_dtoa_r+0x4b4>
 8007a3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a42:	2200      	movs	r2, #0
 8007a44:	4b93      	ldr	r3, [pc, #588]	; (8007c94 <_dtoa_r+0x5fc>)
 8007a46:	4630      	mov	r0, r6
 8007a48:	4639      	mov	r1, r7
 8007a4a:	f7f8 fff7 	bl	8000a3c <__aeabi_dcmplt>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d07c      	beq.n	8007b4c <_dtoa_r+0x4b4>
 8007a52:	f1b9 0f00 	cmp.w	r9, #0
 8007a56:	d079      	beq.n	8007b4c <_dtoa_r+0x4b4>
 8007a58:	9b02      	ldr	r3, [sp, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	dd35      	ble.n	8007aca <_dtoa_r+0x432>
 8007a5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007a62:	9308      	str	r3, [sp, #32]
 8007a64:	4639      	mov	r1, r7
 8007a66:	2200      	movs	r2, #0
 8007a68:	4b8b      	ldr	r3, [pc, #556]	; (8007c98 <_dtoa_r+0x600>)
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f7f8 fd74 	bl	8000558 <__aeabi_dmul>
 8007a70:	e9cd 0100 	strd	r0, r1, [sp]
 8007a74:	9f02      	ldr	r7, [sp, #8]
 8007a76:	3501      	adds	r5, #1
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f7f8 fd03 	bl	8000484 <__aeabi_i2d>
 8007a7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a82:	f7f8 fd69 	bl	8000558 <__aeabi_dmul>
 8007a86:	2200      	movs	r2, #0
 8007a88:	4b84      	ldr	r3, [pc, #528]	; (8007c9c <_dtoa_r+0x604>)
 8007a8a:	f7f8 fbaf 	bl	80001ec <__adddf3>
 8007a8e:	4605      	mov	r5, r0
 8007a90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a94:	2f00      	cmp	r7, #0
 8007a96:	d15d      	bne.n	8007b54 <_dtoa_r+0x4bc>
 8007a98:	2200      	movs	r2, #0
 8007a9a:	4b81      	ldr	r3, [pc, #516]	; (8007ca0 <_dtoa_r+0x608>)
 8007a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007aa0:	f7f8 fba2 	bl	80001e8 <__aeabi_dsub>
 8007aa4:	462a      	mov	r2, r5
 8007aa6:	4633      	mov	r3, r6
 8007aa8:	e9cd 0100 	strd	r0, r1, [sp]
 8007aac:	f7f8 ffe4 	bl	8000a78 <__aeabi_dcmpgt>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	f040 8288 	bne.w	8007fc6 <_dtoa_r+0x92e>
 8007ab6:	462a      	mov	r2, r5
 8007ab8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007abc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ac0:	f7f8 ffbc 	bl	8000a3c <__aeabi_dcmplt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f040 827c 	bne.w	8007fc2 <_dtoa_r+0x92a>
 8007aca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007ace:	e9cd 2300 	strd	r2, r3, [sp]
 8007ad2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f2c0 8150 	blt.w	8007d7a <_dtoa_r+0x6e2>
 8007ada:	f1ba 0f0e 	cmp.w	sl, #14
 8007ade:	f300 814c 	bgt.w	8007d7a <_dtoa_r+0x6e2>
 8007ae2:	4b6a      	ldr	r3, [pc, #424]	; (8007c8c <_dtoa_r+0x5f4>)
 8007ae4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ae8:	ed93 7b00 	vldr	d7, [r3]
 8007aec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007af4:	f280 80d8 	bge.w	8007ca8 <_dtoa_r+0x610>
 8007af8:	f1b9 0f00 	cmp.w	r9, #0
 8007afc:	f300 80d4 	bgt.w	8007ca8 <_dtoa_r+0x610>
 8007b00:	f040 825e 	bne.w	8007fc0 <_dtoa_r+0x928>
 8007b04:	2200      	movs	r2, #0
 8007b06:	4b66      	ldr	r3, [pc, #408]	; (8007ca0 <_dtoa_r+0x608>)
 8007b08:	ec51 0b17 	vmov	r0, r1, d7
 8007b0c:	f7f8 fd24 	bl	8000558 <__aeabi_dmul>
 8007b10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b14:	f7f8 ffa6 	bl	8000a64 <__aeabi_dcmpge>
 8007b18:	464f      	mov	r7, r9
 8007b1a:	464e      	mov	r6, r9
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	f040 8234 	bne.w	8007f8a <_dtoa_r+0x8f2>
 8007b22:	2331      	movs	r3, #49	; 0x31
 8007b24:	f10b 0501 	add.w	r5, fp, #1
 8007b28:	f88b 3000 	strb.w	r3, [fp]
 8007b2c:	f10a 0a01 	add.w	sl, sl, #1
 8007b30:	e22f      	b.n	8007f92 <_dtoa_r+0x8fa>
 8007b32:	07f2      	lsls	r2, r6, #31
 8007b34:	d505      	bpl.n	8007b42 <_dtoa_r+0x4aa>
 8007b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b3a:	f7f8 fd0d 	bl	8000558 <__aeabi_dmul>
 8007b3e:	3501      	adds	r5, #1
 8007b40:	2301      	movs	r3, #1
 8007b42:	1076      	asrs	r6, r6, #1
 8007b44:	3708      	adds	r7, #8
 8007b46:	e772      	b.n	8007a2e <_dtoa_r+0x396>
 8007b48:	2502      	movs	r5, #2
 8007b4a:	e774      	b.n	8007a36 <_dtoa_r+0x39e>
 8007b4c:	f8cd a020 	str.w	sl, [sp, #32]
 8007b50:	464f      	mov	r7, r9
 8007b52:	e791      	b.n	8007a78 <_dtoa_r+0x3e0>
 8007b54:	4b4d      	ldr	r3, [pc, #308]	; (8007c8c <_dtoa_r+0x5f4>)
 8007b56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b5a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d047      	beq.n	8007bf4 <_dtoa_r+0x55c>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	2000      	movs	r0, #0
 8007b6a:	494e      	ldr	r1, [pc, #312]	; (8007ca4 <_dtoa_r+0x60c>)
 8007b6c:	f7f8 fe1e 	bl	80007ac <__aeabi_ddiv>
 8007b70:	462a      	mov	r2, r5
 8007b72:	4633      	mov	r3, r6
 8007b74:	f7f8 fb38 	bl	80001e8 <__aeabi_dsub>
 8007b78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b7c:	465d      	mov	r5, fp
 8007b7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b82:	f7f8 ff99 	bl	8000ab8 <__aeabi_d2iz>
 8007b86:	4606      	mov	r6, r0
 8007b88:	f7f8 fc7c 	bl	8000484 <__aeabi_i2d>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b94:	f7f8 fb28 	bl	80001e8 <__aeabi_dsub>
 8007b98:	3630      	adds	r6, #48	; 0x30
 8007b9a:	f805 6b01 	strb.w	r6, [r5], #1
 8007b9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ba2:	e9cd 0100 	strd	r0, r1, [sp]
 8007ba6:	f7f8 ff49 	bl	8000a3c <__aeabi_dcmplt>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	d163      	bne.n	8007c76 <_dtoa_r+0x5de>
 8007bae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	4937      	ldr	r1, [pc, #220]	; (8007c94 <_dtoa_r+0x5fc>)
 8007bb6:	f7f8 fb17 	bl	80001e8 <__aeabi_dsub>
 8007bba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007bbe:	f7f8 ff3d 	bl	8000a3c <__aeabi_dcmplt>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	f040 80b7 	bne.w	8007d36 <_dtoa_r+0x69e>
 8007bc8:	eba5 030b 	sub.w	r3, r5, fp
 8007bcc:	429f      	cmp	r7, r3
 8007bce:	f77f af7c 	ble.w	8007aca <_dtoa_r+0x432>
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	4b30      	ldr	r3, [pc, #192]	; (8007c98 <_dtoa_r+0x600>)
 8007bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bda:	f7f8 fcbd 	bl	8000558 <__aeabi_dmul>
 8007bde:	2200      	movs	r2, #0
 8007be0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007be4:	4b2c      	ldr	r3, [pc, #176]	; (8007c98 <_dtoa_r+0x600>)
 8007be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bea:	f7f8 fcb5 	bl	8000558 <__aeabi_dmul>
 8007bee:	e9cd 0100 	strd	r0, r1, [sp]
 8007bf2:	e7c4      	b.n	8007b7e <_dtoa_r+0x4e6>
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	4633      	mov	r3, r6
 8007bf8:	f7f8 fcae 	bl	8000558 <__aeabi_dmul>
 8007bfc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007c00:	eb0b 0507 	add.w	r5, fp, r7
 8007c04:	465e      	mov	r6, fp
 8007c06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c0a:	f7f8 ff55 	bl	8000ab8 <__aeabi_d2iz>
 8007c0e:	4607      	mov	r7, r0
 8007c10:	f7f8 fc38 	bl	8000484 <__aeabi_i2d>
 8007c14:	3730      	adds	r7, #48	; 0x30
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c1e:	f7f8 fae3 	bl	80001e8 <__aeabi_dsub>
 8007c22:	f806 7b01 	strb.w	r7, [r6], #1
 8007c26:	42ae      	cmp	r6, r5
 8007c28:	e9cd 0100 	strd	r0, r1, [sp]
 8007c2c:	f04f 0200 	mov.w	r2, #0
 8007c30:	d126      	bne.n	8007c80 <_dtoa_r+0x5e8>
 8007c32:	4b1c      	ldr	r3, [pc, #112]	; (8007ca4 <_dtoa_r+0x60c>)
 8007c34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c38:	f7f8 fad8 	bl	80001ec <__adddf3>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c44:	f7f8 ff18 	bl	8000a78 <__aeabi_dcmpgt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d174      	bne.n	8007d36 <_dtoa_r+0x69e>
 8007c4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007c50:	2000      	movs	r0, #0
 8007c52:	4914      	ldr	r1, [pc, #80]	; (8007ca4 <_dtoa_r+0x60c>)
 8007c54:	f7f8 fac8 	bl	80001e8 <__aeabi_dsub>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c60:	f7f8 feec 	bl	8000a3c <__aeabi_dcmplt>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	f43f af30 	beq.w	8007aca <_dtoa_r+0x432>
 8007c6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c6e:	2b30      	cmp	r3, #48	; 0x30
 8007c70:	f105 32ff 	add.w	r2, r5, #4294967295
 8007c74:	d002      	beq.n	8007c7c <_dtoa_r+0x5e4>
 8007c76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007c7a:	e04a      	b.n	8007d12 <_dtoa_r+0x67a>
 8007c7c:	4615      	mov	r5, r2
 8007c7e:	e7f4      	b.n	8007c6a <_dtoa_r+0x5d2>
 8007c80:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <_dtoa_r+0x600>)
 8007c82:	f7f8 fc69 	bl	8000558 <__aeabi_dmul>
 8007c86:	e9cd 0100 	strd	r0, r1, [sp]
 8007c8a:	e7bc      	b.n	8007c06 <_dtoa_r+0x56e>
 8007c8c:	08008a98 	.word	0x08008a98
 8007c90:	08008a70 	.word	0x08008a70
 8007c94:	3ff00000 	.word	0x3ff00000
 8007c98:	40240000 	.word	0x40240000
 8007c9c:	401c0000 	.word	0x401c0000
 8007ca0:	40140000 	.word	0x40140000
 8007ca4:	3fe00000 	.word	0x3fe00000
 8007ca8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007cac:	465d      	mov	r5, fp
 8007cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	f7f8 fd79 	bl	80007ac <__aeabi_ddiv>
 8007cba:	f7f8 fefd 	bl	8000ab8 <__aeabi_d2iz>
 8007cbe:	4680      	mov	r8, r0
 8007cc0:	f7f8 fbe0 	bl	8000484 <__aeabi_i2d>
 8007cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cc8:	f7f8 fc46 	bl	8000558 <__aeabi_dmul>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007cd8:	f7f8 fa86 	bl	80001e8 <__aeabi_dsub>
 8007cdc:	f805 6b01 	strb.w	r6, [r5], #1
 8007ce0:	eba5 060b 	sub.w	r6, r5, fp
 8007ce4:	45b1      	cmp	r9, r6
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	d139      	bne.n	8007d60 <_dtoa_r+0x6c8>
 8007cec:	f7f8 fa7e 	bl	80001ec <__adddf3>
 8007cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	460f      	mov	r7, r1
 8007cf8:	f7f8 febe 	bl	8000a78 <__aeabi_dcmpgt>
 8007cfc:	b9c8      	cbnz	r0, 8007d32 <_dtoa_r+0x69a>
 8007cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d02:	4630      	mov	r0, r6
 8007d04:	4639      	mov	r1, r7
 8007d06:	f7f8 fe8f 	bl	8000a28 <__aeabi_dcmpeq>
 8007d0a:	b110      	cbz	r0, 8007d12 <_dtoa_r+0x67a>
 8007d0c:	f018 0f01 	tst.w	r8, #1
 8007d10:	d10f      	bne.n	8007d32 <_dtoa_r+0x69a>
 8007d12:	9904      	ldr	r1, [sp, #16]
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 fad3 	bl	80082c0 <_Bfree>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d1e:	702b      	strb	r3, [r5, #0]
 8007d20:	f10a 0301 	add.w	r3, sl, #1
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 8241 	beq.w	80081b0 <_dtoa_r+0xb18>
 8007d2e:	601d      	str	r5, [r3, #0]
 8007d30:	e23e      	b.n	80081b0 <_dtoa_r+0xb18>
 8007d32:	f8cd a020 	str.w	sl, [sp, #32]
 8007d36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d3a:	2a39      	cmp	r2, #57	; 0x39
 8007d3c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007d40:	d108      	bne.n	8007d54 <_dtoa_r+0x6bc>
 8007d42:	459b      	cmp	fp, r3
 8007d44:	d10a      	bne.n	8007d5c <_dtoa_r+0x6c4>
 8007d46:	9b08      	ldr	r3, [sp, #32]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	9308      	str	r3, [sp, #32]
 8007d4c:	2330      	movs	r3, #48	; 0x30
 8007d4e:	f88b 3000 	strb.w	r3, [fp]
 8007d52:	465b      	mov	r3, fp
 8007d54:	781a      	ldrb	r2, [r3, #0]
 8007d56:	3201      	adds	r2, #1
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	e78c      	b.n	8007c76 <_dtoa_r+0x5de>
 8007d5c:	461d      	mov	r5, r3
 8007d5e:	e7ea      	b.n	8007d36 <_dtoa_r+0x69e>
 8007d60:	2200      	movs	r2, #0
 8007d62:	4b9b      	ldr	r3, [pc, #620]	; (8007fd0 <_dtoa_r+0x938>)
 8007d64:	f7f8 fbf8 	bl	8000558 <__aeabi_dmul>
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4606      	mov	r6, r0
 8007d6e:	460f      	mov	r7, r1
 8007d70:	f7f8 fe5a 	bl	8000a28 <__aeabi_dcmpeq>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d09a      	beq.n	8007cae <_dtoa_r+0x616>
 8007d78:	e7cb      	b.n	8007d12 <_dtoa_r+0x67a>
 8007d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	f000 808b 	beq.w	8007e98 <_dtoa_r+0x800>
 8007d82:	9a06      	ldr	r2, [sp, #24]
 8007d84:	2a01      	cmp	r2, #1
 8007d86:	dc6e      	bgt.n	8007e66 <_dtoa_r+0x7ce>
 8007d88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	d067      	beq.n	8007e5e <_dtoa_r+0x7c6>
 8007d8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d92:	9f07      	ldr	r7, [sp, #28]
 8007d94:	9d05      	ldr	r5, [sp, #20]
 8007d96:	9a05      	ldr	r2, [sp, #20]
 8007d98:	2101      	movs	r1, #1
 8007d9a:	441a      	add	r2, r3
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	9205      	str	r2, [sp, #20]
 8007da0:	4498      	add	r8, r3
 8007da2:	f000 fb2d 	bl	8008400 <__i2b>
 8007da6:	4606      	mov	r6, r0
 8007da8:	2d00      	cmp	r5, #0
 8007daa:	dd0c      	ble.n	8007dc6 <_dtoa_r+0x72e>
 8007dac:	f1b8 0f00 	cmp.w	r8, #0
 8007db0:	dd09      	ble.n	8007dc6 <_dtoa_r+0x72e>
 8007db2:	4545      	cmp	r5, r8
 8007db4:	9a05      	ldr	r2, [sp, #20]
 8007db6:	462b      	mov	r3, r5
 8007db8:	bfa8      	it	ge
 8007dba:	4643      	movge	r3, r8
 8007dbc:	1ad2      	subs	r2, r2, r3
 8007dbe:	9205      	str	r2, [sp, #20]
 8007dc0:	1aed      	subs	r5, r5, r3
 8007dc2:	eba8 0803 	sub.w	r8, r8, r3
 8007dc6:	9b07      	ldr	r3, [sp, #28]
 8007dc8:	b1eb      	cbz	r3, 8007e06 <_dtoa_r+0x76e>
 8007dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d067      	beq.n	8007ea0 <_dtoa_r+0x808>
 8007dd0:	b18f      	cbz	r7, 8007df6 <_dtoa_r+0x75e>
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	463a      	mov	r2, r7
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f000 fbb2 	bl	8008540 <__pow5mult>
 8007ddc:	9a04      	ldr	r2, [sp, #16]
 8007dde:	4601      	mov	r1, r0
 8007de0:	4606      	mov	r6, r0
 8007de2:	4620      	mov	r0, r4
 8007de4:	f000 fb15 	bl	8008412 <__multiply>
 8007de8:	9904      	ldr	r1, [sp, #16]
 8007dea:	9008      	str	r0, [sp, #32]
 8007dec:	4620      	mov	r0, r4
 8007dee:	f000 fa67 	bl	80082c0 <_Bfree>
 8007df2:	9b08      	ldr	r3, [sp, #32]
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	9b07      	ldr	r3, [sp, #28]
 8007df8:	1bda      	subs	r2, r3, r7
 8007dfa:	d004      	beq.n	8007e06 <_dtoa_r+0x76e>
 8007dfc:	9904      	ldr	r1, [sp, #16]
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fb9e 	bl	8008540 <__pow5mult>
 8007e04:	9004      	str	r0, [sp, #16]
 8007e06:	2101      	movs	r1, #1
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 faf9 	bl	8008400 <__i2b>
 8007e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e10:	4607      	mov	r7, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 81d0 	beq.w	80081b8 <_dtoa_r+0xb20>
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 fb8f 	bl	8008540 <__pow5mult>
 8007e22:	9b06      	ldr	r3, [sp, #24]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	4607      	mov	r7, r0
 8007e28:	dc40      	bgt.n	8007eac <_dtoa_r+0x814>
 8007e2a:	9b00      	ldr	r3, [sp, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d139      	bne.n	8007ea4 <_dtoa_r+0x80c>
 8007e30:	9b01      	ldr	r3, [sp, #4]
 8007e32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d136      	bne.n	8007ea8 <_dtoa_r+0x810>
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e40:	0d1b      	lsrs	r3, r3, #20
 8007e42:	051b      	lsls	r3, r3, #20
 8007e44:	b12b      	cbz	r3, 8007e52 <_dtoa_r+0x7ba>
 8007e46:	9b05      	ldr	r3, [sp, #20]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	9305      	str	r3, [sp, #20]
 8007e4c:	f108 0801 	add.w	r8, r8, #1
 8007e50:	2301      	movs	r3, #1
 8007e52:	9307      	str	r3, [sp, #28]
 8007e54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d12a      	bne.n	8007eb0 <_dtoa_r+0x818>
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	e030      	b.n	8007ec0 <_dtoa_r+0x828>
 8007e5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e64:	e795      	b.n	8007d92 <_dtoa_r+0x6fa>
 8007e66:	9b07      	ldr	r3, [sp, #28]
 8007e68:	f109 37ff 	add.w	r7, r9, #4294967295
 8007e6c:	42bb      	cmp	r3, r7
 8007e6e:	bfbf      	itttt	lt
 8007e70:	9b07      	ldrlt	r3, [sp, #28]
 8007e72:	9707      	strlt	r7, [sp, #28]
 8007e74:	1afa      	sublt	r2, r7, r3
 8007e76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007e78:	bfbb      	ittet	lt
 8007e7a:	189b      	addlt	r3, r3, r2
 8007e7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007e7e:	1bdf      	subge	r7, r3, r7
 8007e80:	2700      	movlt	r7, #0
 8007e82:	f1b9 0f00 	cmp.w	r9, #0
 8007e86:	bfb5      	itete	lt
 8007e88:	9b05      	ldrlt	r3, [sp, #20]
 8007e8a:	9d05      	ldrge	r5, [sp, #20]
 8007e8c:	eba3 0509 	sublt.w	r5, r3, r9
 8007e90:	464b      	movge	r3, r9
 8007e92:	bfb8      	it	lt
 8007e94:	2300      	movlt	r3, #0
 8007e96:	e77e      	b.n	8007d96 <_dtoa_r+0x6fe>
 8007e98:	9f07      	ldr	r7, [sp, #28]
 8007e9a:	9d05      	ldr	r5, [sp, #20]
 8007e9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007e9e:	e783      	b.n	8007da8 <_dtoa_r+0x710>
 8007ea0:	9a07      	ldr	r2, [sp, #28]
 8007ea2:	e7ab      	b.n	8007dfc <_dtoa_r+0x764>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e7d4      	b.n	8007e52 <_dtoa_r+0x7ba>
 8007ea8:	9b00      	ldr	r3, [sp, #0]
 8007eaa:	e7d2      	b.n	8007e52 <_dtoa_r+0x7ba>
 8007eac:	2300      	movs	r3, #0
 8007eae:	9307      	str	r3, [sp, #28]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007eb6:	6918      	ldr	r0, [r3, #16]
 8007eb8:	f000 fa54 	bl	8008364 <__hi0bits>
 8007ebc:	f1c0 0020 	rsb	r0, r0, #32
 8007ec0:	4440      	add	r0, r8
 8007ec2:	f010 001f 	ands.w	r0, r0, #31
 8007ec6:	d047      	beq.n	8007f58 <_dtoa_r+0x8c0>
 8007ec8:	f1c0 0320 	rsb	r3, r0, #32
 8007ecc:	2b04      	cmp	r3, #4
 8007ece:	dd3b      	ble.n	8007f48 <_dtoa_r+0x8b0>
 8007ed0:	9b05      	ldr	r3, [sp, #20]
 8007ed2:	f1c0 001c 	rsb	r0, r0, #28
 8007ed6:	4403      	add	r3, r0
 8007ed8:	9305      	str	r3, [sp, #20]
 8007eda:	4405      	add	r5, r0
 8007edc:	4480      	add	r8, r0
 8007ede:	9b05      	ldr	r3, [sp, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	dd05      	ble.n	8007ef0 <_dtoa_r+0x858>
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	9904      	ldr	r1, [sp, #16]
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 fb77 	bl	80085dc <__lshift>
 8007eee:	9004      	str	r0, [sp, #16]
 8007ef0:	f1b8 0f00 	cmp.w	r8, #0
 8007ef4:	dd05      	ble.n	8007f02 <_dtoa_r+0x86a>
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	4642      	mov	r2, r8
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 fb6e 	bl	80085dc <__lshift>
 8007f00:	4607      	mov	r7, r0
 8007f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f04:	b353      	cbz	r3, 8007f5c <_dtoa_r+0x8c4>
 8007f06:	4639      	mov	r1, r7
 8007f08:	9804      	ldr	r0, [sp, #16]
 8007f0a:	f000 fbbb 	bl	8008684 <__mcmp>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	da24      	bge.n	8007f5c <_dtoa_r+0x8c4>
 8007f12:	2300      	movs	r3, #0
 8007f14:	220a      	movs	r2, #10
 8007f16:	9904      	ldr	r1, [sp, #16]
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 f9e8 	bl	80082ee <__multadd>
 8007f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f20:	9004      	str	r0, [sp, #16]
 8007f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 814d 	beq.w	80081c6 <_dtoa_r+0xb2e>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	4631      	mov	r1, r6
 8007f30:	220a      	movs	r2, #10
 8007f32:	4620      	mov	r0, r4
 8007f34:	f000 f9db 	bl	80082ee <__multadd>
 8007f38:	9b02      	ldr	r3, [sp, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	dc4f      	bgt.n	8007fe0 <_dtoa_r+0x948>
 8007f40:	9b06      	ldr	r3, [sp, #24]
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	dd4c      	ble.n	8007fe0 <_dtoa_r+0x948>
 8007f46:	e011      	b.n	8007f6c <_dtoa_r+0x8d4>
 8007f48:	d0c9      	beq.n	8007ede <_dtoa_r+0x846>
 8007f4a:	9a05      	ldr	r2, [sp, #20]
 8007f4c:	331c      	adds	r3, #28
 8007f4e:	441a      	add	r2, r3
 8007f50:	9205      	str	r2, [sp, #20]
 8007f52:	441d      	add	r5, r3
 8007f54:	4498      	add	r8, r3
 8007f56:	e7c2      	b.n	8007ede <_dtoa_r+0x846>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	e7f6      	b.n	8007f4a <_dtoa_r+0x8b2>
 8007f5c:	f1b9 0f00 	cmp.w	r9, #0
 8007f60:	dc38      	bgt.n	8007fd4 <_dtoa_r+0x93c>
 8007f62:	9b06      	ldr	r3, [sp, #24]
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	dd35      	ble.n	8007fd4 <_dtoa_r+0x93c>
 8007f68:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f6c:	9b02      	ldr	r3, [sp, #8]
 8007f6e:	b963      	cbnz	r3, 8007f8a <_dtoa_r+0x8f2>
 8007f70:	4639      	mov	r1, r7
 8007f72:	2205      	movs	r2, #5
 8007f74:	4620      	mov	r0, r4
 8007f76:	f000 f9ba 	bl	80082ee <__multadd>
 8007f7a:	4601      	mov	r1, r0
 8007f7c:	4607      	mov	r7, r0
 8007f7e:	9804      	ldr	r0, [sp, #16]
 8007f80:	f000 fb80 	bl	8008684 <__mcmp>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	f73f adcc 	bgt.w	8007b22 <_dtoa_r+0x48a>
 8007f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8c:	465d      	mov	r5, fp
 8007f8e:	ea6f 0a03 	mvn.w	sl, r3
 8007f92:	f04f 0900 	mov.w	r9, #0
 8007f96:	4639      	mov	r1, r7
 8007f98:	4620      	mov	r0, r4
 8007f9a:	f000 f991 	bl	80082c0 <_Bfree>
 8007f9e:	2e00      	cmp	r6, #0
 8007fa0:	f43f aeb7 	beq.w	8007d12 <_dtoa_r+0x67a>
 8007fa4:	f1b9 0f00 	cmp.w	r9, #0
 8007fa8:	d005      	beq.n	8007fb6 <_dtoa_r+0x91e>
 8007faa:	45b1      	cmp	r9, r6
 8007fac:	d003      	beq.n	8007fb6 <_dtoa_r+0x91e>
 8007fae:	4649      	mov	r1, r9
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 f985 	bl	80082c0 <_Bfree>
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f000 f981 	bl	80082c0 <_Bfree>
 8007fbe:	e6a8      	b.n	8007d12 <_dtoa_r+0x67a>
 8007fc0:	2700      	movs	r7, #0
 8007fc2:	463e      	mov	r6, r7
 8007fc4:	e7e1      	b.n	8007f8a <_dtoa_r+0x8f2>
 8007fc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007fca:	463e      	mov	r6, r7
 8007fcc:	e5a9      	b.n	8007b22 <_dtoa_r+0x48a>
 8007fce:	bf00      	nop
 8007fd0:	40240000 	.word	0x40240000
 8007fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 80fa 	beq.w	80081d4 <_dtoa_r+0xb3c>
 8007fe0:	2d00      	cmp	r5, #0
 8007fe2:	dd05      	ble.n	8007ff0 <_dtoa_r+0x958>
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	462a      	mov	r2, r5
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 faf7 	bl	80085dc <__lshift>
 8007fee:	4606      	mov	r6, r0
 8007ff0:	9b07      	ldr	r3, [sp, #28]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d04c      	beq.n	8008090 <_dtoa_r+0x9f8>
 8007ff6:	6871      	ldr	r1, [r6, #4]
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 f92d 	bl	8008258 <_Balloc>
 8007ffe:	6932      	ldr	r2, [r6, #16]
 8008000:	3202      	adds	r2, #2
 8008002:	4605      	mov	r5, r0
 8008004:	0092      	lsls	r2, r2, #2
 8008006:	f106 010c 	add.w	r1, r6, #12
 800800a:	300c      	adds	r0, #12
 800800c:	f7fe ff5a 	bl	8006ec4 <memcpy>
 8008010:	2201      	movs	r2, #1
 8008012:	4629      	mov	r1, r5
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fae1 	bl	80085dc <__lshift>
 800801a:	9b00      	ldr	r3, [sp, #0]
 800801c:	f8cd b014 	str.w	fp, [sp, #20]
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	46b1      	mov	r9, r6
 8008026:	9307      	str	r3, [sp, #28]
 8008028:	4606      	mov	r6, r0
 800802a:	4639      	mov	r1, r7
 800802c:	9804      	ldr	r0, [sp, #16]
 800802e:	f7ff faa6 	bl	800757e <quorem>
 8008032:	4649      	mov	r1, r9
 8008034:	4605      	mov	r5, r0
 8008036:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800803a:	9804      	ldr	r0, [sp, #16]
 800803c:	f000 fb22 	bl	8008684 <__mcmp>
 8008040:	4632      	mov	r2, r6
 8008042:	9000      	str	r0, [sp, #0]
 8008044:	4639      	mov	r1, r7
 8008046:	4620      	mov	r0, r4
 8008048:	f000 fb36 	bl	80086b8 <__mdiff>
 800804c:	68c3      	ldr	r3, [r0, #12]
 800804e:	4602      	mov	r2, r0
 8008050:	bb03      	cbnz	r3, 8008094 <_dtoa_r+0x9fc>
 8008052:	4601      	mov	r1, r0
 8008054:	9008      	str	r0, [sp, #32]
 8008056:	9804      	ldr	r0, [sp, #16]
 8008058:	f000 fb14 	bl	8008684 <__mcmp>
 800805c:	9a08      	ldr	r2, [sp, #32]
 800805e:	4603      	mov	r3, r0
 8008060:	4611      	mov	r1, r2
 8008062:	4620      	mov	r0, r4
 8008064:	9308      	str	r3, [sp, #32]
 8008066:	f000 f92b 	bl	80082c0 <_Bfree>
 800806a:	9b08      	ldr	r3, [sp, #32]
 800806c:	b9a3      	cbnz	r3, 8008098 <_dtoa_r+0xa00>
 800806e:	9a06      	ldr	r2, [sp, #24]
 8008070:	b992      	cbnz	r2, 8008098 <_dtoa_r+0xa00>
 8008072:	9a07      	ldr	r2, [sp, #28]
 8008074:	b982      	cbnz	r2, 8008098 <_dtoa_r+0xa00>
 8008076:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800807a:	d029      	beq.n	80080d0 <_dtoa_r+0xa38>
 800807c:	9b00      	ldr	r3, [sp, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	dd01      	ble.n	8008086 <_dtoa_r+0x9ee>
 8008082:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008086:	9b05      	ldr	r3, [sp, #20]
 8008088:	1c5d      	adds	r5, r3, #1
 800808a:	f883 8000 	strb.w	r8, [r3]
 800808e:	e782      	b.n	8007f96 <_dtoa_r+0x8fe>
 8008090:	4630      	mov	r0, r6
 8008092:	e7c2      	b.n	800801a <_dtoa_r+0x982>
 8008094:	2301      	movs	r3, #1
 8008096:	e7e3      	b.n	8008060 <_dtoa_r+0x9c8>
 8008098:	9a00      	ldr	r2, [sp, #0]
 800809a:	2a00      	cmp	r2, #0
 800809c:	db04      	blt.n	80080a8 <_dtoa_r+0xa10>
 800809e:	d125      	bne.n	80080ec <_dtoa_r+0xa54>
 80080a0:	9a06      	ldr	r2, [sp, #24]
 80080a2:	bb1a      	cbnz	r2, 80080ec <_dtoa_r+0xa54>
 80080a4:	9a07      	ldr	r2, [sp, #28]
 80080a6:	bb0a      	cbnz	r2, 80080ec <_dtoa_r+0xa54>
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	ddec      	ble.n	8008086 <_dtoa_r+0x9ee>
 80080ac:	2201      	movs	r2, #1
 80080ae:	9904      	ldr	r1, [sp, #16]
 80080b0:	4620      	mov	r0, r4
 80080b2:	f000 fa93 	bl	80085dc <__lshift>
 80080b6:	4639      	mov	r1, r7
 80080b8:	9004      	str	r0, [sp, #16]
 80080ba:	f000 fae3 	bl	8008684 <__mcmp>
 80080be:	2800      	cmp	r0, #0
 80080c0:	dc03      	bgt.n	80080ca <_dtoa_r+0xa32>
 80080c2:	d1e0      	bne.n	8008086 <_dtoa_r+0x9ee>
 80080c4:	f018 0f01 	tst.w	r8, #1
 80080c8:	d0dd      	beq.n	8008086 <_dtoa_r+0x9ee>
 80080ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80080ce:	d1d8      	bne.n	8008082 <_dtoa_r+0x9ea>
 80080d0:	9b05      	ldr	r3, [sp, #20]
 80080d2:	9a05      	ldr	r2, [sp, #20]
 80080d4:	1c5d      	adds	r5, r3, #1
 80080d6:	2339      	movs	r3, #57	; 0x39
 80080d8:	7013      	strb	r3, [r2, #0]
 80080da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080de:	2b39      	cmp	r3, #57	; 0x39
 80080e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80080e4:	d04f      	beq.n	8008186 <_dtoa_r+0xaee>
 80080e6:	3301      	adds	r3, #1
 80080e8:	7013      	strb	r3, [r2, #0]
 80080ea:	e754      	b.n	8007f96 <_dtoa_r+0x8fe>
 80080ec:	9a05      	ldr	r2, [sp, #20]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f102 0501 	add.w	r5, r2, #1
 80080f4:	dd06      	ble.n	8008104 <_dtoa_r+0xa6c>
 80080f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80080fa:	d0e9      	beq.n	80080d0 <_dtoa_r+0xa38>
 80080fc:	f108 0801 	add.w	r8, r8, #1
 8008100:	9b05      	ldr	r3, [sp, #20]
 8008102:	e7c2      	b.n	800808a <_dtoa_r+0x9f2>
 8008104:	9a02      	ldr	r2, [sp, #8]
 8008106:	f805 8c01 	strb.w	r8, [r5, #-1]
 800810a:	eba5 030b 	sub.w	r3, r5, fp
 800810e:	4293      	cmp	r3, r2
 8008110:	d021      	beq.n	8008156 <_dtoa_r+0xabe>
 8008112:	2300      	movs	r3, #0
 8008114:	220a      	movs	r2, #10
 8008116:	9904      	ldr	r1, [sp, #16]
 8008118:	4620      	mov	r0, r4
 800811a:	f000 f8e8 	bl	80082ee <__multadd>
 800811e:	45b1      	cmp	r9, r6
 8008120:	9004      	str	r0, [sp, #16]
 8008122:	f04f 0300 	mov.w	r3, #0
 8008126:	f04f 020a 	mov.w	r2, #10
 800812a:	4649      	mov	r1, r9
 800812c:	4620      	mov	r0, r4
 800812e:	d105      	bne.n	800813c <_dtoa_r+0xaa4>
 8008130:	f000 f8dd 	bl	80082ee <__multadd>
 8008134:	4681      	mov	r9, r0
 8008136:	4606      	mov	r6, r0
 8008138:	9505      	str	r5, [sp, #20]
 800813a:	e776      	b.n	800802a <_dtoa_r+0x992>
 800813c:	f000 f8d7 	bl	80082ee <__multadd>
 8008140:	4631      	mov	r1, r6
 8008142:	4681      	mov	r9, r0
 8008144:	2300      	movs	r3, #0
 8008146:	220a      	movs	r2, #10
 8008148:	4620      	mov	r0, r4
 800814a:	f000 f8d0 	bl	80082ee <__multadd>
 800814e:	4606      	mov	r6, r0
 8008150:	e7f2      	b.n	8008138 <_dtoa_r+0xaa0>
 8008152:	f04f 0900 	mov.w	r9, #0
 8008156:	2201      	movs	r2, #1
 8008158:	9904      	ldr	r1, [sp, #16]
 800815a:	4620      	mov	r0, r4
 800815c:	f000 fa3e 	bl	80085dc <__lshift>
 8008160:	4639      	mov	r1, r7
 8008162:	9004      	str	r0, [sp, #16]
 8008164:	f000 fa8e 	bl	8008684 <__mcmp>
 8008168:	2800      	cmp	r0, #0
 800816a:	dcb6      	bgt.n	80080da <_dtoa_r+0xa42>
 800816c:	d102      	bne.n	8008174 <_dtoa_r+0xadc>
 800816e:	f018 0f01 	tst.w	r8, #1
 8008172:	d1b2      	bne.n	80080da <_dtoa_r+0xa42>
 8008174:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008178:	2b30      	cmp	r3, #48	; 0x30
 800817a:	f105 32ff 	add.w	r2, r5, #4294967295
 800817e:	f47f af0a 	bne.w	8007f96 <_dtoa_r+0x8fe>
 8008182:	4615      	mov	r5, r2
 8008184:	e7f6      	b.n	8008174 <_dtoa_r+0xadc>
 8008186:	4593      	cmp	fp, r2
 8008188:	d105      	bne.n	8008196 <_dtoa_r+0xafe>
 800818a:	2331      	movs	r3, #49	; 0x31
 800818c:	f10a 0a01 	add.w	sl, sl, #1
 8008190:	f88b 3000 	strb.w	r3, [fp]
 8008194:	e6ff      	b.n	8007f96 <_dtoa_r+0x8fe>
 8008196:	4615      	mov	r5, r2
 8008198:	e79f      	b.n	80080da <_dtoa_r+0xa42>
 800819a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008200 <_dtoa_r+0xb68>
 800819e:	e007      	b.n	80081b0 <_dtoa_r+0xb18>
 80081a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008204 <_dtoa_r+0xb6c>
 80081a6:	b11b      	cbz	r3, 80081b0 <_dtoa_r+0xb18>
 80081a8:	f10b 0308 	add.w	r3, fp, #8
 80081ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081ae:	6013      	str	r3, [r2, #0]
 80081b0:	4658      	mov	r0, fp
 80081b2:	b017      	add	sp, #92	; 0x5c
 80081b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b8:	9b06      	ldr	r3, [sp, #24]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	f77f ae35 	ble.w	8007e2a <_dtoa_r+0x792>
 80081c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081c2:	9307      	str	r3, [sp, #28]
 80081c4:	e649      	b.n	8007e5a <_dtoa_r+0x7c2>
 80081c6:	9b02      	ldr	r3, [sp, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dc03      	bgt.n	80081d4 <_dtoa_r+0xb3c>
 80081cc:	9b06      	ldr	r3, [sp, #24]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	f73f aecc 	bgt.w	8007f6c <_dtoa_r+0x8d4>
 80081d4:	465d      	mov	r5, fp
 80081d6:	4639      	mov	r1, r7
 80081d8:	9804      	ldr	r0, [sp, #16]
 80081da:	f7ff f9d0 	bl	800757e <quorem>
 80081de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80081e2:	f805 8b01 	strb.w	r8, [r5], #1
 80081e6:	9a02      	ldr	r2, [sp, #8]
 80081e8:	eba5 030b 	sub.w	r3, r5, fp
 80081ec:	429a      	cmp	r2, r3
 80081ee:	ddb0      	ble.n	8008152 <_dtoa_r+0xaba>
 80081f0:	2300      	movs	r3, #0
 80081f2:	220a      	movs	r2, #10
 80081f4:	9904      	ldr	r1, [sp, #16]
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 f879 	bl	80082ee <__multadd>
 80081fc:	9004      	str	r0, [sp, #16]
 80081fe:	e7ea      	b.n	80081d6 <_dtoa_r+0xb3e>
 8008200:	08008a54 	.word	0x08008a54
 8008204:	08008a56 	.word	0x08008a56

08008208 <_localeconv_r>:
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <_localeconv_r+0x14>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6a18      	ldr	r0, [r3, #32]
 800820e:	4b04      	ldr	r3, [pc, #16]	; (8008220 <_localeconv_r+0x18>)
 8008210:	2800      	cmp	r0, #0
 8008212:	bf08      	it	eq
 8008214:	4618      	moveq	r0, r3
 8008216:	30f0      	adds	r0, #240	; 0xf0
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	20000480 	.word	0x20000480
 8008220:	200004e4 	.word	0x200004e4

08008224 <malloc>:
 8008224:	4b02      	ldr	r3, [pc, #8]	; (8008230 <malloc+0xc>)
 8008226:	4601      	mov	r1, r0
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	f000 baff 	b.w	800882c <_malloc_r>
 800822e:	bf00      	nop
 8008230:	20000480 	.word	0x20000480

08008234 <__ascii_mbtowc>:
 8008234:	b082      	sub	sp, #8
 8008236:	b901      	cbnz	r1, 800823a <__ascii_mbtowc+0x6>
 8008238:	a901      	add	r1, sp, #4
 800823a:	b142      	cbz	r2, 800824e <__ascii_mbtowc+0x1a>
 800823c:	b14b      	cbz	r3, 8008252 <__ascii_mbtowc+0x1e>
 800823e:	7813      	ldrb	r3, [r2, #0]
 8008240:	600b      	str	r3, [r1, #0]
 8008242:	7812      	ldrb	r2, [r2, #0]
 8008244:	1c10      	adds	r0, r2, #0
 8008246:	bf18      	it	ne
 8008248:	2001      	movne	r0, #1
 800824a:	b002      	add	sp, #8
 800824c:	4770      	bx	lr
 800824e:	4610      	mov	r0, r2
 8008250:	e7fb      	b.n	800824a <__ascii_mbtowc+0x16>
 8008252:	f06f 0001 	mvn.w	r0, #1
 8008256:	e7f8      	b.n	800824a <__ascii_mbtowc+0x16>

08008258 <_Balloc>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800825c:	4604      	mov	r4, r0
 800825e:	460e      	mov	r6, r1
 8008260:	b93d      	cbnz	r5, 8008272 <_Balloc+0x1a>
 8008262:	2010      	movs	r0, #16
 8008264:	f7ff ffde 	bl	8008224 <malloc>
 8008268:	6260      	str	r0, [r4, #36]	; 0x24
 800826a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800826e:	6005      	str	r5, [r0, #0]
 8008270:	60c5      	str	r5, [r0, #12]
 8008272:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008274:	68eb      	ldr	r3, [r5, #12]
 8008276:	b183      	cbz	r3, 800829a <_Balloc+0x42>
 8008278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008280:	b9b8      	cbnz	r0, 80082b2 <_Balloc+0x5a>
 8008282:	2101      	movs	r1, #1
 8008284:	fa01 f506 	lsl.w	r5, r1, r6
 8008288:	1d6a      	adds	r2, r5, #5
 800828a:	0092      	lsls	r2, r2, #2
 800828c:	4620      	mov	r0, r4
 800828e:	f000 fabf 	bl	8008810 <_calloc_r>
 8008292:	b160      	cbz	r0, 80082ae <_Balloc+0x56>
 8008294:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008298:	e00e      	b.n	80082b8 <_Balloc+0x60>
 800829a:	2221      	movs	r2, #33	; 0x21
 800829c:	2104      	movs	r1, #4
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 fab6 	bl	8008810 <_calloc_r>
 80082a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a6:	60e8      	str	r0, [r5, #12]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e4      	bne.n	8008278 <_Balloc+0x20>
 80082ae:	2000      	movs	r0, #0
 80082b0:	bd70      	pop	{r4, r5, r6, pc}
 80082b2:	6802      	ldr	r2, [r0, #0]
 80082b4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80082b8:	2300      	movs	r3, #0
 80082ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082be:	e7f7      	b.n	80082b0 <_Balloc+0x58>

080082c0 <_Bfree>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80082c4:	4606      	mov	r6, r0
 80082c6:	460d      	mov	r5, r1
 80082c8:	b93c      	cbnz	r4, 80082da <_Bfree+0x1a>
 80082ca:	2010      	movs	r0, #16
 80082cc:	f7ff ffaa 	bl	8008224 <malloc>
 80082d0:	6270      	str	r0, [r6, #36]	; 0x24
 80082d2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082d6:	6004      	str	r4, [r0, #0]
 80082d8:	60c4      	str	r4, [r0, #12]
 80082da:	b13d      	cbz	r5, 80082ec <_Bfree+0x2c>
 80082dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80082de:	686a      	ldr	r2, [r5, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082e6:	6029      	str	r1, [r5, #0]
 80082e8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80082ec:	bd70      	pop	{r4, r5, r6, pc}

080082ee <__multadd>:
 80082ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f2:	690d      	ldr	r5, [r1, #16]
 80082f4:	461f      	mov	r7, r3
 80082f6:	4606      	mov	r6, r0
 80082f8:	460c      	mov	r4, r1
 80082fa:	f101 0c14 	add.w	ip, r1, #20
 80082fe:	2300      	movs	r3, #0
 8008300:	f8dc 0000 	ldr.w	r0, [ip]
 8008304:	b281      	uxth	r1, r0
 8008306:	fb02 7101 	mla	r1, r2, r1, r7
 800830a:	0c0f      	lsrs	r7, r1, #16
 800830c:	0c00      	lsrs	r0, r0, #16
 800830e:	fb02 7000 	mla	r0, r2, r0, r7
 8008312:	b289      	uxth	r1, r1
 8008314:	3301      	adds	r3, #1
 8008316:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800831a:	429d      	cmp	r5, r3
 800831c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008320:	f84c 1b04 	str.w	r1, [ip], #4
 8008324:	dcec      	bgt.n	8008300 <__multadd+0x12>
 8008326:	b1d7      	cbz	r7, 800835e <__multadd+0x70>
 8008328:	68a3      	ldr	r3, [r4, #8]
 800832a:	42ab      	cmp	r3, r5
 800832c:	dc12      	bgt.n	8008354 <__multadd+0x66>
 800832e:	6861      	ldr	r1, [r4, #4]
 8008330:	4630      	mov	r0, r6
 8008332:	3101      	adds	r1, #1
 8008334:	f7ff ff90 	bl	8008258 <_Balloc>
 8008338:	6922      	ldr	r2, [r4, #16]
 800833a:	3202      	adds	r2, #2
 800833c:	f104 010c 	add.w	r1, r4, #12
 8008340:	4680      	mov	r8, r0
 8008342:	0092      	lsls	r2, r2, #2
 8008344:	300c      	adds	r0, #12
 8008346:	f7fe fdbd 	bl	8006ec4 <memcpy>
 800834a:	4621      	mov	r1, r4
 800834c:	4630      	mov	r0, r6
 800834e:	f7ff ffb7 	bl	80082c0 <_Bfree>
 8008352:	4644      	mov	r4, r8
 8008354:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008358:	3501      	adds	r5, #1
 800835a:	615f      	str	r7, [r3, #20]
 800835c:	6125      	str	r5, [r4, #16]
 800835e:	4620      	mov	r0, r4
 8008360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008364 <__hi0bits>:
 8008364:	0c02      	lsrs	r2, r0, #16
 8008366:	0412      	lsls	r2, r2, #16
 8008368:	4603      	mov	r3, r0
 800836a:	b9b2      	cbnz	r2, 800839a <__hi0bits+0x36>
 800836c:	0403      	lsls	r3, r0, #16
 800836e:	2010      	movs	r0, #16
 8008370:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008374:	bf04      	itt	eq
 8008376:	021b      	lsleq	r3, r3, #8
 8008378:	3008      	addeq	r0, #8
 800837a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800837e:	bf04      	itt	eq
 8008380:	011b      	lsleq	r3, r3, #4
 8008382:	3004      	addeq	r0, #4
 8008384:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008388:	bf04      	itt	eq
 800838a:	009b      	lsleq	r3, r3, #2
 800838c:	3002      	addeq	r0, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	db06      	blt.n	80083a0 <__hi0bits+0x3c>
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	d503      	bpl.n	800839e <__hi0bits+0x3a>
 8008396:	3001      	adds	r0, #1
 8008398:	4770      	bx	lr
 800839a:	2000      	movs	r0, #0
 800839c:	e7e8      	b.n	8008370 <__hi0bits+0xc>
 800839e:	2020      	movs	r0, #32
 80083a0:	4770      	bx	lr

080083a2 <__lo0bits>:
 80083a2:	6803      	ldr	r3, [r0, #0]
 80083a4:	f013 0207 	ands.w	r2, r3, #7
 80083a8:	4601      	mov	r1, r0
 80083aa:	d00b      	beq.n	80083c4 <__lo0bits+0x22>
 80083ac:	07da      	lsls	r2, r3, #31
 80083ae:	d423      	bmi.n	80083f8 <__lo0bits+0x56>
 80083b0:	0798      	lsls	r0, r3, #30
 80083b2:	bf49      	itett	mi
 80083b4:	085b      	lsrmi	r3, r3, #1
 80083b6:	089b      	lsrpl	r3, r3, #2
 80083b8:	2001      	movmi	r0, #1
 80083ba:	600b      	strmi	r3, [r1, #0]
 80083bc:	bf5c      	itt	pl
 80083be:	600b      	strpl	r3, [r1, #0]
 80083c0:	2002      	movpl	r0, #2
 80083c2:	4770      	bx	lr
 80083c4:	b298      	uxth	r0, r3
 80083c6:	b9a8      	cbnz	r0, 80083f4 <__lo0bits+0x52>
 80083c8:	0c1b      	lsrs	r3, r3, #16
 80083ca:	2010      	movs	r0, #16
 80083cc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80083d0:	bf04      	itt	eq
 80083d2:	0a1b      	lsreq	r3, r3, #8
 80083d4:	3008      	addeq	r0, #8
 80083d6:	071a      	lsls	r2, r3, #28
 80083d8:	bf04      	itt	eq
 80083da:	091b      	lsreq	r3, r3, #4
 80083dc:	3004      	addeq	r0, #4
 80083de:	079a      	lsls	r2, r3, #30
 80083e0:	bf04      	itt	eq
 80083e2:	089b      	lsreq	r3, r3, #2
 80083e4:	3002      	addeq	r0, #2
 80083e6:	07da      	lsls	r2, r3, #31
 80083e8:	d402      	bmi.n	80083f0 <__lo0bits+0x4e>
 80083ea:	085b      	lsrs	r3, r3, #1
 80083ec:	d006      	beq.n	80083fc <__lo0bits+0x5a>
 80083ee:	3001      	adds	r0, #1
 80083f0:	600b      	str	r3, [r1, #0]
 80083f2:	4770      	bx	lr
 80083f4:	4610      	mov	r0, r2
 80083f6:	e7e9      	b.n	80083cc <__lo0bits+0x2a>
 80083f8:	2000      	movs	r0, #0
 80083fa:	4770      	bx	lr
 80083fc:	2020      	movs	r0, #32
 80083fe:	4770      	bx	lr

08008400 <__i2b>:
 8008400:	b510      	push	{r4, lr}
 8008402:	460c      	mov	r4, r1
 8008404:	2101      	movs	r1, #1
 8008406:	f7ff ff27 	bl	8008258 <_Balloc>
 800840a:	2201      	movs	r2, #1
 800840c:	6144      	str	r4, [r0, #20]
 800840e:	6102      	str	r2, [r0, #16]
 8008410:	bd10      	pop	{r4, pc}

08008412 <__multiply>:
 8008412:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008416:	4614      	mov	r4, r2
 8008418:	690a      	ldr	r2, [r1, #16]
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	429a      	cmp	r2, r3
 800841e:	bfb8      	it	lt
 8008420:	460b      	movlt	r3, r1
 8008422:	4688      	mov	r8, r1
 8008424:	bfbc      	itt	lt
 8008426:	46a0      	movlt	r8, r4
 8008428:	461c      	movlt	r4, r3
 800842a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800842e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008436:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800843a:	eb07 0609 	add.w	r6, r7, r9
 800843e:	42b3      	cmp	r3, r6
 8008440:	bfb8      	it	lt
 8008442:	3101      	addlt	r1, #1
 8008444:	f7ff ff08 	bl	8008258 <_Balloc>
 8008448:	f100 0514 	add.w	r5, r0, #20
 800844c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008450:	462b      	mov	r3, r5
 8008452:	2200      	movs	r2, #0
 8008454:	4573      	cmp	r3, lr
 8008456:	d316      	bcc.n	8008486 <__multiply+0x74>
 8008458:	f104 0214 	add.w	r2, r4, #20
 800845c:	f108 0114 	add.w	r1, r8, #20
 8008460:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008464:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	9b00      	ldr	r3, [sp, #0]
 800846c:	9201      	str	r2, [sp, #4]
 800846e:	4293      	cmp	r3, r2
 8008470:	d80c      	bhi.n	800848c <__multiply+0x7a>
 8008472:	2e00      	cmp	r6, #0
 8008474:	dd03      	ble.n	800847e <__multiply+0x6c>
 8008476:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800847a:	2b00      	cmp	r3, #0
 800847c:	d05d      	beq.n	800853a <__multiply+0x128>
 800847e:	6106      	str	r6, [r0, #16]
 8008480:	b003      	add	sp, #12
 8008482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008486:	f843 2b04 	str.w	r2, [r3], #4
 800848a:	e7e3      	b.n	8008454 <__multiply+0x42>
 800848c:	f8b2 b000 	ldrh.w	fp, [r2]
 8008490:	f1bb 0f00 	cmp.w	fp, #0
 8008494:	d023      	beq.n	80084de <__multiply+0xcc>
 8008496:	4689      	mov	r9, r1
 8008498:	46ac      	mov	ip, r5
 800849a:	f04f 0800 	mov.w	r8, #0
 800849e:	f859 4b04 	ldr.w	r4, [r9], #4
 80084a2:	f8dc a000 	ldr.w	sl, [ip]
 80084a6:	b2a3      	uxth	r3, r4
 80084a8:	fa1f fa8a 	uxth.w	sl, sl
 80084ac:	fb0b a303 	mla	r3, fp, r3, sl
 80084b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80084b4:	f8dc 4000 	ldr.w	r4, [ip]
 80084b8:	4443      	add	r3, r8
 80084ba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80084be:	fb0b 840a 	mla	r4, fp, sl, r8
 80084c2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80084c6:	46e2      	mov	sl, ip
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80084ce:	454f      	cmp	r7, r9
 80084d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80084d4:	f84a 3b04 	str.w	r3, [sl], #4
 80084d8:	d82b      	bhi.n	8008532 <__multiply+0x120>
 80084da:	f8cc 8004 	str.w	r8, [ip, #4]
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80084e4:	3204      	adds	r2, #4
 80084e6:	f1ba 0f00 	cmp.w	sl, #0
 80084ea:	d020      	beq.n	800852e <__multiply+0x11c>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	4689      	mov	r9, r1
 80084f0:	46a8      	mov	r8, r5
 80084f2:	f04f 0b00 	mov.w	fp, #0
 80084f6:	f8b9 c000 	ldrh.w	ip, [r9]
 80084fa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80084fe:	fb0a 440c 	mla	r4, sl, ip, r4
 8008502:	445c      	add	r4, fp
 8008504:	46c4      	mov	ip, r8
 8008506:	b29b      	uxth	r3, r3
 8008508:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800850c:	f84c 3b04 	str.w	r3, [ip], #4
 8008510:	f859 3b04 	ldr.w	r3, [r9], #4
 8008514:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008518:	0c1b      	lsrs	r3, r3, #16
 800851a:	fb0a b303 	mla	r3, sl, r3, fp
 800851e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008522:	454f      	cmp	r7, r9
 8008524:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008528:	d805      	bhi.n	8008536 <__multiply+0x124>
 800852a:	f8c8 3004 	str.w	r3, [r8, #4]
 800852e:	3504      	adds	r5, #4
 8008530:	e79b      	b.n	800846a <__multiply+0x58>
 8008532:	46d4      	mov	ip, sl
 8008534:	e7b3      	b.n	800849e <__multiply+0x8c>
 8008536:	46e0      	mov	r8, ip
 8008538:	e7dd      	b.n	80084f6 <__multiply+0xe4>
 800853a:	3e01      	subs	r6, #1
 800853c:	e799      	b.n	8008472 <__multiply+0x60>
	...

08008540 <__pow5mult>:
 8008540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008544:	4615      	mov	r5, r2
 8008546:	f012 0203 	ands.w	r2, r2, #3
 800854a:	4606      	mov	r6, r0
 800854c:	460f      	mov	r7, r1
 800854e:	d007      	beq.n	8008560 <__pow5mult+0x20>
 8008550:	3a01      	subs	r2, #1
 8008552:	4c21      	ldr	r4, [pc, #132]	; (80085d8 <__pow5mult+0x98>)
 8008554:	2300      	movs	r3, #0
 8008556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800855a:	f7ff fec8 	bl	80082ee <__multadd>
 800855e:	4607      	mov	r7, r0
 8008560:	10ad      	asrs	r5, r5, #2
 8008562:	d035      	beq.n	80085d0 <__pow5mult+0x90>
 8008564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008566:	b93c      	cbnz	r4, 8008578 <__pow5mult+0x38>
 8008568:	2010      	movs	r0, #16
 800856a:	f7ff fe5b 	bl	8008224 <malloc>
 800856e:	6270      	str	r0, [r6, #36]	; 0x24
 8008570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008574:	6004      	str	r4, [r0, #0]
 8008576:	60c4      	str	r4, [r0, #12]
 8008578:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800857c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008580:	b94c      	cbnz	r4, 8008596 <__pow5mult+0x56>
 8008582:	f240 2171 	movw	r1, #625	; 0x271
 8008586:	4630      	mov	r0, r6
 8008588:	f7ff ff3a 	bl	8008400 <__i2b>
 800858c:	2300      	movs	r3, #0
 800858e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008592:	4604      	mov	r4, r0
 8008594:	6003      	str	r3, [r0, #0]
 8008596:	f04f 0800 	mov.w	r8, #0
 800859a:	07eb      	lsls	r3, r5, #31
 800859c:	d50a      	bpl.n	80085b4 <__pow5mult+0x74>
 800859e:	4639      	mov	r1, r7
 80085a0:	4622      	mov	r2, r4
 80085a2:	4630      	mov	r0, r6
 80085a4:	f7ff ff35 	bl	8008412 <__multiply>
 80085a8:	4639      	mov	r1, r7
 80085aa:	4681      	mov	r9, r0
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff fe87 	bl	80082c0 <_Bfree>
 80085b2:	464f      	mov	r7, r9
 80085b4:	106d      	asrs	r5, r5, #1
 80085b6:	d00b      	beq.n	80085d0 <__pow5mult+0x90>
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	b938      	cbnz	r0, 80085cc <__pow5mult+0x8c>
 80085bc:	4622      	mov	r2, r4
 80085be:	4621      	mov	r1, r4
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff ff26 	bl	8008412 <__multiply>
 80085c6:	6020      	str	r0, [r4, #0]
 80085c8:	f8c0 8000 	str.w	r8, [r0]
 80085cc:	4604      	mov	r4, r0
 80085ce:	e7e4      	b.n	800859a <__pow5mult+0x5a>
 80085d0:	4638      	mov	r0, r7
 80085d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d6:	bf00      	nop
 80085d8:	08008b60 	.word	0x08008b60

080085dc <__lshift>:
 80085dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e0:	460c      	mov	r4, r1
 80085e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	6849      	ldr	r1, [r1, #4]
 80085ea:	eb0a 0903 	add.w	r9, sl, r3
 80085ee:	68a3      	ldr	r3, [r4, #8]
 80085f0:	4607      	mov	r7, r0
 80085f2:	4616      	mov	r6, r2
 80085f4:	f109 0501 	add.w	r5, r9, #1
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	db32      	blt.n	8008662 <__lshift+0x86>
 80085fc:	4638      	mov	r0, r7
 80085fe:	f7ff fe2b 	bl	8008258 <_Balloc>
 8008602:	2300      	movs	r3, #0
 8008604:	4680      	mov	r8, r0
 8008606:	f100 0114 	add.w	r1, r0, #20
 800860a:	461a      	mov	r2, r3
 800860c:	4553      	cmp	r3, sl
 800860e:	db2b      	blt.n	8008668 <__lshift+0x8c>
 8008610:	6920      	ldr	r0, [r4, #16]
 8008612:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008616:	f104 0314 	add.w	r3, r4, #20
 800861a:	f016 021f 	ands.w	r2, r6, #31
 800861e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008622:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008626:	d025      	beq.n	8008674 <__lshift+0x98>
 8008628:	f1c2 0e20 	rsb	lr, r2, #32
 800862c:	2000      	movs	r0, #0
 800862e:	681e      	ldr	r6, [r3, #0]
 8008630:	468a      	mov	sl, r1
 8008632:	4096      	lsls	r6, r2
 8008634:	4330      	orrs	r0, r6
 8008636:	f84a 0b04 	str.w	r0, [sl], #4
 800863a:	f853 0b04 	ldr.w	r0, [r3], #4
 800863e:	459c      	cmp	ip, r3
 8008640:	fa20 f00e 	lsr.w	r0, r0, lr
 8008644:	d814      	bhi.n	8008670 <__lshift+0x94>
 8008646:	6048      	str	r0, [r1, #4]
 8008648:	b108      	cbz	r0, 800864e <__lshift+0x72>
 800864a:	f109 0502 	add.w	r5, r9, #2
 800864e:	3d01      	subs	r5, #1
 8008650:	4638      	mov	r0, r7
 8008652:	f8c8 5010 	str.w	r5, [r8, #16]
 8008656:	4621      	mov	r1, r4
 8008658:	f7ff fe32 	bl	80082c0 <_Bfree>
 800865c:	4640      	mov	r0, r8
 800865e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008662:	3101      	adds	r1, #1
 8008664:	005b      	lsls	r3, r3, #1
 8008666:	e7c7      	b.n	80085f8 <__lshift+0x1c>
 8008668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800866c:	3301      	adds	r3, #1
 800866e:	e7cd      	b.n	800860c <__lshift+0x30>
 8008670:	4651      	mov	r1, sl
 8008672:	e7dc      	b.n	800862e <__lshift+0x52>
 8008674:	3904      	subs	r1, #4
 8008676:	f853 2b04 	ldr.w	r2, [r3], #4
 800867a:	f841 2f04 	str.w	r2, [r1, #4]!
 800867e:	459c      	cmp	ip, r3
 8008680:	d8f9      	bhi.n	8008676 <__lshift+0x9a>
 8008682:	e7e4      	b.n	800864e <__lshift+0x72>

08008684 <__mcmp>:
 8008684:	6903      	ldr	r3, [r0, #16]
 8008686:	690a      	ldr	r2, [r1, #16]
 8008688:	1a9b      	subs	r3, r3, r2
 800868a:	b530      	push	{r4, r5, lr}
 800868c:	d10c      	bne.n	80086a8 <__mcmp+0x24>
 800868e:	0092      	lsls	r2, r2, #2
 8008690:	3014      	adds	r0, #20
 8008692:	3114      	adds	r1, #20
 8008694:	1884      	adds	r4, r0, r2
 8008696:	4411      	add	r1, r2
 8008698:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800869c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086a0:	4295      	cmp	r5, r2
 80086a2:	d003      	beq.n	80086ac <__mcmp+0x28>
 80086a4:	d305      	bcc.n	80086b2 <__mcmp+0x2e>
 80086a6:	2301      	movs	r3, #1
 80086a8:	4618      	mov	r0, r3
 80086aa:	bd30      	pop	{r4, r5, pc}
 80086ac:	42a0      	cmp	r0, r4
 80086ae:	d3f3      	bcc.n	8008698 <__mcmp+0x14>
 80086b0:	e7fa      	b.n	80086a8 <__mcmp+0x24>
 80086b2:	f04f 33ff 	mov.w	r3, #4294967295
 80086b6:	e7f7      	b.n	80086a8 <__mcmp+0x24>

080086b8 <__mdiff>:
 80086b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086bc:	460d      	mov	r5, r1
 80086be:	4607      	mov	r7, r0
 80086c0:	4611      	mov	r1, r2
 80086c2:	4628      	mov	r0, r5
 80086c4:	4614      	mov	r4, r2
 80086c6:	f7ff ffdd 	bl	8008684 <__mcmp>
 80086ca:	1e06      	subs	r6, r0, #0
 80086cc:	d108      	bne.n	80086e0 <__mdiff+0x28>
 80086ce:	4631      	mov	r1, r6
 80086d0:	4638      	mov	r0, r7
 80086d2:	f7ff fdc1 	bl	8008258 <_Balloc>
 80086d6:	2301      	movs	r3, #1
 80086d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80086dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e0:	bfa4      	itt	ge
 80086e2:	4623      	movge	r3, r4
 80086e4:	462c      	movge	r4, r5
 80086e6:	4638      	mov	r0, r7
 80086e8:	6861      	ldr	r1, [r4, #4]
 80086ea:	bfa6      	itte	ge
 80086ec:	461d      	movge	r5, r3
 80086ee:	2600      	movge	r6, #0
 80086f0:	2601      	movlt	r6, #1
 80086f2:	f7ff fdb1 	bl	8008258 <_Balloc>
 80086f6:	692b      	ldr	r3, [r5, #16]
 80086f8:	60c6      	str	r6, [r0, #12]
 80086fa:	6926      	ldr	r6, [r4, #16]
 80086fc:	f105 0914 	add.w	r9, r5, #20
 8008700:	f104 0214 	add.w	r2, r4, #20
 8008704:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008708:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800870c:	f100 0514 	add.w	r5, r0, #20
 8008710:	f04f 0e00 	mov.w	lr, #0
 8008714:	f852 ab04 	ldr.w	sl, [r2], #4
 8008718:	f859 4b04 	ldr.w	r4, [r9], #4
 800871c:	fa1e f18a 	uxtah	r1, lr, sl
 8008720:	b2a3      	uxth	r3, r4
 8008722:	1ac9      	subs	r1, r1, r3
 8008724:	0c23      	lsrs	r3, r4, #16
 8008726:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800872a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800872e:	b289      	uxth	r1, r1
 8008730:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008734:	45c8      	cmp	r8, r9
 8008736:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800873a:	4694      	mov	ip, r2
 800873c:	f845 3b04 	str.w	r3, [r5], #4
 8008740:	d8e8      	bhi.n	8008714 <__mdiff+0x5c>
 8008742:	45bc      	cmp	ip, r7
 8008744:	d304      	bcc.n	8008750 <__mdiff+0x98>
 8008746:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800874a:	b183      	cbz	r3, 800876e <__mdiff+0xb6>
 800874c:	6106      	str	r6, [r0, #16]
 800874e:	e7c5      	b.n	80086dc <__mdiff+0x24>
 8008750:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008754:	fa1e f381 	uxtah	r3, lr, r1
 8008758:	141a      	asrs	r2, r3, #16
 800875a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800875e:	b29b      	uxth	r3, r3
 8008760:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008764:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008768:	f845 3b04 	str.w	r3, [r5], #4
 800876c:	e7e9      	b.n	8008742 <__mdiff+0x8a>
 800876e:	3e01      	subs	r6, #1
 8008770:	e7e9      	b.n	8008746 <__mdiff+0x8e>

08008772 <__d2b>:
 8008772:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008776:	460e      	mov	r6, r1
 8008778:	2101      	movs	r1, #1
 800877a:	ec59 8b10 	vmov	r8, r9, d0
 800877e:	4615      	mov	r5, r2
 8008780:	f7ff fd6a 	bl	8008258 <_Balloc>
 8008784:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008788:	4607      	mov	r7, r0
 800878a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800878e:	bb34      	cbnz	r4, 80087de <__d2b+0x6c>
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	f1b8 0300 	subs.w	r3, r8, #0
 8008796:	d027      	beq.n	80087e8 <__d2b+0x76>
 8008798:	a802      	add	r0, sp, #8
 800879a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800879e:	f7ff fe00 	bl	80083a2 <__lo0bits>
 80087a2:	9900      	ldr	r1, [sp, #0]
 80087a4:	b1f0      	cbz	r0, 80087e4 <__d2b+0x72>
 80087a6:	9a01      	ldr	r2, [sp, #4]
 80087a8:	f1c0 0320 	rsb	r3, r0, #32
 80087ac:	fa02 f303 	lsl.w	r3, r2, r3
 80087b0:	430b      	orrs	r3, r1
 80087b2:	40c2      	lsrs	r2, r0
 80087b4:	617b      	str	r3, [r7, #20]
 80087b6:	9201      	str	r2, [sp, #4]
 80087b8:	9b01      	ldr	r3, [sp, #4]
 80087ba:	61bb      	str	r3, [r7, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bf14      	ite	ne
 80087c0:	2102      	movne	r1, #2
 80087c2:	2101      	moveq	r1, #1
 80087c4:	6139      	str	r1, [r7, #16]
 80087c6:	b1c4      	cbz	r4, 80087fa <__d2b+0x88>
 80087c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80087cc:	4404      	add	r4, r0
 80087ce:	6034      	str	r4, [r6, #0]
 80087d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087d4:	6028      	str	r0, [r5, #0]
 80087d6:	4638      	mov	r0, r7
 80087d8:	b003      	add	sp, #12
 80087da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087e2:	e7d5      	b.n	8008790 <__d2b+0x1e>
 80087e4:	6179      	str	r1, [r7, #20]
 80087e6:	e7e7      	b.n	80087b8 <__d2b+0x46>
 80087e8:	a801      	add	r0, sp, #4
 80087ea:	f7ff fdda 	bl	80083a2 <__lo0bits>
 80087ee:	9b01      	ldr	r3, [sp, #4]
 80087f0:	617b      	str	r3, [r7, #20]
 80087f2:	2101      	movs	r1, #1
 80087f4:	6139      	str	r1, [r7, #16]
 80087f6:	3020      	adds	r0, #32
 80087f8:	e7e5      	b.n	80087c6 <__d2b+0x54>
 80087fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80087fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008802:	6030      	str	r0, [r6, #0]
 8008804:	6918      	ldr	r0, [r3, #16]
 8008806:	f7ff fdad 	bl	8008364 <__hi0bits>
 800880a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800880e:	e7e1      	b.n	80087d4 <__d2b+0x62>

08008810 <_calloc_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	fb02 f401 	mul.w	r4, r2, r1
 8008816:	4621      	mov	r1, r4
 8008818:	f000 f808 	bl	800882c <_malloc_r>
 800881c:	4605      	mov	r5, r0
 800881e:	b118      	cbz	r0, 8008828 <_calloc_r+0x18>
 8008820:	4622      	mov	r2, r4
 8008822:	2100      	movs	r1, #0
 8008824:	f7fe fb59 	bl	8006eda <memset>
 8008828:	4628      	mov	r0, r5
 800882a:	bd38      	pop	{r3, r4, r5, pc}

0800882c <_malloc_r>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	1ccd      	adds	r5, r1, #3
 8008830:	f025 0503 	bic.w	r5, r5, #3
 8008834:	3508      	adds	r5, #8
 8008836:	2d0c      	cmp	r5, #12
 8008838:	bf38      	it	cc
 800883a:	250c      	movcc	r5, #12
 800883c:	2d00      	cmp	r5, #0
 800883e:	4606      	mov	r6, r0
 8008840:	db01      	blt.n	8008846 <_malloc_r+0x1a>
 8008842:	42a9      	cmp	r1, r5
 8008844:	d903      	bls.n	800884e <_malloc_r+0x22>
 8008846:	230c      	movs	r3, #12
 8008848:	6033      	str	r3, [r6, #0]
 800884a:	2000      	movs	r0, #0
 800884c:	bd70      	pop	{r4, r5, r6, pc}
 800884e:	f000 f864 	bl	800891a <__malloc_lock>
 8008852:	4a21      	ldr	r2, [pc, #132]	; (80088d8 <_malloc_r+0xac>)
 8008854:	6814      	ldr	r4, [r2, #0]
 8008856:	4621      	mov	r1, r4
 8008858:	b991      	cbnz	r1, 8008880 <_malloc_r+0x54>
 800885a:	4c20      	ldr	r4, [pc, #128]	; (80088dc <_malloc_r+0xb0>)
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	b91b      	cbnz	r3, 8008868 <_malloc_r+0x3c>
 8008860:	4630      	mov	r0, r6
 8008862:	f000 f83d 	bl	80088e0 <_sbrk_r>
 8008866:	6020      	str	r0, [r4, #0]
 8008868:	4629      	mov	r1, r5
 800886a:	4630      	mov	r0, r6
 800886c:	f000 f838 	bl	80088e0 <_sbrk_r>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d124      	bne.n	80088be <_malloc_r+0x92>
 8008874:	230c      	movs	r3, #12
 8008876:	6033      	str	r3, [r6, #0]
 8008878:	4630      	mov	r0, r6
 800887a:	f000 f84f 	bl	800891c <__malloc_unlock>
 800887e:	e7e4      	b.n	800884a <_malloc_r+0x1e>
 8008880:	680b      	ldr	r3, [r1, #0]
 8008882:	1b5b      	subs	r3, r3, r5
 8008884:	d418      	bmi.n	80088b8 <_malloc_r+0x8c>
 8008886:	2b0b      	cmp	r3, #11
 8008888:	d90f      	bls.n	80088aa <_malloc_r+0x7e>
 800888a:	600b      	str	r3, [r1, #0]
 800888c:	50cd      	str	r5, [r1, r3]
 800888e:	18cc      	adds	r4, r1, r3
 8008890:	4630      	mov	r0, r6
 8008892:	f000 f843 	bl	800891c <__malloc_unlock>
 8008896:	f104 000b 	add.w	r0, r4, #11
 800889a:	1d23      	adds	r3, r4, #4
 800889c:	f020 0007 	bic.w	r0, r0, #7
 80088a0:	1ac3      	subs	r3, r0, r3
 80088a2:	d0d3      	beq.n	800884c <_malloc_r+0x20>
 80088a4:	425a      	negs	r2, r3
 80088a6:	50e2      	str	r2, [r4, r3]
 80088a8:	e7d0      	b.n	800884c <_malloc_r+0x20>
 80088aa:	428c      	cmp	r4, r1
 80088ac:	684b      	ldr	r3, [r1, #4]
 80088ae:	bf16      	itet	ne
 80088b0:	6063      	strne	r3, [r4, #4]
 80088b2:	6013      	streq	r3, [r2, #0]
 80088b4:	460c      	movne	r4, r1
 80088b6:	e7eb      	b.n	8008890 <_malloc_r+0x64>
 80088b8:	460c      	mov	r4, r1
 80088ba:	6849      	ldr	r1, [r1, #4]
 80088bc:	e7cc      	b.n	8008858 <_malloc_r+0x2c>
 80088be:	1cc4      	adds	r4, r0, #3
 80088c0:	f024 0403 	bic.w	r4, r4, #3
 80088c4:	42a0      	cmp	r0, r4
 80088c6:	d005      	beq.n	80088d4 <_malloc_r+0xa8>
 80088c8:	1a21      	subs	r1, r4, r0
 80088ca:	4630      	mov	r0, r6
 80088cc:	f000 f808 	bl	80088e0 <_sbrk_r>
 80088d0:	3001      	adds	r0, #1
 80088d2:	d0cf      	beq.n	8008874 <_malloc_r+0x48>
 80088d4:	6025      	str	r5, [r4, #0]
 80088d6:	e7db      	b.n	8008890 <_malloc_r+0x64>
 80088d8:	20004610 	.word	0x20004610
 80088dc:	20004614 	.word	0x20004614

080088e0 <_sbrk_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4c06      	ldr	r4, [pc, #24]	; (80088fc <_sbrk_r+0x1c>)
 80088e4:	2300      	movs	r3, #0
 80088e6:	4605      	mov	r5, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	f7f9 fe88 	bl	8002600 <_sbrk>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_sbrk_r+0x1a>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_sbrk_r+0x1a>
 80088f8:	602b      	str	r3, [r5, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	200054fc 	.word	0x200054fc

08008900 <__ascii_wctomb>:
 8008900:	b149      	cbz	r1, 8008916 <__ascii_wctomb+0x16>
 8008902:	2aff      	cmp	r2, #255	; 0xff
 8008904:	bf85      	ittet	hi
 8008906:	238a      	movhi	r3, #138	; 0x8a
 8008908:	6003      	strhi	r3, [r0, #0]
 800890a:	700a      	strbls	r2, [r1, #0]
 800890c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008910:	bf98      	it	ls
 8008912:	2001      	movls	r0, #1
 8008914:	4770      	bx	lr
 8008916:	4608      	mov	r0, r1
 8008918:	4770      	bx	lr

0800891a <__malloc_lock>:
 800891a:	4770      	bx	lr

0800891c <__malloc_unlock>:
 800891c:	4770      	bx	lr
	...

08008920 <_init>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	bf00      	nop
 8008924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008926:	bc08      	pop	{r3}
 8008928:	469e      	mov	lr, r3
 800892a:	4770      	bx	lr

0800892c <_fini>:
 800892c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892e:	bf00      	nop
 8008930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008932:	bc08      	pop	{r3}
 8008934:	469e      	mov	lr, r3
 8008936:	4770      	bx	lr
