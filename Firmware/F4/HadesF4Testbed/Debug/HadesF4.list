
HadesF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006748  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  080068d0  080068d0  000168d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c70  08006c70  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c78  08006c78  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c7c  08006c7c  00016c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001dc  08006e5c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08006e5c  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7c6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000232f  00000000  00000000  0002e9d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac8  00000000  00000000  00030d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  000317d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fd13  00000000  00000000  00032190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ade1  00000000  00000000  00051ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000baf52  00000000  00000000  0005cc84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117bd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003360  00000000  00000000  00117c54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080068b8 	.word	0x080068b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	080068b8 	.word	0x080068b8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b972 	b.w	8000dfc <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9e08      	ldr	r6, [sp, #32]
 8000b36:	4604      	mov	r4, r0
 8000b38:	4688      	mov	r8, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d14b      	bne.n	8000bd6 <__udivmoddi4+0xa6>
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	4615      	mov	r5, r2
 8000b42:	d967      	bls.n	8000c14 <__udivmoddi4+0xe4>
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0720 	rsb	r7, r2, #32
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	fa20 f707 	lsr.w	r7, r0, r7
 8000b56:	4095      	lsls	r5, r2
 8000b58:	ea47 0803 	orr.w	r8, r7, r3
 8000b5c:	4094      	lsls	r4, r2
 8000b5e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b62:	0c23      	lsrs	r3, r4, #16
 8000b64:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b68:	fa1f fc85 	uxth.w	ip, r5
 8000b6c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b70:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b74:	fb07 f10c 	mul.w	r1, r7, ip
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	d909      	bls.n	8000b90 <__udivmoddi4+0x60>
 8000b7c:	18eb      	adds	r3, r5, r3
 8000b7e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b82:	f080 811b 	bcs.w	8000dbc <__udivmoddi4+0x28c>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 8118 	bls.w	8000dbc <__udivmoddi4+0x28c>
 8000b8c:	3f02      	subs	r7, #2
 8000b8e:	442b      	add	r3, r5
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba4:	45a4      	cmp	ip, r4
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x8c>
 8000ba8:	192c      	adds	r4, r5, r4
 8000baa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x290>
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x290>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	442c      	add	r4, r5
 8000bbc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bc0:	eba4 040c 	sub.w	r4, r4, ip
 8000bc4:	2700      	movs	r7, #0
 8000bc6:	b11e      	cbz	r6, 8000bd0 <__udivmoddi4+0xa0>
 8000bc8:	40d4      	lsrs	r4, r2
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd0:	4639      	mov	r1, r7
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0xbe>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	f000 80eb 	beq.w	8000db6 <__udivmoddi4+0x286>
 8000be0:	2700      	movs	r7, #0
 8000be2:	e9c6 0100 	strd	r0, r1, [r6]
 8000be6:	4638      	mov	r0, r7
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	fab3 f783 	clz	r7, r3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d147      	bne.n	8000c86 <__udivmoddi4+0x156>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xd0>
 8000bfa:	4282      	cmp	r2, r0
 8000bfc:	f200 80fa 	bhi.w	8000df4 <__udivmoddi4+0x2c4>
 8000c00:	1a84      	subs	r4, r0, r2
 8000c02:	eb61 0303 	sbc.w	r3, r1, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d0e0      	beq.n	8000bd0 <__udivmoddi4+0xa0>
 8000c0e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c12:	e7dd      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000c14:	b902      	cbnz	r2, 8000c18 <__udivmoddi4+0xe8>
 8000c16:	deff      	udf	#255	; 0xff
 8000c18:	fab2 f282 	clz	r2, r2
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	f040 808f 	bne.w	8000d40 <__udivmoddi4+0x210>
 8000c22:	1b49      	subs	r1, r1, r5
 8000c24:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c28:	fa1f f885 	uxth.w	r8, r5
 8000c2c:	2701      	movs	r7, #1
 8000c2e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c32:	0c23      	lsrs	r3, r4, #16
 8000c34:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0x124>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x122>
 8000c4c:	4299      	cmp	r1, r3
 8000c4e:	f200 80cd 	bhi.w	8000dec <__udivmoddi4+0x2bc>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x14c>
 8000c6c:	192c      	adds	r4, r5, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x14a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80b6 	bhi.w	8000de6 <__udivmoddi4+0x2b6>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e79f      	b.n	8000bc6 <__udivmoddi4+0x96>
 8000c86:	f1c7 0c20 	rsb	ip, r7, #32
 8000c8a:	40bb      	lsls	r3, r7
 8000c8c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c90:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c94:	fa01 f407 	lsl.w	r4, r1, r7
 8000c98:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c9c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ca0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca4:	4325      	orrs	r5, r4
 8000ca6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000caa:	0c2c      	lsrs	r4, r5, #16
 8000cac:	fb08 3319 	mls	r3, r8, r9, r3
 8000cb0:	fa1f fa8e 	uxth.w	sl, lr
 8000cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	fa02 f207 	lsl.w	r2, r2, r7
 8000cc2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b0>
 8000cc8:	eb1e 0303 	adds.w	r3, lr, r3
 8000ccc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cd0:	f080 8087 	bcs.w	8000de2 <__udivmoddi4+0x2b2>
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	f240 8084 	bls.w	8000de2 <__udivmoddi4+0x2b2>
 8000cda:	f1a9 0902 	sub.w	r9, r9, #2
 8000cde:	4473      	add	r3, lr
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	b2ad      	uxth	r5, r5
 8000ce4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cf0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf4:	45a2      	cmp	sl, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1da>
 8000cf8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d00:	d26b      	bcs.n	8000dda <__udivmoddi4+0x2aa>
 8000d02:	45a2      	cmp	sl, r4
 8000d04:	d969      	bls.n	8000dda <__udivmoddi4+0x2aa>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4474      	add	r4, lr
 8000d0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d12:	eba4 040a 	sub.w	r4, r4, sl
 8000d16:	454c      	cmp	r4, r9
 8000d18:	46c2      	mov	sl, r8
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	d354      	bcc.n	8000dc8 <__udivmoddi4+0x298>
 8000d1e:	d051      	beq.n	8000dc4 <__udivmoddi4+0x294>
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d069      	beq.n	8000df8 <__udivmoddi4+0x2c8>
 8000d24:	ebb1 050a 	subs.w	r5, r1, sl
 8000d28:	eb64 0403 	sbc.w	r4, r4, r3
 8000d2c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d30:	40fd      	lsrs	r5, r7
 8000d32:	40fc      	lsrs	r4, r7
 8000d34:	ea4c 0505 	orr.w	r5, ip, r5
 8000d38:	e9c6 5400 	strd	r5, r4, [r6]
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f703 	lsr.w	r7, r0, r3
 8000d48:	4095      	lsls	r5, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d52:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d56:	4338      	orrs	r0, r7
 8000d58:	0c01      	lsrs	r1, r0, #16
 8000d5a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5e:	fa1f f885 	uxth.w	r8, r5
 8000d62:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6a:	fb07 f308 	mul.w	r3, r7, r8
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d907      	bls.n	8000d86 <__udivmoddi4+0x256>
 8000d76:	1869      	adds	r1, r5, r1
 8000d78:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d7c:	d22f      	bcs.n	8000dde <__udivmoddi4+0x2ae>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d92d      	bls.n	8000dde <__udivmoddi4+0x2ae>
 8000d82:	3f02      	subs	r7, #2
 8000d84:	4429      	add	r1, r5
 8000d86:	1acb      	subs	r3, r1, r3
 8000d88:	b281      	uxth	r1, r0
 8000d8a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb00 f308 	mul.w	r3, r0, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x27e>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da4:	d217      	bcs.n	8000dd6 <__udivmoddi4+0x2a6>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d915      	bls.n	8000dd6 <__udivmoddi4+0x2a6>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db4:	e73b      	b.n	8000c2e <__udivmoddi4+0xfe>
 8000db6:	4637      	mov	r7, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e709      	b.n	8000bd0 <__udivmoddi4+0xa0>
 8000dbc:	4607      	mov	r7, r0
 8000dbe:	e6e7      	b.n	8000b90 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x8c>
 8000dc4:	4541      	cmp	r1, r8
 8000dc6:	d2ab      	bcs.n	8000d20 <__udivmoddi4+0x1f0>
 8000dc8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dcc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	e7a4      	b.n	8000d20 <__udivmoddi4+0x1f0>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	e7e9      	b.n	8000dae <__udivmoddi4+0x27e>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	e795      	b.n	8000d0a <__udivmoddi4+0x1da>
 8000dde:	4667      	mov	r7, ip
 8000de0:	e7d1      	b.n	8000d86 <__udivmoddi4+0x256>
 8000de2:	4681      	mov	r9, r0
 8000de4:	e77c      	b.n	8000ce0 <__udivmoddi4+0x1b0>
 8000de6:	3802      	subs	r0, #2
 8000de8:	442c      	add	r4, r5
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0x14c>
 8000dec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000df0:	442b      	add	r3, r5
 8000df2:	e72f      	b.n	8000c54 <__udivmoddi4+0x124>
 8000df4:	4638      	mov	r0, r7
 8000df6:	e708      	b.n	8000c0a <__udivmoddi4+0xda>
 8000df8:	4637      	mov	r7, r6
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0xa0>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <BMI088_Init>:
#include "BMI088.h"

uint8_t BMI088_Init(BMI088IMU *imu, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intAccPinBank, uint16_t intAccPin, GPIO_TypeDef *intGyrPinBank, uint16_t intGyrPin) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af04      	add	r7, sp, #16
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	807b      	strh	r3, [r7, #2]
	imu->I2Chandle     = I2Chandle;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	601a      	str	r2, [r3, #0]
	imu->intAccPinBank = intAccPinBank;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	605a      	str	r2, [r3, #4]
	imu->intAccPin     = intAccPin;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	887a      	ldrh	r2, [r7, #2]
 8000e1e:	811a      	strh	r2, [r3, #8]
	imu->intGyrPinBank = intGyrPinBank;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e24:	60da      	str	r2, [r3, #12]
	imu->intGyrPin     = intGyrPin;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000e2a:	821a      	strh	r2, [r3, #16]
	imu->acc[0] = 0.0f;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
	imu->acc[1] = 0.0f;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
	imu->acc[2] = 0.0f;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	61da      	str	r2, [r3, #28]
	imu->gyr[0] = 0.0f;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
	imu->gyr[1] = 0.0f;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
	imu->gyr[2] = 0.0f;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28

//	HAL_Delay(5);

	/* Check chip ID */
	uint8_t chipID;
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	6818      	ldr	r0, [r3, #0]
 8000e60:	2364      	movs	r3, #100	; 0x64
 8000e62:	9302      	str	r3, [sp, #8]
 8000e64:	2301      	movs	r3, #1
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	f107 0317 	add.w	r3, r7, #23
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2301      	movs	r3, #1
 8000e70:	2200      	movs	r2, #0
 8000e72:	2132      	movs	r1, #50	; 0x32
 8000e74:	f001 ffa2 	bl	8002dbc <HAL_I2C_Mem_Read>

	if (chipID != 0x1E) {
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	2b1e      	cmp	r3, #30
 8000e7c:	d001      	beq.n	8000e82 <BMI088_Init+0x82>
		return 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e0ca      	b.n	8001018 <BMI088_Init+0x218>
	}

	/* Configure accelerometer LPF bandwidth (OSR4, 1000) and ODR (200 Hz, 1001) --> Actual bandwidth = 20 Hz */
	uint8_t accConf = 0x89;
 8000e82:	2389      	movs	r3, #137	; 0x89
 8000e84:	77fb      	strb	r3, [r7, #31]
	txBuf[0] = BMI088_ACC_CONF; txBuf[1] = accConf;
 8000e86:	2340      	movs	r3, #64	; 0x40
 8000e88:	763b      	strb	r3, [r7, #24]
 8000e8a:	7ffb      	ldrb	r3, [r7, #31]
 8000e8c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	f107 0218 	add.w	r2, r7, #24
 8000e96:	2364      	movs	r3, #100	; 0x64
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2132      	movs	r1, #50	; 0x32
 8000e9e:	f001 fc69 	bl	8002774 <HAL_I2C_Master_Transmit>

	/* Accelerometer range (+-6G = 0x01) */
	uint8_t accRange = 0x01;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	77bb      	strb	r3, [r7, #30]
	txBuf[0] = BMI088_ACC_RANGE; txBuf[1] = accRange;
 8000ea6:	2341      	movs	r3, #65	; 0x41
 8000ea8:	763b      	strb	r3, [r7, #24]
 8000eaa:	7fbb      	ldrb	r3, [r7, #30]
 8000eac:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6818      	ldr	r0, [r3, #0]
 8000eb2:	f107 0218 	add.w	r2, r7, #24
 8000eb6:	2364      	movs	r3, #100	; 0x64
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	2302      	movs	r3, #2
 8000ebc:	2132      	movs	r1, #50	; 0x32
 8000ebe:	f001 fc59 	bl	8002774 <HAL_I2C_Master_Transmit>

	/* Configure INT1 and INT2 pin */
	uint8_t intConf = 0x0A;
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	777b      	strb	r3, [r7, #29]
	txBuf[0] = BMI088_INT1_IO_CONF; txBuf[1] = intConf;
 8000ec6:	2353      	movs	r3, #83	; 0x53
 8000ec8:	763b      	strb	r3, [r7, #24]
 8000eca:	7f7b      	ldrb	r3, [r7, #29]
 8000ecc:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	f107 0218 	add.w	r2, r7, #24
 8000ed6:	2364      	movs	r3, #100	; 0x64
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2302      	movs	r3, #2
 8000edc:	2132      	movs	r1, #50	; 0x32
 8000ede:	f001 fc49 	bl	8002774 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_INT2_IO_CONF;
 8000ee2:	2354      	movs	r3, #84	; 0x54
 8000ee4:	763b      	strb	r3, [r7, #24]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	6818      	ldr	r0, [r3, #0]
 8000eea:	f107 0218 	add.w	r2, r7, #24
 8000eee:	2364      	movs	r3, #100	; 0x64
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	2132      	movs	r1, #50	; 0x32
 8000ef6:	f001 fc3d 	bl	8002774 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_INT1_INT2_MAP_DATA; txBuf[1] = 0x44;
 8000efa:	2358      	movs	r3, #88	; 0x58
 8000efc:	763b      	strb	r3, [r7, #24]
 8000efe:	2344      	movs	r3, #68	; 0x44
 8000f00:	767b      	strb	r3, [r7, #25]

	/* Set accelerometer to active mode */
	txBuf[0] = BMI088_ACC_PWR_CONF; txBuf[1] = 0x00;
 8000f02:	237c      	movs	r3, #124	; 0x7c
 8000f04:	763b      	strb	r3, [r7, #24]
 8000f06:	2300      	movs	r3, #0
 8000f08:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	f107 0218 	add.w	r2, r7, #24
 8000f12:	2364      	movs	r3, #100	; 0x64
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	2302      	movs	r3, #2
 8000f18:	2132      	movs	r1, #50	; 0x32
 8000f1a:	f001 fc2b 	bl	8002774 <HAL_I2C_Master_Transmit>

	/* Switch accelerometer on */
	txBuf[0] = BMI088_ACC_PWR_CTRL; txBuf[1] = 0x04;
 8000f1e:	237d      	movs	r3, #125	; 0x7d
 8000f20:	763b      	strb	r3, [r7, #24]
 8000f22:	2304      	movs	r3, #4
 8000f24:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_ACC_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	f107 0218 	add.w	r2, r7, #24
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2302      	movs	r3, #2
 8000f34:	2132      	movs	r1, #50	; 0x32
 8000f36:	f001 fc1d 	bl	8002774 <HAL_I2C_Master_Transmit>

	/* Soft reset */
//	txBuf[0] = BMI088_GYR_SOFTRESET; txBuf[1] = 0xB6;
//	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);

	HAL_Delay(35);
 8000f3a:	2023      	movs	r0, #35	; 0x23
 8000f3c:	f000 ffce 	bl	8001edc <HAL_Delay>

	/* Check chip ID */
	HAL_I2C_Mem_Read(imu->I2Chandle, BMI088_ACC_I2C_ADDR, BMI088_ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chipID, 1, BMI088_I2C_TIMEOUT);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	f107 0317 	add.w	r3, r7, #23
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2301      	movs	r3, #1
 8000f54:	2200      	movs	r2, #0
 8000f56:	2132      	movs	r1, #50	; 0x32
 8000f58:	f001 ff30 	bl	8002dbc <HAL_I2C_Mem_Read>

	if (chipID != 0x0F) {
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b0f      	cmp	r3, #15
 8000f60:	d001      	beq.n	8000f66 <BMI088_Init+0x166>
			return 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e058      	b.n	8001018 <BMI088_Init+0x218>
	}

	/* Gyro range (+- 500deg/s) */
	uint8_t gyrRange = 0x01;
 8000f66:	2301      	movs	r3, #1
 8000f68:	773b      	strb	r3, [r7, #28]
	txBuf[0] = BMI088_GYR_RANGE; txBuf[1] = gyrRange;
 8000f6a:	230f      	movs	r3, #15
 8000f6c:	763b      	strb	r3, [r7, #24]
 8000f6e:	7f3b      	ldrb	r3, [r7, #28]
 8000f70:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	f107 0218 	add.w	r2, r7, #24
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2302      	movs	r3, #2
 8000f80:	21d2      	movs	r1, #210	; 0xd2
 8000f82:	f001 fbf7 	bl	8002774 <HAL_I2C_Master_Transmit>

	/* Gyro bandwidth/ODR (116Hz / 1000 Hz) */
	uint8_t gyrBandwidth = 0x02;
 8000f86:	2302      	movs	r3, #2
 8000f88:	76fb      	strb	r3, [r7, #27]
	txBuf[0] = BMI088_GYR_BANDWIDTH; txBuf[1] = gyrBandwidth;
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	763b      	strb	r3, [r7, #24]
 8000f8e:	7efb      	ldrb	r3, [r7, #27]
 8000f90:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	f107 0218 	add.w	r2, r7, #24
 8000f9a:	2364      	movs	r3, #100	; 0x64
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	21d2      	movs	r1, #210	; 0xd2
 8000fa2:	f001 fbe7 	bl	8002774 <HAL_I2C_Master_Transmit>

	/* Gyro power mode */
	txBuf[0] = BMI088_GYR_LPM1; txBuf[1] = 0x00;
 8000fa6:	2311      	movs	r3, #17
 8000fa8:	763b      	strb	r3, [r7, #24]
 8000faa:	2300      	movs	r3, #0
 8000fac:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	f107 0218 	add.w	r2, r7, #24
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2302      	movs	r3, #2
 8000fbc:	21d2      	movs	r1, #210	; 0xd2
 8000fbe:	f001 fbd9 	bl	8002774 <HAL_I2C_Master_Transmit>

	/* Enable gyro interrupt and map to pins */
	txBuf[0] = BMI088_GYR_INT_CTRL; txBuf[1] = 0x80;
 8000fc2:	2315      	movs	r3, #21
 8000fc4:	763b      	strb	r3, [r7, #24]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	f107 0218 	add.w	r2, r7, #24
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	21d2      	movs	r1, #210	; 0xd2
 8000fda:	f001 fbcb 	bl	8002774 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_GYR_INT3_INT4_IO_CONF; txBuf[1] = 0x05;
 8000fde:	2316      	movs	r3, #22
 8000fe0:	763b      	strb	r3, [r7, #24]
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	f107 0218 	add.w	r2, r7, #24
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	21d2      	movs	r1, #210	; 0xd2
 8000ff6:	f001 fbbd 	bl	8002774 <HAL_I2C_Master_Transmit>

	txBuf[0] = BMI088_GYR_INT3_INT4_IO_MAP; txBuf[1] = 0x81;
 8000ffa:	2318      	movs	r3, #24
 8000ffc:	763b      	strb	r3, [r7, #24]
 8000ffe:	2381      	movs	r3, #129	; 0x81
 8001000:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(imu->I2Chandle, BMI088_GYR_I2C_ADDR, txBuf, 2, BMI088_I2C_TIMEOUT);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	f107 0218 	add.w	r2, r7, #24
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2302      	movs	r3, #2
 8001010:	21d2      	movs	r1, #210	; 0xd2
 8001012:	f001 fbaf 	bl	8002774 <HAL_I2C_Master_Transmit>

	return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <IISMagnetometer_Init>:
#include "IIS2MDC.h"

uint8_t IISMagnetometer_Init(IISMagnetometer *mag, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *intPinBank, uint16_t intPin) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af04      	add	r7, sp, #16
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	807b      	strh	r3, [r7, #2]
	mag->I2Chandle  = I2Chandle;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	601a      	str	r2, [r3, #0]
	mag->intPinBank = intPinBank;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	605a      	str	r2, [r3, #4]
	mag->intPin     = intPin;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	887a      	ldrh	r2, [r7, #2]
 800103e:	811a      	strh	r2, [r3, #8]
	mag->x          = 0;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
	mag->y          = 0;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
	mag->z          = 0;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
	mag->tempC      = 0.0f;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	619a      	str	r2, [r3, #24]

	/* Check device ID register */
	uint8_t whoAmI;
	HAL_I2C_Mem_Read(mag->I2Chandle, IIS_I2C_ADDR, IIS_WHOAMI_REG, I2C_MEMADD_SIZE_8BIT, &whoAmI, 1, IIS_I2C_TIMEOUT);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	224f      	movs	r2, #79	; 0x4f
 8001076:	213c      	movs	r1, #60	; 0x3c
 8001078:	f001 fea0 	bl	8002dbc <HAL_I2C_Mem_Read>

	if (whoAmI != IIS_WHOAMI) {
 800107c:	7d3b      	ldrb	r3, [r7, #20]
 800107e:	2b40      	cmp	r3, #64	; 0x40
 8001080:	d001      	beq.n	8001086 <IISMagnetometer_Init+0x66>
		return 0;
 8001082:	2300      	movs	r3, #0
 8001084:	e030      	b.n	80010e8 <IISMagnetometer_Init+0xc8>

	/* Configure sensor */
	uint8_t txBuf[2];

	/* Temperature compensation = 1, Reboot = 0, Soft_Rst = 0, Low Power = 0, ODR 100 Hz = 11, MODE CONTINUOUS 00 */
	uint8_t cfgRegA = 0x8C;
 8001086:	238c      	movs	r3, #140	; 0x8c
 8001088:	75fb      	strb	r3, [r7, #23]
	txBuf[0] = IIS_CFG_REG_A; txBuf[1] = cfgRegA;
 800108a:	2360      	movs	r3, #96	; 0x60
 800108c:	743b      	strb	r3, [r7, #16]
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	f107 0210 	add.w	r2, r7, #16
 800109a:	2364      	movs	r3, #100	; 0x64
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2302      	movs	r3, #2
 80010a0:	213c      	movs	r1, #60	; 0x3c
 80010a2:	f001 fb67 	bl	8002774 <HAL_I2C_Master_Transmit>

	/* 0 0 0, Offset cancellation = 0, INT_on_DataOff = 0, Set_Freq = 0, Offset cancellation = 0, Low-pass filter = 1 */
	uint8_t cfgRegB = 0x01;
 80010a6:	2301      	movs	r3, #1
 80010a8:	75bb      	strb	r3, [r7, #22]
	txBuf[0] = IIS_CFG_REG_B; txBuf[1] = cfgRegB;
 80010aa:	2361      	movs	r3, #97	; 0x61
 80010ac:	743b      	strb	r3, [r7, #16]
 80010ae:	7dbb      	ldrb	r3, [r7, #22]
 80010b0:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	f107 0210 	add.w	r2, r7, #16
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2302      	movs	r3, #2
 80010c0:	213c      	movs	r1, #60	; 0x3c
 80010c2:	f001 fb57 	bl	8002774 <HAL_I2C_Master_Transmit>

	/* 0, INT_on_PIN = 0, I2C_DIS = 0, BDU = 0, BLE = 0, 0, Self_test = 0, DRDY_on_PIN = 1 */
	uint8_t cfgRegC = 0x01;
 80010c6:	2301      	movs	r3, #1
 80010c8:	757b      	strb	r3, [r7, #21]
	txBuf[0] = IIS_CFG_REG_C; txBuf[1] = cfgRegC;
 80010ca:	2362      	movs	r3, #98	; 0x62
 80010cc:	743b      	strb	r3, [r7, #16]
 80010ce:	7d7b      	ldrb	r3, [r7, #21]
 80010d0:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(mag->I2Chandle, IIS_I2C_ADDR, txBuf, 2, IIS_I2C_TIMEOUT);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f107 0210 	add.w	r2, r7, #16
 80010da:	2364      	movs	r3, #100	; 0x64
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2302      	movs	r3, #2
 80010e0:	213c      	movs	r1, #60	; 0x3c
 80010e2:	f001 fb47 	bl	8002774 <HAL_I2C_Master_Transmit>

	return 1;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <MPRLSBarometer_Init>:
#include "MPRLS.h"

uint8_t MPRLSBarometer_Init(MPRLSBarometer *bar, I2C_HandleTypeDef *I2Chandle, GPIO_TypeDef *rstPinBank, uint16_t rstPin, GPIO_TypeDef *intPinBank, uint16_t intPin) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
 80010fc:	807b      	strh	r3, [r7, #2]
	bar->I2Chandle  = I2Chandle;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	601a      	str	r2, [r3, #0]
	bar->rstPinBank = intPinBank;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a3a      	ldr	r2, [r7, #32]
 8001108:	605a      	str	r2, [r3, #4]
	bar->rstPin     = intPin;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800110e:	811a      	strh	r2, [r3, #8]
	bar->intPinBank = rstPinBank;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	60da      	str	r2, [r3, #12]
	bar->intPin     = rstPin;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	887a      	ldrh	r2, [r7, #2]
 800111a:	821a      	strh	r2, [r3, #16]
	bar->pressurePa = 0.0f;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	615a      	str	r2, [r3, #20]

//	MPRLSBarometer_Reset(bar);

	HAL_Delay(10);
 8001124:	200a      	movs	r0, #10
 8001126:	f000 fed9 	bl	8001edc <HAL_Delay>

	uint8_t status = MPRLSBarometer_ReadStatus(bar);
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 f807 	bl	800113e <MPRLSBarometer_ReadStatus>
 8001130:	4603      	mov	r3, r0
 8001132:	75fb      	strb	r3, [r7, #23]

	return status;
 8001134:	7dfb      	ldrb	r3, [r7, #23]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <MPRLSBarometer_ReadStatus>:
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_RESET);
	HAL_Delay(10);
	HAL_GPIO_WritePin(bar->rstPinBank, bar->rstPin, GPIO_PIN_SET);
}

uint8_t MPRLSBarometer_ReadStatus(MPRLSBarometer *bar) {
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af02      	add	r7, sp, #8
 8001144:	6078      	str	r0, [r7, #4]
	uint8_t status;
	HAL_I2C_Master_Receive(bar->I2Chandle, MPRLS_I2C_ADDR, &status, 1, MPRLS_I2C_TIMEOUT);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	f107 020f 	add.w	r2, r7, #15
 800114e:	2364      	movs	r3, #100	; 0x64
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	2130      	movs	r1, #48	; 0x30
 8001156:	f001 fc0b 	bl	8002970 <HAL_I2C_Master_Receive>

	return status;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <TMP100_Init>:
#include "TMP100.h"

void TMP100_Init(TMP100 *tmp, I2C_HandleTypeDef *I2Chandle) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af02      	add	r7, sp, #8
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
	tmp->I2Chandle = I2Chandle;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	601a      	str	r2, [r3, #0]
	tmp->temp_C = 0.0f;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	605a      	str	r2, [r3, #4]

	/* Configure sensor */
	uint8_t txBuf[] = {TMP100_REG_CONF,  0x60};
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <TMP100_Init+0x3c>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(tmp->I2Chandle, TMP100_I2C_ADDR, txBuf, 2, TMP100_I2C_TIMEOUT);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	f107 020c 	add.w	r2, r7, #12
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2302      	movs	r3, #2
 8001190:	219c      	movs	r1, #156	; 0x9c
 8001192:	f001 faef 	bl	8002774 <HAL_I2C_Master_Transmit>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	080068d0 	.word	0x080068d0

080011a4 <UBloxGPS_Init>:
#include "UBLOX.h"

void UBloxGPS_Init(UBloxGPS *gps, UART_HandleTypeDef *uart, GPIO_TypeDef *rstPinBank, uint16_t rstPin, GPIO_TypeDef *ppsPinBank, uint16_t ppsPin, GPIO_TypeDef *lnaEnablePinBank, uint16_t lnaEnablePin) {
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	807b      	strh	r3, [r7, #2]
	gps->uart             = uart;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	601a      	str	r2, [r3, #0]
	gps->rstPinBank       = rstPinBank;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	605a      	str	r2, [r3, #4]
	gps->rstPin           = rstPin;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	887a      	ldrh	r2, [r7, #2]
 80011c2:	811a      	strh	r2, [r3, #8]
	gps->ppsPinBank       = ppsPinBank;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	60da      	str	r2, [r3, #12]
	gps->ppsPin           = ppsPin;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	8bba      	ldrh	r2, [r7, #28]
 80011ce:	821a      	strh	r2, [r3, #16]
	gps->lnaEnablePinBank = lnaEnablePinBank;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a3a      	ldr	r2, [r7, #32]
 80011d4:	615a      	str	r2, [r3, #20]
	gps->lnaEnablePin     = lnaEnablePin;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011da:	831a      	strh	r2, [r3, #24]

	gps->latitude    = 0.0f;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
	gps->longitude   = 0.0f;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
	gps->altitude    = 0.0f;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
	gps->course      = 0.0f;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
	gps->groundSpeed = 0.0f;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c

	gps->uartBufIndex  = 0;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	gps->uartBufLength = 0;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <UBloxGPS_Reset>:

void UBloxGPS_Reset(UBloxGPS *gps) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_SET);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6858      	ldr	r0, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	891b      	ldrh	r3, [r3, #8]
 8001230:	2201      	movs	r2, #1
 8001232:	4619      	mov	r1, r3
 8001234:	f001 f942 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_RESET);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6858      	ldr	r0, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	891b      	ldrh	r3, [r3, #8]
 8001240:	2200      	movs	r2, #0
 8001242:	4619      	mov	r1, r3
 8001244:	f001 f93a 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001248:	2032      	movs	r0, #50	; 0x32
 800124a:	f000 fe47 	bl	8001edc <HAL_Delay>
	HAL_GPIO_WritePin(gps->rstPinBank, gps->rstPin, GPIO_PIN_SET);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6858      	ldr	r0, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	891b      	ldrh	r3, [r3, #8]
 8001256:	2201      	movs	r2, #1
 8001258:	4619      	mov	r1, r3
 800125a:	f001 f92f 	bl	80024bc <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <gps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
gps_init(gps_t* gh) {
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 800126e:	22b0      	movs	r2, #176	; 0xb0
 8001270:	2100      	movs	r1, #0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f003 fdfd 	bl	8004e72 <memset>
    return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <printDebug>:
const uint32_t SAMPLE_TIME_TMP_MS = 320;
const uint32_t SAMPLE_TIME_DBG_MS = 250;
const uint32_t SAMPLE_TIME_LED_MS = 1000;

/* UART-to-USB debug output */
void printDebug(char *buf) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) buf, strlen(buf), HAL_MAX_DELAY);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7fe ff9b 	bl	80001c8 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <printDebug+0x28>)
 800129e:	f002 ffe4 	bl	800426a <HAL_UART_Transmit>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000344 	.word	0x20000344

080012b0 <main>:

int main(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0b0      	sub	sp, #192	; 0xc0
 80012b4:	af00      	add	r7, sp, #0
   HAL_Init();
 80012b6:	f000 fd9f 	bl	8001df8 <HAL_Init>

    SystemClock_Config();
 80012ba:	f000 f8f3 	bl	80014a4 <SystemClock_Config>

    MX_GPIO_Init();
 80012be:	f000 fa63 	bl	8001788 <MX_GPIO_Init>
    MX_I2C1_Init();
 80012c2:	f000 f959 	bl	8001578 <MX_I2C1_Init>
    MX_I2C2_Init();
 80012c6:	f000 f985 	bl	80015d4 <MX_I2C2_Init>
    MX_I2C3_Init();
 80012ca:	f000 f9b1 	bl	8001630 <MX_I2C3_Init>
    MX_USART1_UART_Init();
 80012ce:	f000 f9dd 	bl	800168c <MX_USART1_UART_Init>
  	MX_USART2_UART_Init();
 80012d2:	f000 fa05 	bl	80016e0 <MX_USART2_UART_Init>
  	MX_USART3_UART_Init();
 80012d6:	f000 fa2d 	bl	8001734 <MX_USART3_UART_Init>

  	initPeripherals();
 80012da:	f000 f833 	bl	8001344 <initPeripherals>

  	gps_t hgps;
  	gps_init(&hgps);
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ffbf 	bl	8001266 <gps_init>

    printDebug("Starting main loop...\r\n");
 80012e8:	4812      	ldr	r0, [pc, #72]	; (8001334 <main+0x84>)
 80012ea:	f7ff ffcb 	bl	8001284 <printDebug>

    while (1)
    {
    	//pollSensors();
    	char gpsRxBuf[16];
    	HAL_UART_Receive(&huart1, (uint8_t *) gpsRxBuf, 16, HAL_MAX_DELAY);
 80012ee:	4639      	mov	r1, r7
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	2210      	movs	r2, #16
 80012f6:	4810      	ldr	r0, [pc, #64]	; (8001338 <main+0x88>)
 80012f8:	f003 f850 	bl	800439c <HAL_UART_Receive>

    	printDebug(gpsRxBuf);
 80012fc:	463b      	mov	r3, r7
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffc0 	bl	8001284 <printDebug>


		//printSensorData();

    	/* Heartbeat LED */
    	if (HAL_GetTick() - timerLED >= SAMPLE_TIME_LED_MS) {
 8001304:	f000 fdde 	bl	8001ec4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <main+0x8c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001314:	4293      	cmp	r3, r2
 8001316:	d3ea      	bcc.n	80012ee <main+0x3e>
    		HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 8001318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <main+0x90>)
 800131e:	f001 f8e6 	bl	80024ee <HAL_GPIO_TogglePin>

    		timerLED += SAMPLE_TIME_LED_MS;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <main+0x8c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132a:	4413      	add	r3, r2
 800132c:	4a03      	ldr	r2, [pc, #12]	; (800133c <main+0x8c>)
 800132e:	6013      	str	r3, [r2, #0]
    {
 8001330:	e7dd      	b.n	80012ee <main+0x3e>
 8001332:	bf00      	nop
 8001334:	080068d4 	.word	0x080068d4
 8001338:	2000042c 	.word	0x2000042c
 800133c:	200001f8 	.word	0x200001f8
 8001340:	40020400 	.word	0x40020400

08001344 <initPeripherals>:

		timerDbg += SAMPLE_TIME_DBG_MS;
	}
}

void initPeripherals() {
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af04      	add	r7, sp, #16
	HAL_Delay(100);
 800134a:	2064      	movs	r0, #100	; 0x64
 800134c:	f000 fdc6 	bl	8001edc <HAL_Delay>

	    printDebug("NAVC started.\r\n");
 8001350:	4842      	ldr	r0, [pc, #264]	; (800145c <initPeripherals+0x118>)
 8001352:	f7ff ff97 	bl	8001284 <printDebug>
	    HAL_GPIO_WritePin(GPIOB, LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800135c:	4840      	ldr	r0, [pc, #256]	; (8001460 <initPeripherals+0x11c>)
 800135e:	f001 f8ad 	bl	80024bc <HAL_GPIO_WritePin>
	    HAL_Delay(100);
 8001362:	2064      	movs	r0, #100	; 0x64
 8001364:	f000 fdba 	bl	8001edc <HAL_Delay>
	    printDebug("Initialising sensors...\r\n");
 8001368:	483e      	ldr	r0, [pc, #248]	; (8001464 <initPeripherals+0x120>)
 800136a:	f7ff ff8b 	bl	8001284 <printDebug>
	    HAL_Delay(100);
 800136e:	2064      	movs	r0, #100	; 0x64
 8001370:	f000 fdb4 	bl	8001edc <HAL_Delay>

	    /* Initialise pressure sensor */
	    uint8_t statBar = (MPRLSBarometer_Init(&bar, &hi2c1, BARNRST_GPIO_Port, BARNRST_Pin, INTBAR_GPIO_Port, INTBAR_Pin) == MPRLS_STATUS_POWERED);
 8001374:	2301      	movs	r3, #1
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	4b39      	ldr	r3, [pc, #228]	; (8001460 <initPeripherals+0x11c>)
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	4a3a      	ldr	r2, [pc, #232]	; (8001468 <initPeripherals+0x124>)
 8001380:	493a      	ldr	r1, [pc, #232]	; (800146c <initPeripherals+0x128>)
 8001382:	483b      	ldr	r0, [pc, #236]	; (8001470 <initPeripherals+0x12c>)
 8001384:	f7ff feb4 	bl	80010f0 <MPRLSBarometer_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b40      	cmp	r3, #64	; 0x40
 800138c:	bf0c      	ite	eq
 800138e:	2301      	moveq	r3, #1
 8001390:	2300      	movne	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	71fb      	strb	r3, [r7, #7]
	    if (statBar == 1) {
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <initPeripherals+0x5e>
	  	  printDebug("Barometer initialised.\r\n");
 800139c:	4835      	ldr	r0, [pc, #212]	; (8001474 <initPeripherals+0x130>)
 800139e:	f7ff ff71 	bl	8001284 <printDebug>
	    }

	    /* Initialise magnetometer */
	    uint8_t statMag = IISMagnetometer_Init(&mag, &hi2c1, GPIOA, INTMAG_Pin);
 80013a2:	2340      	movs	r3, #64	; 0x40
 80013a4:	4a30      	ldr	r2, [pc, #192]	; (8001468 <initPeripherals+0x124>)
 80013a6:	4931      	ldr	r1, [pc, #196]	; (800146c <initPeripherals+0x128>)
 80013a8:	4833      	ldr	r0, [pc, #204]	; (8001478 <initPeripherals+0x134>)
 80013aa:	f7ff fe39 	bl	8001020 <IISMagnetometer_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	71bb      	strb	r3, [r7, #6]
	    if (statMag == 1) {
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <initPeripherals+0x7a>
	  	  printDebug("Magnetometer initialised.\r\n");
 80013b8:	4830      	ldr	r0, [pc, #192]	; (800147c <initPeripherals+0x138>)
 80013ba:	f7ff ff63 	bl	8001284 <printDebug>
	    }

	    /* Initialise IMU */
	    uint8_t statIMU = BMI088_Init(&imu, &hi2c1, GPIOA, INTACC_Pin, GPIOA, INTGYR_Pin);
 80013be:	2320      	movs	r3, #32
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	4b29      	ldr	r3, [pc, #164]	; (8001468 <initPeripherals+0x124>)
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2310      	movs	r3, #16
 80013c8:	4a27      	ldr	r2, [pc, #156]	; (8001468 <initPeripherals+0x124>)
 80013ca:	4928      	ldr	r1, [pc, #160]	; (800146c <initPeripherals+0x128>)
 80013cc:	482c      	ldr	r0, [pc, #176]	; (8001480 <initPeripherals+0x13c>)
 80013ce:	f7ff fd17 	bl	8000e00 <BMI088_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	717b      	strb	r3, [r7, #5]
	    if (statIMU == 1) {
 80013d6:	797b      	ldrb	r3, [r7, #5]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d102      	bne.n	80013e2 <initPeripherals+0x9e>
	  	  printDebug("IMU initialised.\r\n");
 80013dc:	4829      	ldr	r0, [pc, #164]	; (8001484 <initPeripherals+0x140>)
 80013de:	f7ff ff51 	bl	8001284 <printDebug>
	    }

	    /* Initialise temperature sensor */
	    TMP100_Init(&tmp, &hi2c1);
 80013e2:	4922      	ldr	r1, [pc, #136]	; (800146c <initPeripherals+0x128>)
 80013e4:	4828      	ldr	r0, [pc, #160]	; (8001488 <initPeripherals+0x144>)
 80013e6:	f7ff febd 	bl	8001164 <TMP100_Init>
	    printDebug("Temperature sensor initialised.\r\n");
 80013ea:	4828      	ldr	r0, [pc, #160]	; (800148c <initPeripherals+0x148>)
 80013ec:	f7ff ff4a 	bl	8001284 <printDebug>

	    /* Initialise GPS receiver */
	    UBloxGPS_Init(&gps, &huart1, GPIOC, GPSNRST_Pin, GPIOC, GPSPPS_Pin, GPIOC, GPSLNAEN_Pin);
 80013f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f4:	9303      	str	r3, [sp, #12]
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <initPeripherals+0x14c>)
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	4b23      	ldr	r3, [pc, #140]	; (8001490 <initPeripherals+0x14c>)
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001408:	4a21      	ldr	r2, [pc, #132]	; (8001490 <initPeripherals+0x14c>)
 800140a:	4922      	ldr	r1, [pc, #136]	; (8001494 <initPeripherals+0x150>)
 800140c:	4822      	ldr	r0, [pc, #136]	; (8001498 <initPeripherals+0x154>)
 800140e:	f7ff fec9 	bl	80011a4 <UBloxGPS_Init>
	    UBloxGPS_Reset(&gps);
 8001412:	4821      	ldr	r0, [pc, #132]	; (8001498 <initPeripherals+0x154>)
 8001414:	f7ff ff04 	bl	8001220 <UBloxGPS_Reset>
	    printDebug("GPS receiver initialised.\r\n");
 8001418:	4820      	ldr	r0, [pc, #128]	; (800149c <initPeripherals+0x158>)
 800141a:	f7ff ff33 	bl	8001284 <printDebug>

	    uint8_t status = statBar + statMag + statIMU;
 800141e:	79fa      	ldrb	r2, [r7, #7]
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	4413      	add	r3, r2
 8001424:	b2da      	uxtb	r2, r3
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	4413      	add	r3, r2
 800142a:	713b      	strb	r3, [r7, #4]
	    if (status < 3) {
 800142c:	793b      	ldrb	r3, [r7, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d809      	bhi.n	8001446 <initPeripherals+0x102>
	    	printDebug("Error: at least one sensor could not be initialised!\r\n");
 8001432:	481b      	ldr	r0, [pc, #108]	; (80014a0 <initPeripherals+0x15c>)
 8001434:	f7ff ff26 	bl	8001284 <printDebug>
	    	HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <initPeripherals+0x11c>)
 8001440:	f001 f83c 	bl	80024bc <HAL_GPIO_WritePin>
	    } else {
	    	HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_RESET);
	    }
}
 8001444:	e005      	b.n	8001452 <initPeripherals+0x10e>
	    	HAL_GPIO_WritePin(GPIOB, LEDB_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144c:	4804      	ldr	r0, [pc, #16]	; (8001460 <initPeripherals+0x11c>)
 800144e:	f001 f835 	bl	80024bc <HAL_GPIO_WritePin>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	08006938 	.word	0x08006938
 8001460:	40020400 	.word	0x40020400
 8001464:	08006948 	.word	0x08006948
 8001468:	40020000 	.word	0x40020000
 800146c:	20000384 	.word	0x20000384
 8001470:	200004ac 	.word	0x200004ac
 8001474:	08006964 	.word	0x08006964
 8001478:	200004c8 	.word	0x200004c8
 800147c:	08006980 	.word	0x08006980
 8001480:	20000318 	.word	0x20000318
 8001484:	0800699c 	.word	0x0800699c
 8001488:	20000208 	.word	0x20000208
 800148c:	080069b0 	.word	0x080069b0
 8001490:	40020800 	.word	0x40020800
 8001494:	2000042c 	.word	0x2000042c
 8001498:	20000210 	.word	0x20000210
 800149c:	080069d4 	.word	0x080069d4
 80014a0:	080069f0 	.word	0x080069f0

080014a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b094      	sub	sp, #80	; 0x50
 80014a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014aa:	f107 0320 	add.w	r3, r7, #32
 80014ae:	2230      	movs	r2, #48	; 0x30
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fcdd 	bl	8004e72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <SystemClock_Config+0xcc>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	4a27      	ldr	r2, [pc, #156]	; (8001570 <SystemClock_Config+0xcc>)
 80014d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d6:	6413      	str	r3, [r2, #64]	; 0x40
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <SystemClock_Config+0xcc>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <SystemClock_Config+0xd0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <SystemClock_Config+0xd0>)
 80014ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <SystemClock_Config+0xd0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	2301      	movs	r3, #1
 8001502:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150a:	2302      	movs	r3, #2
 800150c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001512:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001514:	2319      	movs	r3, #25
 8001516:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001518:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800151c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151e:	2302      	movs	r3, #2
 8001520:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001522:	2304      	movs	r3, #4
 8001524:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	4618      	mov	r0, r3
 800152c:	f002 fa46 	bl	80039bc <HAL_RCC_OscConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001536:	f000 f9d9 	bl	80018ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153a:	230f      	movs	r3, #15
 800153c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153e:	2302      	movs	r3, #2
 8001540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001546:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800154a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2105      	movs	r1, #5
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fc71 	bl	8003e40 <HAL_RCC_ClockConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001564:	f000 f9c2 	bl	80018ec <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3750      	adds	r7, #80	; 0x50
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x50>)
 800157e:	4a13      	ldr	r2, [pc, #76]	; (80015cc <MX_I2C1_Init+0x54>)
 8001580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_I2C1_Init+0x50>)
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <MX_I2C1_Init+0x58>)
 8001586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_I2C1_Init+0x50>)
 8001596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_I2C1_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_I2C1_Init+0x50>)
 80015b6:	f000 ffb5 	bl	8002524 <HAL_I2C_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c0:	f000 f994 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000384 	.word	0x20000384
 80015cc:	40005400 	.word	0x40005400
 80015d0:	000186a0 	.word	0x000186a0

080015d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C2_Init+0x50>)
 80015da:	4a13      	ldr	r2, [pc, #76]	; (8001628 <MX_I2C2_Init+0x54>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_I2C2_Init+0x50>)
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <MX_I2C2_Init+0x58>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C2_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_I2C2_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_I2C2_Init+0x50>)
 80015f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_I2C2_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_I2C2_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_I2C2_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_I2C2_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_I2C2_Init+0x50>)
 8001612:	f000 ff87 	bl	8002524 <HAL_I2C_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800161c:	f000 f966 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200003d8 	.word	0x200003d8
 8001628:	40005800 	.word	0x40005800
 800162c:	000186a0 	.word	0x000186a0

08001630 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C3_Init+0x50>)
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <MX_I2C3_Init+0x54>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_I2C3_Init+0x50>)
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_I2C3_Init+0x58>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C3_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_I2C3_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_I2C3_Init+0x50>)
 800164e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001652:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <MX_I2C3_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_I2C3_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <MX_I2C3_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_I2C3_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_I2C3_Init+0x50>)
 800166e:	f000 ff59 	bl	8002524 <HAL_I2C_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001678:	f000 f938 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200002c4 	.word	0x200002c4
 8001684:	40005c00 	.word	0x40005c00
 8001688:	000186a0 	.word	0x000186a0

0800168c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_USART1_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <MX_USART1_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9800;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <MX_USART1_UART_Init+0x4c>)
 8001698:	f242 6248 	movw	r2, #9800	; 0x2648
 800169c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_USART1_UART_Init+0x4c>)
 80016c4:	f002 fd84 	bl	80041d0 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f000 f90d 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000042c 	.word	0x2000042c
 80016dc:	40011000 	.word	0x40011000

080016e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USART2_UART_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_USART2_UART_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_USART2_UART_Init+0x4c>)
 80016ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_USART2_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_USART2_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USART2_UART_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_USART2_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USART2_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_USART2_UART_Init+0x4c>)
 8001718:	f002 fd5a 	bl	80041d0 <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001722:	f000 f8e3 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000046c 	.word	0x2000046c
 8001730:	40004400 	.word	0x40004400

08001734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800173a:	4a12      	ldr	r2, [pc, #72]	; (8001784 <MX_USART3_UART_Init+0x50>)
 800173c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_USART3_UART_Init+0x4c>)
 800176c:	f002 fd30 	bl	80041d0 <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001776:	f000 f8b9 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000344 	.word	0x20000344
 8001784:	40004800 	.word	0x40004800

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b4e      	ldr	r3, [pc, #312]	; (80018dc <MX_GPIO_Init+0x154>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a4d      	ldr	r2, [pc, #308]	; (80018dc <MX_GPIO_Init+0x154>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <MX_GPIO_Init+0x154>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <MX_GPIO_Init+0x154>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a46      	ldr	r2, [pc, #280]	; (80018dc <MX_GPIO_Init+0x154>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b44      	ldr	r3, [pc, #272]	; (80018dc <MX_GPIO_Init+0x154>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b40      	ldr	r3, [pc, #256]	; (80018dc <MX_GPIO_Init+0x154>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a3f      	ldr	r2, [pc, #252]	; (80018dc <MX_GPIO_Init+0x154>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <MX_GPIO_Init+0x154>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <MX_GPIO_Init+0x154>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a38      	ldr	r2, [pc, #224]	; (80018dc <MX_GPIO_Init+0x154>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <MX_GPIO_Init+0x154>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPSNRST_Pin|FCCTXA_Pin|FCCTXB_Pin|FCCTXC_Pin 
 800180e:	2200      	movs	r2, #0
 8001810:	f244 01f0 	movw	r1, #16624	; 0x40f0
 8001814:	4832      	ldr	r0, [pc, #200]	; (80018e0 <MX_GPIO_Init+0x158>)
 8001816:	f000 fe51 	bl	80024bc <HAL_GPIO_WritePin>
                          |FCCTXD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BARNRST_GPIO_Port, BARNRST_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	4831      	ldr	r0, [pc, #196]	; (80018e4 <MX_GPIO_Init+0x15c>)
 8001820:	f000 fe4c 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800182a:	482f      	ldr	r0, [pc, #188]	; (80018e8 <MX_GPIO_Init+0x160>)
 800182c:	f000 fe46 	bl	80024bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPSLNAEN_Pin FCCRXA_Pin FCCRXB_Pin FCCRXC_Pin 
                           FCCRXD_Pin GPSPPS_Pin */
  GPIO_InitStruct.Pin = GPSLNAEN_Pin|FCCRXA_Pin|FCCRXB_Pin|FCCRXC_Pin 
 8001830:	f243 030f 	movw	r3, #12303	; 0x300f
 8001834:	617b      	str	r3, [r7, #20]
                          |FCCRXD_Pin|GPSPPS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4826      	ldr	r0, [pc, #152]	; (80018e0 <MX_GPIO_Init+0x158>)
 8001846:	f000 fc9f 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPSNRST_Pin FCCTXA_Pin FCCTXB_Pin FCCTXC_Pin 
                           FCCTXD_Pin */
  GPIO_InitStruct.Pin = GPSNRST_Pin|FCCTXA_Pin|FCCTXB_Pin|FCCTXC_Pin 
 800184a:	f244 03f0 	movw	r3, #16624	; 0x40f0
 800184e:	617b      	str	r3, [r7, #20]
                          |FCCTXD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	481f      	ldr	r0, [pc, #124]	; (80018e0 <MX_GPIO_Init+0x158>)
 8001864:	f000 fc90 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTACC_Pin INTGYR_Pin INTMAG_Pin */
  GPIO_InitStruct.Pin = INTACC_Pin|INTGYR_Pin|INTMAG_Pin;
 8001868:	2370      	movs	r3, #112	; 0x70
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186c:	2300      	movs	r3, #0
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	481a      	ldr	r0, [pc, #104]	; (80018e4 <MX_GPIO_Init+0x15c>)
 800187c:	f000 fc84 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : BARNRST_Pin */
  GPIO_InitStruct.Pin = BARNRST_Pin;
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BARNRST_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4813      	ldr	r0, [pc, #76]	; (80018e4 <MX_GPIO_Init+0x15c>)
 8001898:	f000 fc76 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTBAR_Pin */
  GPIO_InitStruct.Pin = INTBAR_Pin;
 800189c:	2301      	movs	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTBAR_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <MX_GPIO_Init+0x160>)
 80018b0:	f000 fc6a 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin;
 80018b4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 0314 	add.w	r3, r7, #20
 80018ca:	4619      	mov	r1, r3
 80018cc:	4806      	ldr	r0, [pc, #24]	; (80018e8 <MX_GPIO_Init+0x160>)
 80018ce:	f000 fc5b 	bl	8002188 <HAL_GPIO_Init>

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	; 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020800 	.word	0x40020800
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <HAL_MspInit+0x4c>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <HAL_MspInit+0x4c>)
 800190c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_MspInit+0x4c>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_MspInit+0x4c>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_MspInit+0x4c>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_MspInit+0x4c>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a5c      	ldr	r2, [pc, #368]	; (8001adc <HAL_I2C_MspInit+0x190>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12d      	bne.n	80019ca <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
 8001972:	4b5b      	ldr	r3, [pc, #364]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a5a      	ldr	r2, [pc, #360]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800198a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001990:	2312      	movs	r3, #18
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001994:	2301      	movs	r3, #1
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800199c:	2304      	movs	r3, #4
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a4:	4619      	mov	r1, r3
 80019a6:	484f      	ldr	r0, [pc, #316]	; (8001ae4 <HAL_I2C_MspInit+0x198>)
 80019a8:	f000 fbee 	bl	8002188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	4b4b      	ldr	r3, [pc, #300]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	4a4a      	ldr	r2, [pc, #296]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 80019b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ba:	6413      	str	r3, [r2, #64]	; 0x40
 80019bc:	4b48      	ldr	r3, [pc, #288]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80019c8:	e083      	b.n	8001ad2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a46      	ldr	r2, [pc, #280]	; (8001ae8 <HAL_I2C_MspInit+0x19c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d12d      	bne.n	8001a30 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	4a40      	ldr	r2, [pc, #256]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	6313      	str	r3, [r2, #48]	; 0x30
 80019e4:	4b3e      	ldr	r3, [pc, #248]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f6:	2312      	movs	r3, #18
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a02:	2304      	movs	r3, #4
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4835      	ldr	r0, [pc, #212]	; (8001ae4 <HAL_I2C_MspInit+0x198>)
 8001a0e:	f000 fbbb 	bl	8002188 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b2f      	ldr	r3, [pc, #188]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697b      	ldr	r3, [r7, #20]
}
 8001a2e:	e050      	b.n	8001ad2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2d      	ldr	r2, [pc, #180]	; (8001aec <HAL_I2C_MspInit+0x1a0>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d14b      	bne.n	8001ad2 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a20      	ldr	r2, [pc, #128]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a78:	2312      	movs	r3, #18
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a84:	2304      	movs	r3, #4
 8001a86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4818      	ldr	r0, [pc, #96]	; (8001af0 <HAL_I2C_MspInit+0x1a4>)
 8001a90:	f000 fb7a 	bl	8002188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a9a:	2312      	movs	r3, #18
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4810      	ldr	r0, [pc, #64]	; (8001af4 <HAL_I2C_MspInit+0x1a8>)
 8001ab2:	f000 fb69 	bl	8002188 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001ac0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_I2C_MspInit+0x194>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
}
 8001ad2:	bf00      	nop
 8001ad4:	3738      	adds	r7, #56	; 0x38
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	40005800 	.word	0x40005800
 8001aec:	40005c00 	.word	0x40005c00
 8001af0:	40020800 	.word	0x40020800
 8001af4:	40020000 	.word	0x40020000

08001af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08e      	sub	sp, #56	; 0x38
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a4f      	ldr	r2, [pc, #316]	; (8001c54 <HAL_UART_MspInit+0x15c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d134      	bne.n	8001b84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
 8001b1e:	4b4e      	ldr	r3, [pc, #312]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a4d      	ldr	r2, [pc, #308]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001b24:	f043 0310 	orr.w	r3, r3, #16
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f003 0310 	and.w	r3, r3, #16
 8001b32:	623b      	str	r3, [r7, #32]
 8001b34:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a46      	ldr	r2, [pc, #280]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b52:	23c0      	movs	r3, #192	; 0xc0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b62:	2307      	movs	r3, #7
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	483b      	ldr	r0, [pc, #236]	; (8001c5c <HAL_UART_MspInit+0x164>)
 8001b6e:	f000 fb0b 	bl	8002188 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2025      	movs	r0, #37	; 0x25
 8001b78:	f000 faad 	bl	80020d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b7c:	2025      	movs	r0, #37	; 0x25
 8001b7e:	f000 fac6 	bl	800210e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b82:	e063      	b.n	8001c4c <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a35      	ldr	r2, [pc, #212]	; (8001c60 <HAL_UART_MspInit+0x168>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12c      	bne.n	8001be8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	4b31      	ldr	r3, [pc, #196]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a30      	ldr	r2, [pc, #192]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a29      	ldr	r2, [pc, #164]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bc6:	230c      	movs	r3, #12
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	4619      	mov	r1, r3
 8001be0:	4820      	ldr	r0, [pc, #128]	; (8001c64 <HAL_UART_MspInit+0x16c>)
 8001be2:	f000 fad1 	bl	8002188 <HAL_GPIO_Init>
}
 8001be6:	e031      	b.n	8001c4c <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <HAL_UART_MspInit+0x170>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12c      	bne.n	8001c4c <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_UART_MspInit+0x160>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c3c:	2307      	movs	r3, #7
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	4619      	mov	r1, r3
 8001c46:	4809      	ldr	r0, [pc, #36]	; (8001c6c <HAL_UART_MspInit+0x174>)
 8001c48:	f000 fa9e 	bl	8002188 <HAL_GPIO_Init>
}
 8001c4c:	bf00      	nop
 8001c4e:	3738      	adds	r7, #56	; 0x38
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40011000 	.word	0x40011000
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40004400 	.word	0x40004400
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40004800 	.word	0x40004800
 8001c6c:	40020800 	.word	0x40020800

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <HardFault_Handler+0x4>

08001c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <MemManage_Handler+0x4>

08001c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <BusFault_Handler+0x4>

08001c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <UsageFault_Handler+0x4>

08001c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc4:	f000 f8ea 	bl	8001e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <USART1_IRQHandler+0x10>)
 8001cd2:	f002 fc09 	bl	80044e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000042c 	.word	0x2000042c

08001ce0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <_sbrk+0x50>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x16>
		heap_end = &end;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <_sbrk+0x50>)
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <_sbrk+0x54>)
 8001cf4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <_sbrk+0x50>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <_sbrk+0x50>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	466a      	mov	r2, sp
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d907      	bls.n	8001d1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d0a:	f003 f87d 	bl	8004e08 <__errno>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	230c      	movs	r3, #12
 8001d12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
 8001d18:	e006      	b.n	8001d28 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <_sbrk+0x50>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a03      	ldr	r2, [pc, #12]	; (8001d30 <_sbrk+0x50>)
 8001d24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	200001fc 	.word	0x200001fc
 8001d34:	200004f0 	.word	0x200004f0

08001d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <SystemInit+0x60>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <SystemInit+0x60>)
 8001d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <SystemInit+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <SystemInit+0x64>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <SystemInit+0x64>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <SystemInit+0x64>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <SystemInit+0x64>)
 8001d64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <SystemInit+0x64>)
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <SystemInit+0x68>)
 8001d72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <SystemInit+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <SystemInit+0x64>)
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <SystemInit+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <SystemInit+0x60>)
 8001d88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d8c:	609a      	str	r2, [r3, #8]
#endif
}
 8001d8e:	bf00      	nop
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	24003010 	.word	0x24003010

08001da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ddc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001da8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001daa:	e003      	b.n	8001db4 <LoopCopyDataInit>

08001dac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001db0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001db2:	3104      	adds	r1, #4

08001db4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001db8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dbc:	d3f6      	bcc.n	8001dac <CopyDataInit>
  ldr  r2, =_sbss
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001dc0:	e002      	b.n	8001dc8 <LoopFillZerobss>

08001dc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dc4:	f842 3b04 	str.w	r3, [r2], #4

08001dc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dcc:	d3f9      	bcc.n	8001dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dce:	f7ff ffb3 	bl	8001d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd2:	f003 f81f 	bl	8004e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd6:	f7ff fa6b 	bl	80012b0 <main>
  bx  lr    
 8001dda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ddc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001de0:	08006c80 	.word	0x08006c80
  ldr  r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001de8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001dec:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001df0:	200004ec 	.word	0x200004ec

08001df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC_IRQHandler>
	...

08001df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0d      	ldr	r2, [pc, #52]	; (8001e38 <HAL_Init+0x40>)
 8001e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_Init+0x40>)
 8001e0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a07      	ldr	r2, [pc, #28]	; (8001e38 <HAL_Init+0x40>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e20:	2003      	movs	r0, #3
 8001e22:	f000 f94d 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f000 f808 	bl	8001e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e2c:	f7ff fd66 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_InitTick+0x54>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_InitTick+0x58>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f965 	bl	800212a <HAL_SYSTICK_Config>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00e      	b.n	8001e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b0f      	cmp	r3, #15
 8001e6e:	d80a      	bhi.n	8001e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e70:	2200      	movs	r2, #0
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f000 f92d 	bl	80020d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e7c:	4a06      	ldr	r2, [pc, #24]	; (8001e98 <HAL_InitTick+0x5c>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	e000      	b.n	8001e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000008 	.word	0x20000008
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_IncTick+0x20>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_IncTick+0x24>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_IncTick+0x24>)
 8001eae:	6013      	str	r3, [r2, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	20000008 	.word	0x20000008
 8001ec0:	200004e4 	.word	0x200004e4

08001ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_GetTick+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200004e4 	.word	0x200004e4

08001edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee4:	f7ff ffee 	bl	8001ec4 <HAL_GetTick>
 8001ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d005      	beq.n	8001f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_Delay+0x40>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f02:	bf00      	nop
 8001f04:	f7ff ffde 	bl	8001ec4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d8f7      	bhi.n	8001f04 <HAL_Delay+0x28>
  {
  }
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000008 	.word	0x20000008

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	; (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208c:	d301      	bcc.n	8002092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <SysTick_Config+0x40>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209a:	210f      	movs	r1, #15
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f7ff ff8e 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SysTick_Config+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <SysTick_Config+0x40>)
 80020ac:	2207      	movs	r2, #7
 80020ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000e010 	.word	0xe000e010

080020c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff29 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e8:	f7ff ff3e 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	f7ff ff8e 	bl	8002014 <NVIC_EncodePriority>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff5d 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff31 	bl	8001f84 <__NVIC_EnableIRQ>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffa2 	bl	800207c <SysTick_Config>
 8002138:	4603      	mov	r3, r0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d004      	beq.n	8002160 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2280      	movs	r2, #128	; 0x80
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e00c      	b.n	800217a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2205      	movs	r2, #5
 8002164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e16b      	b.n	800247c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 815a 	bne.w	8002476 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x4a>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b12      	cmp	r3, #18
 80021d0:	d123      	bne.n	800221a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	69b9      	ldr	r1, [r7, #24]
 8002216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0203 	and.w	r2, r3, #3
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d00b      	beq.n	800226e <HAL_GPIO_Init+0xe6>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d007      	beq.n	800226e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002262:	2b11      	cmp	r3, #17
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b12      	cmp	r3, #18
 800226c:	d130      	bne.n	80022d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 0201 	and.w	r2, r3, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80b4 	beq.w	8002476 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <HAL_GPIO_Init+0x308>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a5e      	ldr	r2, [pc, #376]	; (8002490 <HAL_GPIO_Init+0x308>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b5c      	ldr	r3, [pc, #368]	; (8002490 <HAL_GPIO_Init+0x308>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232a:	4a5a      	ldr	r2, [pc, #360]	; (8002494 <HAL_GPIO_Init+0x30c>)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a51      	ldr	r2, [pc, #324]	; (8002498 <HAL_GPIO_Init+0x310>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d02b      	beq.n	80023ae <HAL_GPIO_Init+0x226>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a50      	ldr	r2, [pc, #320]	; (800249c <HAL_GPIO_Init+0x314>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d025      	beq.n	80023aa <HAL_GPIO_Init+0x222>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4f      	ldr	r2, [pc, #316]	; (80024a0 <HAL_GPIO_Init+0x318>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01f      	beq.n	80023a6 <HAL_GPIO_Init+0x21e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a4e      	ldr	r2, [pc, #312]	; (80024a4 <HAL_GPIO_Init+0x31c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d019      	beq.n	80023a2 <HAL_GPIO_Init+0x21a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a4d      	ldr	r2, [pc, #308]	; (80024a8 <HAL_GPIO_Init+0x320>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_GPIO_Init+0x216>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4c      	ldr	r2, [pc, #304]	; (80024ac <HAL_GPIO_Init+0x324>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00d      	beq.n	800239a <HAL_GPIO_Init+0x212>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4b      	ldr	r2, [pc, #300]	; (80024b0 <HAL_GPIO_Init+0x328>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <HAL_GPIO_Init+0x20e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4a      	ldr	r2, [pc, #296]	; (80024b4 <HAL_GPIO_Init+0x32c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_GPIO_Init+0x20a>
 800238e:	2307      	movs	r3, #7
 8002390:	e00e      	b.n	80023b0 <HAL_GPIO_Init+0x228>
 8002392:	2308      	movs	r3, #8
 8002394:	e00c      	b.n	80023b0 <HAL_GPIO_Init+0x228>
 8002396:	2306      	movs	r3, #6
 8002398:	e00a      	b.n	80023b0 <HAL_GPIO_Init+0x228>
 800239a:	2305      	movs	r3, #5
 800239c:	e008      	b.n	80023b0 <HAL_GPIO_Init+0x228>
 800239e:	2304      	movs	r3, #4
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x228>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x228>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x228>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x228>
 80023ae:	2300      	movs	r3, #0
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	f002 0203 	and.w	r2, r2, #3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4093      	lsls	r3, r2
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c0:	4934      	ldr	r1, [pc, #208]	; (8002494 <HAL_GPIO_Init+0x30c>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023ce:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <HAL_GPIO_Init+0x330>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f2:	4a31      	ldr	r2, [pc, #196]	; (80024b8 <HAL_GPIO_Init+0x330>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023f8:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_GPIO_Init+0x330>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800241c:	4a26      	ldr	r2, [pc, #152]	; (80024b8 <HAL_GPIO_Init+0x330>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_GPIO_Init+0x330>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <HAL_GPIO_Init+0x330>)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800244c:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x330>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <HAL_GPIO_Init+0x330>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3301      	adds	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	f67f ae90 	bls.w	80021a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002484:	bf00      	nop
 8002486:	3724      	adds	r7, #36	; 0x24
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40023800 	.word	0x40023800
 8002494:	40013800 	.word	0x40013800
 8002498:	40020000 	.word	0x40020000
 800249c:	40020400 	.word	0x40020400
 80024a0:	40020800 	.word	0x40020800
 80024a4:	40020c00 	.word	0x40020c00
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40021400 	.word	0x40021400
 80024b0:	40021800 	.word	0x40021800
 80024b4:	40021c00 	.word	0x40021c00
 80024b8:	40013c00 	.word	0x40013c00

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d8:	e003      	b.n	80024e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	887b      	ldrh	r3, [r7, #2]
 8002500:	401a      	ands	r2, r3
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	429a      	cmp	r2, r3
 8002506:	d104      	bne.n	8002512 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002508:	887b      	ldrh	r3, [r7, #2]
 800250a:	041a      	lsls	r2, r3, #16
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002510:	e002      	b.n	8002518 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002512:	887a      	ldrh	r2, [r7, #2]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	619a      	str	r2, [r3, #24]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e10f      	b.n	8002756 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff f9fe 	bl	800194c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2224      	movs	r2, #36	; 0x24
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002568:	f001 fe0a 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 800256c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4a7b      	ldr	r2, [pc, #492]	; (8002760 <HAL_I2C_Init+0x23c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d807      	bhi.n	8002588 <HAL_I2C_Init+0x64>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4a7a      	ldr	r2, [pc, #488]	; (8002764 <HAL_I2C_Init+0x240>)
 800257c:	4293      	cmp	r3, r2
 800257e:	bf94      	ite	ls
 8002580:	2301      	movls	r3, #1
 8002582:	2300      	movhi	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e006      	b.n	8002596 <HAL_I2C_Init+0x72>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a77      	ldr	r2, [pc, #476]	; (8002768 <HAL_I2C_Init+0x244>)
 800258c:	4293      	cmp	r3, r2
 800258e:	bf94      	ite	ls
 8002590:	2301      	movls	r3, #1
 8002592:	2300      	movhi	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0db      	b.n	8002756 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a72      	ldr	r2, [pc, #456]	; (800276c <HAL_I2C_Init+0x248>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9b      	lsrs	r3, r3, #18
 80025a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	4a64      	ldr	r2, [pc, #400]	; (8002760 <HAL_I2C_Init+0x23c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d802      	bhi.n	80025d8 <HAL_I2C_Init+0xb4>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	3301      	adds	r3, #1
 80025d6:	e009      	b.n	80025ec <HAL_I2C_Init+0xc8>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	4a63      	ldr	r2, [pc, #396]	; (8002770 <HAL_I2C_Init+0x24c>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	3301      	adds	r3, #1
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4956      	ldr	r1, [pc, #344]	; (8002760 <HAL_I2C_Init+0x23c>)
 8002608:	428b      	cmp	r3, r1
 800260a:	d80d      	bhi.n	8002628 <HAL_I2C_Init+0x104>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e59      	subs	r1, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fbb1 f3f3 	udiv	r3, r1, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002620:	2b04      	cmp	r3, #4
 8002622:	bf38      	it	cc
 8002624:	2304      	movcc	r3, #4
 8002626:	e04f      	b.n	80026c8 <HAL_I2C_Init+0x1a4>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d111      	bne.n	8002654 <HAL_I2C_Init+0x130>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1e58      	subs	r0, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	440b      	add	r3, r1
 800263e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002642:	3301      	adds	r3, #1
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf0c      	ite	eq
 800264c:	2301      	moveq	r3, #1
 800264e:	2300      	movne	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	e012      	b.n	800267a <HAL_I2C_Init+0x156>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e58      	subs	r0, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6859      	ldr	r1, [r3, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	0099      	lsls	r1, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	fbb0 f3f3 	udiv	r3, r0, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_Init+0x15e>
 800267e:	2301      	movs	r3, #1
 8002680:	e022      	b.n	80026c8 <HAL_I2C_Init+0x1a4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10e      	bne.n	80026a8 <HAL_I2C_Init+0x184>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1e58      	subs	r0, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6859      	ldr	r1, [r3, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	440b      	add	r3, r1
 8002698:	fbb0 f3f3 	udiv	r3, r0, r3
 800269c:	3301      	adds	r3, #1
 800269e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a6:	e00f      	b.n	80026c8 <HAL_I2C_Init+0x1a4>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1e58      	subs	r0, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	0099      	lsls	r1, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	6809      	ldr	r1, [r1, #0]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6911      	ldr	r1, [r2, #16]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68d2      	ldr	r2, [r2, #12]
 8002702:	4311      	orrs	r1, r2
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	430b      	orrs	r3, r1
 800270a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	000186a0 	.word	0x000186a0
 8002764:	001e847f 	.word	0x001e847f
 8002768:	003d08ff 	.word	0x003d08ff
 800276c:	431bde83 	.word	0x431bde83
 8002770:	10624dd3 	.word	0x10624dd3

08002774 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	461a      	mov	r2, r3
 8002780:	460b      	mov	r3, r1
 8002782:	817b      	strh	r3, [r7, #10]
 8002784:	4613      	mov	r3, r2
 8002786:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002788:	f7ff fb9c 	bl	8001ec4 <HAL_GetTick>
 800278c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b20      	cmp	r3, #32
 8002798:	f040 80e0 	bne.w	800295c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2319      	movs	r3, #25
 80027a2:	2201      	movs	r2, #1
 80027a4:	4970      	ldr	r1, [pc, #448]	; (8002968 <HAL_I2C_Master_Transmit+0x1f4>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 ff2a 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	e0d3      	b.n	800295e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_I2C_Master_Transmit+0x50>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e0cc      	b.n	800295e <HAL_I2C_Master_Transmit+0x1ea>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d007      	beq.n	80027ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2221      	movs	r2, #33	; 0x21
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2210      	movs	r2, #16
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	893a      	ldrh	r2, [r7, #8]
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a50      	ldr	r2, [pc, #320]	; (800296c <HAL_I2C_Master_Transmit+0x1f8>)
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800282c:	8979      	ldrh	r1, [r7, #10]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	6a3a      	ldr	r2, [r7, #32]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fce8 	bl	8003208 <I2C_MasterRequestWrite>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e08d      	b.n	800295e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002858:	e066      	b.n	8002928 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	6a39      	ldr	r1, [r7, #32]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 ffa4 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b04      	cmp	r3, #4
 8002870:	d107      	bne.n	8002882 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002880:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e06b      	b.n	800295e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d11b      	bne.n	80028fc <HAL_I2C_Master_Transmit+0x188>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d017      	beq.n	80028fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	6a39      	ldr	r1, [r7, #32]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 ff94 	bl	800382e <I2C_WaitOnBTFFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	2b04      	cmp	r3, #4
 8002912:	d107      	bne.n	8002924 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e01a      	b.n	800295e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	d194      	bne.n	800285a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	00100002 	.word	0x00100002
 800296c:	ffff0000 	.word	0xffff0000

08002970 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	; 0x30
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	461a      	mov	r2, r3
 800297c:	460b      	mov	r3, r1
 800297e:	817b      	strh	r3, [r7, #10]
 8002980:	4613      	mov	r3, r2
 8002982:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff fa9e 	bl	8001ec4 <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b20      	cmp	r3, #32
 8002994:	f040 820b 	bne.w	8002dae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2319      	movs	r3, #25
 800299e:	2201      	movs	r2, #1
 80029a0:	497c      	ldr	r1, [pc, #496]	; (8002b94 <HAL_I2C_Master_Receive+0x224>)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fe2c 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
 80029b0:	e1fe      	b.n	8002db0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_I2C_Master_Receive+0x50>
 80029bc:	2302      	movs	r3, #2
 80029be:	e1f7      	b.n	8002db0 <HAL_I2C_Master_Receive+0x440>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d007      	beq.n	80029e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2222      	movs	r2, #34	; 0x22
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2210      	movs	r2, #16
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	893a      	ldrh	r2, [r7, #8]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a5c      	ldr	r2, [pc, #368]	; (8002b98 <HAL_I2C_Master_Receive+0x228>)
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fc60 	bl	80032f4 <I2C_MasterRequestRead>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e1b8      	b.n	8002db0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d113      	bne.n	8002a6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a46:	2300      	movs	r3, #0
 8002a48:	623b      	str	r3, [r7, #32]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	623b      	str	r3, [r7, #32]
 8002a5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e18c      	b.n	8002d88 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d11b      	bne.n	8002aae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e16c      	b.n	8002d88 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d11b      	bne.n	8002aee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	61bb      	str	r3, [r7, #24]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	e14c      	b.n	8002d88 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002afc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b14:	e138      	b.n	8002d88 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	f200 80f1 	bhi.w	8002d02 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d123      	bne.n	8002b70 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 febf 	bl	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e139      	b.n	8002db0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b6e:	e10b      	b.n	8002d88 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d14e      	bne.n	8002c16 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4906      	ldr	r1, [pc, #24]	; (8002b9c <HAL_I2C_Master_Receive+0x22c>)
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fd3c 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e10e      	b.n	8002db0 <HAL_I2C_Master_Receive+0x440>
 8002b92:	bf00      	nop
 8002b94:	00100002 	.word	0x00100002
 8002b98:	ffff0000 	.word	0xffff0000
 8002b9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c14:	e0b8      	b.n	8002d88 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4966      	ldr	r1, [pc, #408]	; (8002db8 <HAL_I2C_Master_Receive+0x448>)
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 fced 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0bf      	b.n	8002db0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	2200      	movs	r2, #0
 8002c7a:	494f      	ldr	r1, [pc, #316]	; (8002db8 <HAL_I2C_Master_Receive+0x448>)
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fcbf 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e091      	b.n	8002db0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d00:	e042      	b.n	8002d88 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fdd2 	bl	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e04c      	b.n	8002db0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d118      	bne.n	8002d88 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f aec2 	bne.w	8002b16 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
  }
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3728      	adds	r7, #40	; 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	00010004 	.word	0x00010004

08002dbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	; 0x30
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	817b      	strh	r3, [r7, #10]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	813b      	strh	r3, [r7, #8]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dd6:	f7ff f875 	bl	8001ec4 <HAL_GetTick>
 8002dda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	f040 8208 	bne.w	80031fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2319      	movs	r3, #25
 8002df0:	2201      	movs	r2, #1
 8002df2:	497b      	ldr	r1, [pc, #492]	; (8002fe0 <HAL_I2C_Mem_Read+0x224>)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fc03 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
 8002e02:	e1fb      	b.n	80031fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_I2C_Mem_Read+0x56>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e1f4      	b.n	80031fc <HAL_I2C_Mem_Read+0x440>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d007      	beq.n	8002e38 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2222      	movs	r2, #34	; 0x22
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a5b      	ldr	r2, [pc, #364]	; (8002fe4 <HAL_I2C_Mem_Read+0x228>)
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e7a:	88f8      	ldrh	r0, [r7, #6]
 8002e7c:	893a      	ldrh	r2, [r7, #8]
 8002e7e:	8979      	ldrh	r1, [r7, #10]
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4603      	mov	r3, r0
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fae8 	bl	8003460 <I2C_RequestMemoryRead>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e1b0      	b.n	80031fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d113      	bne.n	8002eca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	623b      	str	r3, [r7, #32]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	623b      	str	r3, [r7, #32]
 8002eb6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e184      	b.n	80031d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d11b      	bne.n	8002f0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e164      	b.n	80031d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d11b      	bne.n	8002f4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	e144      	b.n	80031d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002f60:	e138      	b.n	80031d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	f200 80f1 	bhi.w	800314e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d123      	bne.n	8002fbc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 fc99 	bl	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e139      	b.n	80031fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fba:	e10b      	b.n	80031d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d14e      	bne.n	8003062 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fca:	2200      	movs	r2, #0
 8002fcc:	4906      	ldr	r1, [pc, #24]	; (8002fe8 <HAL_I2C_Mem_Read+0x22c>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fb16 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e10e      	b.n	80031fc <HAL_I2C_Mem_Read+0x440>
 8002fde:	bf00      	nop
 8002fe0:	00100002 	.word	0x00100002
 8002fe4:	ffff0000 	.word	0xffff0000
 8002fe8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003060:	e0b8      	b.n	80031d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	2200      	movs	r2, #0
 800306a:	4966      	ldr	r1, [pc, #408]	; (8003204 <HAL_I2C_Mem_Read+0x448>)
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fac7 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0bf      	b.n	80031fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	2200      	movs	r2, #0
 80030c6:	494f      	ldr	r1, [pc, #316]	; (8003204 <HAL_I2C_Mem_Read+0x448>)
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fa99 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e091      	b.n	80031fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800314c:	e042      	b.n	80031d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fbac 	bl	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e04c      	b.n	80031fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d118      	bne.n	80031d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f47f aec2 	bne.w	8002f62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3728      	adds	r7, #40	; 0x28
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	00010004 	.word	0x00010004

08003208 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af02      	add	r7, sp, #8
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	460b      	mov	r3, r1
 8003216:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d006      	beq.n	8003232 <I2C_MasterRequestWrite+0x2a>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d003      	beq.n	8003232 <I2C_MasterRequestWrite+0x2a>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003230:	d108      	bne.n	8003244 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e00b      	b.n	800325c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	2b12      	cmp	r3, #18
 800324a:	d107      	bne.n	800325c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800325a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f9c9 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e035      	b.n	80032e4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003280:	d108      	bne.n	8003294 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003282:	897b      	ldrh	r3, [r7, #10]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003290:	611a      	str	r2, [r3, #16]
 8003292:	e01b      	b.n	80032cc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003294:	897b      	ldrh	r3, [r7, #10]
 8003296:	11db      	asrs	r3, r3, #7
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f003 0306 	and.w	r3, r3, #6
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f063 030f 	orn	r3, r3, #15
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	490e      	ldr	r1, [pc, #56]	; (80032ec <I2C_MasterRequestWrite+0xe4>)
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f9fb 	bl	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e010      	b.n	80032e4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032c2:	897b      	ldrh	r3, [r7, #10]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4907      	ldr	r1, [pc, #28]	; (80032f0 <I2C_MasterRequestWrite+0xe8>)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f9eb 	bl	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	00010008 	.word	0x00010008
 80032f0:	00010002 	.word	0x00010002

080032f4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	460b      	mov	r3, r1
 8003302:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003318:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b08      	cmp	r3, #8
 800331e:	d006      	beq.n	800332e <I2C_MasterRequestRead+0x3a>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d003      	beq.n	800332e <I2C_MasterRequestRead+0x3a>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800332c:	d108      	bne.n	8003340 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e00b      	b.n	8003358 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	2b11      	cmp	r3, #17
 8003346:	d107      	bne.n	8003358 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003356:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f94b 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e06d      	b.n	8003450 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800337c:	d108      	bne.n	8003390 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800337e:	897b      	ldrh	r3, [r7, #10]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	b2da      	uxtb	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	611a      	str	r2, [r3, #16]
 800338e:	e053      	b.n	8003438 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003390:	897b      	ldrh	r3, [r7, #10]
 8003392:	11db      	asrs	r3, r3, #7
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f003 0306 	and.w	r3, r3, #6
 800339a:	b2db      	uxtb	r3, r3
 800339c:	f063 030f 	orn	r3, r3, #15
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	492a      	ldr	r1, [pc, #168]	; (8003458 <I2C_MasterRequestRead+0x164>)
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f97d 	bl	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e048      	b.n	8003450 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033be:	897b      	ldrh	r3, [r7, #10]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4923      	ldr	r1, [pc, #140]	; (800345c <I2C_MasterRequestRead+0x168>)
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f96d 	bl	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e038      	b.n	8003450 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003402:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f8f5 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e017      	b.n	8003450 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003420:	897b      	ldrh	r3, [r7, #10]
 8003422:	11db      	asrs	r3, r3, #7
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f003 0306 	and.w	r3, r3, #6
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f063 030e 	orn	r3, r3, #14
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4907      	ldr	r1, [pc, #28]	; (800345c <I2C_MasterRequestRead+0x168>)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f935 	bl	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	00010008 	.word	0x00010008
 800345c:	00010002 	.word	0x00010002

08003460 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003488:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003498:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8aa 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e09e      	b.n	80035f4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034b6:	897b      	ldrh	r3, [r7, #10]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	494c      	ldr	r1, [pc, #304]	; (80035fc <I2C_RequestMemoryRead+0x19c>)
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f8ee 	bl	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e08b      	b.n	80035f4 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f4:	6a39      	ldr	r1, [r7, #32]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f958 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	2b04      	cmp	r3, #4
 8003508:	d107      	bne.n	800351a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003518:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e06a      	b.n	80035f4 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003524:	893b      	ldrh	r3, [r7, #8]
 8003526:	b2da      	uxtb	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	611a      	str	r2, [r3, #16]
 800352e:	e021      	b.n	8003574 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003530:	893b      	ldrh	r3, [r7, #8]
 8003532:	0a1b      	lsrs	r3, r3, #8
 8003534:	b29b      	uxth	r3, r3
 8003536:	b2da      	uxtb	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	6a39      	ldr	r1, [r7, #32]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f932 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b04      	cmp	r3, #4
 8003554:	d107      	bne.n	8003566 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003564:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e044      	b.n	80035f4 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800356a:	893b      	ldrh	r3, [r7, #8]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003576:	6a39      	ldr	r1, [r7, #32]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f917 	bl	80037ac <I2C_WaitOnTXEFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	2b04      	cmp	r3, #4
 800358a:	d107      	bne.n	800359c <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e029      	b.n	80035f4 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f81f 	bl	8003600 <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e013      	b.n	80035f4 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035cc:	897b      	ldrh	r3, [r7, #10]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	6a3a      	ldr	r2, [r7, #32]
 80035e0:	4906      	ldr	r1, [pc, #24]	; (80035fc <I2C_RequestMemoryRead+0x19c>)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f863 	bl	80036ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	00010002 	.word	0x00010002

08003600 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	4613      	mov	r3, r2
 800360e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003610:	e025      	b.n	800365e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d021      	beq.n	800365e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361a:	f7fe fc53 	bl	8001ec4 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d302      	bcc.n	8003630 <I2C_WaitOnFlagUntilTimeout+0x30>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d116      	bne.n	800365e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f043 0220 	orr.w	r2, r3, #32
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e023      	b.n	80036a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	0c1b      	lsrs	r3, r3, #16
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	d10d      	bne.n	8003684 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	e00c      	b.n	800369e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4013      	ands	r3, r2
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	bf0c      	ite	eq
 8003696:	2301      	moveq	r3, #1
 8003698:	2300      	movne	r3, #0
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d0b6      	beq.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036bc:	e051      	b.n	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036cc:	d123      	bne.n	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f043 0204 	orr.w	r2, r3, #4
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e046      	b.n	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800371c:	d021      	beq.n	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800371e:	f7fe fbd1 	bl	8001ec4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d302      	bcc.n	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d116      	bne.n	8003762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e020      	b.n	80037a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10c      	bne.n	8003786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	43da      	mvns	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4013      	ands	r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	bf14      	ite	ne
 800377e:	2301      	movne	r3, #1
 8003780:	2300      	moveq	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	e00b      	b.n	800379e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	43da      	mvns	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4013      	ands	r3, r2
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d18d      	bne.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037b8:	e02d      	b.n	8003816 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f8ce 	bl	800395c <I2C_IsAcknowledgeFailed>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e02d      	b.n	8003826 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d021      	beq.n	8003816 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d2:	f7fe fb77 	bl	8001ec4 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d302      	bcc.n	80037e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d116      	bne.n	8003816 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f043 0220 	orr.w	r2, r3, #32
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e007      	b.n	8003826 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	2b80      	cmp	r3, #128	; 0x80
 8003822:	d1ca      	bne.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800383a:	e02d      	b.n	8003898 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f88d 	bl	800395c <I2C_IsAcknowledgeFailed>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e02d      	b.n	80038a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d021      	beq.n	8003898 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003854:	f7fe fb36 	bl	8001ec4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	d302      	bcc.n	800386a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d116      	bne.n	8003898 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f043 0220 	orr.w	r2, r3, #32
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e007      	b.n	80038a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d1ca      	bne.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038bc:	e042      	b.n	8003944 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d119      	bne.n	8003900 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0210 	mvn.w	r2, #16
 80038d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e029      	b.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003900:	f7fe fae0 	bl	8001ec4 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	429a      	cmp	r2, r3
 800390e:	d302      	bcc.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d116      	bne.n	8003944 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e007      	b.n	8003954 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d1b5      	bne.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	d11b      	bne.n	80039ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800397c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	f043 0204 	orr.w	r2, r3, #4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
	...

080039bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e22d      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d075      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039da:	4ba3      	ldr	r3, [pc, #652]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d00c      	beq.n	8003a00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e6:	4ba0      	ldr	r3, [pc, #640]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d112      	bne.n	8003a18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f2:	4b9d      	ldr	r3, [pc, #628]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fe:	d10b      	bne.n	8003a18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	4b99      	ldr	r3, [pc, #612]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d05b      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x108>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d157      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e208      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a20:	d106      	bne.n	8003a30 <HAL_RCC_OscConfig+0x74>
 8003a22:	4b91      	ldr	r3, [pc, #580]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a90      	ldr	r2, [pc, #576]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e01d      	b.n	8003a6c <HAL_RCC_OscConfig+0xb0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x98>
 8003a3a:	4b8b      	ldr	r3, [pc, #556]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a8a      	ldr	r2, [pc, #552]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b88      	ldr	r3, [pc, #544]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a87      	ldr	r2, [pc, #540]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e00b      	b.n	8003a6c <HAL_RCC_OscConfig+0xb0>
 8003a54:	4b84      	ldr	r3, [pc, #528]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a83      	ldr	r2, [pc, #524]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a80      	ldr	r2, [pc, #512]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fe fa26 	bl	8001ec4 <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fe fa22 	bl	8001ec4 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e1cd      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0xc0>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fa12 	bl	8001ec4 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fe fa0e 	bl	8001ec4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	; 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e1b9      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab6:	4b6c      	ldr	r3, [pc, #432]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0xe8>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d063      	beq.n	8003b9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ad2:	4b65      	ldr	r3, [pc, #404]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ade:	4b62      	ldr	r3, [pc, #392]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d11c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aea:	4b5f      	ldr	r3, [pc, #380]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d116      	bne.n	8003b24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af6:	4b5c      	ldr	r3, [pc, #368]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_RCC_OscConfig+0x152>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d001      	beq.n	8003b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e18d      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0e:	4b56      	ldr	r3, [pc, #344]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4952      	ldr	r1, [pc, #328]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b22:	e03a      	b.n	8003b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d020      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b2c:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <HAL_RCC_OscConfig+0x2b0>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b32:	f7fe f9c7 	bl	8001ec4 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b3a:	f7fe f9c3 	bl	8001ec4 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e16e      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4c:	4b46      	ldr	r3, [pc, #280]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4940      	ldr	r1, [pc, #256]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	600b      	str	r3, [r1, #0]
 8003b6c:	e015      	b.n	8003b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b6e:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <HAL_RCC_OscConfig+0x2b0>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fe f9a6 	bl	8001ec4 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b7c:	f7fe f9a2 	bl	8001ec4 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e14d      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8e:	4b36      	ldr	r3, [pc, #216]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d030      	beq.n	8003c08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d016      	beq.n	8003bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bae:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <HAL_RCC_OscConfig+0x2b4>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fe f986 	bl	8001ec4 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bbc:	f7fe f982 	bl	8001ec4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e12d      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bce:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x200>
 8003bda:	e015      	b.n	8003c08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bdc:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_RCC_OscConfig+0x2b4>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be2:	f7fe f96f 	bl	8001ec4 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bea:	f7fe f96b 	bl	8001ec4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e116      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f0      	bne.n	8003bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80a0 	beq.w	8003d56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1a:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c34:	6413      	str	r3, [r2, #64]	; 0x40
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_RCC_OscConfig+0x2b8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d121      	bne.n	8003c96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <HAL_RCC_OscConfig+0x2b8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a07      	ldr	r2, [pc, #28]	; (8003c74 <HAL_RCC_OscConfig+0x2b8>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5e:	f7fe f931 	bl	8001ec4 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	e011      	b.n	8003c8a <HAL_RCC_OscConfig+0x2ce>
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	42470000 	.word	0x42470000
 8003c70:	42470e80 	.word	0x42470e80
 8003c74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c78:	f7fe f924 	bl	8001ec4 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e0cf      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8a:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCC_OscConfig+0x478>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d106      	bne.n	8003cac <HAL_RCC_OscConfig+0x2f0>
 8003c9e:	4b66      	ldr	r3, [pc, #408]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a65      	ldr	r2, [pc, #404]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8003caa:	e01c      	b.n	8003ce6 <HAL_RCC_OscConfig+0x32a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b05      	cmp	r3, #5
 8003cb2:	d10c      	bne.n	8003cce <HAL_RCC_OscConfig+0x312>
 8003cb4:	4b60      	ldr	r3, [pc, #384]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a5f      	ldr	r2, [pc, #380]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003cba:	f043 0304 	orr.w	r3, r3, #4
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc0:	4b5d      	ldr	r3, [pc, #372]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	4a5c      	ldr	r2, [pc, #368]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ccc:	e00b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x32a>
 8003cce:	4b5a      	ldr	r3, [pc, #360]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	4a59      	ldr	r2, [pc, #356]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cda:	4b57      	ldr	r3, [pc, #348]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a56      	ldr	r2, [pc, #344]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d015      	beq.n	8003d1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe f8e9 	bl	8001ec4 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe f8e5 	bl	8001ec4 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e08e      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0c:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ee      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x33a>
 8003d18:	e014      	b.n	8003d44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1a:	f7fe f8d3 	bl	8001ec4 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fe f8cf 	bl	8001ec4 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e078      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d38:	4b3f      	ldr	r3, [pc, #252]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1ee      	bne.n	8003d22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d105      	bne.n	8003d56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a3a      	ldr	r2, [pc, #232]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d064      	beq.n	8003e28 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d5e:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d05c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d141      	bne.n	8003df6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b32      	ldr	r3, [pc, #200]	; (8003e3c <HAL_RCC_OscConfig+0x480>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe f8a4 	bl	8001ec4 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe f8a0 	bl	8001ec4 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e04b      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	019b      	lsls	r3, r3, #6
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	3b01      	subs	r3, #1
 8003db8:	041b      	lsls	r3, r3, #16
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	491d      	ldr	r1, [pc, #116]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <HAL_RCC_OscConfig+0x480>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dce:	f7fe f879 	bl	8001ec4 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7fe f875 	bl	8001ec4 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e020      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x41a>
 8003df4:	e018      	b.n	8003e28 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_RCC_OscConfig+0x480>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe f862 	bl	8001ec4 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fe f85e 	bl	8001ec4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e009      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <HAL_RCC_OscConfig+0x47c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x448>
 8003e22:	e001      	b.n	8003e28 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40007000 	.word	0x40007000
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	42470060 	.word	0x42470060

08003e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0ca      	b.n	8003fea <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e54:	4b67      	ldr	r3, [pc, #412]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d90c      	bls.n	8003e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b64      	ldr	r3, [pc, #400]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b62      	ldr	r3, [pc, #392]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b4>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0b6      	b.n	8003fea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e94:	4b58      	ldr	r3, [pc, #352]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a57      	ldr	r2, [pc, #348]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eac:	4b52      	ldr	r3, [pc, #328]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a51      	ldr	r2, [pc, #324]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb8:	4b4f      	ldr	r3, [pc, #316]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	494c      	ldr	r1, [pc, #304]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d044      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ede:	4b46      	ldr	r3, [pc, #280]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d119      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e07d      	b.n	8003fea <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d003      	beq.n	8003efe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d107      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003efe:	4b3e      	ldr	r3, [pc, #248]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e06d      	b.n	8003fea <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0e:	4b3a      	ldr	r3, [pc, #232]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e065      	b.n	8003fea <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f1e:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f023 0203 	bic.w	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4933      	ldr	r1, [pc, #204]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f30:	f7fd ffc8 	bl	8001ec4 <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f38:	f7fd ffc4 	bl	8001ec4 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e04d      	b.n	8003fea <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 020c 	and.w	r2, r3, #12
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d1eb      	bne.n	8003f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d20c      	bcs.n	8003f88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b21      	ldr	r3, [pc, #132]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <HAL_RCC_ClockConfig+0x1b4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e030      	b.n	8003fea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f94:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4915      	ldr	r1, [pc, #84]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	490d      	ldr	r1, [pc, #52]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fc6:	f000 f81d 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003fca:	4601      	mov	r1, r0
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	4a09      	ldr	r2, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	fa21 f303 	lsr.w	r3, r1, r3
 8003fde:	4a08      	ldr	r2, [pc, #32]	; (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f7fd ff2a 	bl	8001e3c <HAL_InitTick>

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023c00 	.word	0x40023c00
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	08006a28 	.word	0x08006a28
 8004000:	20000000 	.word	0x20000000

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	2300      	movs	r3, #0
 8004014:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800401a:	4b50      	ldr	r3, [pc, #320]	; (800415c <HAL_RCC_GetSysClockFreq+0x158>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b04      	cmp	r3, #4
 8004024:	d007      	beq.n	8004036 <HAL_RCC_GetSysClockFreq+0x32>
 8004026:	2b08      	cmp	r3, #8
 8004028:	d008      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0x38>
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 808d 	bne.w	800414a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004030:	4b4b      	ldr	r3, [pc, #300]	; (8004160 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004032:	60bb      	str	r3, [r7, #8]
       break;
 8004034:	e08c      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004036:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <HAL_RCC_GetSysClockFreq+0x160>)
 8004038:	60bb      	str	r3, [r7, #8]
      break;
 800403a:	e089      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800403c:	4b47      	ldr	r3, [pc, #284]	; (800415c <HAL_RCC_GetSysClockFreq+0x158>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004044:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004046:	4b45      	ldr	r3, [pc, #276]	; (800415c <HAL_RCC_GetSysClockFreq+0x158>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d023      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004052:	4b42      	ldr	r3, [pc, #264]	; (800415c <HAL_RCC_GetSysClockFreq+0x158>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	f04f 0400 	mov.w	r4, #0
 800405c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	ea03 0501 	and.w	r5, r3, r1
 8004068:	ea04 0602 	and.w	r6, r4, r2
 800406c:	4a3d      	ldr	r2, [pc, #244]	; (8004164 <HAL_RCC_GetSysClockFreq+0x160>)
 800406e:	fb02 f106 	mul.w	r1, r2, r6
 8004072:	2200      	movs	r2, #0
 8004074:	fb02 f205 	mul.w	r2, r2, r5
 8004078:	440a      	add	r2, r1
 800407a:	493a      	ldr	r1, [pc, #232]	; (8004164 <HAL_RCC_GetSysClockFreq+0x160>)
 800407c:	fba5 0101 	umull	r0, r1, r5, r1
 8004080:	1853      	adds	r3, r2, r1
 8004082:	4619      	mov	r1, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f04f 0400 	mov.w	r4, #0
 800408a:	461a      	mov	r2, r3
 800408c:	4623      	mov	r3, r4
 800408e:	f7fc fd37 	bl	8000b00 <__aeabi_uldivmod>
 8004092:	4603      	mov	r3, r0
 8004094:	460c      	mov	r4, r1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e049      	b.n	800412e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409a:	4b30      	ldr	r3, [pc, #192]	; (800415c <HAL_RCC_GetSysClockFreq+0x158>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	099b      	lsrs	r3, r3, #6
 80040a0:	f04f 0400 	mov.w	r4, #0
 80040a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	ea03 0501 	and.w	r5, r3, r1
 80040b0:	ea04 0602 	and.w	r6, r4, r2
 80040b4:	4629      	mov	r1, r5
 80040b6:	4632      	mov	r2, r6
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	f04f 0400 	mov.w	r4, #0
 80040c0:	0154      	lsls	r4, r2, #5
 80040c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040c6:	014b      	lsls	r3, r1, #5
 80040c8:	4619      	mov	r1, r3
 80040ca:	4622      	mov	r2, r4
 80040cc:	1b49      	subs	r1, r1, r5
 80040ce:	eb62 0206 	sbc.w	r2, r2, r6
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	f04f 0400 	mov.w	r4, #0
 80040da:	0194      	lsls	r4, r2, #6
 80040dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040e0:	018b      	lsls	r3, r1, #6
 80040e2:	1a5b      	subs	r3, r3, r1
 80040e4:	eb64 0402 	sbc.w	r4, r4, r2
 80040e8:	f04f 0100 	mov.w	r1, #0
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	00e2      	lsls	r2, r4, #3
 80040f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040f6:	00d9      	lsls	r1, r3, #3
 80040f8:	460b      	mov	r3, r1
 80040fa:	4614      	mov	r4, r2
 80040fc:	195b      	adds	r3, r3, r5
 80040fe:	eb44 0406 	adc.w	r4, r4, r6
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	02a2      	lsls	r2, r4, #10
 800410c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004110:	0299      	lsls	r1, r3, #10
 8004112:	460b      	mov	r3, r1
 8004114:	4614      	mov	r4, r2
 8004116:	4618      	mov	r0, r3
 8004118:	4621      	mov	r1, r4
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f04f 0400 	mov.w	r4, #0
 8004120:	461a      	mov	r2, r3
 8004122:	4623      	mov	r3, r4
 8004124:	f7fc fcec 	bl	8000b00 <__aeabi_uldivmod>
 8004128:	4603      	mov	r3, r0
 800412a:	460c      	mov	r4, r1
 800412c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800412e:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_RCC_GetSysClockFreq+0x158>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	0c1b      	lsrs	r3, r3, #16
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	3301      	adds	r3, #1
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	60bb      	str	r3, [r7, #8]
      break;
 8004148:	e002      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800414a:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_RCC_GetSysClockFreq+0x15c>)
 800414c:	60bb      	str	r3, [r7, #8]
      break;
 800414e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004150:	68bb      	ldr	r3, [r7, #8]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800
 8004160:	00f42400 	.word	0x00f42400
 8004164:	017d7840 	.word	0x017d7840

08004168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800416c:	4b03      	ldr	r3, [pc, #12]	; (800417c <HAL_RCC_GetHCLKFreq+0x14>)
 800416e:	681b      	ldr	r3, [r3, #0]
}
 8004170:	4618      	mov	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	20000000 	.word	0x20000000

08004180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004184:	f7ff fff0 	bl	8004168 <HAL_RCC_GetHCLKFreq>
 8004188:	4601      	mov	r1, r0
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	0a9b      	lsrs	r3, r3, #10
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	4a03      	ldr	r2, [pc, #12]	; (80041a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	fa21 f303 	lsr.w	r3, r1, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40023800 	.word	0x40023800
 80041a4:	08006a38 	.word	0x08006a38

080041a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041ac:	f7ff ffdc 	bl	8004168 <HAL_RCC_GetHCLKFreq>
 80041b0:	4601      	mov	r1, r0
 80041b2:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	0b5b      	lsrs	r3, r3, #13
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	4a03      	ldr	r2, [pc, #12]	; (80041cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041be:	5cd3      	ldrb	r3, [r2, r3]
 80041c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	08006a38 	.word	0x08006a38

080041d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e03f      	b.n	8004262 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fd fc7e 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fbed 	bl	80049f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b088      	sub	sp, #32
 800426e:	af02      	add	r7, sp, #8
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b20      	cmp	r3, #32
 8004288:	f040 8083 	bne.w	8004392 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_UART_Transmit+0x2e>
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e07b      	b.n	8004394 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Transmit+0x40>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e074      	b.n	8004394 <HAL_UART_Transmit+0x12a>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2221      	movs	r2, #33	; 0x21
 80042bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042c0:	f7fd fe00 	bl	8001ec4 <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	88fa      	ldrh	r2, [r7, #6]
 80042ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	88fa      	ldrh	r2, [r7, #6]
 80042d0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042d2:	e042      	b.n	800435a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ea:	d122      	bne.n	8004332 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2200      	movs	r2, #0
 80042f4:	2180      	movs	r1, #128	; 0x80
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fa10 	bl	800471c <UART_WaitOnFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e046      	b.n	8004394 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004318:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3302      	adds	r3, #2
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	e017      	b.n	800435a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	3301      	adds	r3, #1
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	e013      	b.n	800435a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2200      	movs	r2, #0
 800433a:	2180      	movs	r1, #128	; 0x80
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f9ed 	bl	800471c <UART_WaitOnFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e023      	b.n	8004394 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	60ba      	str	r2, [r7, #8]
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1b7      	bne.n	80042d4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2200      	movs	r2, #0
 800436c:	2140      	movs	r1, #64	; 0x40
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f9d4 	bl	800471c <UART_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e00a      	b.n	8004394 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e000      	b.n	8004394 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	f040 8090 	bne.w	80044de <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_UART_Receive+0x2e>
 80043c4:	88fb      	ldrh	r3, [r7, #6]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e088      	b.n	80044e0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_UART_Receive+0x40>
 80043d8:	2302      	movs	r3, #2
 80043da:	e081      	b.n	80044e0 <HAL_UART_Receive+0x144>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2222      	movs	r2, #34	; 0x22
 80043ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80043f2:	f7fd fd67 	bl	8001ec4 <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	88fa      	ldrh	r2, [r7, #6]
 80043fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	88fa      	ldrh	r2, [r7, #6]
 8004402:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004404:	e05c      	b.n	80044c0 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441c:	d12b      	bne.n	8004476 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	2200      	movs	r2, #0
 8004426:	2120      	movs	r1, #32
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f977 	bl	800471c <UART_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e053      	b.n	80044e0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10c      	bne.n	800445e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004450:	b29a      	uxth	r2, r3
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	3302      	adds	r3, #2
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	e030      	b.n	80044c0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	b29b      	uxth	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	b29a      	uxth	r2, r3
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	3301      	adds	r3, #1
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	e024      	b.n	80044c0 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	2120      	movs	r1, #32
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f94b 	bl	800471c <UART_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e027      	b.n	80044e0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d108      	bne.n	80044aa <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6859      	ldr	r1, [r3, #4]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	60ba      	str	r2, [r7, #8]
 80044a4:	b2ca      	uxtb	r2, r1
 80044a6:	701a      	strb	r2, [r3, #0]
 80044a8:	e00a      	b.n	80044c0 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	1c59      	adds	r1, r3, #1
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d19d      	bne.n	8004406 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e000      	b.n	80044e0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80044de:	2302      	movs	r3, #2
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004508:	2300      	movs	r3, #0
 800450a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10d      	bne.n	800453a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_UART_IRQHandler+0x52>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9dc 	bl	80048f0 <UART_Receive_IT>
      return;
 8004538:	e0cc      	b.n	80046d4 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80ab 	beq.w	8004698 <HAL_UART_IRQHandler+0x1b0>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_UART_IRQHandler+0x70>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80a0 	beq.w	8004698 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_UART_IRQHandler+0x90>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_UART_IRQHandler+0xb0>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	f043 0202 	orr.w	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_UART_IRQHandler+0xd0>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	f043 0204 	orr.w	r2, r3, #4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_UART_IRQHandler+0xf0>
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	f043 0208 	orr.w	r2, r3, #8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d078      	beq.n	80046d2 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_UART_IRQHandler+0x112>
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f97b 	bl	80048f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <HAL_UART_IRQHandler+0x13a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d031      	beq.n	8004686 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f8c4 	bl	80047b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	d123      	bne.n	800467e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004644:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	2b00      	cmp	r3, #0
 800464c:	d013      	beq.n	8004676 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004652:	4a22      	ldr	r2, [pc, #136]	; (80046dc <HAL_UART_IRQHandler+0x1f4>)
 8004654:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465a:	4618      	mov	r0, r3
 800465c:	f7fd fd71 	bl	8002142 <HAL_DMA_Abort_IT>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004670:	4610      	mov	r0, r2
 8004672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	e00e      	b.n	8004694 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f846 	bl	8004708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467c:	e00a      	b.n	8004694 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f842 	bl	8004708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004684:	e006      	b.n	8004694 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f83e 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004692:	e01e      	b.n	80046d2 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004694:	bf00      	nop
    return;
 8004696:	e01c      	b.n	80046d2 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_UART_IRQHandler+0x1cc>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8b1 	bl	8004814 <UART_Transmit_IT>
    return;
 80046b2:	e00f      	b.n	80046d4 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_UART_IRQHandler+0x1ec>
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f8f9 	bl	80048c0 <UART_EndTransmit_IT>
    return;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <HAL_UART_IRQHandler+0x1ec>
    return;
 80046d2:	bf00      	nop
  }
}
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	080047ed 	.word	0x080047ed

080046e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800472c:	e02c      	b.n	8004788 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d028      	beq.n	8004788 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <UART_WaitOnFlagUntilTimeout+0x30>
 800473c:	f7fd fbc2 	bl	8001ec4 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	429a      	cmp	r2, r3
 800474a:	d21d      	bcs.n	8004788 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800475a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e00f      	b.n	80047a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4013      	ands	r3, r2
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	429a      	cmp	r2, r3
 8004796:	bf0c      	ite	eq
 8004798:	2301      	moveq	r3, #1
 800479a:	2300      	movne	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d0c3      	beq.n	800472e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 0201 	bic.w	r2, r2, #1
 80047d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f7ff ff7e 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b21      	cmp	r3, #33	; 0x21
 8004826:	d144      	bne.n	80048b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004830:	d11a      	bne.n	8004868 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004846:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	1c9a      	adds	r2, r3, #2
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]
 800485a:	e00e      	b.n	800487a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	621a      	str	r2, [r3, #32]
 8004866:	e008      	b.n	800487a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	1c59      	adds	r1, r3, #1
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6211      	str	r1, [r2, #32]
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29b      	uxth	r3, r3
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	4619      	mov	r1, r3
 8004888:	84d1      	strh	r1, [r2, #38]	; 0x26
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800489c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e000      	b.n	80048b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80048b2:	2302      	movs	r3, #2
  }
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff fefd 	bl	80046e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b22      	cmp	r3, #34	; 0x22
 8004902:	d171      	bne.n	80049e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490c:	d123      	bne.n	8004956 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10e      	bne.n	800493a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	1c9a      	adds	r2, r3, #2
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28
 8004938:	e029      	b.n	800498e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	b29b      	uxth	r3, r3
 8004942:	b2db      	uxtb	r3, r3
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	629a      	str	r2, [r3, #40]	; 0x28
 8004954:	e01b      	b.n	800498e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6858      	ldr	r0, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	1c59      	adds	r1, r3, #1
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6291      	str	r1, [r2, #40]	; 0x28
 800496e:	b2c2      	uxtb	r2, r0
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e00c      	b.n	800498e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	b2da      	uxtb	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	1c58      	adds	r0, r3, #1
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	6288      	str	r0, [r1, #40]	; 0x28
 8004986:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29b      	uxth	r3, r3
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	4619      	mov	r1, r3
 800499c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d120      	bne.n	80049e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0220 	bic.w	r2, r2, #32
 80049b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695a      	ldr	r2, [r3, #20]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0201 	bic.w	r2, r2, #1
 80049d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff fe8a 	bl	80046f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	e002      	b.n	80049ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e000      	b.n	80049ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
  }
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f4:	b5b0      	push	{r4, r5, r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a34:	f023 030c 	bic.w	r3, r3, #12
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	699a      	ldr	r2, [r3, #24]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a60:	f040 80e4 	bne.w	8004c2c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4aab      	ldr	r2, [pc, #684]	; (8004d18 <UART_SetConfig+0x324>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <UART_SetConfig+0x84>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4aaa      	ldr	r2, [pc, #680]	; (8004d1c <UART_SetConfig+0x328>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d16c      	bne.n	8004b52 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004a78:	f7ff fb96 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009a      	lsls	r2, r3, #2
 8004a86:	441a      	add	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a92:	4aa3      	ldr	r2, [pc, #652]	; (8004d20 <UART_SetConfig+0x32c>)
 8004a94:	fba2 2303 	umull	r2, r3, r2, r3
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	011c      	lsls	r4, r3, #4
 8004a9c:	f7ff fb84 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009a      	lsls	r2, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ab6:	f7ff fb77 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8004aba:	4602      	mov	r2, r0
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009a      	lsls	r2, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	4a93      	ldr	r2, [pc, #588]	; (8004d20 <UART_SetConfig+0x32c>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2264      	movs	r2, #100	; 0x64
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	1aeb      	subs	r3, r5, r3
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	3332      	adds	r3, #50	; 0x32
 8004ae4:	4a8e      	ldr	r2, [pc, #568]	; (8004d20 <UART_SetConfig+0x32c>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004af2:	441c      	add	r4, r3
 8004af4:	f7ff fb58 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009a      	lsls	r2, r3, #2
 8004b02:	441a      	add	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b0e:	f7ff fb4b 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8004b12:	4602      	mov	r2, r0
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009a      	lsls	r2, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	4a7d      	ldr	r2, [pc, #500]	; (8004d20 <UART_SetConfig+0x32c>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	095b      	lsrs	r3, r3, #5
 8004b30:	2264      	movs	r2, #100	; 0x64
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	1aeb      	subs	r3, r5, r3
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	3332      	adds	r3, #50	; 0x32
 8004b3c:	4a78      	ldr	r2, [pc, #480]	; (8004d20 <UART_SetConfig+0x32c>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	f003 0207 	and.w	r2, r3, #7
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4422      	add	r2, r4
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	e154      	b.n	8004dfc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004b52:	f7ff fb15 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 8004b56:	4602      	mov	r2, r0
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009a      	lsls	r2, r3, #2
 8004b60:	441a      	add	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	4a6c      	ldr	r2, [pc, #432]	; (8004d20 <UART_SetConfig+0x32c>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	011c      	lsls	r4, r3, #4
 8004b76:	f7ff fb03 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009a      	lsls	r2, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b90:	f7ff faf6 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009a      	lsls	r2, r3, #2
 8004b9e:	441a      	add	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	4a5d      	ldr	r2, [pc, #372]	; (8004d20 <UART_SetConfig+0x32c>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	2264      	movs	r2, #100	; 0x64
 8004bb4:	fb02 f303 	mul.w	r3, r2, r3
 8004bb8:	1aeb      	subs	r3, r5, r3
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	3332      	adds	r3, #50	; 0x32
 8004bbe:	4a58      	ldr	r2, [pc, #352]	; (8004d20 <UART_SetConfig+0x32c>)
 8004bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bcc:	441c      	add	r4, r3
 8004bce:	f7ff fad7 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009a      	lsls	r2, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	fbb2 f5f3 	udiv	r5, r2, r3
 8004be8:	f7ff faca 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009a      	lsls	r2, r3, #2
 8004bf6:	441a      	add	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	4a47      	ldr	r2, [pc, #284]	; (8004d20 <UART_SetConfig+0x32c>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	2264      	movs	r2, #100	; 0x64
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	1aeb      	subs	r3, r5, r3
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	3332      	adds	r3, #50	; 0x32
 8004c16:	4a42      	ldr	r2, [pc, #264]	; (8004d20 <UART_SetConfig+0x32c>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	f003 0207 	and.w	r2, r3, #7
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4422      	add	r2, r4
 8004c28:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004c2a:	e0e7      	b.n	8004dfc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a39      	ldr	r2, [pc, #228]	; (8004d18 <UART_SetConfig+0x324>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d004      	beq.n	8004c40 <UART_SetConfig+0x24c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a38      	ldr	r2, [pc, #224]	; (8004d1c <UART_SetConfig+0x328>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d171      	bne.n	8004d24 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004c40:	f7ff fab2 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009a      	lsls	r2, r3, #2
 8004c4e:	441a      	add	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	4a31      	ldr	r2, [pc, #196]	; (8004d20 <UART_SetConfig+0x32c>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	011c      	lsls	r4, r3, #4
 8004c64:	f7ff faa0 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	009a      	lsls	r2, r3, #2
 8004c72:	441a      	add	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004c7e:	f7ff fa93 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8004c82:	4602      	mov	r2, r0
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009a      	lsls	r2, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c98:	4a21      	ldr	r2, [pc, #132]	; (8004d20 <UART_SetConfig+0x32c>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	2264      	movs	r2, #100	; 0x64
 8004ca2:	fb02 f303 	mul.w	r3, r2, r3
 8004ca6:	1aeb      	subs	r3, r5, r3
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	3332      	adds	r3, #50	; 0x32
 8004cac:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <UART_SetConfig+0x32c>)
 8004cae:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cb8:	441c      	add	r4, r3
 8004cba:	f7ff fa75 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009a      	lsls	r2, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fbb2 f5f3 	udiv	r5, r2, r3
 8004cd4:	f7ff fa68 	bl	80041a8 <HAL_RCC_GetPCLK2Freq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009a      	lsls	r2, r3, #2
 8004ce2:	441a      	add	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <UART_SetConfig+0x32c>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2264      	movs	r2, #100	; 0x64
 8004cf8:	fb02 f303 	mul.w	r3, r2, r3
 8004cfc:	1aeb      	subs	r3, r5, r3
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a07      	ldr	r2, [pc, #28]	; (8004d20 <UART_SetConfig+0x32c>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 020f 	and.w	r2, r3, #15
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4422      	add	r2, r4
 8004d14:	609a      	str	r2, [r3, #8]
 8004d16:	e071      	b.n	8004dfc <UART_SetConfig+0x408>
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	40011400 	.word	0x40011400
 8004d20:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004d24:	f7ff fa2c 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009a      	lsls	r2, r3, #2
 8004d32:	441a      	add	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	4a31      	ldr	r2, [pc, #196]	; (8004e04 <UART_SetConfig+0x410>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	011c      	lsls	r4, r3, #4
 8004d48:	f7ff fa1a 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009a      	lsls	r2, r3, #2
 8004d56:	441a      	add	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	fbb2 f5f3 	udiv	r5, r2, r3
 8004d62:	f7ff fa0d 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009a      	lsls	r2, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7c:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <UART_SetConfig+0x410>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	2264      	movs	r2, #100	; 0x64
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	1aeb      	subs	r3, r5, r3
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	3332      	adds	r3, #50	; 0x32
 8004d90:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <UART_SetConfig+0x410>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d9c:	441c      	add	r4, r3
 8004d9e:	f7ff f9ef 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 8004da2:	4602      	mov	r2, r0
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009a      	lsls	r2, r3, #2
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	fbb2 f5f3 	udiv	r5, r2, r3
 8004db8:	f7ff f9e2 	bl	8004180 <HAL_RCC_GetPCLK1Freq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009a      	lsls	r2, r3, #2
 8004dc6:	441a      	add	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd2:	4a0c      	ldr	r2, [pc, #48]	; (8004e04 <UART_SetConfig+0x410>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	2264      	movs	r2, #100	; 0x64
 8004ddc:	fb02 f303 	mul.w	r3, r2, r3
 8004de0:	1aeb      	subs	r3, r5, r3
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	3332      	adds	r3, #50	; 0x32
 8004de6:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <UART_SetConfig+0x410>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	f003 020f 	and.w	r2, r3, #15
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4422      	add	r2, r4
 8004df8:	609a      	str	r2, [r3, #8]
}
 8004dfa:	e7ff      	b.n	8004dfc <UART_SetConfig+0x408>
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bdb0      	pop	{r4, r5, r7, pc}
 8004e04:	51eb851f 	.word	0x51eb851f

08004e08 <__errno>:
 8004e08:	4b01      	ldr	r3, [pc, #4]	; (8004e10 <__errno+0x8>)
 8004e0a:	6818      	ldr	r0, [r3, #0]
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	2000000c 	.word	0x2000000c

08004e14 <__libc_init_array>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	4e0d      	ldr	r6, [pc, #52]	; (8004e4c <__libc_init_array+0x38>)
 8004e18:	4c0d      	ldr	r4, [pc, #52]	; (8004e50 <__libc_init_array+0x3c>)
 8004e1a:	1ba4      	subs	r4, r4, r6
 8004e1c:	10a4      	asrs	r4, r4, #2
 8004e1e:	2500      	movs	r5, #0
 8004e20:	42a5      	cmp	r5, r4
 8004e22:	d109      	bne.n	8004e38 <__libc_init_array+0x24>
 8004e24:	4e0b      	ldr	r6, [pc, #44]	; (8004e54 <__libc_init_array+0x40>)
 8004e26:	4c0c      	ldr	r4, [pc, #48]	; (8004e58 <__libc_init_array+0x44>)
 8004e28:	f001 fd46 	bl	80068b8 <_init>
 8004e2c:	1ba4      	subs	r4, r4, r6
 8004e2e:	10a4      	asrs	r4, r4, #2
 8004e30:	2500      	movs	r5, #0
 8004e32:	42a5      	cmp	r5, r4
 8004e34:	d105      	bne.n	8004e42 <__libc_init_array+0x2e>
 8004e36:	bd70      	pop	{r4, r5, r6, pc}
 8004e38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e3c:	4798      	blx	r3
 8004e3e:	3501      	adds	r5, #1
 8004e40:	e7ee      	b.n	8004e20 <__libc_init_array+0xc>
 8004e42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e46:	4798      	blx	r3
 8004e48:	3501      	adds	r5, #1
 8004e4a:	e7f2      	b.n	8004e32 <__libc_init_array+0x1e>
 8004e4c:	08006c78 	.word	0x08006c78
 8004e50:	08006c78 	.word	0x08006c78
 8004e54:	08006c78 	.word	0x08006c78
 8004e58:	08006c7c 	.word	0x08006c7c

08004e5c <memcpy>:
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	1e43      	subs	r3, r0, #1
 8004e60:	440a      	add	r2, r1
 8004e62:	4291      	cmp	r1, r2
 8004e64:	d100      	bne.n	8004e68 <memcpy+0xc>
 8004e66:	bd10      	pop	{r4, pc}
 8004e68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e70:	e7f7      	b.n	8004e62 <memcpy+0x6>

08004e72 <memset>:
 8004e72:	4402      	add	r2, r0
 8004e74:	4603      	mov	r3, r0
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d100      	bne.n	8004e7c <memset+0xa>
 8004e7a:	4770      	bx	lr
 8004e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e80:	e7f9      	b.n	8004e76 <memset+0x4>

08004e82 <__cvt>:
 8004e82:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e86:	ec55 4b10 	vmov	r4, r5, d0
 8004e8a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004e8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e90:	2d00      	cmp	r5, #0
 8004e92:	460e      	mov	r6, r1
 8004e94:	4691      	mov	r9, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	bfb8      	it	lt
 8004e9a:	4622      	movlt	r2, r4
 8004e9c:	462b      	mov	r3, r5
 8004e9e:	f027 0720 	bic.w	r7, r7, #32
 8004ea2:	bfbb      	ittet	lt
 8004ea4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ea8:	461d      	movlt	r5, r3
 8004eaa:	2300      	movge	r3, #0
 8004eac:	232d      	movlt	r3, #45	; 0x2d
 8004eae:	bfb8      	it	lt
 8004eb0:	4614      	movlt	r4, r2
 8004eb2:	2f46      	cmp	r7, #70	; 0x46
 8004eb4:	700b      	strb	r3, [r1, #0]
 8004eb6:	d004      	beq.n	8004ec2 <__cvt+0x40>
 8004eb8:	2f45      	cmp	r7, #69	; 0x45
 8004eba:	d100      	bne.n	8004ebe <__cvt+0x3c>
 8004ebc:	3601      	adds	r6, #1
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	e000      	b.n	8004ec4 <__cvt+0x42>
 8004ec2:	2103      	movs	r1, #3
 8004ec4:	ab03      	add	r3, sp, #12
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	ab02      	add	r3, sp, #8
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	4632      	mov	r2, r6
 8004ece:	4653      	mov	r3, sl
 8004ed0:	ec45 4b10 	vmov	d0, r4, r5
 8004ed4:	f000 fbac 	bl	8005630 <_dtoa_r>
 8004ed8:	2f47      	cmp	r7, #71	; 0x47
 8004eda:	4680      	mov	r8, r0
 8004edc:	d102      	bne.n	8004ee4 <__cvt+0x62>
 8004ede:	f019 0f01 	tst.w	r9, #1
 8004ee2:	d026      	beq.n	8004f32 <__cvt+0xb0>
 8004ee4:	2f46      	cmp	r7, #70	; 0x46
 8004ee6:	eb08 0906 	add.w	r9, r8, r6
 8004eea:	d111      	bne.n	8004f10 <__cvt+0x8e>
 8004eec:	f898 3000 	ldrb.w	r3, [r8]
 8004ef0:	2b30      	cmp	r3, #48	; 0x30
 8004ef2:	d10a      	bne.n	8004f0a <__cvt+0x88>
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	4620      	mov	r0, r4
 8004efa:	4629      	mov	r1, r5
 8004efc:	f7fb fd90 	bl	8000a20 <__aeabi_dcmpeq>
 8004f00:	b918      	cbnz	r0, 8004f0a <__cvt+0x88>
 8004f02:	f1c6 0601 	rsb	r6, r6, #1
 8004f06:	f8ca 6000 	str.w	r6, [sl]
 8004f0a:	f8da 3000 	ldr.w	r3, [sl]
 8004f0e:	4499      	add	r9, r3
 8004f10:	2200      	movs	r2, #0
 8004f12:	2300      	movs	r3, #0
 8004f14:	4620      	mov	r0, r4
 8004f16:	4629      	mov	r1, r5
 8004f18:	f7fb fd82 	bl	8000a20 <__aeabi_dcmpeq>
 8004f1c:	b938      	cbnz	r0, 8004f2e <__cvt+0xac>
 8004f1e:	2230      	movs	r2, #48	; 0x30
 8004f20:	9b03      	ldr	r3, [sp, #12]
 8004f22:	454b      	cmp	r3, r9
 8004f24:	d205      	bcs.n	8004f32 <__cvt+0xb0>
 8004f26:	1c59      	adds	r1, r3, #1
 8004f28:	9103      	str	r1, [sp, #12]
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	e7f8      	b.n	8004f20 <__cvt+0x9e>
 8004f2e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f36:	eba3 0308 	sub.w	r3, r3, r8
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	b004      	add	sp, #16
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004f44 <__exponent>:
 8004f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f46:	2900      	cmp	r1, #0
 8004f48:	4604      	mov	r4, r0
 8004f4a:	bfba      	itte	lt
 8004f4c:	4249      	neglt	r1, r1
 8004f4e:	232d      	movlt	r3, #45	; 0x2d
 8004f50:	232b      	movge	r3, #43	; 0x2b
 8004f52:	2909      	cmp	r1, #9
 8004f54:	f804 2b02 	strb.w	r2, [r4], #2
 8004f58:	7043      	strb	r3, [r0, #1]
 8004f5a:	dd20      	ble.n	8004f9e <__exponent+0x5a>
 8004f5c:	f10d 0307 	add.w	r3, sp, #7
 8004f60:	461f      	mov	r7, r3
 8004f62:	260a      	movs	r6, #10
 8004f64:	fb91 f5f6 	sdiv	r5, r1, r6
 8004f68:	fb06 1115 	mls	r1, r6, r5, r1
 8004f6c:	3130      	adds	r1, #48	; 0x30
 8004f6e:	2d09      	cmp	r5, #9
 8004f70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f74:	f103 32ff 	add.w	r2, r3, #4294967295
 8004f78:	4629      	mov	r1, r5
 8004f7a:	dc09      	bgt.n	8004f90 <__exponent+0x4c>
 8004f7c:	3130      	adds	r1, #48	; 0x30
 8004f7e:	3b02      	subs	r3, #2
 8004f80:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f84:	42bb      	cmp	r3, r7
 8004f86:	4622      	mov	r2, r4
 8004f88:	d304      	bcc.n	8004f94 <__exponent+0x50>
 8004f8a:	1a10      	subs	r0, r2, r0
 8004f8c:	b003      	add	sp, #12
 8004f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f90:	4613      	mov	r3, r2
 8004f92:	e7e7      	b.n	8004f64 <__exponent+0x20>
 8004f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f98:	f804 2b01 	strb.w	r2, [r4], #1
 8004f9c:	e7f2      	b.n	8004f84 <__exponent+0x40>
 8004f9e:	2330      	movs	r3, #48	; 0x30
 8004fa0:	4419      	add	r1, r3
 8004fa2:	7083      	strb	r3, [r0, #2]
 8004fa4:	1d02      	adds	r2, r0, #4
 8004fa6:	70c1      	strb	r1, [r0, #3]
 8004fa8:	e7ef      	b.n	8004f8a <__exponent+0x46>
	...

08004fac <_printf_float>:
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	b08d      	sub	sp, #52	; 0x34
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004fb8:	4616      	mov	r6, r2
 8004fba:	461f      	mov	r7, r3
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	f001 f8ef 	bl	80061a0 <_localeconv_r>
 8004fc2:	6803      	ldr	r3, [r0, #0]
 8004fc4:	9304      	str	r3, [sp, #16]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fb f8fe 	bl	80001c8 <strlen>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	930a      	str	r3, [sp, #40]	; 0x28
 8004fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fd4:	9005      	str	r0, [sp, #20]
 8004fd6:	3307      	adds	r3, #7
 8004fd8:	f023 0307 	bic.w	r3, r3, #7
 8004fdc:	f103 0208 	add.w	r2, r3, #8
 8004fe0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004fe4:	f8d4 b000 	ldr.w	fp, [r4]
 8004fe8:	f8c8 2000 	str.w	r2, [r8]
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ff4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004ff8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ffc:	9307      	str	r3, [sp, #28]
 8004ffe:	f8cd 8018 	str.w	r8, [sp, #24]
 8005002:	f04f 32ff 	mov.w	r2, #4294967295
 8005006:	4ba7      	ldr	r3, [pc, #668]	; (80052a4 <_printf_float+0x2f8>)
 8005008:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800500c:	f7fb fd3a 	bl	8000a84 <__aeabi_dcmpun>
 8005010:	bb70      	cbnz	r0, 8005070 <_printf_float+0xc4>
 8005012:	f04f 32ff 	mov.w	r2, #4294967295
 8005016:	4ba3      	ldr	r3, [pc, #652]	; (80052a4 <_printf_float+0x2f8>)
 8005018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800501c:	f7fb fd14 	bl	8000a48 <__aeabi_dcmple>
 8005020:	bb30      	cbnz	r0, 8005070 <_printf_float+0xc4>
 8005022:	2200      	movs	r2, #0
 8005024:	2300      	movs	r3, #0
 8005026:	4640      	mov	r0, r8
 8005028:	4649      	mov	r1, r9
 800502a:	f7fb fd03 	bl	8000a34 <__aeabi_dcmplt>
 800502e:	b110      	cbz	r0, 8005036 <_printf_float+0x8a>
 8005030:	232d      	movs	r3, #45	; 0x2d
 8005032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005036:	4a9c      	ldr	r2, [pc, #624]	; (80052a8 <_printf_float+0x2fc>)
 8005038:	4b9c      	ldr	r3, [pc, #624]	; (80052ac <_printf_float+0x300>)
 800503a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800503e:	bf8c      	ite	hi
 8005040:	4690      	movhi	r8, r2
 8005042:	4698      	movls	r8, r3
 8005044:	2303      	movs	r3, #3
 8005046:	f02b 0204 	bic.w	r2, fp, #4
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	6022      	str	r2, [r4, #0]
 800504e:	f04f 0900 	mov.w	r9, #0
 8005052:	9700      	str	r7, [sp, #0]
 8005054:	4633      	mov	r3, r6
 8005056:	aa0b      	add	r2, sp, #44	; 0x2c
 8005058:	4621      	mov	r1, r4
 800505a:	4628      	mov	r0, r5
 800505c:	f000 f9e6 	bl	800542c <_printf_common>
 8005060:	3001      	adds	r0, #1
 8005062:	f040 808d 	bne.w	8005180 <_printf_float+0x1d4>
 8005066:	f04f 30ff 	mov.w	r0, #4294967295
 800506a:	b00d      	add	sp, #52	; 0x34
 800506c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	4640      	mov	r0, r8
 8005076:	4649      	mov	r1, r9
 8005078:	f7fb fd04 	bl	8000a84 <__aeabi_dcmpun>
 800507c:	b110      	cbz	r0, 8005084 <_printf_float+0xd8>
 800507e:	4a8c      	ldr	r2, [pc, #560]	; (80052b0 <_printf_float+0x304>)
 8005080:	4b8c      	ldr	r3, [pc, #560]	; (80052b4 <_printf_float+0x308>)
 8005082:	e7da      	b.n	800503a <_printf_float+0x8e>
 8005084:	6861      	ldr	r1, [r4, #4]
 8005086:	1c4b      	adds	r3, r1, #1
 8005088:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800508c:	a80a      	add	r0, sp, #40	; 0x28
 800508e:	d13e      	bne.n	800510e <_printf_float+0x162>
 8005090:	2306      	movs	r3, #6
 8005092:	6063      	str	r3, [r4, #4]
 8005094:	2300      	movs	r3, #0
 8005096:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800509a:	ab09      	add	r3, sp, #36	; 0x24
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	ec49 8b10 	vmov	d0, r8, r9
 80050a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050a6:	6022      	str	r2, [r4, #0]
 80050a8:	f8cd a004 	str.w	sl, [sp, #4]
 80050ac:	6861      	ldr	r1, [r4, #4]
 80050ae:	4628      	mov	r0, r5
 80050b0:	f7ff fee7 	bl	8004e82 <__cvt>
 80050b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80050b8:	2b47      	cmp	r3, #71	; 0x47
 80050ba:	4680      	mov	r8, r0
 80050bc:	d109      	bne.n	80050d2 <_printf_float+0x126>
 80050be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c0:	1cd8      	adds	r0, r3, #3
 80050c2:	db02      	blt.n	80050ca <_printf_float+0x11e>
 80050c4:	6862      	ldr	r2, [r4, #4]
 80050c6:	4293      	cmp	r3, r2
 80050c8:	dd47      	ble.n	800515a <_printf_float+0x1ae>
 80050ca:	f1aa 0a02 	sub.w	sl, sl, #2
 80050ce:	fa5f fa8a 	uxtb.w	sl, sl
 80050d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80050d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050d8:	d824      	bhi.n	8005124 <_printf_float+0x178>
 80050da:	3901      	subs	r1, #1
 80050dc:	4652      	mov	r2, sl
 80050de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050e2:	9109      	str	r1, [sp, #36]	; 0x24
 80050e4:	f7ff ff2e 	bl	8004f44 <__exponent>
 80050e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050ea:	1813      	adds	r3, r2, r0
 80050ec:	2a01      	cmp	r2, #1
 80050ee:	4681      	mov	r9, r0
 80050f0:	6123      	str	r3, [r4, #16]
 80050f2:	dc02      	bgt.n	80050fa <_printf_float+0x14e>
 80050f4:	6822      	ldr	r2, [r4, #0]
 80050f6:	07d1      	lsls	r1, r2, #31
 80050f8:	d501      	bpl.n	80050fe <_printf_float+0x152>
 80050fa:	3301      	adds	r3, #1
 80050fc:	6123      	str	r3, [r4, #16]
 80050fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0a5      	beq.n	8005052 <_printf_float+0xa6>
 8005106:	232d      	movs	r3, #45	; 0x2d
 8005108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510c:	e7a1      	b.n	8005052 <_printf_float+0xa6>
 800510e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005112:	f000 8177 	beq.w	8005404 <_printf_float+0x458>
 8005116:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800511a:	d1bb      	bne.n	8005094 <_printf_float+0xe8>
 800511c:	2900      	cmp	r1, #0
 800511e:	d1b9      	bne.n	8005094 <_printf_float+0xe8>
 8005120:	2301      	movs	r3, #1
 8005122:	e7b6      	b.n	8005092 <_printf_float+0xe6>
 8005124:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005128:	d119      	bne.n	800515e <_printf_float+0x1b2>
 800512a:	2900      	cmp	r1, #0
 800512c:	6863      	ldr	r3, [r4, #4]
 800512e:	dd0c      	ble.n	800514a <_printf_float+0x19e>
 8005130:	6121      	str	r1, [r4, #16]
 8005132:	b913      	cbnz	r3, 800513a <_printf_float+0x18e>
 8005134:	6822      	ldr	r2, [r4, #0]
 8005136:	07d2      	lsls	r2, r2, #31
 8005138:	d502      	bpl.n	8005140 <_printf_float+0x194>
 800513a:	3301      	adds	r3, #1
 800513c:	440b      	add	r3, r1
 800513e:	6123      	str	r3, [r4, #16]
 8005140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005142:	65a3      	str	r3, [r4, #88]	; 0x58
 8005144:	f04f 0900 	mov.w	r9, #0
 8005148:	e7d9      	b.n	80050fe <_printf_float+0x152>
 800514a:	b913      	cbnz	r3, 8005152 <_printf_float+0x1a6>
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	07d0      	lsls	r0, r2, #31
 8005150:	d501      	bpl.n	8005156 <_printf_float+0x1aa>
 8005152:	3302      	adds	r3, #2
 8005154:	e7f3      	b.n	800513e <_printf_float+0x192>
 8005156:	2301      	movs	r3, #1
 8005158:	e7f1      	b.n	800513e <_printf_float+0x192>
 800515a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800515e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005162:	4293      	cmp	r3, r2
 8005164:	db05      	blt.n	8005172 <_printf_float+0x1c6>
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	6123      	str	r3, [r4, #16]
 800516a:	07d1      	lsls	r1, r2, #31
 800516c:	d5e8      	bpl.n	8005140 <_printf_float+0x194>
 800516e:	3301      	adds	r3, #1
 8005170:	e7e5      	b.n	800513e <_printf_float+0x192>
 8005172:	2b00      	cmp	r3, #0
 8005174:	bfd4      	ite	le
 8005176:	f1c3 0302 	rsble	r3, r3, #2
 800517a:	2301      	movgt	r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	e7de      	b.n	800513e <_printf_float+0x192>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	055a      	lsls	r2, r3, #21
 8005184:	d407      	bmi.n	8005196 <_printf_float+0x1ea>
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	4642      	mov	r2, r8
 800518a:	4631      	mov	r1, r6
 800518c:	4628      	mov	r0, r5
 800518e:	47b8      	blx	r7
 8005190:	3001      	adds	r0, #1
 8005192:	d12b      	bne.n	80051ec <_printf_float+0x240>
 8005194:	e767      	b.n	8005066 <_printf_float+0xba>
 8005196:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800519a:	f240 80dc 	bls.w	8005356 <_printf_float+0x3aa>
 800519e:	2200      	movs	r2, #0
 80051a0:	2300      	movs	r3, #0
 80051a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051a6:	f7fb fc3b 	bl	8000a20 <__aeabi_dcmpeq>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d033      	beq.n	8005216 <_printf_float+0x26a>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4a41      	ldr	r2, [pc, #260]	; (80052b8 <_printf_float+0x30c>)
 80051b2:	4631      	mov	r1, r6
 80051b4:	4628      	mov	r0, r5
 80051b6:	47b8      	blx	r7
 80051b8:	3001      	adds	r0, #1
 80051ba:	f43f af54 	beq.w	8005066 <_printf_float+0xba>
 80051be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051c2:	429a      	cmp	r2, r3
 80051c4:	db02      	blt.n	80051cc <_printf_float+0x220>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	07d8      	lsls	r0, r3, #31
 80051ca:	d50f      	bpl.n	80051ec <_printf_float+0x240>
 80051cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051d0:	4631      	mov	r1, r6
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b8      	blx	r7
 80051d6:	3001      	adds	r0, #1
 80051d8:	f43f af45 	beq.w	8005066 <_printf_float+0xba>
 80051dc:	f04f 0800 	mov.w	r8, #0
 80051e0:	f104 091a 	add.w	r9, r4, #26
 80051e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e6:	3b01      	subs	r3, #1
 80051e8:	4543      	cmp	r3, r8
 80051ea:	dc09      	bgt.n	8005200 <_printf_float+0x254>
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	079b      	lsls	r3, r3, #30
 80051f0:	f100 8103 	bmi.w	80053fa <_printf_float+0x44e>
 80051f4:	68e0      	ldr	r0, [r4, #12]
 80051f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051f8:	4298      	cmp	r0, r3
 80051fa:	bfb8      	it	lt
 80051fc:	4618      	movlt	r0, r3
 80051fe:	e734      	b.n	800506a <_printf_float+0xbe>
 8005200:	2301      	movs	r3, #1
 8005202:	464a      	mov	r2, r9
 8005204:	4631      	mov	r1, r6
 8005206:	4628      	mov	r0, r5
 8005208:	47b8      	blx	r7
 800520a:	3001      	adds	r0, #1
 800520c:	f43f af2b 	beq.w	8005066 <_printf_float+0xba>
 8005210:	f108 0801 	add.w	r8, r8, #1
 8005214:	e7e6      	b.n	80051e4 <_printf_float+0x238>
 8005216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005218:	2b00      	cmp	r3, #0
 800521a:	dc2b      	bgt.n	8005274 <_printf_float+0x2c8>
 800521c:	2301      	movs	r3, #1
 800521e:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <_printf_float+0x30c>)
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f af1d 	beq.w	8005066 <_printf_float+0xba>
 800522c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522e:	b923      	cbnz	r3, 800523a <_printf_float+0x28e>
 8005230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005232:	b913      	cbnz	r3, 800523a <_printf_float+0x28e>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	07d9      	lsls	r1, r3, #31
 8005238:	d5d8      	bpl.n	80051ec <_printf_float+0x240>
 800523a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800523e:	4631      	mov	r1, r6
 8005240:	4628      	mov	r0, r5
 8005242:	47b8      	blx	r7
 8005244:	3001      	adds	r0, #1
 8005246:	f43f af0e 	beq.w	8005066 <_printf_float+0xba>
 800524a:	f04f 0900 	mov.w	r9, #0
 800524e:	f104 0a1a 	add.w	sl, r4, #26
 8005252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005254:	425b      	negs	r3, r3
 8005256:	454b      	cmp	r3, r9
 8005258:	dc01      	bgt.n	800525e <_printf_float+0x2b2>
 800525a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800525c:	e794      	b.n	8005188 <_printf_float+0x1dc>
 800525e:	2301      	movs	r3, #1
 8005260:	4652      	mov	r2, sl
 8005262:	4631      	mov	r1, r6
 8005264:	4628      	mov	r0, r5
 8005266:	47b8      	blx	r7
 8005268:	3001      	adds	r0, #1
 800526a:	f43f aefc 	beq.w	8005066 <_printf_float+0xba>
 800526e:	f109 0901 	add.w	r9, r9, #1
 8005272:	e7ee      	b.n	8005252 <_printf_float+0x2a6>
 8005274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005276:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005278:	429a      	cmp	r2, r3
 800527a:	bfa8      	it	ge
 800527c:	461a      	movge	r2, r3
 800527e:	2a00      	cmp	r2, #0
 8005280:	4691      	mov	r9, r2
 8005282:	dd07      	ble.n	8005294 <_printf_float+0x2e8>
 8005284:	4613      	mov	r3, r2
 8005286:	4631      	mov	r1, r6
 8005288:	4642      	mov	r2, r8
 800528a:	4628      	mov	r0, r5
 800528c:	47b8      	blx	r7
 800528e:	3001      	adds	r0, #1
 8005290:	f43f aee9 	beq.w	8005066 <_printf_float+0xba>
 8005294:	f104 031a 	add.w	r3, r4, #26
 8005298:	f04f 0b00 	mov.w	fp, #0
 800529c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052a0:	9306      	str	r3, [sp, #24]
 80052a2:	e015      	b.n	80052d0 <_printf_float+0x324>
 80052a4:	7fefffff 	.word	0x7fefffff
 80052a8:	08006a44 	.word	0x08006a44
 80052ac:	08006a40 	.word	0x08006a40
 80052b0:	08006a4c 	.word	0x08006a4c
 80052b4:	08006a48 	.word	0x08006a48
 80052b8:	08006a50 	.word	0x08006a50
 80052bc:	2301      	movs	r3, #1
 80052be:	9a06      	ldr	r2, [sp, #24]
 80052c0:	4631      	mov	r1, r6
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f aecd 	beq.w	8005066 <_printf_float+0xba>
 80052cc:	f10b 0b01 	add.w	fp, fp, #1
 80052d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80052d4:	ebaa 0309 	sub.w	r3, sl, r9
 80052d8:	455b      	cmp	r3, fp
 80052da:	dcef      	bgt.n	80052bc <_printf_float+0x310>
 80052dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e0:	429a      	cmp	r2, r3
 80052e2:	44d0      	add	r8, sl
 80052e4:	db15      	blt.n	8005312 <_printf_float+0x366>
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	07da      	lsls	r2, r3, #31
 80052ea:	d412      	bmi.n	8005312 <_printf_float+0x366>
 80052ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052f0:	eba3 020a 	sub.w	r2, r3, sl
 80052f4:	eba3 0a01 	sub.w	sl, r3, r1
 80052f8:	4592      	cmp	sl, r2
 80052fa:	bfa8      	it	ge
 80052fc:	4692      	movge	sl, r2
 80052fe:	f1ba 0f00 	cmp.w	sl, #0
 8005302:	dc0e      	bgt.n	8005322 <_printf_float+0x376>
 8005304:	f04f 0800 	mov.w	r8, #0
 8005308:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800530c:	f104 091a 	add.w	r9, r4, #26
 8005310:	e019      	b.n	8005346 <_printf_float+0x39a>
 8005312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005316:	4631      	mov	r1, r6
 8005318:	4628      	mov	r0, r5
 800531a:	47b8      	blx	r7
 800531c:	3001      	adds	r0, #1
 800531e:	d1e5      	bne.n	80052ec <_printf_float+0x340>
 8005320:	e6a1      	b.n	8005066 <_printf_float+0xba>
 8005322:	4653      	mov	r3, sl
 8005324:	4642      	mov	r2, r8
 8005326:	4631      	mov	r1, r6
 8005328:	4628      	mov	r0, r5
 800532a:	47b8      	blx	r7
 800532c:	3001      	adds	r0, #1
 800532e:	d1e9      	bne.n	8005304 <_printf_float+0x358>
 8005330:	e699      	b.n	8005066 <_printf_float+0xba>
 8005332:	2301      	movs	r3, #1
 8005334:	464a      	mov	r2, r9
 8005336:	4631      	mov	r1, r6
 8005338:	4628      	mov	r0, r5
 800533a:	47b8      	blx	r7
 800533c:	3001      	adds	r0, #1
 800533e:	f43f ae92 	beq.w	8005066 <_printf_float+0xba>
 8005342:	f108 0801 	add.w	r8, r8, #1
 8005346:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	eba3 030a 	sub.w	r3, r3, sl
 8005350:	4543      	cmp	r3, r8
 8005352:	dcee      	bgt.n	8005332 <_printf_float+0x386>
 8005354:	e74a      	b.n	80051ec <_printf_float+0x240>
 8005356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005358:	2a01      	cmp	r2, #1
 800535a:	dc01      	bgt.n	8005360 <_printf_float+0x3b4>
 800535c:	07db      	lsls	r3, r3, #31
 800535e:	d53a      	bpl.n	80053d6 <_printf_float+0x42a>
 8005360:	2301      	movs	r3, #1
 8005362:	4642      	mov	r2, r8
 8005364:	4631      	mov	r1, r6
 8005366:	4628      	mov	r0, r5
 8005368:	47b8      	blx	r7
 800536a:	3001      	adds	r0, #1
 800536c:	f43f ae7b 	beq.w	8005066 <_printf_float+0xba>
 8005370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005374:	4631      	mov	r1, r6
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	f108 0801 	add.w	r8, r8, #1
 8005380:	f43f ae71 	beq.w	8005066 <_printf_float+0xba>
 8005384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005386:	2200      	movs	r2, #0
 8005388:	f103 3aff 	add.w	sl, r3, #4294967295
 800538c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005390:	2300      	movs	r3, #0
 8005392:	f7fb fb45 	bl	8000a20 <__aeabi_dcmpeq>
 8005396:	b9c8      	cbnz	r0, 80053cc <_printf_float+0x420>
 8005398:	4653      	mov	r3, sl
 800539a:	4642      	mov	r2, r8
 800539c:	4631      	mov	r1, r6
 800539e:	4628      	mov	r0, r5
 80053a0:	47b8      	blx	r7
 80053a2:	3001      	adds	r0, #1
 80053a4:	d10e      	bne.n	80053c4 <_printf_float+0x418>
 80053a6:	e65e      	b.n	8005066 <_printf_float+0xba>
 80053a8:	2301      	movs	r3, #1
 80053aa:	4652      	mov	r2, sl
 80053ac:	4631      	mov	r1, r6
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b8      	blx	r7
 80053b2:	3001      	adds	r0, #1
 80053b4:	f43f ae57 	beq.w	8005066 <_printf_float+0xba>
 80053b8:	f108 0801 	add.w	r8, r8, #1
 80053bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053be:	3b01      	subs	r3, #1
 80053c0:	4543      	cmp	r3, r8
 80053c2:	dcf1      	bgt.n	80053a8 <_printf_float+0x3fc>
 80053c4:	464b      	mov	r3, r9
 80053c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053ca:	e6de      	b.n	800518a <_printf_float+0x1de>
 80053cc:	f04f 0800 	mov.w	r8, #0
 80053d0:	f104 0a1a 	add.w	sl, r4, #26
 80053d4:	e7f2      	b.n	80053bc <_printf_float+0x410>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e7df      	b.n	800539a <_printf_float+0x3ee>
 80053da:	2301      	movs	r3, #1
 80053dc:	464a      	mov	r2, r9
 80053de:	4631      	mov	r1, r6
 80053e0:	4628      	mov	r0, r5
 80053e2:	47b8      	blx	r7
 80053e4:	3001      	adds	r0, #1
 80053e6:	f43f ae3e 	beq.w	8005066 <_printf_float+0xba>
 80053ea:	f108 0801 	add.w	r8, r8, #1
 80053ee:	68e3      	ldr	r3, [r4, #12]
 80053f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	4543      	cmp	r3, r8
 80053f6:	dcf0      	bgt.n	80053da <_printf_float+0x42e>
 80053f8:	e6fc      	b.n	80051f4 <_printf_float+0x248>
 80053fa:	f04f 0800 	mov.w	r8, #0
 80053fe:	f104 0919 	add.w	r9, r4, #25
 8005402:	e7f4      	b.n	80053ee <_printf_float+0x442>
 8005404:	2900      	cmp	r1, #0
 8005406:	f43f ae8b 	beq.w	8005120 <_printf_float+0x174>
 800540a:	2300      	movs	r3, #0
 800540c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005410:	ab09      	add	r3, sp, #36	; 0x24
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	ec49 8b10 	vmov	d0, r8, r9
 8005418:	6022      	str	r2, [r4, #0]
 800541a:	f8cd a004 	str.w	sl, [sp, #4]
 800541e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005422:	4628      	mov	r0, r5
 8005424:	f7ff fd2d 	bl	8004e82 <__cvt>
 8005428:	4680      	mov	r8, r0
 800542a:	e648      	b.n	80050be <_printf_float+0x112>

0800542c <_printf_common>:
 800542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005430:	4691      	mov	r9, r2
 8005432:	461f      	mov	r7, r3
 8005434:	688a      	ldr	r2, [r1, #8]
 8005436:	690b      	ldr	r3, [r1, #16]
 8005438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800543c:	4293      	cmp	r3, r2
 800543e:	bfb8      	it	lt
 8005440:	4613      	movlt	r3, r2
 8005442:	f8c9 3000 	str.w	r3, [r9]
 8005446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800544a:	4606      	mov	r6, r0
 800544c:	460c      	mov	r4, r1
 800544e:	b112      	cbz	r2, 8005456 <_printf_common+0x2a>
 8005450:	3301      	adds	r3, #1
 8005452:	f8c9 3000 	str.w	r3, [r9]
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	0699      	lsls	r1, r3, #26
 800545a:	bf42      	ittt	mi
 800545c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005460:	3302      	addmi	r3, #2
 8005462:	f8c9 3000 	strmi.w	r3, [r9]
 8005466:	6825      	ldr	r5, [r4, #0]
 8005468:	f015 0506 	ands.w	r5, r5, #6
 800546c:	d107      	bne.n	800547e <_printf_common+0x52>
 800546e:	f104 0a19 	add.w	sl, r4, #25
 8005472:	68e3      	ldr	r3, [r4, #12]
 8005474:	f8d9 2000 	ldr.w	r2, [r9]
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	42ab      	cmp	r3, r5
 800547c:	dc28      	bgt.n	80054d0 <_printf_common+0xa4>
 800547e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	3300      	adds	r3, #0
 8005486:	bf18      	it	ne
 8005488:	2301      	movne	r3, #1
 800548a:	0692      	lsls	r2, r2, #26
 800548c:	d42d      	bmi.n	80054ea <_printf_common+0xbe>
 800548e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005492:	4639      	mov	r1, r7
 8005494:	4630      	mov	r0, r6
 8005496:	47c0      	blx	r8
 8005498:	3001      	adds	r0, #1
 800549a:	d020      	beq.n	80054de <_printf_common+0xb2>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	68e5      	ldr	r5, [r4, #12]
 80054a0:	f8d9 2000 	ldr.w	r2, [r9]
 80054a4:	f003 0306 	and.w	r3, r3, #6
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	bf08      	it	eq
 80054ac:	1aad      	subeq	r5, r5, r2
 80054ae:	68a3      	ldr	r3, [r4, #8]
 80054b0:	6922      	ldr	r2, [r4, #16]
 80054b2:	bf0c      	ite	eq
 80054b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b8:	2500      	movne	r5, #0
 80054ba:	4293      	cmp	r3, r2
 80054bc:	bfc4      	itt	gt
 80054be:	1a9b      	subgt	r3, r3, r2
 80054c0:	18ed      	addgt	r5, r5, r3
 80054c2:	f04f 0900 	mov.w	r9, #0
 80054c6:	341a      	adds	r4, #26
 80054c8:	454d      	cmp	r5, r9
 80054ca:	d11a      	bne.n	8005502 <_printf_common+0xd6>
 80054cc:	2000      	movs	r0, #0
 80054ce:	e008      	b.n	80054e2 <_printf_common+0xb6>
 80054d0:	2301      	movs	r3, #1
 80054d2:	4652      	mov	r2, sl
 80054d4:	4639      	mov	r1, r7
 80054d6:	4630      	mov	r0, r6
 80054d8:	47c0      	blx	r8
 80054da:	3001      	adds	r0, #1
 80054dc:	d103      	bne.n	80054e6 <_printf_common+0xba>
 80054de:	f04f 30ff 	mov.w	r0, #4294967295
 80054e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e6:	3501      	adds	r5, #1
 80054e8:	e7c3      	b.n	8005472 <_printf_common+0x46>
 80054ea:	18e1      	adds	r1, r4, r3
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	2030      	movs	r0, #48	; 0x30
 80054f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054f4:	4422      	add	r2, r4
 80054f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054fe:	3302      	adds	r3, #2
 8005500:	e7c5      	b.n	800548e <_printf_common+0x62>
 8005502:	2301      	movs	r3, #1
 8005504:	4622      	mov	r2, r4
 8005506:	4639      	mov	r1, r7
 8005508:	4630      	mov	r0, r6
 800550a:	47c0      	blx	r8
 800550c:	3001      	adds	r0, #1
 800550e:	d0e6      	beq.n	80054de <_printf_common+0xb2>
 8005510:	f109 0901 	add.w	r9, r9, #1
 8005514:	e7d8      	b.n	80054c8 <_printf_common+0x9c>

08005516 <quorem>:
 8005516:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551a:	6903      	ldr	r3, [r0, #16]
 800551c:	690c      	ldr	r4, [r1, #16]
 800551e:	42a3      	cmp	r3, r4
 8005520:	4680      	mov	r8, r0
 8005522:	f2c0 8082 	blt.w	800562a <quorem+0x114>
 8005526:	3c01      	subs	r4, #1
 8005528:	f101 0714 	add.w	r7, r1, #20
 800552c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005530:	f100 0614 	add.w	r6, r0, #20
 8005534:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005538:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800553c:	eb06 030c 	add.w	r3, r6, ip
 8005540:	3501      	adds	r5, #1
 8005542:	eb07 090c 	add.w	r9, r7, ip
 8005546:	9301      	str	r3, [sp, #4]
 8005548:	fbb0 f5f5 	udiv	r5, r0, r5
 800554c:	b395      	cbz	r5, 80055b4 <quorem+0x9e>
 800554e:	f04f 0a00 	mov.w	sl, #0
 8005552:	4638      	mov	r0, r7
 8005554:	46b6      	mov	lr, r6
 8005556:	46d3      	mov	fp, sl
 8005558:	f850 2b04 	ldr.w	r2, [r0], #4
 800555c:	b293      	uxth	r3, r2
 800555e:	fb05 a303 	mla	r3, r5, r3, sl
 8005562:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005566:	b29b      	uxth	r3, r3
 8005568:	ebab 0303 	sub.w	r3, fp, r3
 800556c:	0c12      	lsrs	r2, r2, #16
 800556e:	f8de b000 	ldr.w	fp, [lr]
 8005572:	fb05 a202 	mla	r2, r5, r2, sl
 8005576:	fa13 f38b 	uxtah	r3, r3, fp
 800557a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800557e:	fa1f fb82 	uxth.w	fp, r2
 8005582:	f8de 2000 	ldr.w	r2, [lr]
 8005586:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800558a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800558e:	b29b      	uxth	r3, r3
 8005590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005594:	4581      	cmp	r9, r0
 8005596:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800559a:	f84e 3b04 	str.w	r3, [lr], #4
 800559e:	d2db      	bcs.n	8005558 <quorem+0x42>
 80055a0:	f856 300c 	ldr.w	r3, [r6, ip]
 80055a4:	b933      	cbnz	r3, 80055b4 <quorem+0x9e>
 80055a6:	9b01      	ldr	r3, [sp, #4]
 80055a8:	3b04      	subs	r3, #4
 80055aa:	429e      	cmp	r6, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	d330      	bcc.n	8005612 <quorem+0xfc>
 80055b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80055b4:	4640      	mov	r0, r8
 80055b6:	f001 f831 	bl	800661c <__mcmp>
 80055ba:	2800      	cmp	r0, #0
 80055bc:	db25      	blt.n	800560a <quorem+0xf4>
 80055be:	3501      	adds	r5, #1
 80055c0:	4630      	mov	r0, r6
 80055c2:	f04f 0c00 	mov.w	ip, #0
 80055c6:	f857 2b04 	ldr.w	r2, [r7], #4
 80055ca:	f8d0 e000 	ldr.w	lr, [r0]
 80055ce:	b293      	uxth	r3, r2
 80055d0:	ebac 0303 	sub.w	r3, ip, r3
 80055d4:	0c12      	lsrs	r2, r2, #16
 80055d6:	fa13 f38e 	uxtah	r3, r3, lr
 80055da:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055e8:	45b9      	cmp	r9, r7
 80055ea:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055ee:	f840 3b04 	str.w	r3, [r0], #4
 80055f2:	d2e8      	bcs.n	80055c6 <quorem+0xb0>
 80055f4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80055f8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80055fc:	b92a      	cbnz	r2, 800560a <quorem+0xf4>
 80055fe:	3b04      	subs	r3, #4
 8005600:	429e      	cmp	r6, r3
 8005602:	461a      	mov	r2, r3
 8005604:	d30b      	bcc.n	800561e <quorem+0x108>
 8005606:	f8c8 4010 	str.w	r4, [r8, #16]
 800560a:	4628      	mov	r0, r5
 800560c:	b003      	add	sp, #12
 800560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	3b04      	subs	r3, #4
 8005616:	2a00      	cmp	r2, #0
 8005618:	d1ca      	bne.n	80055b0 <quorem+0x9a>
 800561a:	3c01      	subs	r4, #1
 800561c:	e7c5      	b.n	80055aa <quorem+0x94>
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	3b04      	subs	r3, #4
 8005622:	2a00      	cmp	r2, #0
 8005624:	d1ef      	bne.n	8005606 <quorem+0xf0>
 8005626:	3c01      	subs	r4, #1
 8005628:	e7ea      	b.n	8005600 <quorem+0xea>
 800562a:	2000      	movs	r0, #0
 800562c:	e7ee      	b.n	800560c <quorem+0xf6>
	...

08005630 <_dtoa_r>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	ec57 6b10 	vmov	r6, r7, d0
 8005638:	b097      	sub	sp, #92	; 0x5c
 800563a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800563c:	9106      	str	r1, [sp, #24]
 800563e:	4604      	mov	r4, r0
 8005640:	920b      	str	r2, [sp, #44]	; 0x2c
 8005642:	9312      	str	r3, [sp, #72]	; 0x48
 8005644:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005648:	e9cd 6700 	strd	r6, r7, [sp]
 800564c:	b93d      	cbnz	r5, 800565e <_dtoa_r+0x2e>
 800564e:	2010      	movs	r0, #16
 8005650:	f000 fdb4 	bl	80061bc <malloc>
 8005654:	6260      	str	r0, [r4, #36]	; 0x24
 8005656:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800565a:	6005      	str	r5, [r0, #0]
 800565c:	60c5      	str	r5, [r0, #12]
 800565e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005660:	6819      	ldr	r1, [r3, #0]
 8005662:	b151      	cbz	r1, 800567a <_dtoa_r+0x4a>
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	604a      	str	r2, [r1, #4]
 8005668:	2301      	movs	r3, #1
 800566a:	4093      	lsls	r3, r2
 800566c:	608b      	str	r3, [r1, #8]
 800566e:	4620      	mov	r0, r4
 8005670:	f000 fdf2 	bl	8006258 <_Bfree>
 8005674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	1e3b      	subs	r3, r7, #0
 800567c:	bfbb      	ittet	lt
 800567e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005682:	9301      	strlt	r3, [sp, #4]
 8005684:	2300      	movge	r3, #0
 8005686:	2201      	movlt	r2, #1
 8005688:	bfac      	ite	ge
 800568a:	f8c8 3000 	strge.w	r3, [r8]
 800568e:	f8c8 2000 	strlt.w	r2, [r8]
 8005692:	4baf      	ldr	r3, [pc, #700]	; (8005950 <_dtoa_r+0x320>)
 8005694:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005698:	ea33 0308 	bics.w	r3, r3, r8
 800569c:	d114      	bne.n	80056c8 <_dtoa_r+0x98>
 800569e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	9b00      	ldr	r3, [sp, #0]
 80056a8:	b923      	cbnz	r3, 80056b4 <_dtoa_r+0x84>
 80056aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f000 8542 	beq.w	8006138 <_dtoa_r+0xb08>
 80056b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005964 <_dtoa_r+0x334>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8544 	beq.w	8006148 <_dtoa_r+0xb18>
 80056c0:	f10b 0303 	add.w	r3, fp, #3
 80056c4:	f000 bd3e 	b.w	8006144 <_dtoa_r+0xb14>
 80056c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	4630      	mov	r0, r6
 80056d2:	4639      	mov	r1, r7
 80056d4:	f7fb f9a4 	bl	8000a20 <__aeabi_dcmpeq>
 80056d8:	4681      	mov	r9, r0
 80056da:	b168      	cbz	r0, 80056f8 <_dtoa_r+0xc8>
 80056dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056de:	2301      	movs	r3, #1
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8524 	beq.w	8006132 <_dtoa_r+0xb02>
 80056ea:	4b9a      	ldr	r3, [pc, #616]	; (8005954 <_dtoa_r+0x324>)
 80056ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056ee:	f103 3bff 	add.w	fp, r3, #4294967295
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	f000 bd28 	b.w	8006148 <_dtoa_r+0xb18>
 80056f8:	aa14      	add	r2, sp, #80	; 0x50
 80056fa:	a915      	add	r1, sp, #84	; 0x54
 80056fc:	ec47 6b10 	vmov	d0, r6, r7
 8005700:	4620      	mov	r0, r4
 8005702:	f001 f802 	bl	800670a <__d2b>
 8005706:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800570a:	9004      	str	r0, [sp, #16]
 800570c:	2d00      	cmp	r5, #0
 800570e:	d07c      	beq.n	800580a <_dtoa_r+0x1da>
 8005710:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005714:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005718:	46b2      	mov	sl, r6
 800571a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800571e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005722:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005726:	2200      	movs	r2, #0
 8005728:	4b8b      	ldr	r3, [pc, #556]	; (8005958 <_dtoa_r+0x328>)
 800572a:	4650      	mov	r0, sl
 800572c:	4659      	mov	r1, fp
 800572e:	f7fa fd57 	bl	80001e0 <__aeabi_dsub>
 8005732:	a381      	add	r3, pc, #516	; (adr r3, 8005938 <_dtoa_r+0x308>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f7fa ff0a 	bl	8000550 <__aeabi_dmul>
 800573c:	a380      	add	r3, pc, #512	; (adr r3, 8005940 <_dtoa_r+0x310>)
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	f7fa fd4f 	bl	80001e4 <__adddf3>
 8005746:	4606      	mov	r6, r0
 8005748:	4628      	mov	r0, r5
 800574a:	460f      	mov	r7, r1
 800574c:	f7fa fe96 	bl	800047c <__aeabi_i2d>
 8005750:	a37d      	add	r3, pc, #500	; (adr r3, 8005948 <_dtoa_r+0x318>)
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	f7fa fefb 	bl	8000550 <__aeabi_dmul>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4630      	mov	r0, r6
 8005760:	4639      	mov	r1, r7
 8005762:	f7fa fd3f 	bl	80001e4 <__adddf3>
 8005766:	4606      	mov	r6, r0
 8005768:	460f      	mov	r7, r1
 800576a:	f7fb f9a1 	bl	8000ab0 <__aeabi_d2iz>
 800576e:	2200      	movs	r2, #0
 8005770:	4682      	mov	sl, r0
 8005772:	2300      	movs	r3, #0
 8005774:	4630      	mov	r0, r6
 8005776:	4639      	mov	r1, r7
 8005778:	f7fb f95c 	bl	8000a34 <__aeabi_dcmplt>
 800577c:	b148      	cbz	r0, 8005792 <_dtoa_r+0x162>
 800577e:	4650      	mov	r0, sl
 8005780:	f7fa fe7c 	bl	800047c <__aeabi_i2d>
 8005784:	4632      	mov	r2, r6
 8005786:	463b      	mov	r3, r7
 8005788:	f7fb f94a 	bl	8000a20 <__aeabi_dcmpeq>
 800578c:	b908      	cbnz	r0, 8005792 <_dtoa_r+0x162>
 800578e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005792:	f1ba 0f16 	cmp.w	sl, #22
 8005796:	d859      	bhi.n	800584c <_dtoa_r+0x21c>
 8005798:	4970      	ldr	r1, [pc, #448]	; (800595c <_dtoa_r+0x32c>)
 800579a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800579e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057a6:	f7fb f963 	bl	8000a70 <__aeabi_dcmpgt>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d050      	beq.n	8005850 <_dtoa_r+0x220>
 80057ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057b2:	2300      	movs	r3, #0
 80057b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80057b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057b8:	1b5d      	subs	r5, r3, r5
 80057ba:	f1b5 0801 	subs.w	r8, r5, #1
 80057be:	bf49      	itett	mi
 80057c0:	f1c5 0301 	rsbmi	r3, r5, #1
 80057c4:	2300      	movpl	r3, #0
 80057c6:	9305      	strmi	r3, [sp, #20]
 80057c8:	f04f 0800 	movmi.w	r8, #0
 80057cc:	bf58      	it	pl
 80057ce:	9305      	strpl	r3, [sp, #20]
 80057d0:	f1ba 0f00 	cmp.w	sl, #0
 80057d4:	db3e      	blt.n	8005854 <_dtoa_r+0x224>
 80057d6:	2300      	movs	r3, #0
 80057d8:	44d0      	add	r8, sl
 80057da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80057de:	9307      	str	r3, [sp, #28]
 80057e0:	9b06      	ldr	r3, [sp, #24]
 80057e2:	2b09      	cmp	r3, #9
 80057e4:	f200 8090 	bhi.w	8005908 <_dtoa_r+0x2d8>
 80057e8:	2b05      	cmp	r3, #5
 80057ea:	bfc4      	itt	gt
 80057ec:	3b04      	subgt	r3, #4
 80057ee:	9306      	strgt	r3, [sp, #24]
 80057f0:	9b06      	ldr	r3, [sp, #24]
 80057f2:	f1a3 0302 	sub.w	r3, r3, #2
 80057f6:	bfcc      	ite	gt
 80057f8:	2500      	movgt	r5, #0
 80057fa:	2501      	movle	r5, #1
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	f200 808f 	bhi.w	8005920 <_dtoa_r+0x2f0>
 8005802:	e8df f003 	tbb	[pc, r3]
 8005806:	7f7d      	.short	0x7f7d
 8005808:	7131      	.short	0x7131
 800580a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800580e:	441d      	add	r5, r3
 8005810:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005814:	2820      	cmp	r0, #32
 8005816:	dd13      	ble.n	8005840 <_dtoa_r+0x210>
 8005818:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800581c:	9b00      	ldr	r3, [sp, #0]
 800581e:	fa08 f800 	lsl.w	r8, r8, r0
 8005822:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005826:	fa23 f000 	lsr.w	r0, r3, r0
 800582a:	ea48 0000 	orr.w	r0, r8, r0
 800582e:	f7fa fe15 	bl	800045c <__aeabi_ui2d>
 8005832:	2301      	movs	r3, #1
 8005834:	4682      	mov	sl, r0
 8005836:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800583a:	3d01      	subs	r5, #1
 800583c:	9313      	str	r3, [sp, #76]	; 0x4c
 800583e:	e772      	b.n	8005726 <_dtoa_r+0xf6>
 8005840:	9b00      	ldr	r3, [sp, #0]
 8005842:	f1c0 0020 	rsb	r0, r0, #32
 8005846:	fa03 f000 	lsl.w	r0, r3, r0
 800584a:	e7f0      	b.n	800582e <_dtoa_r+0x1fe>
 800584c:	2301      	movs	r3, #1
 800584e:	e7b1      	b.n	80057b4 <_dtoa_r+0x184>
 8005850:	900f      	str	r0, [sp, #60]	; 0x3c
 8005852:	e7b0      	b.n	80057b6 <_dtoa_r+0x186>
 8005854:	9b05      	ldr	r3, [sp, #20]
 8005856:	eba3 030a 	sub.w	r3, r3, sl
 800585a:	9305      	str	r3, [sp, #20]
 800585c:	f1ca 0300 	rsb	r3, sl, #0
 8005860:	9307      	str	r3, [sp, #28]
 8005862:	2300      	movs	r3, #0
 8005864:	930e      	str	r3, [sp, #56]	; 0x38
 8005866:	e7bb      	b.n	80057e0 <_dtoa_r+0x1b0>
 8005868:	2301      	movs	r3, #1
 800586a:	930a      	str	r3, [sp, #40]	; 0x28
 800586c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd59      	ble.n	8005926 <_dtoa_r+0x2f6>
 8005872:	9302      	str	r3, [sp, #8]
 8005874:	4699      	mov	r9, r3
 8005876:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005878:	2200      	movs	r2, #0
 800587a:	6072      	str	r2, [r6, #4]
 800587c:	2204      	movs	r2, #4
 800587e:	f102 0014 	add.w	r0, r2, #20
 8005882:	4298      	cmp	r0, r3
 8005884:	6871      	ldr	r1, [r6, #4]
 8005886:	d953      	bls.n	8005930 <_dtoa_r+0x300>
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fcb1 	bl	80061f0 <_Balloc>
 800588e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005890:	6030      	str	r0, [r6, #0]
 8005892:	f1b9 0f0e 	cmp.w	r9, #14
 8005896:	f8d3 b000 	ldr.w	fp, [r3]
 800589a:	f200 80e6 	bhi.w	8005a6a <_dtoa_r+0x43a>
 800589e:	2d00      	cmp	r5, #0
 80058a0:	f000 80e3 	beq.w	8005a6a <_dtoa_r+0x43a>
 80058a4:	ed9d 7b00 	vldr	d7, [sp]
 80058a8:	f1ba 0f00 	cmp.w	sl, #0
 80058ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80058b0:	dd74      	ble.n	800599c <_dtoa_r+0x36c>
 80058b2:	4a2a      	ldr	r2, [pc, #168]	; (800595c <_dtoa_r+0x32c>)
 80058b4:	f00a 030f 	and.w	r3, sl, #15
 80058b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80058bc:	ed93 7b00 	vldr	d7, [r3]
 80058c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80058c4:	06f0      	lsls	r0, r6, #27
 80058c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80058ca:	d565      	bpl.n	8005998 <_dtoa_r+0x368>
 80058cc:	4b24      	ldr	r3, [pc, #144]	; (8005960 <_dtoa_r+0x330>)
 80058ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058d6:	f7fa ff65 	bl	80007a4 <__aeabi_ddiv>
 80058da:	e9cd 0100 	strd	r0, r1, [sp]
 80058de:	f006 060f 	and.w	r6, r6, #15
 80058e2:	2503      	movs	r5, #3
 80058e4:	4f1e      	ldr	r7, [pc, #120]	; (8005960 <_dtoa_r+0x330>)
 80058e6:	e04c      	b.n	8005982 <_dtoa_r+0x352>
 80058e8:	2301      	movs	r3, #1
 80058ea:	930a      	str	r3, [sp, #40]	; 0x28
 80058ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ee:	4453      	add	r3, sl
 80058f0:	f103 0901 	add.w	r9, r3, #1
 80058f4:	9302      	str	r3, [sp, #8]
 80058f6:	464b      	mov	r3, r9
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	bfb8      	it	lt
 80058fc:	2301      	movlt	r3, #1
 80058fe:	e7ba      	b.n	8005876 <_dtoa_r+0x246>
 8005900:	2300      	movs	r3, #0
 8005902:	e7b2      	b.n	800586a <_dtoa_r+0x23a>
 8005904:	2300      	movs	r3, #0
 8005906:	e7f0      	b.n	80058ea <_dtoa_r+0x2ba>
 8005908:	2501      	movs	r5, #1
 800590a:	2300      	movs	r3, #0
 800590c:	9306      	str	r3, [sp, #24]
 800590e:	950a      	str	r5, [sp, #40]	; 0x28
 8005910:	f04f 33ff 	mov.w	r3, #4294967295
 8005914:	9302      	str	r3, [sp, #8]
 8005916:	4699      	mov	r9, r3
 8005918:	2200      	movs	r2, #0
 800591a:	2312      	movs	r3, #18
 800591c:	920b      	str	r2, [sp, #44]	; 0x2c
 800591e:	e7aa      	b.n	8005876 <_dtoa_r+0x246>
 8005920:	2301      	movs	r3, #1
 8005922:	930a      	str	r3, [sp, #40]	; 0x28
 8005924:	e7f4      	b.n	8005910 <_dtoa_r+0x2e0>
 8005926:	2301      	movs	r3, #1
 8005928:	9302      	str	r3, [sp, #8]
 800592a:	4699      	mov	r9, r3
 800592c:	461a      	mov	r2, r3
 800592e:	e7f5      	b.n	800591c <_dtoa_r+0x2ec>
 8005930:	3101      	adds	r1, #1
 8005932:	6071      	str	r1, [r6, #4]
 8005934:	0052      	lsls	r2, r2, #1
 8005936:	e7a2      	b.n	800587e <_dtoa_r+0x24e>
 8005938:	636f4361 	.word	0x636f4361
 800593c:	3fd287a7 	.word	0x3fd287a7
 8005940:	8b60c8b3 	.word	0x8b60c8b3
 8005944:	3fc68a28 	.word	0x3fc68a28
 8005948:	509f79fb 	.word	0x509f79fb
 800594c:	3fd34413 	.word	0x3fd34413
 8005950:	7ff00000 	.word	0x7ff00000
 8005954:	08006a51 	.word	0x08006a51
 8005958:	3ff80000 	.word	0x3ff80000
 800595c:	08006a98 	.word	0x08006a98
 8005960:	08006a70 	.word	0x08006a70
 8005964:	08006a5b 	.word	0x08006a5b
 8005968:	07f1      	lsls	r1, r6, #31
 800596a:	d508      	bpl.n	800597e <_dtoa_r+0x34e>
 800596c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005974:	f7fa fdec 	bl	8000550 <__aeabi_dmul>
 8005978:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800597c:	3501      	adds	r5, #1
 800597e:	1076      	asrs	r6, r6, #1
 8005980:	3708      	adds	r7, #8
 8005982:	2e00      	cmp	r6, #0
 8005984:	d1f0      	bne.n	8005968 <_dtoa_r+0x338>
 8005986:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800598a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800598e:	f7fa ff09 	bl	80007a4 <__aeabi_ddiv>
 8005992:	e9cd 0100 	strd	r0, r1, [sp]
 8005996:	e01a      	b.n	80059ce <_dtoa_r+0x39e>
 8005998:	2502      	movs	r5, #2
 800599a:	e7a3      	b.n	80058e4 <_dtoa_r+0x2b4>
 800599c:	f000 80a0 	beq.w	8005ae0 <_dtoa_r+0x4b0>
 80059a0:	f1ca 0600 	rsb	r6, sl, #0
 80059a4:	4b9f      	ldr	r3, [pc, #636]	; (8005c24 <_dtoa_r+0x5f4>)
 80059a6:	4fa0      	ldr	r7, [pc, #640]	; (8005c28 <_dtoa_r+0x5f8>)
 80059a8:	f006 020f 	and.w	r2, r6, #15
 80059ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059b8:	f7fa fdca 	bl	8000550 <__aeabi_dmul>
 80059bc:	e9cd 0100 	strd	r0, r1, [sp]
 80059c0:	1136      	asrs	r6, r6, #4
 80059c2:	2300      	movs	r3, #0
 80059c4:	2502      	movs	r5, #2
 80059c6:	2e00      	cmp	r6, #0
 80059c8:	d17f      	bne.n	8005aca <_dtoa_r+0x49a>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e1      	bne.n	8005992 <_dtoa_r+0x362>
 80059ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 8087 	beq.w	8005ae4 <_dtoa_r+0x4b4>
 80059d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80059da:	2200      	movs	r2, #0
 80059dc:	4b93      	ldr	r3, [pc, #588]	; (8005c2c <_dtoa_r+0x5fc>)
 80059de:	4630      	mov	r0, r6
 80059e0:	4639      	mov	r1, r7
 80059e2:	f7fb f827 	bl	8000a34 <__aeabi_dcmplt>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d07c      	beq.n	8005ae4 <_dtoa_r+0x4b4>
 80059ea:	f1b9 0f00 	cmp.w	r9, #0
 80059ee:	d079      	beq.n	8005ae4 <_dtoa_r+0x4b4>
 80059f0:	9b02      	ldr	r3, [sp, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	dd35      	ble.n	8005a62 <_dtoa_r+0x432>
 80059f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80059fa:	9308      	str	r3, [sp, #32]
 80059fc:	4639      	mov	r1, r7
 80059fe:	2200      	movs	r2, #0
 8005a00:	4b8b      	ldr	r3, [pc, #556]	; (8005c30 <_dtoa_r+0x600>)
 8005a02:	4630      	mov	r0, r6
 8005a04:	f7fa fda4 	bl	8000550 <__aeabi_dmul>
 8005a08:	e9cd 0100 	strd	r0, r1, [sp]
 8005a0c:	9f02      	ldr	r7, [sp, #8]
 8005a0e:	3501      	adds	r5, #1
 8005a10:	4628      	mov	r0, r5
 8005a12:	f7fa fd33 	bl	800047c <__aeabi_i2d>
 8005a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a1a:	f7fa fd99 	bl	8000550 <__aeabi_dmul>
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4b84      	ldr	r3, [pc, #528]	; (8005c34 <_dtoa_r+0x604>)
 8005a22:	f7fa fbdf 	bl	80001e4 <__adddf3>
 8005a26:	4605      	mov	r5, r0
 8005a28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005a2c:	2f00      	cmp	r7, #0
 8005a2e:	d15d      	bne.n	8005aec <_dtoa_r+0x4bc>
 8005a30:	2200      	movs	r2, #0
 8005a32:	4b81      	ldr	r3, [pc, #516]	; (8005c38 <_dtoa_r+0x608>)
 8005a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a38:	f7fa fbd2 	bl	80001e0 <__aeabi_dsub>
 8005a3c:	462a      	mov	r2, r5
 8005a3e:	4633      	mov	r3, r6
 8005a40:	e9cd 0100 	strd	r0, r1, [sp]
 8005a44:	f7fb f814 	bl	8000a70 <__aeabi_dcmpgt>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	f040 8288 	bne.w	8005f5e <_dtoa_r+0x92e>
 8005a4e:	462a      	mov	r2, r5
 8005a50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a58:	f7fa ffec 	bl	8000a34 <__aeabi_dcmplt>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	f040 827c 	bne.w	8005f5a <_dtoa_r+0x92a>
 8005a62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a66:	e9cd 2300 	strd	r2, r3, [sp]
 8005a6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f2c0 8150 	blt.w	8005d12 <_dtoa_r+0x6e2>
 8005a72:	f1ba 0f0e 	cmp.w	sl, #14
 8005a76:	f300 814c 	bgt.w	8005d12 <_dtoa_r+0x6e2>
 8005a7a:	4b6a      	ldr	r3, [pc, #424]	; (8005c24 <_dtoa_r+0x5f4>)
 8005a7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a80:	ed93 7b00 	vldr	d7, [r3]
 8005a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a8c:	f280 80d8 	bge.w	8005c40 <_dtoa_r+0x610>
 8005a90:	f1b9 0f00 	cmp.w	r9, #0
 8005a94:	f300 80d4 	bgt.w	8005c40 <_dtoa_r+0x610>
 8005a98:	f040 825e 	bne.w	8005f58 <_dtoa_r+0x928>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	4b66      	ldr	r3, [pc, #408]	; (8005c38 <_dtoa_r+0x608>)
 8005aa0:	ec51 0b17 	vmov	r0, r1, d7
 8005aa4:	f7fa fd54 	bl	8000550 <__aeabi_dmul>
 8005aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aac:	f7fa ffd6 	bl	8000a5c <__aeabi_dcmpge>
 8005ab0:	464f      	mov	r7, r9
 8005ab2:	464e      	mov	r6, r9
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f040 8234 	bne.w	8005f22 <_dtoa_r+0x8f2>
 8005aba:	2331      	movs	r3, #49	; 0x31
 8005abc:	f10b 0501 	add.w	r5, fp, #1
 8005ac0:	f88b 3000 	strb.w	r3, [fp]
 8005ac4:	f10a 0a01 	add.w	sl, sl, #1
 8005ac8:	e22f      	b.n	8005f2a <_dtoa_r+0x8fa>
 8005aca:	07f2      	lsls	r2, r6, #31
 8005acc:	d505      	bpl.n	8005ada <_dtoa_r+0x4aa>
 8005ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad2:	f7fa fd3d 	bl	8000550 <__aeabi_dmul>
 8005ad6:	3501      	adds	r5, #1
 8005ad8:	2301      	movs	r3, #1
 8005ada:	1076      	asrs	r6, r6, #1
 8005adc:	3708      	adds	r7, #8
 8005ade:	e772      	b.n	80059c6 <_dtoa_r+0x396>
 8005ae0:	2502      	movs	r5, #2
 8005ae2:	e774      	b.n	80059ce <_dtoa_r+0x39e>
 8005ae4:	f8cd a020 	str.w	sl, [sp, #32]
 8005ae8:	464f      	mov	r7, r9
 8005aea:	e791      	b.n	8005a10 <_dtoa_r+0x3e0>
 8005aec:	4b4d      	ldr	r3, [pc, #308]	; (8005c24 <_dtoa_r+0x5f4>)
 8005aee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005af2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d047      	beq.n	8005b8c <_dtoa_r+0x55c>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	2000      	movs	r0, #0
 8005b02:	494e      	ldr	r1, [pc, #312]	; (8005c3c <_dtoa_r+0x60c>)
 8005b04:	f7fa fe4e 	bl	80007a4 <__aeabi_ddiv>
 8005b08:	462a      	mov	r2, r5
 8005b0a:	4633      	mov	r3, r6
 8005b0c:	f7fa fb68 	bl	80001e0 <__aeabi_dsub>
 8005b10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005b14:	465d      	mov	r5, fp
 8005b16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b1a:	f7fa ffc9 	bl	8000ab0 <__aeabi_d2iz>
 8005b1e:	4606      	mov	r6, r0
 8005b20:	f7fa fcac 	bl	800047c <__aeabi_i2d>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b2c:	f7fa fb58 	bl	80001e0 <__aeabi_dsub>
 8005b30:	3630      	adds	r6, #48	; 0x30
 8005b32:	f805 6b01 	strb.w	r6, [r5], #1
 8005b36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b3a:	e9cd 0100 	strd	r0, r1, [sp]
 8005b3e:	f7fa ff79 	bl	8000a34 <__aeabi_dcmplt>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d163      	bne.n	8005c0e <_dtoa_r+0x5de>
 8005b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	4937      	ldr	r1, [pc, #220]	; (8005c2c <_dtoa_r+0x5fc>)
 8005b4e:	f7fa fb47 	bl	80001e0 <__aeabi_dsub>
 8005b52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b56:	f7fa ff6d 	bl	8000a34 <__aeabi_dcmplt>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	f040 80b7 	bne.w	8005cce <_dtoa_r+0x69e>
 8005b60:	eba5 030b 	sub.w	r3, r5, fp
 8005b64:	429f      	cmp	r7, r3
 8005b66:	f77f af7c 	ble.w	8005a62 <_dtoa_r+0x432>
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	4b30      	ldr	r3, [pc, #192]	; (8005c30 <_dtoa_r+0x600>)
 8005b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b72:	f7fa fced 	bl	8000550 <__aeabi_dmul>
 8005b76:	2200      	movs	r2, #0
 8005b78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005b7c:	4b2c      	ldr	r3, [pc, #176]	; (8005c30 <_dtoa_r+0x600>)
 8005b7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b82:	f7fa fce5 	bl	8000550 <__aeabi_dmul>
 8005b86:	e9cd 0100 	strd	r0, r1, [sp]
 8005b8a:	e7c4      	b.n	8005b16 <_dtoa_r+0x4e6>
 8005b8c:	462a      	mov	r2, r5
 8005b8e:	4633      	mov	r3, r6
 8005b90:	f7fa fcde 	bl	8000550 <__aeabi_dmul>
 8005b94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005b98:	eb0b 0507 	add.w	r5, fp, r7
 8005b9c:	465e      	mov	r6, fp
 8005b9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ba2:	f7fa ff85 	bl	8000ab0 <__aeabi_d2iz>
 8005ba6:	4607      	mov	r7, r0
 8005ba8:	f7fa fc68 	bl	800047c <__aeabi_i2d>
 8005bac:	3730      	adds	r7, #48	; 0x30
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bb6:	f7fa fb13 	bl	80001e0 <__aeabi_dsub>
 8005bba:	f806 7b01 	strb.w	r7, [r6], #1
 8005bbe:	42ae      	cmp	r6, r5
 8005bc0:	e9cd 0100 	strd	r0, r1, [sp]
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	d126      	bne.n	8005c18 <_dtoa_r+0x5e8>
 8005bca:	4b1c      	ldr	r3, [pc, #112]	; (8005c3c <_dtoa_r+0x60c>)
 8005bcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bd0:	f7fa fb08 	bl	80001e4 <__adddf3>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bdc:	f7fa ff48 	bl	8000a70 <__aeabi_dcmpgt>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d174      	bne.n	8005cce <_dtoa_r+0x69e>
 8005be4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005be8:	2000      	movs	r0, #0
 8005bea:	4914      	ldr	r1, [pc, #80]	; (8005c3c <_dtoa_r+0x60c>)
 8005bec:	f7fa faf8 	bl	80001e0 <__aeabi_dsub>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bf8:	f7fa ff1c 	bl	8000a34 <__aeabi_dcmplt>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f43f af30 	beq.w	8005a62 <_dtoa_r+0x432>
 8005c02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c06:	2b30      	cmp	r3, #48	; 0x30
 8005c08:	f105 32ff 	add.w	r2, r5, #4294967295
 8005c0c:	d002      	beq.n	8005c14 <_dtoa_r+0x5e4>
 8005c0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005c12:	e04a      	b.n	8005caa <_dtoa_r+0x67a>
 8005c14:	4615      	mov	r5, r2
 8005c16:	e7f4      	b.n	8005c02 <_dtoa_r+0x5d2>
 8005c18:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <_dtoa_r+0x600>)
 8005c1a:	f7fa fc99 	bl	8000550 <__aeabi_dmul>
 8005c1e:	e9cd 0100 	strd	r0, r1, [sp]
 8005c22:	e7bc      	b.n	8005b9e <_dtoa_r+0x56e>
 8005c24:	08006a98 	.word	0x08006a98
 8005c28:	08006a70 	.word	0x08006a70
 8005c2c:	3ff00000 	.word	0x3ff00000
 8005c30:	40240000 	.word	0x40240000
 8005c34:	401c0000 	.word	0x401c0000
 8005c38:	40140000 	.word	0x40140000
 8005c3c:	3fe00000 	.word	0x3fe00000
 8005c40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005c44:	465d      	mov	r5, fp
 8005c46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	4639      	mov	r1, r7
 8005c4e:	f7fa fda9 	bl	80007a4 <__aeabi_ddiv>
 8005c52:	f7fa ff2d 	bl	8000ab0 <__aeabi_d2iz>
 8005c56:	4680      	mov	r8, r0
 8005c58:	f7fa fc10 	bl	800047c <__aeabi_i2d>
 8005c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c60:	f7fa fc76 	bl	8000550 <__aeabi_dmul>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005c70:	f7fa fab6 	bl	80001e0 <__aeabi_dsub>
 8005c74:	f805 6b01 	strb.w	r6, [r5], #1
 8005c78:	eba5 060b 	sub.w	r6, r5, fp
 8005c7c:	45b1      	cmp	r9, r6
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	d139      	bne.n	8005cf8 <_dtoa_r+0x6c8>
 8005c84:	f7fa faae 	bl	80001e4 <__adddf3>
 8005c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	460f      	mov	r7, r1
 8005c90:	f7fa feee 	bl	8000a70 <__aeabi_dcmpgt>
 8005c94:	b9c8      	cbnz	r0, 8005cca <_dtoa_r+0x69a>
 8005c96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	f7fa febf 	bl	8000a20 <__aeabi_dcmpeq>
 8005ca2:	b110      	cbz	r0, 8005caa <_dtoa_r+0x67a>
 8005ca4:	f018 0f01 	tst.w	r8, #1
 8005ca8:	d10f      	bne.n	8005cca <_dtoa_r+0x69a>
 8005caa:	9904      	ldr	r1, [sp, #16]
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 fad3 	bl	8006258 <_Bfree>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cb6:	702b      	strb	r3, [r5, #0]
 8005cb8:	f10a 0301 	add.w	r3, sl, #1
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 8241 	beq.w	8006148 <_dtoa_r+0xb18>
 8005cc6:	601d      	str	r5, [r3, #0]
 8005cc8:	e23e      	b.n	8006148 <_dtoa_r+0xb18>
 8005cca:	f8cd a020 	str.w	sl, [sp, #32]
 8005cce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005cd2:	2a39      	cmp	r2, #57	; 0x39
 8005cd4:	f105 33ff 	add.w	r3, r5, #4294967295
 8005cd8:	d108      	bne.n	8005cec <_dtoa_r+0x6bc>
 8005cda:	459b      	cmp	fp, r3
 8005cdc:	d10a      	bne.n	8005cf4 <_dtoa_r+0x6c4>
 8005cde:	9b08      	ldr	r3, [sp, #32]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	9308      	str	r3, [sp, #32]
 8005ce4:	2330      	movs	r3, #48	; 0x30
 8005ce6:	f88b 3000 	strb.w	r3, [fp]
 8005cea:	465b      	mov	r3, fp
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	3201      	adds	r2, #1
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	e78c      	b.n	8005c0e <_dtoa_r+0x5de>
 8005cf4:	461d      	mov	r5, r3
 8005cf6:	e7ea      	b.n	8005cce <_dtoa_r+0x69e>
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	4b9b      	ldr	r3, [pc, #620]	; (8005f68 <_dtoa_r+0x938>)
 8005cfc:	f7fa fc28 	bl	8000550 <__aeabi_dmul>
 8005d00:	2200      	movs	r2, #0
 8005d02:	2300      	movs	r3, #0
 8005d04:	4606      	mov	r6, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	f7fa fe8a 	bl	8000a20 <__aeabi_dcmpeq>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d09a      	beq.n	8005c46 <_dtoa_r+0x616>
 8005d10:	e7cb      	b.n	8005caa <_dtoa_r+0x67a>
 8005d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	f000 808b 	beq.w	8005e30 <_dtoa_r+0x800>
 8005d1a:	9a06      	ldr	r2, [sp, #24]
 8005d1c:	2a01      	cmp	r2, #1
 8005d1e:	dc6e      	bgt.n	8005dfe <_dtoa_r+0x7ce>
 8005d20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	d067      	beq.n	8005df6 <_dtoa_r+0x7c6>
 8005d26:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d2a:	9f07      	ldr	r7, [sp, #28]
 8005d2c:	9d05      	ldr	r5, [sp, #20]
 8005d2e:	9a05      	ldr	r2, [sp, #20]
 8005d30:	2101      	movs	r1, #1
 8005d32:	441a      	add	r2, r3
 8005d34:	4620      	mov	r0, r4
 8005d36:	9205      	str	r2, [sp, #20]
 8005d38:	4498      	add	r8, r3
 8005d3a:	f000 fb2d 	bl	8006398 <__i2b>
 8005d3e:	4606      	mov	r6, r0
 8005d40:	2d00      	cmp	r5, #0
 8005d42:	dd0c      	ble.n	8005d5e <_dtoa_r+0x72e>
 8005d44:	f1b8 0f00 	cmp.w	r8, #0
 8005d48:	dd09      	ble.n	8005d5e <_dtoa_r+0x72e>
 8005d4a:	4545      	cmp	r5, r8
 8005d4c:	9a05      	ldr	r2, [sp, #20]
 8005d4e:	462b      	mov	r3, r5
 8005d50:	bfa8      	it	ge
 8005d52:	4643      	movge	r3, r8
 8005d54:	1ad2      	subs	r2, r2, r3
 8005d56:	9205      	str	r2, [sp, #20]
 8005d58:	1aed      	subs	r5, r5, r3
 8005d5a:	eba8 0803 	sub.w	r8, r8, r3
 8005d5e:	9b07      	ldr	r3, [sp, #28]
 8005d60:	b1eb      	cbz	r3, 8005d9e <_dtoa_r+0x76e>
 8005d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d067      	beq.n	8005e38 <_dtoa_r+0x808>
 8005d68:	b18f      	cbz	r7, 8005d8e <_dtoa_r+0x75e>
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	463a      	mov	r2, r7
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fbb2 	bl	80064d8 <__pow5mult>
 8005d74:	9a04      	ldr	r2, [sp, #16]
 8005d76:	4601      	mov	r1, r0
 8005d78:	4606      	mov	r6, r0
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 fb15 	bl	80063aa <__multiply>
 8005d80:	9904      	ldr	r1, [sp, #16]
 8005d82:	9008      	str	r0, [sp, #32]
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fa67 	bl	8006258 <_Bfree>
 8005d8a:	9b08      	ldr	r3, [sp, #32]
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	9b07      	ldr	r3, [sp, #28]
 8005d90:	1bda      	subs	r2, r3, r7
 8005d92:	d004      	beq.n	8005d9e <_dtoa_r+0x76e>
 8005d94:	9904      	ldr	r1, [sp, #16]
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 fb9e 	bl	80064d8 <__pow5mult>
 8005d9c:	9004      	str	r0, [sp, #16]
 8005d9e:	2101      	movs	r1, #1
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 faf9 	bl	8006398 <__i2b>
 8005da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005da8:	4607      	mov	r7, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 81d0 	beq.w	8006150 <_dtoa_r+0xb20>
 8005db0:	461a      	mov	r2, r3
 8005db2:	4601      	mov	r1, r0
 8005db4:	4620      	mov	r0, r4
 8005db6:	f000 fb8f 	bl	80064d8 <__pow5mult>
 8005dba:	9b06      	ldr	r3, [sp, #24]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	4607      	mov	r7, r0
 8005dc0:	dc40      	bgt.n	8005e44 <_dtoa_r+0x814>
 8005dc2:	9b00      	ldr	r3, [sp, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d139      	bne.n	8005e3c <_dtoa_r+0x80c>
 8005dc8:	9b01      	ldr	r3, [sp, #4]
 8005dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d136      	bne.n	8005e40 <_dtoa_r+0x810>
 8005dd2:	9b01      	ldr	r3, [sp, #4]
 8005dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dd8:	0d1b      	lsrs	r3, r3, #20
 8005dda:	051b      	lsls	r3, r3, #20
 8005ddc:	b12b      	cbz	r3, 8005dea <_dtoa_r+0x7ba>
 8005dde:	9b05      	ldr	r3, [sp, #20]
 8005de0:	3301      	adds	r3, #1
 8005de2:	9305      	str	r3, [sp, #20]
 8005de4:	f108 0801 	add.w	r8, r8, #1
 8005de8:	2301      	movs	r3, #1
 8005dea:	9307      	str	r3, [sp, #28]
 8005dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d12a      	bne.n	8005e48 <_dtoa_r+0x818>
 8005df2:	2001      	movs	r0, #1
 8005df4:	e030      	b.n	8005e58 <_dtoa_r+0x828>
 8005df6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005df8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005dfc:	e795      	b.n	8005d2a <_dtoa_r+0x6fa>
 8005dfe:	9b07      	ldr	r3, [sp, #28]
 8005e00:	f109 37ff 	add.w	r7, r9, #4294967295
 8005e04:	42bb      	cmp	r3, r7
 8005e06:	bfbf      	itttt	lt
 8005e08:	9b07      	ldrlt	r3, [sp, #28]
 8005e0a:	9707      	strlt	r7, [sp, #28]
 8005e0c:	1afa      	sublt	r2, r7, r3
 8005e0e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005e10:	bfbb      	ittet	lt
 8005e12:	189b      	addlt	r3, r3, r2
 8005e14:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005e16:	1bdf      	subge	r7, r3, r7
 8005e18:	2700      	movlt	r7, #0
 8005e1a:	f1b9 0f00 	cmp.w	r9, #0
 8005e1e:	bfb5      	itete	lt
 8005e20:	9b05      	ldrlt	r3, [sp, #20]
 8005e22:	9d05      	ldrge	r5, [sp, #20]
 8005e24:	eba3 0509 	sublt.w	r5, r3, r9
 8005e28:	464b      	movge	r3, r9
 8005e2a:	bfb8      	it	lt
 8005e2c:	2300      	movlt	r3, #0
 8005e2e:	e77e      	b.n	8005d2e <_dtoa_r+0x6fe>
 8005e30:	9f07      	ldr	r7, [sp, #28]
 8005e32:	9d05      	ldr	r5, [sp, #20]
 8005e34:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005e36:	e783      	b.n	8005d40 <_dtoa_r+0x710>
 8005e38:	9a07      	ldr	r2, [sp, #28]
 8005e3a:	e7ab      	b.n	8005d94 <_dtoa_r+0x764>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e7d4      	b.n	8005dea <_dtoa_r+0x7ba>
 8005e40:	9b00      	ldr	r3, [sp, #0]
 8005e42:	e7d2      	b.n	8005dea <_dtoa_r+0x7ba>
 8005e44:	2300      	movs	r3, #0
 8005e46:	9307      	str	r3, [sp, #28]
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005e4e:	6918      	ldr	r0, [r3, #16]
 8005e50:	f000 fa54 	bl	80062fc <__hi0bits>
 8005e54:	f1c0 0020 	rsb	r0, r0, #32
 8005e58:	4440      	add	r0, r8
 8005e5a:	f010 001f 	ands.w	r0, r0, #31
 8005e5e:	d047      	beq.n	8005ef0 <_dtoa_r+0x8c0>
 8005e60:	f1c0 0320 	rsb	r3, r0, #32
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	dd3b      	ble.n	8005ee0 <_dtoa_r+0x8b0>
 8005e68:	9b05      	ldr	r3, [sp, #20]
 8005e6a:	f1c0 001c 	rsb	r0, r0, #28
 8005e6e:	4403      	add	r3, r0
 8005e70:	9305      	str	r3, [sp, #20]
 8005e72:	4405      	add	r5, r0
 8005e74:	4480      	add	r8, r0
 8005e76:	9b05      	ldr	r3, [sp, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	dd05      	ble.n	8005e88 <_dtoa_r+0x858>
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	9904      	ldr	r1, [sp, #16]
 8005e80:	4620      	mov	r0, r4
 8005e82:	f000 fb77 	bl	8006574 <__lshift>
 8005e86:	9004      	str	r0, [sp, #16]
 8005e88:	f1b8 0f00 	cmp.w	r8, #0
 8005e8c:	dd05      	ble.n	8005e9a <_dtoa_r+0x86a>
 8005e8e:	4639      	mov	r1, r7
 8005e90:	4642      	mov	r2, r8
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 fb6e 	bl	8006574 <__lshift>
 8005e98:	4607      	mov	r7, r0
 8005e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e9c:	b353      	cbz	r3, 8005ef4 <_dtoa_r+0x8c4>
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	9804      	ldr	r0, [sp, #16]
 8005ea2:	f000 fbbb 	bl	800661c <__mcmp>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	da24      	bge.n	8005ef4 <_dtoa_r+0x8c4>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	220a      	movs	r2, #10
 8005eae:	9904      	ldr	r1, [sp, #16]
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 f9e8 	bl	8006286 <__multadd>
 8005eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb8:	9004      	str	r0, [sp, #16]
 8005eba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 814d 	beq.w	800615e <_dtoa_r+0xb2e>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	220a      	movs	r2, #10
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 f9db 	bl	8006286 <__multadd>
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	dc4f      	bgt.n	8005f78 <_dtoa_r+0x948>
 8005ed8:	9b06      	ldr	r3, [sp, #24]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	dd4c      	ble.n	8005f78 <_dtoa_r+0x948>
 8005ede:	e011      	b.n	8005f04 <_dtoa_r+0x8d4>
 8005ee0:	d0c9      	beq.n	8005e76 <_dtoa_r+0x846>
 8005ee2:	9a05      	ldr	r2, [sp, #20]
 8005ee4:	331c      	adds	r3, #28
 8005ee6:	441a      	add	r2, r3
 8005ee8:	9205      	str	r2, [sp, #20]
 8005eea:	441d      	add	r5, r3
 8005eec:	4498      	add	r8, r3
 8005eee:	e7c2      	b.n	8005e76 <_dtoa_r+0x846>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	e7f6      	b.n	8005ee2 <_dtoa_r+0x8b2>
 8005ef4:	f1b9 0f00 	cmp.w	r9, #0
 8005ef8:	dc38      	bgt.n	8005f6c <_dtoa_r+0x93c>
 8005efa:	9b06      	ldr	r3, [sp, #24]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	dd35      	ble.n	8005f6c <_dtoa_r+0x93c>
 8005f00:	f8cd 9008 	str.w	r9, [sp, #8]
 8005f04:	9b02      	ldr	r3, [sp, #8]
 8005f06:	b963      	cbnz	r3, 8005f22 <_dtoa_r+0x8f2>
 8005f08:	4639      	mov	r1, r7
 8005f0a:	2205      	movs	r2, #5
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 f9ba 	bl	8006286 <__multadd>
 8005f12:	4601      	mov	r1, r0
 8005f14:	4607      	mov	r7, r0
 8005f16:	9804      	ldr	r0, [sp, #16]
 8005f18:	f000 fb80 	bl	800661c <__mcmp>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f73f adcc 	bgt.w	8005aba <_dtoa_r+0x48a>
 8005f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f24:	465d      	mov	r5, fp
 8005f26:	ea6f 0a03 	mvn.w	sl, r3
 8005f2a:	f04f 0900 	mov.w	r9, #0
 8005f2e:	4639      	mov	r1, r7
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 f991 	bl	8006258 <_Bfree>
 8005f36:	2e00      	cmp	r6, #0
 8005f38:	f43f aeb7 	beq.w	8005caa <_dtoa_r+0x67a>
 8005f3c:	f1b9 0f00 	cmp.w	r9, #0
 8005f40:	d005      	beq.n	8005f4e <_dtoa_r+0x91e>
 8005f42:	45b1      	cmp	r9, r6
 8005f44:	d003      	beq.n	8005f4e <_dtoa_r+0x91e>
 8005f46:	4649      	mov	r1, r9
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 f985 	bl	8006258 <_Bfree>
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 f981 	bl	8006258 <_Bfree>
 8005f56:	e6a8      	b.n	8005caa <_dtoa_r+0x67a>
 8005f58:	2700      	movs	r7, #0
 8005f5a:	463e      	mov	r6, r7
 8005f5c:	e7e1      	b.n	8005f22 <_dtoa_r+0x8f2>
 8005f5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005f62:	463e      	mov	r6, r7
 8005f64:	e5a9      	b.n	8005aba <_dtoa_r+0x48a>
 8005f66:	bf00      	nop
 8005f68:	40240000 	.word	0x40240000
 8005f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80fa 	beq.w	800616c <_dtoa_r+0xb3c>
 8005f78:	2d00      	cmp	r5, #0
 8005f7a:	dd05      	ble.n	8005f88 <_dtoa_r+0x958>
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	462a      	mov	r2, r5
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 faf7 	bl	8006574 <__lshift>
 8005f86:	4606      	mov	r6, r0
 8005f88:	9b07      	ldr	r3, [sp, #28]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d04c      	beq.n	8006028 <_dtoa_r+0x9f8>
 8005f8e:	6871      	ldr	r1, [r6, #4]
 8005f90:	4620      	mov	r0, r4
 8005f92:	f000 f92d 	bl	80061f0 <_Balloc>
 8005f96:	6932      	ldr	r2, [r6, #16]
 8005f98:	3202      	adds	r2, #2
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	0092      	lsls	r2, r2, #2
 8005f9e:	f106 010c 	add.w	r1, r6, #12
 8005fa2:	300c      	adds	r0, #12
 8005fa4:	f7fe ff5a 	bl	8004e5c <memcpy>
 8005fa8:	2201      	movs	r2, #1
 8005faa:	4629      	mov	r1, r5
 8005fac:	4620      	mov	r0, r4
 8005fae:	f000 fae1 	bl	8006574 <__lshift>
 8005fb2:	9b00      	ldr	r3, [sp, #0]
 8005fb4:	f8cd b014 	str.w	fp, [sp, #20]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	46b1      	mov	r9, r6
 8005fbe:	9307      	str	r3, [sp, #28]
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	9804      	ldr	r0, [sp, #16]
 8005fc6:	f7ff faa6 	bl	8005516 <quorem>
 8005fca:	4649      	mov	r1, r9
 8005fcc:	4605      	mov	r5, r0
 8005fce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005fd2:	9804      	ldr	r0, [sp, #16]
 8005fd4:	f000 fb22 	bl	800661c <__mcmp>
 8005fd8:	4632      	mov	r2, r6
 8005fda:	9000      	str	r0, [sp, #0]
 8005fdc:	4639      	mov	r1, r7
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 fb36 	bl	8006650 <__mdiff>
 8005fe4:	68c3      	ldr	r3, [r0, #12]
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	bb03      	cbnz	r3, 800602c <_dtoa_r+0x9fc>
 8005fea:	4601      	mov	r1, r0
 8005fec:	9008      	str	r0, [sp, #32]
 8005fee:	9804      	ldr	r0, [sp, #16]
 8005ff0:	f000 fb14 	bl	800661c <__mcmp>
 8005ff4:	9a08      	ldr	r2, [sp, #32]
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	9308      	str	r3, [sp, #32]
 8005ffe:	f000 f92b 	bl	8006258 <_Bfree>
 8006002:	9b08      	ldr	r3, [sp, #32]
 8006004:	b9a3      	cbnz	r3, 8006030 <_dtoa_r+0xa00>
 8006006:	9a06      	ldr	r2, [sp, #24]
 8006008:	b992      	cbnz	r2, 8006030 <_dtoa_r+0xa00>
 800600a:	9a07      	ldr	r2, [sp, #28]
 800600c:	b982      	cbnz	r2, 8006030 <_dtoa_r+0xa00>
 800600e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006012:	d029      	beq.n	8006068 <_dtoa_r+0xa38>
 8006014:	9b00      	ldr	r3, [sp, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	dd01      	ble.n	800601e <_dtoa_r+0x9ee>
 800601a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800601e:	9b05      	ldr	r3, [sp, #20]
 8006020:	1c5d      	adds	r5, r3, #1
 8006022:	f883 8000 	strb.w	r8, [r3]
 8006026:	e782      	b.n	8005f2e <_dtoa_r+0x8fe>
 8006028:	4630      	mov	r0, r6
 800602a:	e7c2      	b.n	8005fb2 <_dtoa_r+0x982>
 800602c:	2301      	movs	r3, #1
 800602e:	e7e3      	b.n	8005ff8 <_dtoa_r+0x9c8>
 8006030:	9a00      	ldr	r2, [sp, #0]
 8006032:	2a00      	cmp	r2, #0
 8006034:	db04      	blt.n	8006040 <_dtoa_r+0xa10>
 8006036:	d125      	bne.n	8006084 <_dtoa_r+0xa54>
 8006038:	9a06      	ldr	r2, [sp, #24]
 800603a:	bb1a      	cbnz	r2, 8006084 <_dtoa_r+0xa54>
 800603c:	9a07      	ldr	r2, [sp, #28]
 800603e:	bb0a      	cbnz	r2, 8006084 <_dtoa_r+0xa54>
 8006040:	2b00      	cmp	r3, #0
 8006042:	ddec      	ble.n	800601e <_dtoa_r+0x9ee>
 8006044:	2201      	movs	r2, #1
 8006046:	9904      	ldr	r1, [sp, #16]
 8006048:	4620      	mov	r0, r4
 800604a:	f000 fa93 	bl	8006574 <__lshift>
 800604e:	4639      	mov	r1, r7
 8006050:	9004      	str	r0, [sp, #16]
 8006052:	f000 fae3 	bl	800661c <__mcmp>
 8006056:	2800      	cmp	r0, #0
 8006058:	dc03      	bgt.n	8006062 <_dtoa_r+0xa32>
 800605a:	d1e0      	bne.n	800601e <_dtoa_r+0x9ee>
 800605c:	f018 0f01 	tst.w	r8, #1
 8006060:	d0dd      	beq.n	800601e <_dtoa_r+0x9ee>
 8006062:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006066:	d1d8      	bne.n	800601a <_dtoa_r+0x9ea>
 8006068:	9b05      	ldr	r3, [sp, #20]
 800606a:	9a05      	ldr	r2, [sp, #20]
 800606c:	1c5d      	adds	r5, r3, #1
 800606e:	2339      	movs	r3, #57	; 0x39
 8006070:	7013      	strb	r3, [r2, #0]
 8006072:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006076:	2b39      	cmp	r3, #57	; 0x39
 8006078:	f105 32ff 	add.w	r2, r5, #4294967295
 800607c:	d04f      	beq.n	800611e <_dtoa_r+0xaee>
 800607e:	3301      	adds	r3, #1
 8006080:	7013      	strb	r3, [r2, #0]
 8006082:	e754      	b.n	8005f2e <_dtoa_r+0x8fe>
 8006084:	9a05      	ldr	r2, [sp, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	f102 0501 	add.w	r5, r2, #1
 800608c:	dd06      	ble.n	800609c <_dtoa_r+0xa6c>
 800608e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006092:	d0e9      	beq.n	8006068 <_dtoa_r+0xa38>
 8006094:	f108 0801 	add.w	r8, r8, #1
 8006098:	9b05      	ldr	r3, [sp, #20]
 800609a:	e7c2      	b.n	8006022 <_dtoa_r+0x9f2>
 800609c:	9a02      	ldr	r2, [sp, #8]
 800609e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80060a2:	eba5 030b 	sub.w	r3, r5, fp
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d021      	beq.n	80060ee <_dtoa_r+0xabe>
 80060aa:	2300      	movs	r3, #0
 80060ac:	220a      	movs	r2, #10
 80060ae:	9904      	ldr	r1, [sp, #16]
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 f8e8 	bl	8006286 <__multadd>
 80060b6:	45b1      	cmp	r9, r6
 80060b8:	9004      	str	r0, [sp, #16]
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	f04f 020a 	mov.w	r2, #10
 80060c2:	4649      	mov	r1, r9
 80060c4:	4620      	mov	r0, r4
 80060c6:	d105      	bne.n	80060d4 <_dtoa_r+0xaa4>
 80060c8:	f000 f8dd 	bl	8006286 <__multadd>
 80060cc:	4681      	mov	r9, r0
 80060ce:	4606      	mov	r6, r0
 80060d0:	9505      	str	r5, [sp, #20]
 80060d2:	e776      	b.n	8005fc2 <_dtoa_r+0x992>
 80060d4:	f000 f8d7 	bl	8006286 <__multadd>
 80060d8:	4631      	mov	r1, r6
 80060da:	4681      	mov	r9, r0
 80060dc:	2300      	movs	r3, #0
 80060de:	220a      	movs	r2, #10
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 f8d0 	bl	8006286 <__multadd>
 80060e6:	4606      	mov	r6, r0
 80060e8:	e7f2      	b.n	80060d0 <_dtoa_r+0xaa0>
 80060ea:	f04f 0900 	mov.w	r9, #0
 80060ee:	2201      	movs	r2, #1
 80060f0:	9904      	ldr	r1, [sp, #16]
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 fa3e 	bl	8006574 <__lshift>
 80060f8:	4639      	mov	r1, r7
 80060fa:	9004      	str	r0, [sp, #16]
 80060fc:	f000 fa8e 	bl	800661c <__mcmp>
 8006100:	2800      	cmp	r0, #0
 8006102:	dcb6      	bgt.n	8006072 <_dtoa_r+0xa42>
 8006104:	d102      	bne.n	800610c <_dtoa_r+0xadc>
 8006106:	f018 0f01 	tst.w	r8, #1
 800610a:	d1b2      	bne.n	8006072 <_dtoa_r+0xa42>
 800610c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006110:	2b30      	cmp	r3, #48	; 0x30
 8006112:	f105 32ff 	add.w	r2, r5, #4294967295
 8006116:	f47f af0a 	bne.w	8005f2e <_dtoa_r+0x8fe>
 800611a:	4615      	mov	r5, r2
 800611c:	e7f6      	b.n	800610c <_dtoa_r+0xadc>
 800611e:	4593      	cmp	fp, r2
 8006120:	d105      	bne.n	800612e <_dtoa_r+0xafe>
 8006122:	2331      	movs	r3, #49	; 0x31
 8006124:	f10a 0a01 	add.w	sl, sl, #1
 8006128:	f88b 3000 	strb.w	r3, [fp]
 800612c:	e6ff      	b.n	8005f2e <_dtoa_r+0x8fe>
 800612e:	4615      	mov	r5, r2
 8006130:	e79f      	b.n	8006072 <_dtoa_r+0xa42>
 8006132:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006198 <_dtoa_r+0xb68>
 8006136:	e007      	b.n	8006148 <_dtoa_r+0xb18>
 8006138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800613a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800619c <_dtoa_r+0xb6c>
 800613e:	b11b      	cbz	r3, 8006148 <_dtoa_r+0xb18>
 8006140:	f10b 0308 	add.w	r3, fp, #8
 8006144:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4658      	mov	r0, fp
 800614a:	b017      	add	sp, #92	; 0x5c
 800614c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006150:	9b06      	ldr	r3, [sp, #24]
 8006152:	2b01      	cmp	r3, #1
 8006154:	f77f ae35 	ble.w	8005dc2 <_dtoa_r+0x792>
 8006158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800615a:	9307      	str	r3, [sp, #28]
 800615c:	e649      	b.n	8005df2 <_dtoa_r+0x7c2>
 800615e:	9b02      	ldr	r3, [sp, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	dc03      	bgt.n	800616c <_dtoa_r+0xb3c>
 8006164:	9b06      	ldr	r3, [sp, #24]
 8006166:	2b02      	cmp	r3, #2
 8006168:	f73f aecc 	bgt.w	8005f04 <_dtoa_r+0x8d4>
 800616c:	465d      	mov	r5, fp
 800616e:	4639      	mov	r1, r7
 8006170:	9804      	ldr	r0, [sp, #16]
 8006172:	f7ff f9d0 	bl	8005516 <quorem>
 8006176:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800617a:	f805 8b01 	strb.w	r8, [r5], #1
 800617e:	9a02      	ldr	r2, [sp, #8]
 8006180:	eba5 030b 	sub.w	r3, r5, fp
 8006184:	429a      	cmp	r2, r3
 8006186:	ddb0      	ble.n	80060ea <_dtoa_r+0xaba>
 8006188:	2300      	movs	r3, #0
 800618a:	220a      	movs	r2, #10
 800618c:	9904      	ldr	r1, [sp, #16]
 800618e:	4620      	mov	r0, r4
 8006190:	f000 f879 	bl	8006286 <__multadd>
 8006194:	9004      	str	r0, [sp, #16]
 8006196:	e7ea      	b.n	800616e <_dtoa_r+0xb3e>
 8006198:	08006a50 	.word	0x08006a50
 800619c:	08006a52 	.word	0x08006a52

080061a0 <_localeconv_r>:
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <_localeconv_r+0x14>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a18      	ldr	r0, [r3, #32]
 80061a6:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <_localeconv_r+0x18>)
 80061a8:	2800      	cmp	r0, #0
 80061aa:	bf08      	it	eq
 80061ac:	4618      	moveq	r0, r3
 80061ae:	30f0      	adds	r0, #240	; 0xf0
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	2000000c 	.word	0x2000000c
 80061b8:	20000070 	.word	0x20000070

080061bc <malloc>:
 80061bc:	4b02      	ldr	r3, [pc, #8]	; (80061c8 <malloc+0xc>)
 80061be:	4601      	mov	r1, r0
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f000 baff 	b.w	80067c4 <_malloc_r>
 80061c6:	bf00      	nop
 80061c8:	2000000c 	.word	0x2000000c

080061cc <__ascii_mbtowc>:
 80061cc:	b082      	sub	sp, #8
 80061ce:	b901      	cbnz	r1, 80061d2 <__ascii_mbtowc+0x6>
 80061d0:	a901      	add	r1, sp, #4
 80061d2:	b142      	cbz	r2, 80061e6 <__ascii_mbtowc+0x1a>
 80061d4:	b14b      	cbz	r3, 80061ea <__ascii_mbtowc+0x1e>
 80061d6:	7813      	ldrb	r3, [r2, #0]
 80061d8:	600b      	str	r3, [r1, #0]
 80061da:	7812      	ldrb	r2, [r2, #0]
 80061dc:	1c10      	adds	r0, r2, #0
 80061de:	bf18      	it	ne
 80061e0:	2001      	movne	r0, #1
 80061e2:	b002      	add	sp, #8
 80061e4:	4770      	bx	lr
 80061e6:	4610      	mov	r0, r2
 80061e8:	e7fb      	b.n	80061e2 <__ascii_mbtowc+0x16>
 80061ea:	f06f 0001 	mvn.w	r0, #1
 80061ee:	e7f8      	b.n	80061e2 <__ascii_mbtowc+0x16>

080061f0 <_Balloc>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061f4:	4604      	mov	r4, r0
 80061f6:	460e      	mov	r6, r1
 80061f8:	b93d      	cbnz	r5, 800620a <_Balloc+0x1a>
 80061fa:	2010      	movs	r0, #16
 80061fc:	f7ff ffde 	bl	80061bc <malloc>
 8006200:	6260      	str	r0, [r4, #36]	; 0x24
 8006202:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006206:	6005      	str	r5, [r0, #0]
 8006208:	60c5      	str	r5, [r0, #12]
 800620a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800620c:	68eb      	ldr	r3, [r5, #12]
 800620e:	b183      	cbz	r3, 8006232 <_Balloc+0x42>
 8006210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006218:	b9b8      	cbnz	r0, 800624a <_Balloc+0x5a>
 800621a:	2101      	movs	r1, #1
 800621c:	fa01 f506 	lsl.w	r5, r1, r6
 8006220:	1d6a      	adds	r2, r5, #5
 8006222:	0092      	lsls	r2, r2, #2
 8006224:	4620      	mov	r0, r4
 8006226:	f000 fabf 	bl	80067a8 <_calloc_r>
 800622a:	b160      	cbz	r0, 8006246 <_Balloc+0x56>
 800622c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006230:	e00e      	b.n	8006250 <_Balloc+0x60>
 8006232:	2221      	movs	r2, #33	; 0x21
 8006234:	2104      	movs	r1, #4
 8006236:	4620      	mov	r0, r4
 8006238:	f000 fab6 	bl	80067a8 <_calloc_r>
 800623c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800623e:	60e8      	str	r0, [r5, #12]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e4      	bne.n	8006210 <_Balloc+0x20>
 8006246:	2000      	movs	r0, #0
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	6802      	ldr	r2, [r0, #0]
 800624c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006250:	2300      	movs	r3, #0
 8006252:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006256:	e7f7      	b.n	8006248 <_Balloc+0x58>

08006258 <_Bfree>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800625c:	4606      	mov	r6, r0
 800625e:	460d      	mov	r5, r1
 8006260:	b93c      	cbnz	r4, 8006272 <_Bfree+0x1a>
 8006262:	2010      	movs	r0, #16
 8006264:	f7ff ffaa 	bl	80061bc <malloc>
 8006268:	6270      	str	r0, [r6, #36]	; 0x24
 800626a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800626e:	6004      	str	r4, [r0, #0]
 8006270:	60c4      	str	r4, [r0, #12]
 8006272:	b13d      	cbz	r5, 8006284 <_Bfree+0x2c>
 8006274:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006276:	686a      	ldr	r2, [r5, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800627e:	6029      	str	r1, [r5, #0]
 8006280:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006284:	bd70      	pop	{r4, r5, r6, pc}

08006286 <__multadd>:
 8006286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628a:	690d      	ldr	r5, [r1, #16]
 800628c:	461f      	mov	r7, r3
 800628e:	4606      	mov	r6, r0
 8006290:	460c      	mov	r4, r1
 8006292:	f101 0c14 	add.w	ip, r1, #20
 8006296:	2300      	movs	r3, #0
 8006298:	f8dc 0000 	ldr.w	r0, [ip]
 800629c:	b281      	uxth	r1, r0
 800629e:	fb02 7101 	mla	r1, r2, r1, r7
 80062a2:	0c0f      	lsrs	r7, r1, #16
 80062a4:	0c00      	lsrs	r0, r0, #16
 80062a6:	fb02 7000 	mla	r0, r2, r0, r7
 80062aa:	b289      	uxth	r1, r1
 80062ac:	3301      	adds	r3, #1
 80062ae:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80062b2:	429d      	cmp	r5, r3
 80062b4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80062b8:	f84c 1b04 	str.w	r1, [ip], #4
 80062bc:	dcec      	bgt.n	8006298 <__multadd+0x12>
 80062be:	b1d7      	cbz	r7, 80062f6 <__multadd+0x70>
 80062c0:	68a3      	ldr	r3, [r4, #8]
 80062c2:	42ab      	cmp	r3, r5
 80062c4:	dc12      	bgt.n	80062ec <__multadd+0x66>
 80062c6:	6861      	ldr	r1, [r4, #4]
 80062c8:	4630      	mov	r0, r6
 80062ca:	3101      	adds	r1, #1
 80062cc:	f7ff ff90 	bl	80061f0 <_Balloc>
 80062d0:	6922      	ldr	r2, [r4, #16]
 80062d2:	3202      	adds	r2, #2
 80062d4:	f104 010c 	add.w	r1, r4, #12
 80062d8:	4680      	mov	r8, r0
 80062da:	0092      	lsls	r2, r2, #2
 80062dc:	300c      	adds	r0, #12
 80062de:	f7fe fdbd 	bl	8004e5c <memcpy>
 80062e2:	4621      	mov	r1, r4
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ffb7 	bl	8006258 <_Bfree>
 80062ea:	4644      	mov	r4, r8
 80062ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062f0:	3501      	adds	r5, #1
 80062f2:	615f      	str	r7, [r3, #20]
 80062f4:	6125      	str	r5, [r4, #16]
 80062f6:	4620      	mov	r0, r4
 80062f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080062fc <__hi0bits>:
 80062fc:	0c02      	lsrs	r2, r0, #16
 80062fe:	0412      	lsls	r2, r2, #16
 8006300:	4603      	mov	r3, r0
 8006302:	b9b2      	cbnz	r2, 8006332 <__hi0bits+0x36>
 8006304:	0403      	lsls	r3, r0, #16
 8006306:	2010      	movs	r0, #16
 8006308:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800630c:	bf04      	itt	eq
 800630e:	021b      	lsleq	r3, r3, #8
 8006310:	3008      	addeq	r0, #8
 8006312:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006316:	bf04      	itt	eq
 8006318:	011b      	lsleq	r3, r3, #4
 800631a:	3004      	addeq	r0, #4
 800631c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006320:	bf04      	itt	eq
 8006322:	009b      	lsleq	r3, r3, #2
 8006324:	3002      	addeq	r0, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	db06      	blt.n	8006338 <__hi0bits+0x3c>
 800632a:	005b      	lsls	r3, r3, #1
 800632c:	d503      	bpl.n	8006336 <__hi0bits+0x3a>
 800632e:	3001      	adds	r0, #1
 8006330:	4770      	bx	lr
 8006332:	2000      	movs	r0, #0
 8006334:	e7e8      	b.n	8006308 <__hi0bits+0xc>
 8006336:	2020      	movs	r0, #32
 8006338:	4770      	bx	lr

0800633a <__lo0bits>:
 800633a:	6803      	ldr	r3, [r0, #0]
 800633c:	f013 0207 	ands.w	r2, r3, #7
 8006340:	4601      	mov	r1, r0
 8006342:	d00b      	beq.n	800635c <__lo0bits+0x22>
 8006344:	07da      	lsls	r2, r3, #31
 8006346:	d423      	bmi.n	8006390 <__lo0bits+0x56>
 8006348:	0798      	lsls	r0, r3, #30
 800634a:	bf49      	itett	mi
 800634c:	085b      	lsrmi	r3, r3, #1
 800634e:	089b      	lsrpl	r3, r3, #2
 8006350:	2001      	movmi	r0, #1
 8006352:	600b      	strmi	r3, [r1, #0]
 8006354:	bf5c      	itt	pl
 8006356:	600b      	strpl	r3, [r1, #0]
 8006358:	2002      	movpl	r0, #2
 800635a:	4770      	bx	lr
 800635c:	b298      	uxth	r0, r3
 800635e:	b9a8      	cbnz	r0, 800638c <__lo0bits+0x52>
 8006360:	0c1b      	lsrs	r3, r3, #16
 8006362:	2010      	movs	r0, #16
 8006364:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006368:	bf04      	itt	eq
 800636a:	0a1b      	lsreq	r3, r3, #8
 800636c:	3008      	addeq	r0, #8
 800636e:	071a      	lsls	r2, r3, #28
 8006370:	bf04      	itt	eq
 8006372:	091b      	lsreq	r3, r3, #4
 8006374:	3004      	addeq	r0, #4
 8006376:	079a      	lsls	r2, r3, #30
 8006378:	bf04      	itt	eq
 800637a:	089b      	lsreq	r3, r3, #2
 800637c:	3002      	addeq	r0, #2
 800637e:	07da      	lsls	r2, r3, #31
 8006380:	d402      	bmi.n	8006388 <__lo0bits+0x4e>
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	d006      	beq.n	8006394 <__lo0bits+0x5a>
 8006386:	3001      	adds	r0, #1
 8006388:	600b      	str	r3, [r1, #0]
 800638a:	4770      	bx	lr
 800638c:	4610      	mov	r0, r2
 800638e:	e7e9      	b.n	8006364 <__lo0bits+0x2a>
 8006390:	2000      	movs	r0, #0
 8006392:	4770      	bx	lr
 8006394:	2020      	movs	r0, #32
 8006396:	4770      	bx	lr

08006398 <__i2b>:
 8006398:	b510      	push	{r4, lr}
 800639a:	460c      	mov	r4, r1
 800639c:	2101      	movs	r1, #1
 800639e:	f7ff ff27 	bl	80061f0 <_Balloc>
 80063a2:	2201      	movs	r2, #1
 80063a4:	6144      	str	r4, [r0, #20]
 80063a6:	6102      	str	r2, [r0, #16]
 80063a8:	bd10      	pop	{r4, pc}

080063aa <__multiply>:
 80063aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ae:	4614      	mov	r4, r2
 80063b0:	690a      	ldr	r2, [r1, #16]
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	bfb8      	it	lt
 80063b8:	460b      	movlt	r3, r1
 80063ba:	4688      	mov	r8, r1
 80063bc:	bfbc      	itt	lt
 80063be:	46a0      	movlt	r8, r4
 80063c0:	461c      	movlt	r4, r3
 80063c2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80063c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80063ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80063d2:	eb07 0609 	add.w	r6, r7, r9
 80063d6:	42b3      	cmp	r3, r6
 80063d8:	bfb8      	it	lt
 80063da:	3101      	addlt	r1, #1
 80063dc:	f7ff ff08 	bl	80061f0 <_Balloc>
 80063e0:	f100 0514 	add.w	r5, r0, #20
 80063e4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80063e8:	462b      	mov	r3, r5
 80063ea:	2200      	movs	r2, #0
 80063ec:	4573      	cmp	r3, lr
 80063ee:	d316      	bcc.n	800641e <__multiply+0x74>
 80063f0:	f104 0214 	add.w	r2, r4, #20
 80063f4:	f108 0114 	add.w	r1, r8, #20
 80063f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80063fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	9b00      	ldr	r3, [sp, #0]
 8006404:	9201      	str	r2, [sp, #4]
 8006406:	4293      	cmp	r3, r2
 8006408:	d80c      	bhi.n	8006424 <__multiply+0x7a>
 800640a:	2e00      	cmp	r6, #0
 800640c:	dd03      	ble.n	8006416 <__multiply+0x6c>
 800640e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006412:	2b00      	cmp	r3, #0
 8006414:	d05d      	beq.n	80064d2 <__multiply+0x128>
 8006416:	6106      	str	r6, [r0, #16]
 8006418:	b003      	add	sp, #12
 800641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641e:	f843 2b04 	str.w	r2, [r3], #4
 8006422:	e7e3      	b.n	80063ec <__multiply+0x42>
 8006424:	f8b2 b000 	ldrh.w	fp, [r2]
 8006428:	f1bb 0f00 	cmp.w	fp, #0
 800642c:	d023      	beq.n	8006476 <__multiply+0xcc>
 800642e:	4689      	mov	r9, r1
 8006430:	46ac      	mov	ip, r5
 8006432:	f04f 0800 	mov.w	r8, #0
 8006436:	f859 4b04 	ldr.w	r4, [r9], #4
 800643a:	f8dc a000 	ldr.w	sl, [ip]
 800643e:	b2a3      	uxth	r3, r4
 8006440:	fa1f fa8a 	uxth.w	sl, sl
 8006444:	fb0b a303 	mla	r3, fp, r3, sl
 8006448:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800644c:	f8dc 4000 	ldr.w	r4, [ip]
 8006450:	4443      	add	r3, r8
 8006452:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006456:	fb0b 840a 	mla	r4, fp, sl, r8
 800645a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800645e:	46e2      	mov	sl, ip
 8006460:	b29b      	uxth	r3, r3
 8006462:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006466:	454f      	cmp	r7, r9
 8006468:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800646c:	f84a 3b04 	str.w	r3, [sl], #4
 8006470:	d82b      	bhi.n	80064ca <__multiply+0x120>
 8006472:	f8cc 8004 	str.w	r8, [ip, #4]
 8006476:	9b01      	ldr	r3, [sp, #4]
 8006478:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800647c:	3204      	adds	r2, #4
 800647e:	f1ba 0f00 	cmp.w	sl, #0
 8006482:	d020      	beq.n	80064c6 <__multiply+0x11c>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	4689      	mov	r9, r1
 8006488:	46a8      	mov	r8, r5
 800648a:	f04f 0b00 	mov.w	fp, #0
 800648e:	f8b9 c000 	ldrh.w	ip, [r9]
 8006492:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006496:	fb0a 440c 	mla	r4, sl, ip, r4
 800649a:	445c      	add	r4, fp
 800649c:	46c4      	mov	ip, r8
 800649e:	b29b      	uxth	r3, r3
 80064a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80064a4:	f84c 3b04 	str.w	r3, [ip], #4
 80064a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80064ac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	fb0a b303 	mla	r3, sl, r3, fp
 80064b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80064ba:	454f      	cmp	r7, r9
 80064bc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80064c0:	d805      	bhi.n	80064ce <__multiply+0x124>
 80064c2:	f8c8 3004 	str.w	r3, [r8, #4]
 80064c6:	3504      	adds	r5, #4
 80064c8:	e79b      	b.n	8006402 <__multiply+0x58>
 80064ca:	46d4      	mov	ip, sl
 80064cc:	e7b3      	b.n	8006436 <__multiply+0x8c>
 80064ce:	46e0      	mov	r8, ip
 80064d0:	e7dd      	b.n	800648e <__multiply+0xe4>
 80064d2:	3e01      	subs	r6, #1
 80064d4:	e799      	b.n	800640a <__multiply+0x60>
	...

080064d8 <__pow5mult>:
 80064d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064dc:	4615      	mov	r5, r2
 80064de:	f012 0203 	ands.w	r2, r2, #3
 80064e2:	4606      	mov	r6, r0
 80064e4:	460f      	mov	r7, r1
 80064e6:	d007      	beq.n	80064f8 <__pow5mult+0x20>
 80064e8:	3a01      	subs	r2, #1
 80064ea:	4c21      	ldr	r4, [pc, #132]	; (8006570 <__pow5mult+0x98>)
 80064ec:	2300      	movs	r3, #0
 80064ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064f2:	f7ff fec8 	bl	8006286 <__multadd>
 80064f6:	4607      	mov	r7, r0
 80064f8:	10ad      	asrs	r5, r5, #2
 80064fa:	d035      	beq.n	8006568 <__pow5mult+0x90>
 80064fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80064fe:	b93c      	cbnz	r4, 8006510 <__pow5mult+0x38>
 8006500:	2010      	movs	r0, #16
 8006502:	f7ff fe5b 	bl	80061bc <malloc>
 8006506:	6270      	str	r0, [r6, #36]	; 0x24
 8006508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800650c:	6004      	str	r4, [r0, #0]
 800650e:	60c4      	str	r4, [r0, #12]
 8006510:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006518:	b94c      	cbnz	r4, 800652e <__pow5mult+0x56>
 800651a:	f240 2171 	movw	r1, #625	; 0x271
 800651e:	4630      	mov	r0, r6
 8006520:	f7ff ff3a 	bl	8006398 <__i2b>
 8006524:	2300      	movs	r3, #0
 8006526:	f8c8 0008 	str.w	r0, [r8, #8]
 800652a:	4604      	mov	r4, r0
 800652c:	6003      	str	r3, [r0, #0]
 800652e:	f04f 0800 	mov.w	r8, #0
 8006532:	07eb      	lsls	r3, r5, #31
 8006534:	d50a      	bpl.n	800654c <__pow5mult+0x74>
 8006536:	4639      	mov	r1, r7
 8006538:	4622      	mov	r2, r4
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ff35 	bl	80063aa <__multiply>
 8006540:	4639      	mov	r1, r7
 8006542:	4681      	mov	r9, r0
 8006544:	4630      	mov	r0, r6
 8006546:	f7ff fe87 	bl	8006258 <_Bfree>
 800654a:	464f      	mov	r7, r9
 800654c:	106d      	asrs	r5, r5, #1
 800654e:	d00b      	beq.n	8006568 <__pow5mult+0x90>
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	b938      	cbnz	r0, 8006564 <__pow5mult+0x8c>
 8006554:	4622      	mov	r2, r4
 8006556:	4621      	mov	r1, r4
 8006558:	4630      	mov	r0, r6
 800655a:	f7ff ff26 	bl	80063aa <__multiply>
 800655e:	6020      	str	r0, [r4, #0]
 8006560:	f8c0 8000 	str.w	r8, [r0]
 8006564:	4604      	mov	r4, r0
 8006566:	e7e4      	b.n	8006532 <__pow5mult+0x5a>
 8006568:	4638      	mov	r0, r7
 800656a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656e:	bf00      	nop
 8006570:	08006b60 	.word	0x08006b60

08006574 <__lshift>:
 8006574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006578:	460c      	mov	r4, r1
 800657a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	6849      	ldr	r1, [r1, #4]
 8006582:	eb0a 0903 	add.w	r9, sl, r3
 8006586:	68a3      	ldr	r3, [r4, #8]
 8006588:	4607      	mov	r7, r0
 800658a:	4616      	mov	r6, r2
 800658c:	f109 0501 	add.w	r5, r9, #1
 8006590:	42ab      	cmp	r3, r5
 8006592:	db32      	blt.n	80065fa <__lshift+0x86>
 8006594:	4638      	mov	r0, r7
 8006596:	f7ff fe2b 	bl	80061f0 <_Balloc>
 800659a:	2300      	movs	r3, #0
 800659c:	4680      	mov	r8, r0
 800659e:	f100 0114 	add.w	r1, r0, #20
 80065a2:	461a      	mov	r2, r3
 80065a4:	4553      	cmp	r3, sl
 80065a6:	db2b      	blt.n	8006600 <__lshift+0x8c>
 80065a8:	6920      	ldr	r0, [r4, #16]
 80065aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065ae:	f104 0314 	add.w	r3, r4, #20
 80065b2:	f016 021f 	ands.w	r2, r6, #31
 80065b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065be:	d025      	beq.n	800660c <__lshift+0x98>
 80065c0:	f1c2 0e20 	rsb	lr, r2, #32
 80065c4:	2000      	movs	r0, #0
 80065c6:	681e      	ldr	r6, [r3, #0]
 80065c8:	468a      	mov	sl, r1
 80065ca:	4096      	lsls	r6, r2
 80065cc:	4330      	orrs	r0, r6
 80065ce:	f84a 0b04 	str.w	r0, [sl], #4
 80065d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80065d6:	459c      	cmp	ip, r3
 80065d8:	fa20 f00e 	lsr.w	r0, r0, lr
 80065dc:	d814      	bhi.n	8006608 <__lshift+0x94>
 80065de:	6048      	str	r0, [r1, #4]
 80065e0:	b108      	cbz	r0, 80065e6 <__lshift+0x72>
 80065e2:	f109 0502 	add.w	r5, r9, #2
 80065e6:	3d01      	subs	r5, #1
 80065e8:	4638      	mov	r0, r7
 80065ea:	f8c8 5010 	str.w	r5, [r8, #16]
 80065ee:	4621      	mov	r1, r4
 80065f0:	f7ff fe32 	bl	8006258 <_Bfree>
 80065f4:	4640      	mov	r0, r8
 80065f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065fa:	3101      	adds	r1, #1
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	e7c7      	b.n	8006590 <__lshift+0x1c>
 8006600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006604:	3301      	adds	r3, #1
 8006606:	e7cd      	b.n	80065a4 <__lshift+0x30>
 8006608:	4651      	mov	r1, sl
 800660a:	e7dc      	b.n	80065c6 <__lshift+0x52>
 800660c:	3904      	subs	r1, #4
 800660e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006612:	f841 2f04 	str.w	r2, [r1, #4]!
 8006616:	459c      	cmp	ip, r3
 8006618:	d8f9      	bhi.n	800660e <__lshift+0x9a>
 800661a:	e7e4      	b.n	80065e6 <__lshift+0x72>

0800661c <__mcmp>:
 800661c:	6903      	ldr	r3, [r0, #16]
 800661e:	690a      	ldr	r2, [r1, #16]
 8006620:	1a9b      	subs	r3, r3, r2
 8006622:	b530      	push	{r4, r5, lr}
 8006624:	d10c      	bne.n	8006640 <__mcmp+0x24>
 8006626:	0092      	lsls	r2, r2, #2
 8006628:	3014      	adds	r0, #20
 800662a:	3114      	adds	r1, #20
 800662c:	1884      	adds	r4, r0, r2
 800662e:	4411      	add	r1, r2
 8006630:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006634:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006638:	4295      	cmp	r5, r2
 800663a:	d003      	beq.n	8006644 <__mcmp+0x28>
 800663c:	d305      	bcc.n	800664a <__mcmp+0x2e>
 800663e:	2301      	movs	r3, #1
 8006640:	4618      	mov	r0, r3
 8006642:	bd30      	pop	{r4, r5, pc}
 8006644:	42a0      	cmp	r0, r4
 8006646:	d3f3      	bcc.n	8006630 <__mcmp+0x14>
 8006648:	e7fa      	b.n	8006640 <__mcmp+0x24>
 800664a:	f04f 33ff 	mov.w	r3, #4294967295
 800664e:	e7f7      	b.n	8006640 <__mcmp+0x24>

08006650 <__mdiff>:
 8006650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006654:	460d      	mov	r5, r1
 8006656:	4607      	mov	r7, r0
 8006658:	4611      	mov	r1, r2
 800665a:	4628      	mov	r0, r5
 800665c:	4614      	mov	r4, r2
 800665e:	f7ff ffdd 	bl	800661c <__mcmp>
 8006662:	1e06      	subs	r6, r0, #0
 8006664:	d108      	bne.n	8006678 <__mdiff+0x28>
 8006666:	4631      	mov	r1, r6
 8006668:	4638      	mov	r0, r7
 800666a:	f7ff fdc1 	bl	80061f0 <_Balloc>
 800666e:	2301      	movs	r3, #1
 8006670:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006678:	bfa4      	itt	ge
 800667a:	4623      	movge	r3, r4
 800667c:	462c      	movge	r4, r5
 800667e:	4638      	mov	r0, r7
 8006680:	6861      	ldr	r1, [r4, #4]
 8006682:	bfa6      	itte	ge
 8006684:	461d      	movge	r5, r3
 8006686:	2600      	movge	r6, #0
 8006688:	2601      	movlt	r6, #1
 800668a:	f7ff fdb1 	bl	80061f0 <_Balloc>
 800668e:	692b      	ldr	r3, [r5, #16]
 8006690:	60c6      	str	r6, [r0, #12]
 8006692:	6926      	ldr	r6, [r4, #16]
 8006694:	f105 0914 	add.w	r9, r5, #20
 8006698:	f104 0214 	add.w	r2, r4, #20
 800669c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80066a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80066a4:	f100 0514 	add.w	r5, r0, #20
 80066a8:	f04f 0e00 	mov.w	lr, #0
 80066ac:	f852 ab04 	ldr.w	sl, [r2], #4
 80066b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80066b4:	fa1e f18a 	uxtah	r1, lr, sl
 80066b8:	b2a3      	uxth	r3, r4
 80066ba:	1ac9      	subs	r1, r1, r3
 80066bc:	0c23      	lsrs	r3, r4, #16
 80066be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80066c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80066c6:	b289      	uxth	r1, r1
 80066c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80066cc:	45c8      	cmp	r8, r9
 80066ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80066d2:	4694      	mov	ip, r2
 80066d4:	f845 3b04 	str.w	r3, [r5], #4
 80066d8:	d8e8      	bhi.n	80066ac <__mdiff+0x5c>
 80066da:	45bc      	cmp	ip, r7
 80066dc:	d304      	bcc.n	80066e8 <__mdiff+0x98>
 80066de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80066e2:	b183      	cbz	r3, 8006706 <__mdiff+0xb6>
 80066e4:	6106      	str	r6, [r0, #16]
 80066e6:	e7c5      	b.n	8006674 <__mdiff+0x24>
 80066e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80066ec:	fa1e f381 	uxtah	r3, lr, r1
 80066f0:	141a      	asrs	r2, r3, #16
 80066f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006700:	f845 3b04 	str.w	r3, [r5], #4
 8006704:	e7e9      	b.n	80066da <__mdiff+0x8a>
 8006706:	3e01      	subs	r6, #1
 8006708:	e7e9      	b.n	80066de <__mdiff+0x8e>

0800670a <__d2b>:
 800670a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800670e:	460e      	mov	r6, r1
 8006710:	2101      	movs	r1, #1
 8006712:	ec59 8b10 	vmov	r8, r9, d0
 8006716:	4615      	mov	r5, r2
 8006718:	f7ff fd6a 	bl	80061f0 <_Balloc>
 800671c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006720:	4607      	mov	r7, r0
 8006722:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006726:	bb34      	cbnz	r4, 8006776 <__d2b+0x6c>
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	f1b8 0300 	subs.w	r3, r8, #0
 800672e:	d027      	beq.n	8006780 <__d2b+0x76>
 8006730:	a802      	add	r0, sp, #8
 8006732:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006736:	f7ff fe00 	bl	800633a <__lo0bits>
 800673a:	9900      	ldr	r1, [sp, #0]
 800673c:	b1f0      	cbz	r0, 800677c <__d2b+0x72>
 800673e:	9a01      	ldr	r2, [sp, #4]
 8006740:	f1c0 0320 	rsb	r3, r0, #32
 8006744:	fa02 f303 	lsl.w	r3, r2, r3
 8006748:	430b      	orrs	r3, r1
 800674a:	40c2      	lsrs	r2, r0
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	9201      	str	r2, [sp, #4]
 8006750:	9b01      	ldr	r3, [sp, #4]
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	bf14      	ite	ne
 8006758:	2102      	movne	r1, #2
 800675a:	2101      	moveq	r1, #1
 800675c:	6139      	str	r1, [r7, #16]
 800675e:	b1c4      	cbz	r4, 8006792 <__d2b+0x88>
 8006760:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006764:	4404      	add	r4, r0
 8006766:	6034      	str	r4, [r6, #0]
 8006768:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800676c:	6028      	str	r0, [r5, #0]
 800676e:	4638      	mov	r0, r7
 8006770:	b003      	add	sp, #12
 8006772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800677a:	e7d5      	b.n	8006728 <__d2b+0x1e>
 800677c:	6179      	str	r1, [r7, #20]
 800677e:	e7e7      	b.n	8006750 <__d2b+0x46>
 8006780:	a801      	add	r0, sp, #4
 8006782:	f7ff fdda 	bl	800633a <__lo0bits>
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	2101      	movs	r1, #1
 800678c:	6139      	str	r1, [r7, #16]
 800678e:	3020      	adds	r0, #32
 8006790:	e7e5      	b.n	800675e <__d2b+0x54>
 8006792:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006796:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800679a:	6030      	str	r0, [r6, #0]
 800679c:	6918      	ldr	r0, [r3, #16]
 800679e:	f7ff fdad 	bl	80062fc <__hi0bits>
 80067a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80067a6:	e7e1      	b.n	800676c <__d2b+0x62>

080067a8 <_calloc_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	fb02 f401 	mul.w	r4, r2, r1
 80067ae:	4621      	mov	r1, r4
 80067b0:	f000 f808 	bl	80067c4 <_malloc_r>
 80067b4:	4605      	mov	r5, r0
 80067b6:	b118      	cbz	r0, 80067c0 <_calloc_r+0x18>
 80067b8:	4622      	mov	r2, r4
 80067ba:	2100      	movs	r1, #0
 80067bc:	f7fe fb59 	bl	8004e72 <memset>
 80067c0:	4628      	mov	r0, r5
 80067c2:	bd38      	pop	{r3, r4, r5, pc}

080067c4 <_malloc_r>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	1ccd      	adds	r5, r1, #3
 80067c8:	f025 0503 	bic.w	r5, r5, #3
 80067cc:	3508      	adds	r5, #8
 80067ce:	2d0c      	cmp	r5, #12
 80067d0:	bf38      	it	cc
 80067d2:	250c      	movcc	r5, #12
 80067d4:	2d00      	cmp	r5, #0
 80067d6:	4606      	mov	r6, r0
 80067d8:	db01      	blt.n	80067de <_malloc_r+0x1a>
 80067da:	42a9      	cmp	r1, r5
 80067dc:	d903      	bls.n	80067e6 <_malloc_r+0x22>
 80067de:	230c      	movs	r3, #12
 80067e0:	6033      	str	r3, [r6, #0]
 80067e2:	2000      	movs	r0, #0
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
 80067e6:	f000 f864 	bl	80068b2 <__malloc_lock>
 80067ea:	4a21      	ldr	r2, [pc, #132]	; (8006870 <_malloc_r+0xac>)
 80067ec:	6814      	ldr	r4, [r2, #0]
 80067ee:	4621      	mov	r1, r4
 80067f0:	b991      	cbnz	r1, 8006818 <_malloc_r+0x54>
 80067f2:	4c20      	ldr	r4, [pc, #128]	; (8006874 <_malloc_r+0xb0>)
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	b91b      	cbnz	r3, 8006800 <_malloc_r+0x3c>
 80067f8:	4630      	mov	r0, r6
 80067fa:	f000 f83d 	bl	8006878 <_sbrk_r>
 80067fe:	6020      	str	r0, [r4, #0]
 8006800:	4629      	mov	r1, r5
 8006802:	4630      	mov	r0, r6
 8006804:	f000 f838 	bl	8006878 <_sbrk_r>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d124      	bne.n	8006856 <_malloc_r+0x92>
 800680c:	230c      	movs	r3, #12
 800680e:	6033      	str	r3, [r6, #0]
 8006810:	4630      	mov	r0, r6
 8006812:	f000 f84f 	bl	80068b4 <__malloc_unlock>
 8006816:	e7e4      	b.n	80067e2 <_malloc_r+0x1e>
 8006818:	680b      	ldr	r3, [r1, #0]
 800681a:	1b5b      	subs	r3, r3, r5
 800681c:	d418      	bmi.n	8006850 <_malloc_r+0x8c>
 800681e:	2b0b      	cmp	r3, #11
 8006820:	d90f      	bls.n	8006842 <_malloc_r+0x7e>
 8006822:	600b      	str	r3, [r1, #0]
 8006824:	50cd      	str	r5, [r1, r3]
 8006826:	18cc      	adds	r4, r1, r3
 8006828:	4630      	mov	r0, r6
 800682a:	f000 f843 	bl	80068b4 <__malloc_unlock>
 800682e:	f104 000b 	add.w	r0, r4, #11
 8006832:	1d23      	adds	r3, r4, #4
 8006834:	f020 0007 	bic.w	r0, r0, #7
 8006838:	1ac3      	subs	r3, r0, r3
 800683a:	d0d3      	beq.n	80067e4 <_malloc_r+0x20>
 800683c:	425a      	negs	r2, r3
 800683e:	50e2      	str	r2, [r4, r3]
 8006840:	e7d0      	b.n	80067e4 <_malloc_r+0x20>
 8006842:	428c      	cmp	r4, r1
 8006844:	684b      	ldr	r3, [r1, #4]
 8006846:	bf16      	itet	ne
 8006848:	6063      	strne	r3, [r4, #4]
 800684a:	6013      	streq	r3, [r2, #0]
 800684c:	460c      	movne	r4, r1
 800684e:	e7eb      	b.n	8006828 <_malloc_r+0x64>
 8006850:	460c      	mov	r4, r1
 8006852:	6849      	ldr	r1, [r1, #4]
 8006854:	e7cc      	b.n	80067f0 <_malloc_r+0x2c>
 8006856:	1cc4      	adds	r4, r0, #3
 8006858:	f024 0403 	bic.w	r4, r4, #3
 800685c:	42a0      	cmp	r0, r4
 800685e:	d005      	beq.n	800686c <_malloc_r+0xa8>
 8006860:	1a21      	subs	r1, r4, r0
 8006862:	4630      	mov	r0, r6
 8006864:	f000 f808 	bl	8006878 <_sbrk_r>
 8006868:	3001      	adds	r0, #1
 800686a:	d0cf      	beq.n	800680c <_malloc_r+0x48>
 800686c:	6025      	str	r5, [r4, #0]
 800686e:	e7db      	b.n	8006828 <_malloc_r+0x64>
 8006870:	20000200 	.word	0x20000200
 8006874:	20000204 	.word	0x20000204

08006878 <_sbrk_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4c06      	ldr	r4, [pc, #24]	; (8006894 <_sbrk_r+0x1c>)
 800687c:	2300      	movs	r3, #0
 800687e:	4605      	mov	r5, r0
 8006880:	4608      	mov	r0, r1
 8006882:	6023      	str	r3, [r4, #0]
 8006884:	f7fb fa2c 	bl	8001ce0 <_sbrk>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_sbrk_r+0x1a>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	b103      	cbz	r3, 8006892 <_sbrk_r+0x1a>
 8006890:	602b      	str	r3, [r5, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	200004e8 	.word	0x200004e8

08006898 <__ascii_wctomb>:
 8006898:	b149      	cbz	r1, 80068ae <__ascii_wctomb+0x16>
 800689a:	2aff      	cmp	r2, #255	; 0xff
 800689c:	bf85      	ittet	hi
 800689e:	238a      	movhi	r3, #138	; 0x8a
 80068a0:	6003      	strhi	r3, [r0, #0]
 80068a2:	700a      	strbls	r2, [r1, #0]
 80068a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80068a8:	bf98      	it	ls
 80068aa:	2001      	movls	r0, #1
 80068ac:	4770      	bx	lr
 80068ae:	4608      	mov	r0, r1
 80068b0:	4770      	bx	lr

080068b2 <__malloc_lock>:
 80068b2:	4770      	bx	lr

080068b4 <__malloc_unlock>:
 80068b4:	4770      	bx	lr
	...

080068b8 <_init>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	bf00      	nop
 80068bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068be:	bc08      	pop	{r3}
 80068c0:	469e      	mov	lr, r3
 80068c2:	4770      	bx	lr

080068c4 <_fini>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	bf00      	nop
 80068c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ca:	bc08      	pop	{r3}
 80068cc:	469e      	mov	lr, r3
 80068ce:	4770      	bx	lr
