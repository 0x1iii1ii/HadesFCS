
HadesTEST_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b44  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e18  08008e18  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008e18  08008e18  00018e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e20  08008e20  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e24  08008e24  00018e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08008e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  24000010  08008e38  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240004fc  08008e38  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021233  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030b6  00000000  00000000  00041271  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001628  00000000  00000000  00044328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001500  00000000  00000000  00045950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00038f28  00000000  00000000  00046e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000125c2  00000000  00000000  0007fd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017629a  00000000  00000000  0009233a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002085d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000602c  00000000  00000000  00208650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008dc4 	.word	0x08008dc4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08008dc4 	.word	0x08008dc4

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <printDebug>:
static void MX_UART5_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART3_UART_Init(void);

void printDebug(char *buf) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) buf, strlen(buf), HAL_MAX_DELAY);
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff fe71 	bl	80002d8 <strlen>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <printDebug+0x28>)
 8000602:	f005 ff17 	bl	8006434 <HAL_UART_Transmit>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	240002cc 	.word	0x240002cc

08000614 <main>:

int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
  HAL_Init();
 800061a:	f001 f8ff 	bl	800181c <HAL_Init>

  SystemClock_Config();
 800061e:	f000 f845 	bl	80006ac <SystemClock_Config>

  MX_GPIO_Init();
 8000622:	f000 fca3 	bl	8000f6c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000626:	f000 f939 	bl	800089c <MX_ADC3_Init>
  MX_I2C1_Init();
 800062a:	f000 f999 	bl	8000960 <MX_I2C1_Init>
  MX_I2C2_Init();
 800062e:	f000 f9d7 	bl	80009e0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000632:	f000 fa15 	bl	8000a60 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000636:	f000 fa53 	bl	8000ae0 <MX_SPI1_Init>
  MX_TIM4_Init();
 800063a:	f000 faa7 	bl	8000b8c <MX_TIM4_Init>
  MX_UART4_Init();
 800063e:	f000 fb19 	bl	8000c74 <MX_UART4_Init>
  MX_UART5_Init();
 8000642:	f000 fb63 	bl	8000d0c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000646:	f000 fbad 	bl	8000da4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800064a:	f000 fbf7 	bl	8000e3c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800064e:	f000 fc41 	bl	8000ed4 <MX_USART3_UART_Init>

  uint32_t timerLED = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
  uint32_t timerDbg = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]

  const uint32_t SAMPLE_TIME_LED_MS = 1000;
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	607b      	str	r3, [r7, #4]
  const uint32_t SAMPLE_TIME_DBG_MS =  250;
 8000660:	23fa      	movs	r3, #250	; 0xfa
 8000662:	603b      	str	r3, [r7, #0]

  while (1)
  {
	  if (HAL_GetTick() - timerLED >= SAMPLE_TIME_LED_MS) {
 8000664:	f001 f95c 	bl	8001920 <HAL_GetTick>
 8000668:	4602      	mov	r2, r0
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	429a      	cmp	r2, r3
 8000672:	d807      	bhi.n	8000684 <main+0x70>
		  HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 8000674:	2101      	movs	r1, #1
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <main+0x90>)
 8000678:	f002 fb61 	bl	8002d3e <HAL_GPIO_TogglePin>

		  timerLED += SAMPLE_TIME_LED_MS;
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
	  }

	  if (HAL_GetTick() - timerDbg >= SAMPLE_TIME_DBG_MS) {
 8000684:	f001 f94c 	bl	8001920 <HAL_GetTick>
 8000688:	4602      	mov	r2, r0
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	d8e7      	bhi.n	8000664 <main+0x50>
		  printDebug("FLIGHT CONTROL COMPUTER\r\n");
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <main+0x94>)
 8000696:	f7ff ffa7 	bl	80005e8 <printDebug>

		  timerDbg += SAMPLE_TIME_DBG_MS;
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	4413      	add	r3, r2
 80006a0:	60bb      	str	r3, [r7, #8]
	  if (HAL_GetTick() - timerLED >= SAMPLE_TIME_LED_MS) {
 80006a2:	e7df      	b.n	8000664 <main+0x50>
 80006a4:	58020400 	.word	0x58020400
 80006a8:	08008ddc 	.word	0x08008ddc

080006ac <SystemClock_Config>:
	  }
  }
}

void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0cc      	sub	sp, #304	; 0x130
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006b6:	224c      	movs	r2, #76	; 0x4c
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 fb7a 	bl	8008db4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006c4:	2220      	movs	r2, #32
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f008 fb73 	bl	8008db4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	4618      	mov	r0, r3
 80006d4:	23bc      	movs	r3, #188	; 0xbc
 80006d6:	461a      	mov	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f008 fb6b 	bl	8008db4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006de:	2002      	movs	r0, #2
 80006e0:	f002 fc70 	bl	8002fc4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	4b68      	ldr	r3, [pc, #416]	; (800088c <SystemClock_Config+0x1e0>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a67      	ldr	r2, [pc, #412]	; (800088c <SystemClock_Config+0x1e0>)
 80006f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b65      	ldr	r3, [pc, #404]	; (800088c <SystemClock_Config+0x1e0>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	4b63      	ldr	r3, [pc, #396]	; (8000890 <SystemClock_Config+0x1e4>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	4a62      	ldr	r2, [pc, #392]	; (8000890 <SystemClock_Config+0x1e4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800070e:	4b60      	ldr	r3, [pc, #384]	; (8000890 <SystemClock_Config+0x1e4>)
 8000710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000712:	f003 0201 	and.w	r2, r3, #1
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800071e:	bf00      	nop
 8000720:	4b5a      	ldr	r3, [pc, #360]	; (800088c <SystemClock_Config+0x1e0>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072c:	d1f8      	bne.n	8000720 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800072e:	4b59      	ldr	r3, [pc, #356]	; (8000894 <SystemClock_Config+0x1e8>)
 8000730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000732:	f023 0303 	bic.w	r3, r3, #3
 8000736:	4a57      	ldr	r2, [pc, #348]	; (8000894 <SystemClock_Config+0x1e8>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800073e:	2303      	movs	r3, #3
 8000740:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000748:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800074c:	2301      	movs	r3, #1
 800074e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2320      	movs	r3, #32
 8000754:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	2302      	movs	r3, #2
 8000760:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 72;
 800076a:	2348      	movs	r3, #72	; 0x48
 800076c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000782:	230c      	movs	r3, #12
 8000784:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000798:	4618      	mov	r0, r3
 800079a:	f002 fc4b 	bl	8003034 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80007a4:	f000 fc8a 	bl	80010bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	233f      	movs	r3, #63	; 0x3f
 80007aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2303      	movs	r3, #3
 80007b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ba:	2308      	movs	r3, #8
 80007bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c6:	2340      	movs	r3, #64	; 0x40
 80007c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d4:	2340      	movs	r3, #64	; 0x40
 80007d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007de:	2103      	movs	r1, #3
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 ffdf 	bl	80037a4 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x144>
  {
    Error_Handler();
 80007ec:	f000 fc66 	bl	80010bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 80007f0:	f107 0308 	add.w	r3, r7, #8
 80007f4:	4a28      	ldr	r2, [pc, #160]	; (8000898 <SystemClock_Config+0x1ec>)
 80007f6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	2202      	movs	r2, #2
 80007fe:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	220c      	movs	r2, #12
 8000806:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	2202      	movs	r2, #2
 8000816:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2202      	movs	r2, #2
 800081e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	22c0      	movs	r2, #192	; 0xc0
 8000826:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2220      	movs	r2, #32
 800082e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	2200      	movs	r2, #0
 800083e:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000848:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	2200      	movs	r2, #0
 8000850:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	2200      	movs	r2, #0
 8000858:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	2200      	movs	r2, #0
 8000860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000864:	f107 0308 	add.w	r3, r7, #8
 8000868:	2200      	movs	r2, #0
 800086a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	4618      	mov	r0, r3
 8000874:	f003 faf4 	bl	8003e60 <HAL_RCCEx_PeriphCLKConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x1d6>
  {
    Error_Handler();
 800087e:	f000 fc1d 	bl	80010bc <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	58024800 	.word	0x58024800
 8000890:	58000400 	.word	0x58000400
 8000894:	58024400 	.word	0x58024400
 8000898:	8008100b 	.word	0x8008100b

0800089c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008b6:	4a29      	ldr	r2, [pc, #164]	; (800095c <MX_ADC3_Init+0xc0>)
 80008b8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008bc:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80008c0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008d0:	2204      	movs	r2, #4
 80008d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_ADC3_Init+0xbc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_ADC3_Init+0xbc>)
 8000900:	2200      	movs	r2, #0
 8000902:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_ADC3_Init+0xbc>)
 8000906:	2200      	movs	r2, #0
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_ADC3_Init+0xbc>)
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000912:	4811      	ldr	r0, [pc, #68]	; (8000958 <MX_ADC3_Init+0xbc>)
 8000914:	f001 f9b2 	bl	8001c7c <HAL_ADC_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800091e:	f000 fbcd 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000922:	2301      	movs	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000926:	2306      	movs	r3, #6
 8000928:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000932:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000934:	2304      	movs	r3, #4
 8000936:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_ADC3_Init+0xbc>)
 8000942:	f001 fb3b 	bl	8001fbc <HAL_ADC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800094c:	f000 fbb6 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000268 	.word	0x24000268
 800095c:	58026000 	.word	0x58026000

08000960 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <MX_I2C1_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x209093DD;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_I2C1_Init+0x74>)
 800096c:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <MX_I2C1_Init+0x7c>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000970:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000976:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000978:	2201      	movs	r2, #1
 800097a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099a:	480e      	ldr	r0, [pc, #56]	; (80009d4 <MX_I2C1_Init+0x74>)
 800099c:	f002 f9ea 	bl	8002d74 <HAL_I2C_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009a6:	f000 fb89 	bl	80010bc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4809      	ldr	r0, [pc, #36]	; (80009d4 <MX_I2C1_Init+0x74>)
 80009ae:	f002 fa71 	bl	8002e94 <HAL_I2CEx_ConfigAnalogFilter>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b8:	f000 fb80 	bl	80010bc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_I2C1_Init+0x74>)
 80009c0:	f002 fab3 	bl	8002f2a <HAL_I2CEx_ConfigDigitalFilter>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 fb77 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	24000144 	.word	0x24000144
 80009d8:	40005400 	.word	0x40005400
 80009dc:	209093dd 	.word	0x209093dd

080009e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_I2C2_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x209093DD;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <MX_I2C2_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_I2C2_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a1c:	f002 f9aa 	bl	8002d74 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 fb49 	bl	80010bc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a2e:	f002 fa31 	bl	8002e94 <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 fb40 	bl	80010bc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_I2C2_Init+0x74>)
 8000a40:	f002 fa73 	bl	8002f2a <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 fb37 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	24000190 	.word	0x24000190
 8000a58:	40005800 	.word	0x40005800
 8000a5c:	209093dd 	.word	0x209093dd

08000a60 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_I2C3_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x209093DD;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <MX_I2C3_Init+0x7c>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000a9c:	f002 f96a 	bl	8002d74 <HAL_I2C_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000aa6:	f000 fb09 	bl	80010bc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000aae:	f002 f9f1 	bl	8002e94 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 fb00 	bl	80010bc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_I2C3_Init+0x74>)
 8000ac0:	f002 fa33 	bl	8002f2a <HAL_I2CEx_ConfigDigitalFilter>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 faf7 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2400002c 	.word	0x2400002c
 8000ad8:	40005c00 	.word	0x40005c00
 8000adc:	209093dd 	.word	0x209093dd

08000ae0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000ae6:	4a28      	ldr	r2, [pc, #160]	; (8000b88 <MX_SPI1_Init+0xa8>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000aec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000afa:	2203      	movs	r2, #3
 8000afc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b36:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_SPI1_Init+0xa4>)
 8000b70:	f005 f816 	bl	8005ba0 <HAL_SPI_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000b7a:	f000 fa9f 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	240003e4 	.word	0x240003e4
 8000b88:	40013000 	.word	0x40013000

08000b8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000baa:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000bac:	4a30      	ldr	r2, [pc, #192]	; (8000c70 <MX_TIM4_Init+0xe4>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc8:	4b28      	ldr	r3, [pc, #160]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000bce:	4827      	ldr	r0, [pc, #156]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000bd0:	f005 f8f9 	bl	8005dc6 <HAL_TIM_IC_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000bda:	f000 fa6f 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	481f      	ldr	r0, [pc, #124]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000bee:	f005 fb75 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000bf8:	f000 fa60 	bl	80010bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c00:	2301      	movs	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4619      	mov	r1, r3
 8000c12:	4816      	ldr	r0, [pc, #88]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000c14:	f005 f902 	bl	8005e1c <HAL_TIM_IC_ConfigChannel>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000c1e:	f000 fa4d 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2204      	movs	r2, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4810      	ldr	r0, [pc, #64]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000c2a:	f005 f8f7 	bl	8005e1c <HAL_TIM_IC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000c34:	f000 fa42 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000c40:	f005 f8ec 	bl	8005e1c <HAL_TIM_IC_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8000c4a:	f000 fa37 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	220c      	movs	r2, #12
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_TIM4_Init+0xe0>)
 8000c56:	f005 f8e1 	bl	8005e1c <HAL_TIM_IC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000c60:	f000 fa2c 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	24000078 	.word	0x24000078
 8000c70:	40000800 	.word	0x40000800

08000c74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <MX_UART4_Init+0x90>)
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <MX_UART4_Init+0x94>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_UART4_Init+0x90>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_UART4_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_UART4_Init+0x90>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_UART4_Init+0x90>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_UART4_Init+0x90>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_UART4_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_UART4_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_UART4_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_UART4_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_UART4_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000cbc:	4811      	ldr	r0, [pc, #68]	; (8000d04 <MX_UART4_Init+0x90>)
 8000cbe:	f005 fb69 	bl	8006394 <HAL_UART_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000cc8:	f000 f9f8 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_UART4_Init+0x90>)
 8000cd0:	f007 ff67 	bl	8008ba2 <HAL_UARTEx_SetTxFifoThreshold>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000cda:	f000 f9ef 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4808      	ldr	r0, [pc, #32]	; (8000d04 <MX_UART4_Init+0x90>)
 8000ce2:	f007 ff9c 	bl	8008c1e <HAL_UARTEx_SetRxFifoThreshold>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000cec:	f000 f9e6 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_UART4_Init+0x90>)
 8000cf2:	f007 ff1d 	bl	8008b30 <HAL_UARTEx_DisableFifoMode>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000cfc:	f000 f9de 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24000358 	.word	0x24000358
 8000d08:	40004c00 	.word	0x40004c00

08000d0c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d12:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <MX_UART5_Init+0x94>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d1c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d56:	f005 fb1d 	bl	8006394 <HAL_UART_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000d60:	f000 f9ac 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d64:	2100      	movs	r1, #0
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d68:	f007 ff1b 	bl	8008ba2 <HAL_UARTEx_SetTxFifoThreshold>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000d72:	f000 f9a3 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d76:	2100      	movs	r1, #0
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d7a:	f007 ff50 	bl	8008c1e <HAL_UARTEx_SetRxFifoThreshold>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000d84:	f000 f99a 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_UART5_Init+0x90>)
 8000d8a:	f007 fed1 	bl	8008b30 <HAL_UARTEx_DisableFifoMode>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000d94:	f000 f992 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	240001dc 	.word	0x240001dc
 8000da0:	40005000 	.word	0x40005000

08000da4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000daa:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <MX_USART1_UART_Init+0x94>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dec:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000dee:	f005 fad1 	bl	8006394 <HAL_UART_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000df8:	f000 f960 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000e00:	f007 fecf 	bl	8008ba2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000e0a:	f000 f957 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000e12:	f007 ff04 	bl	8008c1e <HAL_UARTEx_SetRxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 f94e 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_USART1_UART_Init+0x90>)
 8000e22:	f007 fe85 	bl	8008b30 <HAL_UARTEx_DisableFifoMode>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 f946 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	240002cc 	.word	0x240002cc
 8000e38:	40011000 	.word	0x40011000

08000e3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e40:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <MX_USART2_UART_Init+0x94>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e86:	f005 fa85 	bl	8006394 <HAL_UART_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e90:	f000 f914 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	480d      	ldr	r0, [pc, #52]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000e98:	f007 fe83 	bl	8008ba2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000ea2:	f000 f90b 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4808      	ldr	r0, [pc, #32]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000eaa:	f007 feb8 	bl	8008c1e <HAL_UARTEx_SetRxFifoThreshold>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000eb4:	f000 f902 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000eb8:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_USART2_UART_Init+0x90>)
 8000eba:	f007 fe39 	bl	8008b30 <HAL_UARTEx_DisableFifoMode>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ec4:	f000 f8fa 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2400046c 	.word	0x2400046c
 8000ed0:	40004400 	.word	0x40004400

08000ed4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <MX_USART3_UART_Init+0x94>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f1e:	f005 fa39 	bl	8006394 <HAL_UART_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f28:	f000 f8c8 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f30:	f007 fe37 	bl	8008ba2 <HAL_UARTEx_SetTxFifoThreshold>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f3a:	f000 f8bf 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f42:	f007 fe6c 	bl	8008c1e <HAL_UARTEx_SetRxFifoThreshold>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f4c:	f000 f8b6 	bl	80010bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f52:	f007 fded 	bl	8008b30 <HAL_UARTEx_DisableFifoMode>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f5c:	f000 f8ae 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	240000b8 	.word	0x240000b8
 8000f68:	40004800 	.word	0x40004800

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f82:	4b4a      	ldr	r3, [pc, #296]	; (80010ac <MX_GPIO_Init+0x140>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a48      	ldr	r2, [pc, #288]	; (80010ac <MX_GPIO_Init+0x140>)
 8000f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <MX_GPIO_Init+0x140>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	4b42      	ldr	r3, [pc, #264]	; (80010ac <MX_GPIO_Init+0x140>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	4a41      	ldr	r2, [pc, #260]	; (80010ac <MX_GPIO_Init+0x140>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb0:	4b3e      	ldr	r3, [pc, #248]	; (80010ac <MX_GPIO_Init+0x140>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <MX_GPIO_Init+0x140>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a39      	ldr	r2, [pc, #228]	; (80010ac <MX_GPIO_Init+0x140>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b37      	ldr	r3, [pc, #220]	; (80010ac <MX_GPIO_Init+0x140>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <MX_GPIO_Init+0x140>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a32      	ldr	r2, [pc, #200]	; (80010ac <MX_GPIO_Init+0x140>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <MX_GPIO_Init+0x140>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b2c      	ldr	r3, [pc, #176]	; (80010ac <MX_GPIO_Init+0x140>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a2a      	ldr	r2, [pc, #168]	; (80010ac <MX_GPIO_Init+0x140>)
 8001002:	f043 0308 	orr.w	r3, r3, #8
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b28      	ldr	r3, [pc, #160]	; (80010ac <MX_GPIO_Init+0x140>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_FLASH_GPIO_Port, SPI1_CS_FLASH_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2110      	movs	r1, #16
 800101c:	4824      	ldr	r0, [pc, #144]	; (80010b0 <MX_GPIO_Init+0x144>)
 800101e:	f001 fe75 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin 
 8001022:	2200      	movs	r2, #0
 8001024:	213f      	movs	r1, #63	; 0x3f
 8001026:	4823      	ldr	r0, [pc, #140]	; (80010b4 <MX_GPIO_Init+0x148>)
 8001028:	f001 fe70 	bl	8002d0c <HAL_GPIO_WritePin>
                          |LEDE_Pin|LEDF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NAVCRXA_Pin|NAVCRXB_Pin|NAVCRXC_Pin|NAVRXD_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	210f      	movs	r1, #15
 8001030:	4821      	ldr	r0, [pc, #132]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8001032:	f001 fe6b 	bl	8002d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_FLASH_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_FLASH_Pin;
 8001036:	2310      	movs	r3, #16
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4818      	ldr	r0, [pc, #96]	; (80010b0 <MX_GPIO_Init+0x144>)
 800104e:	f001 fcad 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin 
                           LEDE_Pin LEDF_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin 
 8001052:	233f      	movs	r3, #63	; 0x3f
 8001054:	617b      	str	r3, [r7, #20]
                          |LEDE_Pin|LEDF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <MX_GPIO_Init+0x148>)
 800106a:	f001 fc9f 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : NAVCRXA_Pin NAVCRXB_Pin NAVCRXC_Pin NAVRXD_Pin */
  GPIO_InitStruct.Pin = NAVCRXA_Pin|NAVCRXB_Pin|NAVCRXC_Pin|NAVRXD_Pin;
 800106e:	230f      	movs	r3, #15
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <MX_GPIO_Init+0x14c>)
 8001086:	f001 fc91 	bl	80029ac <HAL_GPIO_Init>

  /*Configure GPIO pins : NAVCTXA_Pin NAVCTXB_Pin NAVCTXC_Pin NAVCTXD_Pin */
  GPIO_InitStruct.Pin = NAVCTXA_Pin|NAVCTXB_Pin|NAVCTXC_Pin|NAVCTXD_Pin;
 800108a:	23f0      	movs	r3, #240	; 0xf0
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <MX_GPIO_Init+0x14c>)
 800109e:	f001 fc85 	bl	80029ac <HAL_GPIO_Init>

}
 80010a2:	bf00      	nop
 80010a4:	3728      	adds	r7, #40	; 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58020000 	.word	0x58020000
 80010b4:	58020400 	.word	0x58020400
 80010b8:	58020c00 	.word	0x58020c00

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_MspInit+0x30>)
 80010d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010d8:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x30>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x30>)
 80010e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	58024400 	.word	0x58024400

08001100 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a18      	ldr	r2, [pc, #96]	; (8001170 <HAL_ADC_MspInit+0x70>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d129      	bne.n	8001166 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_ADC_MspInit+0x74>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_ADC_MspInit+0x74>)
 800111a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800111e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_ADC_MspInit+0x74>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <HAL_ADC_MspInit+0x74>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001136:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <HAL_ADC_MspInit+0x74>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_ADC_MspInit+0x74>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration    
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1 
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800114e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001152:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001156:	f000 fbfb 	bl	8001950 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800115a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800115e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001162:	f000 fbf5 	bl	8001950 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	58026000 	.word	0x58026000
 8001174:	58024400 	.word	0x58024400

08001178 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a5f      	ldr	r2, [pc, #380]	; (8001314 <HAL_I2C_MspInit+0x19c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d12e      	bne.n	80011f8 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	4b5f      	ldr	r3, [pc, #380]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a0:	4a5d      	ldr	r2, [pc, #372]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 80011a2:	f043 0302 	orr.w	r3, r3, #2
 80011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011aa:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	623b      	str	r3, [r7, #32]
 80011b6:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011b8:	23c0      	movs	r3, #192	; 0xc0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011bc:	2312      	movs	r3, #18
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011c8:	2304      	movs	r3, #4
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	4852      	ldr	r0, [pc, #328]	; (800131c <HAL_I2C_MspInit+0x1a4>)
 80011d4:	f001 fbea 	bl	80029ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 80011da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011de:	4a4e      	ldr	r2, [pc, #312]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 80011e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011e8:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 80011ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80011f6:	e088      	b.n	800130a <HAL_I2C_MspInit+0x192>
  else if(hi2c->Instance==I2C2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a48      	ldr	r2, [pc, #288]	; (8001320 <HAL_I2C_MspInit+0x1a8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12f      	bne.n	8001262 <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b45      	ldr	r3, [pc, #276]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	4a43      	ldr	r2, [pc, #268]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001212:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001220:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001226:	2312      	movs	r3, #18
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001232:	2304      	movs	r3, #4
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	4837      	ldr	r0, [pc, #220]	; (800131c <HAL_I2C_MspInit+0x1a4>)
 800123e:	f001 fbb5 	bl	80029ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001242:	4b35      	ldr	r3, [pc, #212]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 8001244:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001248:	4a33      	ldr	r2, [pc, #204]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 800124a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800124e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001252:	4b31      	ldr	r3, [pc, #196]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 8001254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001258:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697b      	ldr	r3, [r7, #20]
}
 8001260:	e053      	b.n	800130a <HAL_I2C_MspInit+0x192>
  else if(hi2c->Instance==I2C3)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a2f      	ldr	r2, [pc, #188]	; (8001324 <HAL_I2C_MspInit+0x1ac>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d14e      	bne.n	800130a <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 800128c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001290:	4a21      	ldr	r2, [pc, #132]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ae:	2312      	movs	r3, #18
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012ba:	2304      	movs	r3, #4
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c2:	4619      	mov	r1, r3
 80012c4:	4818      	ldr	r0, [pc, #96]	; (8001328 <HAL_I2C_MspInit+0x1b0>)
 80012c6:	f001 fb71 	bl	80029ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d0:	2312      	movs	r3, #18
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012dc:	2304      	movs	r3, #4
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <HAL_I2C_MspInit+0x1b4>)
 80012e8:	f001 fb60 	bl	80029ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 80012ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012f2:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 80012f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_I2C_MspInit+0x1a0>)
 80012fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
}
 800130a:	bf00      	nop
 800130c:	3738      	adds	r7, #56	; 0x38
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40005400 	.word	0x40005400
 8001318:	58024400 	.word	0x58024400
 800131c:	58020400 	.word	0x58020400
 8001320:	40005800 	.word	0x40005800
 8001324:	40005c00 	.word	0x40005c00
 8001328:	58020800 	.word	0x58020800
 800132c:	58020000 	.word	0x58020000

08001330 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <HAL_SPI_MspInit+0x88>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12d      	bne.n	80013ae <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_SPI_MspInit+0x8c>)
 8001354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_SPI_MspInit+0x8c>)
 800135a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800135e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_SPI_MspInit+0x8c>)
 8001364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_SPI_MspInit+0x8c>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	4a11      	ldr	r2, [pc, #68]	; (80013bc <HAL_SPI_MspInit+0x8c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_SPI_MspInit+0x8c>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800138e:	23e0      	movs	r3, #224	; 0xe0
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800139e:	2305      	movs	r3, #5
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_SPI_MspInit+0x90>)
 80013aa:	f001 faff 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40013000 	.word	0x40013000
 80013bc:	58024400 	.word	0x58024400
 80013c0:	58020000 	.word	0x58020000

080013c4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a1a      	ldr	r2, [pc, #104]	; (800144c <HAL_TIM_IC_MspInit+0x88>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d12e      	bne.n	8001444 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <HAL_TIM_IC_MspInit+0x8c>)
 80013e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ec:	4a18      	ldr	r2, [pc, #96]	; (8001450 <HAL_TIM_IC_MspInit+0x8c>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_TIM_IC_MspInit+0x8c>)
 80013f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_TIM_IC_MspInit+0x8c>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <HAL_TIM_IC_MspInit+0x8c>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_TIM_IC_MspInit+0x8c>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001422:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001434:	2302      	movs	r3, #2
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <HAL_TIM_IC_MspInit+0x90>)
 8001440:	f001 fab4 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40000800 	.word	0x40000800
 8001450:	58024400 	.word	0x58024400
 8001454:	58020c00 	.word	0x58020c00

08001458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b092      	sub	sp, #72	; 0x48
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a83      	ldr	r2, [pc, #524]	; (8001684 <HAL_UART_MspInit+0x22c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12e      	bne.n	80014d8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800147a:	4b83      	ldr	r3, [pc, #524]	; (8001688 <HAL_UART_MspInit+0x230>)
 800147c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001480:	4a81      	ldr	r2, [pc, #516]	; (8001688 <HAL_UART_MspInit+0x230>)
 8001482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001486:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800148a:	4b7f      	ldr	r3, [pc, #508]	; (8001688 <HAL_UART_MspInit+0x230>)
 800148c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
 8001496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	4b7b      	ldr	r3, [pc, #492]	; (8001688 <HAL_UART_MspInit+0x230>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	4a7a      	ldr	r2, [pc, #488]	; (8001688 <HAL_UART_MspInit+0x230>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a8:	4b77      	ldr	r3, [pc, #476]	; (8001688 <HAL_UART_MspInit+0x230>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014b6:	2303      	movs	r3, #3
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014c6:	2308      	movs	r3, #8
 80014c8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ce:	4619      	mov	r1, r3
 80014d0:	486e      	ldr	r0, [pc, #440]	; (800168c <HAL_UART_MspInit+0x234>)
 80014d2:	f001 fa6b 	bl	80029ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014d6:	e0d1      	b.n	800167c <HAL_UART_MspInit+0x224>
  else if(huart->Instance==UART5)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a6c      	ldr	r2, [pc, #432]	; (8001690 <HAL_UART_MspInit+0x238>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12f      	bne.n	8001542 <HAL_UART_MspInit+0xea>
    __HAL_RCC_UART5_CLK_ENABLE();
 80014e2:	4b69      	ldr	r3, [pc, #420]	; (8001688 <HAL_UART_MspInit+0x230>)
 80014e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014e8:	4a67      	ldr	r2, [pc, #412]	; (8001688 <HAL_UART_MspInit+0x230>)
 80014ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014f2:	4b65      	ldr	r3, [pc, #404]	; (8001688 <HAL_UART_MspInit+0x230>)
 80014f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	4b61      	ldr	r3, [pc, #388]	; (8001688 <HAL_UART_MspInit+0x230>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	4a60      	ldr	r2, [pc, #384]	; (8001688 <HAL_UART_MspInit+0x230>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001510:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <HAL_UART_MspInit+0x230>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800151e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001530:	230e      	movs	r3, #14
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001538:	4619      	mov	r1, r3
 800153a:	4856      	ldr	r0, [pc, #344]	; (8001694 <HAL_UART_MspInit+0x23c>)
 800153c:	f001 fa36 	bl	80029ac <HAL_GPIO_Init>
}
 8001540:	e09c      	b.n	800167c <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a54      	ldr	r2, [pc, #336]	; (8001698 <HAL_UART_MspInit+0x240>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d12f      	bne.n	80015ac <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART1_CLK_ENABLE();
 800154c:	4b4e      	ldr	r3, [pc, #312]	; (8001688 <HAL_UART_MspInit+0x230>)
 800154e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001552:	4a4d      	ldr	r2, [pc, #308]	; (8001688 <HAL_UART_MspInit+0x230>)
 8001554:	f043 0310 	orr.w	r3, r3, #16
 8001558:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800155c:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <HAL_UART_MspInit+0x230>)
 800155e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	623b      	str	r3, [r7, #32]
 8001568:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	4b47      	ldr	r3, [pc, #284]	; (8001688 <HAL_UART_MspInit+0x230>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a45      	ldr	r2, [pc, #276]	; (8001688 <HAL_UART_MspInit+0x230>)
 8001572:	f043 0302 	orr.w	r3, r3, #2
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <HAL_UART_MspInit+0x230>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001588:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158e:	2302      	movs	r3, #2
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001596:	2300      	movs	r3, #0
 8001598:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800159a:	2304      	movs	r3, #4
 800159c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015a2:	4619      	mov	r1, r3
 80015a4:	483b      	ldr	r0, [pc, #236]	; (8001694 <HAL_UART_MspInit+0x23c>)
 80015a6:	f001 fa01 	bl	80029ac <HAL_GPIO_Init>
}
 80015aa:	e067      	b.n	800167c <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a3a      	ldr	r2, [pc, #232]	; (800169c <HAL_UART_MspInit+0x244>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12e      	bne.n	8001614 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_UART_MspInit+0x230>)
 80015b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015bc:	4a32      	ldr	r2, [pc, #200]	; (8001688 <HAL_UART_MspInit+0x230>)
 80015be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <HAL_UART_MspInit+0x230>)
 80015c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	61bb      	str	r3, [r7, #24]
 80015d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <HAL_UART_MspInit+0x230>)
 80015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015da:	4a2b      	ldr	r2, [pc, #172]	; (8001688 <HAL_UART_MspInit+0x230>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_UART_MspInit+0x230>)
 80015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015f2:	230c      	movs	r3, #12
 80015f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001602:	2307      	movs	r3, #7
 8001604:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800160a:	4619      	mov	r1, r3
 800160c:	481f      	ldr	r0, [pc, #124]	; (800168c <HAL_UART_MspInit+0x234>)
 800160e:	f001 f9cd 	bl	80029ac <HAL_GPIO_Init>
}
 8001612:	e033      	b.n	800167c <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART3)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <HAL_UART_MspInit+0x248>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d12e      	bne.n	800167c <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_UART_MspInit+0x230>)
 8001620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001624:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_UART_MspInit+0x230>)
 8001626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_UART_MspInit+0x230>)
 8001630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001634:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_UART_MspInit+0x230>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001642:	4a11      	ldr	r2, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x230>)
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_UART_MspInit+0x230>)
 800164e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800165a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800165e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800166c:	2307      	movs	r3, #7
 800166e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001670:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001674:	4619      	mov	r1, r3
 8001676:	480b      	ldr	r0, [pc, #44]	; (80016a4 <HAL_UART_MspInit+0x24c>)
 8001678:	f001 f998 	bl	80029ac <HAL_GPIO_Init>
}
 800167c:	bf00      	nop
 800167e:	3748      	adds	r7, #72	; 0x48
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40004c00 	.word	0x40004c00
 8001688:	58024400 	.word	0x58024400
 800168c:	58020000 	.word	0x58020000
 8001690:	40005000 	.word	0x40005000
 8001694:	58020400 	.word	0x58020400
 8001698:	40011000 	.word	0x40011000
 800169c:	40004400 	.word	0x40004400
 80016a0:	40004800 	.word	0x40004800
 80016a4:	58020c00 	.word	0x58020c00

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <MemManage_Handler+0x4>

080016c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <UsageFault_Handler+0x4>

080016ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fc:	f000 f8fc 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <SystemInit+0xac>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <SystemInit+0xac>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <SystemInit+0xb0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <SystemInit+0xb0>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001724:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <SystemInit+0xb0>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <SystemInit+0xb0>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4921      	ldr	r1, [pc, #132]	; (80017b4 <SystemInit+0xb0>)
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <SystemInit+0xb4>)
 8001732:	4013      	ands	r3, r2
 8001734:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001736:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <SystemInit+0xb0>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <SystemInit+0xb0>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <SystemInit+0xb0>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001748:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <SystemInit+0xb0>)
 800174a:	2200      	movs	r2, #0
 800174c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <SystemInit+0xb0>)
 8001750:	2200      	movs	r2, #0
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <SystemInit+0xb0>)
 8001756:	2200      	movs	r2, #0
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <SystemInit+0xb0>)
 800175c:	2200      	movs	r2, #0
 800175e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <SystemInit+0xb0>)
 8001762:	2200      	movs	r2, #0
 8001764:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <SystemInit+0xb0>)
 8001768:	2200      	movs	r2, #0
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <SystemInit+0xb0>)
 800176e:	2200      	movs	r2, #0
 8001770:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <SystemInit+0xb0>)
 8001774:	2200      	movs	r2, #0
 8001776:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <SystemInit+0xb0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <SystemInit+0xb0>)
 800177e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001782:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <SystemInit+0xb0>)
 8001786:	2200      	movs	r2, #0
 8001788:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <SystemInit+0xb8>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <SystemInit+0xbc>)
 8001790:	4013      	ands	r3, r2
 8001792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001796:	d202      	bcs.n	800179e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <SystemInit+0xc0>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SystemInit+0xac>)
 80017a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00
 80017b4:	58024400 	.word	0x58024400
 80017b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80017bc:	5c001000 	.word	0x5c001000
 80017c0:	ffff0000 	.word	0xffff0000
 80017c4:	51008108 	.word	0x51008108

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ce:	e003      	b.n	80017d8 <LoopCopyDataInit>

080017d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017d6:	3104      	adds	r1, #4

080017d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017e0:	d3f6      	bcc.n	80017d0 <CopyDataInit>
  ldr  r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017e4:	e002      	b.n	80017ec <LoopFillZerobss>

080017e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017e8:	f842 3b04 	str.w	r3, [r2], #4

080017ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017f0:	d3f9      	bcc.n	80017e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ff87 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f007 fab9 	bl	8008d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7fe ff0b 	bl	8000614 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001800:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001804:	08008e28 	.word	0x08008e28
  ldr  r0, =_sdata
 8001808:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800180c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001810:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8001814:	240004fc 	.word	0x240004fc

08001818 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC3_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f001 f891 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001826:	f002 f961 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 800182a:	4601      	mov	r1, r0
 800182c:	4b13      	ldr	r3, [pc, #76]	; (800187c <HAL_Init+0x60>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_Init+0x64>)
 8001838:	5cd3      	ldrb	r3, [r2, r3]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	fa21 f303 	lsr.w	r3, r1, r3
 8001842:	4a10      	ldr	r2, [pc, #64]	; (8001884 <HAL_Init+0x68>)
 8001844:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <HAL_Init+0x68>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_Init+0x60>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	490b      	ldr	r1, [pc, #44]	; (8001880 <HAL_Init+0x64>)
 8001854:	5ccb      	ldrb	r3, [r1, r3]
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_Init+0x6c>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f812 	bl	800188c <HAL_InitTick>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e002      	b.n	8001878 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001872:	f7ff fc2b 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}
 800187c:	58024400 	.word	0x58024400
 8001880:	08008e08 	.word	0x08008e08
 8001884:	24000000 	.word	0x24000000
 8001888:	24000004 	.word	0x24000004

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_InitTick+0x60>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e021      	b.n	80018e4 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_InitTick+0x64>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_InitTick+0x60>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 f86b 	bl	8002992 <HAL_SYSTICK_Config>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00e      	b.n	80018e4 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d80a      	bhi.n	80018e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018cc:	2200      	movs	r2, #0
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f001 f843 	bl	800295e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <HAL_InitTick+0x68>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2400000c 	.word	0x2400000c
 80018f0:	24000000 	.word	0x24000000
 80018f4:	24000008 	.word	0x24000008

080018f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x20>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_IncTick+0x24>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_IncTick+0x24>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	2400000c 	.word	0x2400000c
 800191c:	240004f8 	.word	0x240004f8

08001920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	240004f8 	.word	0x240004f8

08001938 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetREVID+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0c1b      	lsrs	r3, r3, #16
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	5c001000 	.word	0x5c001000

08001950 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	4904      	ldr	r1, [pc, #16]	; (8001978 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	58000400 	.word	0x58000400

0800197c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019e4:	b490      	push	{r4, r7}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3360      	adds	r3, #96	; 0x60
 80019f6:	461a      	mov	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	4313      	orrs	r3, r2
 8001a12:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc90      	pop	{r4, r7}
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	611a      	str	r2, [r3, #16]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a50:	b490      	push	{r4, r7}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3360      	adds	r3, #96	; 0x60
 8001a60:	461a      	mov	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	6023      	str	r3, [r4, #0]
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc90      	pop	{r4, r7}
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a80:	b490      	push	{r4, r7}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3330      	adds	r3, #48	; 0x30
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	4413      	add	r3, r2
 8001a9e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001aa0:	6822      	ldr	r2, [r4, #0]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	211f      	movs	r1, #31
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0e9b      	lsrs	r3, r3, #26
 8001ab6:	f003 011f 	and.w	r1, r3, #31
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc90      	pop	{r4, r7}
 8001ad0:	4770      	bx	lr

08001ad2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ad2:	b490      	push	{r4, r7}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3314      	adds	r3, #20
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	0e5b      	lsrs	r3, r3, #25
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001af2:	6822      	ldr	r2, [r4, #0]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	0d1b      	lsrs	r3, r3, #20
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	2107      	movs	r1, #7
 8001afe:	fa01 f303 	lsl.w	r3, r1, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	401a      	ands	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	0d1b      	lsrs	r3, r3, #20
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc90      	pop	{r4, r7}
 8001b20:	4770      	bx	lr
	...

08001b24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0318 	and.w	r3, r3, #24
 8001b46:	4908      	ldr	r1, [pc, #32]	; (8001b68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b48:	40d9      	lsrs	r1, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b52:	431a      	orrs	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	000fffff 	.word	0x000fffff

08001b6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6093      	str	r3, [r2, #8]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	5fffffc0 	.word	0x5fffffc0

08001b90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ba4:	d101      	bne.n	8001baa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <LL_ADC_EnableInternalRegulator+0x24>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	6fffffc0 	.word	0x6fffffc0

08001be0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <LL_ADC_IsEnabled+0x18>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <LL_ADC_IsEnabled+0x1a>
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d101      	bne.n	8001c46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d101      	bne.n	8001c6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e18e      	b.n	8001fb4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fa2b 	bl	8001100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff67 	bl	8001b90 <LL_ADC_IsDeepPowerDownEnabled>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff4d 	bl	8001b6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff82 	bl	8001be0 <LL_ADC_IsInternalRegulatorEnabled>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d113      	bne.n	8001d0a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff66 	bl	8001bb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001cec:	4b9a      	ldr	r3, [pc, #616]	; (8001f58 <HAL_ADC_Init+0x2dc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	4a9a      	ldr	r2, [pc, #616]	; (8001f5c <HAL_ADC_Init+0x2e0>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001cfc:	e002      	b.n	8001d04 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f9      	bne.n	8001cfe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff66 	bl	8001be0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff77 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 8001d40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f040 8129 	bne.w	8001fa2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 8125 	bne.w	8001fa2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d60:	f043 0202 	orr.w	r2, r3, #2
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff4b 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d136      	bne.n	8001de6 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a78      	ldr	r2, [pc, #480]	; (8001f60 <HAL_ADC_Init+0x2e4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d004      	beq.n	8001d8c <HAL_ADC_Init+0x110>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a77      	ldr	r2, [pc, #476]	; (8001f64 <HAL_ADC_Init+0x2e8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d10e      	bne.n	8001daa <HAL_ADC_Init+0x12e>
 8001d8c:	4874      	ldr	r0, [pc, #464]	; (8001f60 <HAL_ADC_Init+0x2e4>)
 8001d8e:	f7ff ff3b 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d92:	4604      	mov	r4, r0
 8001d94:	4873      	ldr	r0, [pc, #460]	; (8001f64 <HAL_ADC_Init+0x2e8>)
 8001d96:	f7ff ff37 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4323      	orrs	r3, r4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf0c      	ite	eq
 8001da2:	2301      	moveq	r3, #1
 8001da4:	2300      	movne	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	e008      	b.n	8001dbc <HAL_ADC_Init+0x140>
 8001daa:	486f      	ldr	r0, [pc, #444]	; (8001f68 <HAL_ADC_Init+0x2ec>)
 8001dac:	f7ff ff2c 	bl	8001c08 <LL_ADC_IsEnabled>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	bf0c      	ite	eq
 8001db6:	2301      	moveq	r3, #1
 8001db8:	2300      	movne	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d012      	beq.n	8001de6 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a66      	ldr	r2, [pc, #408]	; (8001f60 <HAL_ADC_Init+0x2e4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <HAL_ADC_Init+0x158>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a65      	ldr	r2, [pc, #404]	; (8001f64 <HAL_ADC_Init+0x2e8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d101      	bne.n	8001dd8 <HAL_ADC_Init+0x15c>
 8001dd4:	4a65      	ldr	r2, [pc, #404]	; (8001f6c <HAL_ADC_Init+0x2f0>)
 8001dd6:	e000      	b.n	8001dda <HAL_ADC_Init+0x15e>
 8001dd8:	4a65      	ldr	r2, [pc, #404]	; (8001f70 <HAL_ADC_Init+0x2f4>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f7ff fdcb 	bl	800197c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001de6:	f7ff fda7 	bl	8001938 <HAL_GetREVID>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f241 0303 	movw	r3, #4099	; 0x1003
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d914      	bls.n	8001e1e <HAL_ADC_Init+0x1a2>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d110      	bne.n	8001e1e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7d5b      	ldrb	r3, [r3, #21]
 8001e00:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e06:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e0c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7f1b      	ldrb	r3, [r3, #28]
 8001e12:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8001e14:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e16:	f043 030c 	orr.w	r3, r3, #12
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	e00d      	b.n	8001e3a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7d5b      	ldrb	r3, [r3, #21]
 8001e22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e28:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001e2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7f1b      	ldrb	r3, [r3, #28]
 8001e34:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
    }


    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7f1b      	ldrb	r3, [r3, #28]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d106      	bne.n	8001e50 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	045b      	lsls	r3, r3, #17
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <HAL_ADC_Init+0x2f8>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	69b9      	ldr	r1, [r7, #24]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fed2 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 8001e8a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fedf 	bl	8001c54 <LL_ADC_INJ_IsConversionOngoing>
 8001e96:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d14a      	bne.n	8001f34 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d147      	bne.n	8001f34 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7d1b      	ldrb	r3, [r3, #20]
 8001ea8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <HAL_ADC_Init+0x2fc>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	69b9      	ldr	r1, [r7, #24]
 8001ec2:	430b      	orrs	r3, r1
 8001ec4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d11b      	bne.n	8001f08 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HAL_ADC_Init+0x300>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ee4:	3a01      	subs	r2, #1
 8001ee6:	0411      	lsls	r1, r2, #16
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eec:	4311      	orrs	r1, r2
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	e007      	b.n	8001f18 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fb58 	bl	80025e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d121      	bne.n	8001f80 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f023 010f 	bic.w	r1, r3, #15
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	1e5a      	subs	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
 8001f54:	e01c      	b.n	8001f90 <HAL_ADC_Init+0x314>
 8001f56:	bf00      	nop
 8001f58:	24000000 	.word	0x24000000
 8001f5c:	053e2d63 	.word	0x053e2d63
 8001f60:	40022000 	.word	0x40022000
 8001f64:	40022100 	.word	0x40022100
 8001f68:	58026000 	.word	0x58026000
 8001f6c:	40022300 	.word	0x40022300
 8001f70:	58026300 	.word	0x58026300
 8001f74:	fff0c003 	.word	0xfff0c003
 8001f78:	ffffbffc 	.word	0xffffbffc
 8001f7c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 020f 	bic.w	r2, r2, #15
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	f023 0303 	bic.w	r3, r3, #3
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
 8001fa0:	e007      	b.n	8001fb2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	f043 0210 	orr.w	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3724      	adds	r7, #36	; 0x24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}

08001fbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b099      	sub	sp, #100	; 0x64
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a99      	ldr	r2, [pc, #612]	; (800223c <HAL_ADC_ConfigChannel+0x280>)
 8001fd6:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x2a>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e2e6      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x5f8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fe1b 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f040 82cb 	bne.w	8002596 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002008:	2b00      	cmp	r3, #0
 800200a:	d108      	bne.n	800201e <HAL_ADC_ConfigChannel+0x62>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0e9b      	lsrs	r3, r3, #26
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2201      	movs	r2, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	e00f      	b.n	800203e <HAL_ADC_ConfigChannel+0x82>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800202c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202e:	fab3 f383 	clz	r3, r3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f003 031f 	and.w	r3, r3, #31
 8002038:	2201      	movs	r2, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	69d1      	ldr	r1, [r2, #28]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	430b      	orrs	r3, r1
 800204a:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	f7ff fd11 	bl	8001a80 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fde3 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 8002068:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fdf0 	bl	8001c54 <LL_ADC_INJ_IsConversionOngoing>
 8002074:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 80b3 	bne.w	80021e4 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800207e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 80af 	bne.w	80021e4 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	461a      	mov	r2, r3
 8002094:	f7ff fd1d 	bl	8001ad2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002098:	4b69      	ldr	r3, [pc, #420]	; (8002240 <HAL_ADC_ConfigChannel+0x284>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80020a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020a4:	d10b      	bne.n	80020be <HAL_ADC_ConfigChannel+0x102>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	e01d      	b.n	80020fa <HAL_ADC_ConfigChannel+0x13e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10b      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x128>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	e00a      	b.n	80020fa <HAL_ADC_ConfigChannel+0x13e>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d027      	beq.n	8002154 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6919      	ldr	r1, [r3, #16]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002112:	f7ff fc67 	bl	80019e4 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6919      	ldr	r1, [r3, #16]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	7e5b      	ldrb	r3, [r3, #25]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_ADC_ConfigChannel+0x170>
 8002126:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800212a:	e000      	b.n	800212e <HAL_ADC_ConfigChannel+0x172>
 800212c:	2300      	movs	r3, #0
 800212e:	461a      	mov	r2, r3
 8002130:	f7ff fc8e 	bl	8001a50 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6919      	ldr	r1, [r3, #16]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	7e1b      	ldrb	r3, [r3, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d102      	bne.n	800214a <HAL_ADC_ConfigChannel+0x18e>
 8002144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002148:	e000      	b.n	800214c <HAL_ADC_ConfigChannel+0x190>
 800214a:	2300      	movs	r3, #0
 800214c:	461a      	mov	r2, r3
 800214e:	f7ff fc66 	bl	8001a1e <LL_ADC_SetDataRightShift>
 8002152:	e047      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	069b      	lsls	r3, r3, #26
 8002164:	429a      	cmp	r2, r3
 8002166:	d107      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002176:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800217e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	069b      	lsls	r3, r3, #26
 8002188:	429a      	cmp	r2, r3
 800218a:	d107      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800219a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	069b      	lsls	r3, r3, #26
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d107      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021be:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	069b      	lsls	r3, r3, #26
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021e2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fd0d 	bl	8001c08 <LL_ADC_IsEnabled>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 81d9 	bne.w	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	461a      	mov	r2, r3
 8002204:	f7ff fc8e 	bl	8001b24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <HAL_ADC_ConfigChannel+0x280>)
 800220e:	4293      	cmp	r3, r2
 8002210:	f040 8101 	bne.w	8002416 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10f      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x288>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	3301      	adds	r3, #1
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	2b09      	cmp	r3, #9
 8002232:	bf94      	ite	ls
 8002234:	2301      	movls	r3, #1
 8002236:	2300      	movhi	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e016      	b.n	800226a <HAL_ADC_ConfigChannel+0x2ae>
 800223c:	47ff0000 	.word	0x47ff0000
 8002240:	5c001000 	.word	0x5c001000
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f003 031f 	and.w	r3, r3, #31
 8002260:	2b09      	cmp	r3, #9
 8002262:	bf94      	ite	ls
 8002264:	2301      	movls	r3, #1
 8002266:	2300      	movhi	r3, #0
 8002268:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800226a:	2b00      	cmp	r3, #0
 800226c:	d064      	beq.n	8002338 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002276:	2b00      	cmp	r3, #0
 8002278:	d107      	bne.n	800228a <HAL_ADC_ConfigChannel+0x2ce>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e9b      	lsrs	r3, r3, #26
 8002280:	3301      	adds	r3, #1
 8002282:	069b      	lsls	r3, r3, #26
 8002284:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002288:	e00e      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x2ec>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	069b      	lsls	r3, r3, #26
 80022a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x30c>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	3301      	adds	r3, #1
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2101      	movs	r1, #1
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	e010      	b.n	80022ea <HAL_ADC_ConfigChannel+0x32e>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	ea42 0103 	orr.w	r1, r2, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x354>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	3301      	adds	r3, #1
 8002302:	f003 021f 	and.w	r2, r3, #31
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	051b      	lsls	r3, r3, #20
 800230e:	e011      	b.n	8002334 <HAL_ADC_ConfigChannel+0x378>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002318:	fa93 f3a3 	rbit	r3, r3
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	3301      	adds	r3, #1
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002334:	430b      	orrs	r3, r1
 8002336:	e069      	b.n	800240c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x398>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0e9b      	lsrs	r3, r3, #26
 800234a:	3301      	adds	r3, #1
 800234c:	069b      	lsls	r3, r3, #26
 800234e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002352:	e00e      	b.n	8002372 <HAL_ADC_ConfigChannel+0x3b6>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	61fb      	str	r3, [r7, #28]
  return result;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3301      	adds	r3, #1
 800236c:	069b      	lsls	r3, r3, #26
 800236e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x3d6>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	3301      	adds	r3, #1
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	e010      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x3f8>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	617b      	str	r3, [r7, #20]
  return result;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	3301      	adds	r3, #1
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	ea42 0103 	orr.w	r1, r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10d      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x424>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0e9b      	lsrs	r3, r3, #26
 80023ca:	3301      	adds	r3, #1
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	3b1e      	subs	r3, #30
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023de:	e014      	b.n	800240a <HAL_ADC_ConfigChannel+0x44e>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	60fb      	str	r3, [r7, #12]
  return result;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f003 021f 	and.w	r2, r3, #31
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	3b1e      	subs	r3, #30
 8002404:	051b      	lsls	r3, r3, #20
 8002406:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800240a:	430b      	orrs	r3, r1
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	6892      	ldr	r2, [r2, #8]
 8002410:	4619      	mov	r1, r3
 8002412:	f7ff fb5e 	bl	8001ad2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f280 80c4 	bge.w	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a65      	ldr	r2, [pc, #404]	; (80025bc <HAL_ADC_ConfigChannel+0x600>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d004      	beq.n	8002434 <HAL_ADC_ConfigChannel+0x478>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a64      	ldr	r2, [pc, #400]	; (80025c0 <HAL_ADC_ConfigChannel+0x604>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d101      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x47c>
 8002434:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_ADC_ConfigChannel+0x608>)
 8002436:	e000      	b.n	800243a <HAL_ADC_ConfigChannel+0x47e>
 8002438:	4b63      	ldr	r3, [pc, #396]	; (80025c8 <HAL_ADC_ConfigChannel+0x60c>)
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fac4 	bl	80019c8 <LL_ADC_GetCommonPathInternalCh>
 8002440:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a5d      	ldr	r2, [pc, #372]	; (80025bc <HAL_ADC_ConfigChannel+0x600>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x49a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a5b      	ldr	r2, [pc, #364]	; (80025c0 <HAL_ADC_ConfigChannel+0x604>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d10e      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x4b8>
 8002456:	4859      	ldr	r0, [pc, #356]	; (80025bc <HAL_ADC_ConfigChannel+0x600>)
 8002458:	f7ff fbd6 	bl	8001c08 <LL_ADC_IsEnabled>
 800245c:	4604      	mov	r4, r0
 800245e:	4858      	ldr	r0, [pc, #352]	; (80025c0 <HAL_ADC_ConfigChannel+0x604>)
 8002460:	f7ff fbd2 	bl	8001c08 <LL_ADC_IsEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	4323      	orrs	r3, r4
 8002468:	2b00      	cmp	r3, #0
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	e008      	b.n	8002486 <HAL_ADC_ConfigChannel+0x4ca>
 8002474:	4855      	ldr	r0, [pc, #340]	; (80025cc <HAL_ADC_ConfigChannel+0x610>)
 8002476:	f7ff fbc7 	bl	8001c08 <LL_ADC_IsEnabled>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d07b      	beq.n	8002582 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a50      	ldr	r2, [pc, #320]	; (80025d0 <HAL_ADC_ConfigChannel+0x614>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d12e      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x536>
 8002494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d129      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a4a      	ldr	r2, [pc, #296]	; (80025cc <HAL_ADC_ConfigChannel+0x610>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d17f      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a43      	ldr	r2, [pc, #268]	; (80025bc <HAL_ADC_ConfigChannel+0x600>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_ADC_ConfigChannel+0x500>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a42      	ldr	r2, [pc, #264]	; (80025c0 <HAL_ADC_ConfigChannel+0x604>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d101      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x504>
 80024bc:	4a41      	ldr	r2, [pc, #260]	; (80025c4 <HAL_ADC_ConfigChannel+0x608>)
 80024be:	e000      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x506>
 80024c0:	4a41      	ldr	r2, [pc, #260]	; (80025c8 <HAL_ADC_ConfigChannel+0x60c>)
 80024c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024c8:	4619      	mov	r1, r3
 80024ca:	4610      	mov	r0, r2
 80024cc:	f7ff fa69 	bl	80019a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024d0:	4b40      	ldr	r3, [pc, #256]	; (80025d4 <HAL_ADC_ConfigChannel+0x618>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	4a40      	ldr	r2, [pc, #256]	; (80025d8 <HAL_ADC_ConfigChannel+0x61c>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	099b      	lsrs	r3, r3, #6
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80024e2:	e002      	b.n	80024ea <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f9      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024f0:	e05a      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a39      	ldr	r2, [pc, #228]	; (80025dc <HAL_ADC_ConfigChannel+0x620>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d11e      	bne.n	800253a <HAL_ADC_ConfigChannel+0x57e>
 80024fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d119      	bne.n	800253a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a30      	ldr	r2, [pc, #192]	; (80025cc <HAL_ADC_ConfigChannel+0x610>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d14b      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <HAL_ADC_ConfigChannel+0x600>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_ADC_ConfigChannel+0x568>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <HAL_ADC_ConfigChannel+0x604>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x56c>
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_ADC_ConfigChannel+0x608>)
 8002526:	e000      	b.n	800252a <HAL_ADC_ConfigChannel+0x56e>
 8002528:	4a27      	ldr	r2, [pc, #156]	; (80025c8 <HAL_ADC_ConfigChannel+0x60c>)
 800252a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002530:	4619      	mov	r1, r3
 8002532:	4610      	mov	r0, r2
 8002534:	f7ff fa35 	bl	80019a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002538:	e036      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_ADC_ConfigChannel+0x624>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d131      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
 8002544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d12c      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <HAL_ADC_ConfigChannel+0x610>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d127      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_ADC_ConfigChannel+0x600>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_ADC_ConfigChannel+0x5b0>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <HAL_ADC_ConfigChannel+0x604>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x5b4>
 800256c:	4a15      	ldr	r2, [pc, #84]	; (80025c4 <HAL_ADC_ConfigChannel+0x608>)
 800256e:	e000      	b.n	8002572 <HAL_ADC_ConfigChannel+0x5b6>
 8002570:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <HAL_ADC_ConfigChannel+0x60c>)
 8002572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002578:	4619      	mov	r1, r3
 800257a:	4610      	mov	r0, r2
 800257c:	f7ff fa11 	bl	80019a2 <LL_ADC_SetCommonPathInternalCh>
 8002580:	e012      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f043 0220 	orr.w	r2, r3, #32
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002594:	e008      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f043 0220 	orr.w	r2, r3, #32
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3764      	adds	r7, #100	; 0x64
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd90      	pop	{r4, r7, pc}
 80025bc:	40022000 	.word	0x40022000
 80025c0:	40022100 	.word	0x40022100
 80025c4:	40022300 	.word	0x40022300
 80025c8:	58026300 	.word	0x58026300
 80025cc:	58026000 	.word	0x58026000
 80025d0:	cb840000 	.word	0xcb840000
 80025d4:	24000000 	.word	0x24000000
 80025d8:	053e2d63 	.word	0x053e2d63
 80025dc:	c7520000 	.word	0xc7520000
 80025e0:	cfb80000 	.word	0xcfb80000

080025e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a74      	ldr	r2, [pc, #464]	; (80027c4 <ADC_ConfigureBoostMode+0x1e0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d004      	beq.n	8002600 <ADC_ConfigureBoostMode+0x1c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a73      	ldr	r2, [pc, #460]	; (80027c8 <ADC_ConfigureBoostMode+0x1e4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d109      	bne.n	8002614 <ADC_ConfigureBoostMode+0x30>
 8002600:	4b72      	ldr	r3, [pc, #456]	; (80027cc <ADC_ConfigureBoostMode+0x1e8>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	e008      	b.n	8002626 <ADC_ConfigureBoostMode+0x42>
 8002614:	4b6e      	ldr	r3, [pc, #440]	; (80027d0 <ADC_ConfigureBoostMode+0x1ec>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf14      	ite	ne
 8002620:	2301      	movne	r3, #1
 8002622:	2300      	moveq	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01a      	beq.n	8002660 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800262a:	f001 fbd1 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 800262e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002638:	d006      	beq.n	8002648 <ADC_ConfigureBoostMode+0x64>
 800263a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800263e:	d00b      	beq.n	8002658 <ADC_ConfigureBoostMode+0x74>
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d000      	beq.n	8002648 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002646:	e05d      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	60fb      	str	r3, [r7, #12]
        break;
 8002656:	e055      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	60fb      	str	r3, [r7, #12]
        break;
 800265e:	e051      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002660:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002664:	f002 faec 	bl	8004c40 <HAL_RCCEx_GetPeriphCLKFreq>
 8002668:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002672:	d02a      	beq.n	80026ca <ADC_ConfigureBoostMode+0xe6>
 8002674:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002678:	d813      	bhi.n	80026a2 <ADC_ConfigureBoostMode+0xbe>
 800267a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800267e:	d024      	beq.n	80026ca <ADC_ConfigureBoostMode+0xe6>
 8002680:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002684:	d806      	bhi.n	8002694 <ADC_ConfigureBoostMode+0xb0>
 8002686:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800268a:	d01e      	beq.n	80026ca <ADC_ConfigureBoostMode+0xe6>
 800268c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002690:	d01b      	beq.n	80026ca <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002692:	e037      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002698:	d017      	beq.n	80026ca <ADC_ConfigureBoostMode+0xe6>
 800269a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800269e:	d014      	beq.n	80026ca <ADC_ConfigureBoostMode+0xe6>
        break;
 80026a0:	e030      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80026a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026a6:	d021      	beq.n	80026ec <ADC_ConfigureBoostMode+0x108>
 80026a8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026ac:	d806      	bhi.n	80026bc <ADC_ConfigureBoostMode+0xd8>
 80026ae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80026b2:	d013      	beq.n	80026dc <ADC_ConfigureBoostMode+0xf8>
 80026b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026b8:	d014      	beq.n	80026e4 <ADC_ConfigureBoostMode+0x100>
        break;
 80026ba:	e023      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80026bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026c0:	d018      	beq.n	80026f4 <ADC_ConfigureBoostMode+0x110>
 80026c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026c6:	d019      	beq.n	80026fc <ADC_ConfigureBoostMode+0x118>
        break;
 80026c8:	e01c      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	0c9b      	lsrs	r3, r3, #18
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	60fb      	str	r3, [r7, #12]
        break;
 80026da:	e013      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	60fb      	str	r3, [r7, #12]
      break;
 80026e2:	e00f      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	60fb      	str	r3, [r7, #12]
        break;
 80026ea:	e00b      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	099b      	lsrs	r3, r3, #6
 80026f0:	60fb      	str	r3, [r7, #12]
        break;
 80026f2:	e007      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	09db      	lsrs	r3, r3, #7
 80026f8:	60fb      	str	r3, [r7, #12]
        break;
 80026fa:	e003      	b.n	8002704 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	60fb      	str	r3, [r7, #12]
        break;
 8002702:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002704:	f7ff f918 	bl	8001938 <HAL_GetREVID>
 8002708:	4602      	mov	r2, r0
 800270a:	f241 0303 	movw	r3, #4099	; 0x1003
 800270e:	429a      	cmp	r2, r3
 8002710:	d815      	bhi.n	800273e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4a2f      	ldr	r2, [pc, #188]	; (80027d4 <ADC_ConfigureBoostMode+0x1f0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d908      	bls.n	800272c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002728:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 800272a:	e047      	b.n	80027bc <ADC_ConfigureBoostMode+0x1d8>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800273a:	609a      	str	r2, [r3, #8]
}
 800273c:	e03e      	b.n	80027bc <ADC_ConfigureBoostMode+0x1d8>
    freq /= 2U; /* divider by 2 for Rev.V */
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a24      	ldr	r2, [pc, #144]	; (80027d8 <ADC_ConfigureBoostMode+0x1f4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d808      	bhi.n	800275e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800275a:	609a      	str	r2, [r3, #8]
}
 800275c:	e02e      	b.n	80027bc <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a1d      	ldr	r2, [pc, #116]	; (80027d8 <ADC_ConfigureBoostMode+0x1f4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d90e      	bls.n	8002784 <ADC_ConfigureBoostMode+0x1a0>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <ADC_ConfigureBoostMode+0x1f8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d80a      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	e01b      	b.n	80027bc <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a15      	ldr	r2, [pc, #84]	; (80027dc <ADC_ConfigureBoostMode+0x1f8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d90e      	bls.n	80027aa <ADC_ConfigureBoostMode+0x1c6>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <ADC_ConfigureBoostMode+0x1fc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d80a      	bhi.n	80027aa <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	e008      	b.n	80027bc <ADC_ConfigureBoostMode+0x1d8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80027b8:	609a      	str	r2, [r3, #8]
}
 80027ba:	e7ff      	b.n	80027bc <ADC_ConfigureBoostMode+0x1d8>
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40022100 	.word	0x40022100
 80027cc:	40022300 	.word	0x40022300
 80027d0:	58026300 	.word	0x58026300
 80027d4:	01312d00 	.word	0x01312d00
 80027d8:	005f5e10 	.word	0x005f5e10
 80027dc:	00bebc20 	.word	0x00bebc20
 80027e0:	017d7840 	.word	0x017d7840

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <__NVIC_SetPriorityGrouping+0x40>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 800280e:	4313      	orrs	r3, r2
 8002810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002812:	4a04      	ldr	r2, [pc, #16]	; (8002824 <__NVIC_SetPriorityGrouping+0x40>)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	60d3      	str	r3, [r2, #12]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00
 8002828:	05fa0000 	.word	0x05fa0000

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
         );
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	f7ff ff8e 	bl	8002848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff47 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff5e 	bl	800282c <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff90 	bl	800289c <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff5f 	bl	8002848 <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ffb2 	bl	8002904 <SysTick_Config>
 80029a0:	4603      	mov	r3, r0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029ba:	4b89      	ldr	r3, [pc, #548]	; (8002be0 <HAL_GPIO_Init+0x234>)
 80029bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029be:	e194      	b.n	8002cea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2101      	movs	r1, #1
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8186 	beq.w	8002ce4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x3c>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b12      	cmp	r3, #18
 80029e6:	d123      	bne.n	8002a30 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	08da      	lsrs	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3208      	adds	r2, #8
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0203 	and.w	r2, r3, #3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d00b      	beq.n	8002a84 <HAL_GPIO_Init+0xd8>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d007      	beq.n	8002a84 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a78:	2b11      	cmp	r3, #17
 8002a7a:	d003      	beq.n	8002a84 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b12      	cmp	r3, #18
 8002a82:	d130      	bne.n	8002ae6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aba:	2201      	movs	r2, #1
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f003 0201 	and.w	r2, r3, #1
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	2203      	movs	r2, #3
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80e0 	beq.w	8002ce4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b24:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <HAL_GPIO_Init+0x238>)
 8002b26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b2a:	4a2e      	ldr	r2, [pc, #184]	; (8002be4 <HAL_GPIO_Init+0x238>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b34:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_GPIO_Init+0x238>)
 8002b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b42:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <HAL_GPIO_Init+0x23c>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a20      	ldr	r2, [pc, #128]	; (8002bec <HAL_GPIO_Init+0x240>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d052      	beq.n	8002c14 <HAL_GPIO_Init+0x268>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1f      	ldr	r2, [pc, #124]	; (8002bf0 <HAL_GPIO_Init+0x244>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_GPIO_Init+0x22e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <HAL_GPIO_Init+0x248>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02b      	beq.n	8002bd6 <HAL_GPIO_Init+0x22a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_GPIO_Init+0x24c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d025      	beq.n	8002bd2 <HAL_GPIO_Init+0x226>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1c      	ldr	r2, [pc, #112]	; (8002bfc <HAL_GPIO_Init+0x250>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <HAL_GPIO_Init+0x222>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1b      	ldr	r2, [pc, #108]	; (8002c00 <HAL_GPIO_Init+0x254>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d019      	beq.n	8002bca <HAL_GPIO_Init+0x21e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a1a      	ldr	r2, [pc, #104]	; (8002c04 <HAL_GPIO_Init+0x258>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_GPIO_Init+0x21a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a19      	ldr	r2, [pc, #100]	; (8002c08 <HAL_GPIO_Init+0x25c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_GPIO_Init+0x216>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_GPIO_Init+0x260>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <HAL_GPIO_Init+0x212>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <HAL_GPIO_Init+0x264>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_Init+0x20e>
 8002bb6:	2309      	movs	r3, #9
 8002bb8:	e02d      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bba:	230a      	movs	r3, #10
 8002bbc:	e02b      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	e029      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	e027      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	e025      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bca:	2305      	movs	r3, #5
 8002bcc:	e023      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	e021      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e01f      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e01d      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e01b      	b.n	8002c16 <HAL_GPIO_Init+0x26a>
 8002bde:	bf00      	nop
 8002be0:	58000080 	.word	0x58000080
 8002be4:	58024400 	.word	0x58024400
 8002be8:	58000400 	.word	0x58000400
 8002bec:	58020000 	.word	0x58020000
 8002bf0:	58020400 	.word	0x58020400
 8002bf4:	58020800 	.word	0x58020800
 8002bf8:	58020c00 	.word	0x58020c00
 8002bfc:	58021000 	.word	0x58021000
 8002c00:	58021400 	.word	0x58021400
 8002c04:	58021800 	.word	0x58021800
 8002c08:	58021c00 	.word	0x58021c00
 8002c0c:	58022000 	.word	0x58022000
 8002c10:	58022400 	.word	0x58022400
 8002c14:	2300      	movs	r3, #0
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	f002 0203 	and.w	r2, r2, #3
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	4093      	lsls	r3, r2
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c26:	4938      	ldr	r1, [pc, #224]	; (8002d08 <HAL_GPIO_Init+0x35c>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f47f ae63 	bne.w	80029c0 <HAL_GPIO_Init+0x14>
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	58000400 	.word	0x58000400

08002d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d1c:	787b      	ldrb	r3, [r7, #1]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d22:	887a      	ldrh	r2, [r7, #2]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d28:	e003      	b.n	8002d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d2a:	887b      	ldrh	r3, [r7, #2]
 8002d2c:	041a      	lsls	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	619a      	str	r2, [r3, #24]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	460b      	mov	r3, r1
 8002d48:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	401a      	ands	r2, r3
 8002d52:	887b      	ldrh	r3, [r7, #2]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d104      	bne.n	8002d62 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d58:	887b      	ldrh	r3, [r7, #2]
 8002d5a:	041a      	lsls	r2, r3, #16
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002d60:	e002      	b.n	8002d68 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e07f      	b.n	8002e86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe f9ec 	bl	8001178 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2224      	movs	r2, #36	; 0x24
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d107      	bne.n	8002dee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	e006      	b.n	8002dfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d104      	bne.n	8002e0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <HAL_I2C_Init+0x11c>)
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	ea42 0103 	orr.w	r1, r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	021a      	lsls	r2, r3, #8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69d9      	ldr	r1, [r3, #28]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1a      	ldr	r2, [r3, #32]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	02008000 	.word	0x02008000

08002e94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	d138      	bne.n	8002f1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e032      	b.n	8002f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2224      	movs	r2, #36	; 0x24
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6819      	ldr	r1, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b085      	sub	sp, #20
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d139      	bne.n	8002fb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e033      	b.n	8002fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2224      	movs	r2, #36	; 0x24
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002fcc:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_PWREx_ConfigSupply+0x6c>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d008      	beq.n	8002fea <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002fd8:	4b15      	ldr	r3, [pc, #84]	; (8003030 <HAL_PWREx_ConfigSupply+0x6c>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d001      	beq.n	8002fea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e01d      	b.n	8003026 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_PWREx_ConfigSupply+0x6c>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f023 0207 	bic.w	r2, r3, #7
 8002ff2:	490f      	ldr	r1, [pc, #60]	; (8003030 <HAL_PWREx_ConfigSupply+0x6c>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ffa:	f7fe fc91 	bl	8001920 <HAL_GetTick>
 8002ffe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003000:	e009      	b.n	8003016 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8003002:	f7fe fc8d 	bl	8001920 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003010:	d901      	bls.n	8003016 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e007      	b.n	8003026 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_PWREx_ConfigSupply+0x6c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800301e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003022:	d1ee      	bne.n	8003002 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	58024800 	.word	0x58024800

08003034 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e3a4      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8087 	beq.w	8003162 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003054:	4b9a      	ldr	r3, [pc, #616]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800305e:	4b98      	ldr	r3, [pc, #608]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	2b10      	cmp	r3, #16
 8003068:	d007      	beq.n	800307a <HAL_RCC_OscConfig+0x46>
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	2b18      	cmp	r3, #24
 800306e:	d110      	bne.n	8003092 <HAL_RCC_OscConfig+0x5e>
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d10b      	bne.n	8003092 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800307a:	4b91      	ldr	r3, [pc, #580]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d06c      	beq.n	8003160 <HAL_RCC_OscConfig+0x12c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d168      	bne.n	8003160 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e37e      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x76>
 800309c:	4b88      	ldr	r3, [pc, #544]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a87      	ldr	r2, [pc, #540]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e02e      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10c      	bne.n	80030cc <HAL_RCC_OscConfig+0x98>
 80030b2:	4b83      	ldr	r3, [pc, #524]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a82      	ldr	r2, [pc, #520]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b80      	ldr	r3, [pc, #512]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7f      	ldr	r2, [pc, #508]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0xbc>
 80030d6:	4b7a      	ldr	r3, [pc, #488]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a79      	ldr	r2, [pc, #484]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b77      	ldr	r3, [pc, #476]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a76      	ldr	r2, [pc, #472]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xd4>
 80030f0:	4b73      	ldr	r3, [pc, #460]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a72      	ldr	r2, [pc, #456]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b70      	ldr	r3, [pc, #448]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6f      	ldr	r2, [pc, #444]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fe fc06 	bl	8001920 <HAL_GetTick>
 8003114:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003118:	f7fe fc02 	bl	8001920 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e332      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800312a:	4b65      	ldr	r3, [pc, #404]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xe4>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7fe fbf2 	bl	8001920 <HAL_GetTick>
 800313c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003140:	f7fe fbee 	bl	8001920 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e31e      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003152:	4b5b      	ldr	r3, [pc, #364]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x10c>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80b0 	beq.w	80032d0 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003178:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800317a:	4b51      	ldr	r3, [pc, #324]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <HAL_RCC_OscConfig+0x162>
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b18      	cmp	r3, #24
 800318a:	d149      	bne.n	8003220 <HAL_RCC_OscConfig+0x1ec>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d144      	bne.n	8003220 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003196:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x17a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e2f0      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031ae:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 0219 	bic.w	r2, r3, #25
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	4941      	ldr	r1, [pc, #260]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fbae 	bl	8001920 <HAL_GetTick>
 80031c4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe fbaa 	bl	8001920 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e2da      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	f7fe fba7 	bl	8001938 <HAL_GetREVID>
 80031ea:	4602      	mov	r2, r0
 80031ec:	f241 0303 	movw	r3, #4099	; 0x1003
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d80a      	bhi.n	800320a <HAL_RCC_OscConfig+0x1d6>
 80031f4:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	031b      	lsls	r3, r3, #12
 8003202:	492f      	ldr	r1, [pc, #188]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003208:	e062      	b.n	80032d0 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320a:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	061b      	lsls	r3, r3, #24
 8003218:	4929      	ldr	r1, [pc, #164]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800321e:	e057      	b.n	80032d0 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d038      	beq.n	800329a <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003228:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 0219 	bic.w	r2, r3, #25
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4922      	ldr	r1, [pc, #136]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fe fb71 	bl	8001920 <HAL_GetTick>
 800323e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003242:	f7fe fb6d 	bl	8001920 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e29d      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003260:	f7fe fb6a 	bl	8001938 <HAL_GetREVID>
 8003264:	4602      	mov	r2, r0
 8003266:	f241 0303 	movw	r3, #4099	; 0x1003
 800326a:	429a      	cmp	r2, r3
 800326c:	d80a      	bhi.n	8003284 <HAL_RCC_OscConfig+0x250>
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	031b      	lsls	r3, r3, #12
 800327c:	4910      	ldr	r1, [pc, #64]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
 8003282:	e025      	b.n	80032d0 <HAL_RCC_OscConfig+0x29c>
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	490b      	ldr	r1, [pc, #44]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
 8003298:	e01a      	b.n	80032d0 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <HAL_RCC_OscConfig+0x28c>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe fb3b 	bl	8001920 <HAL_GetTick>
 80032aa:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fe fb37 	bl	8001920 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d903      	bls.n	80032c4 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e267      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
 80032c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032c4:	4ba0      	ldr	r3, [pc, #640]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ee      	bne.n	80032ae <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 808f 	beq.w	80033fc <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	4b9a      	ldr	r3, [pc, #616]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032e6:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032e8:	4b97      	ldr	r3, [pc, #604]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d007      	beq.n	8003304 <HAL_RCC_OscConfig+0x2d0>
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	2b18      	cmp	r3, #24
 80032f8:	d12d      	bne.n	8003356 <HAL_RCC_OscConfig+0x322>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d128      	bne.n	8003356 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003304:	4b90      	ldr	r3, [pc, #576]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_RCC_OscConfig+0x2e8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d001      	beq.n	800331c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e239      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800331c:	f7fe fb0c 	bl	8001938 <HAL_GetREVID>
 8003320:	4602      	mov	r2, r0
 8003322:	f241 0303 	movw	r3, #4099	; 0x1003
 8003326:	429a      	cmp	r2, r3
 8003328:	d80a      	bhi.n	8003340 <HAL_RCC_OscConfig+0x30c>
 800332a:	4b87      	ldr	r3, [pc, #540]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	069b      	lsls	r3, r3, #26
 8003338:	4983      	ldr	r1, [pc, #524]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800333e:	e05d      	b.n	80033fc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003340:	4b81      	ldr	r3, [pc, #516]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	497e      	ldr	r1, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003350:	4313      	orrs	r3, r2
 8003352:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003354:	e052      	b.n	80033fc <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d035      	beq.n	80033ca <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800335e:	4b7a      	ldr	r3, [pc, #488]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a79      	ldr	r2, [pc, #484]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fe fad9 	bl	8001920 <HAL_GetTick>
 800336e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003372:	f7fe fad5 	bl	8001920 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e205      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003384:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003390:	f7fe fad2 	bl	8001938 <HAL_GetREVID>
 8003394:	4602      	mov	r2, r0
 8003396:	f241 0303 	movw	r3, #4099	; 0x1003
 800339a:	429a      	cmp	r2, r3
 800339c:	d80a      	bhi.n	80033b4 <HAL_RCC_OscConfig+0x380>
 800339e:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	069b      	lsls	r3, r3, #26
 80033ac:	4966      	ldr	r1, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
 80033b2:	e023      	b.n	80033fc <HAL_RCC_OscConfig+0x3c8>
 80033b4:	4b64      	ldr	r3, [pc, #400]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	4961      	ldr	r1, [pc, #388]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60cb      	str	r3, [r1, #12]
 80033c8:	e018      	b.n	80033fc <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80033ca:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a5e      	ldr	r2, [pc, #376]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80033d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe faa3 	bl	8001920 <HAL_GetTick>
 80033da:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80033de:	f7fe fa9f 	bl	8001920 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e1cf      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033f0:	4b55      	ldr	r3, [pc, #340]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f0      	bne.n	80033de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d036      	beq.n	8003476 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d019      	beq.n	8003444 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003410:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	4a4c      	ldr	r2, [pc, #304]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fe fa80 	bl	8001920 <HAL_GetTick>
 8003420:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003424:	f7fe fa7c 	bl	8001920 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1ac      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x3f0>
 8003442:	e018      	b.n	8003476 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003444:	4b40      	ldr	r3, [pc, #256]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003448:	4a3f      	ldr	r2, [pc, #252]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe fa66 	bl	8001920 <HAL_GetTick>
 8003454:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe fa62 	bl	8001920 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e192      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d036      	beq.n	80034f0 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d019      	beq.n	80034be <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800348a:	4b2f      	ldr	r3, [pc, #188]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 8003490:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003494:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003496:	f7fe fa43 	bl	8001920 <HAL_GetTick>
 800349a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800349e:	f7fe fa3f 	bl	8001920 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e16f      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x46a>
 80034bc:	e018      	b.n	80034f0 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a21      	ldr	r2, [pc, #132]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80034c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80034ca:	f7fe fa29 	bl	8001920 <HAL_GetTick>
 80034ce:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80034d2:	f7fe fa25 	bl	8001920 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e155      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f0      	bne.n	80034d2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8086 	beq.w	800360a <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034fe:	4b13      	ldr	r3, [pc, #76]	; (800354c <HAL_RCC_OscConfig+0x518>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a12      	ldr	r2, [pc, #72]	; (800354c <HAL_RCC_OscConfig+0x518>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800350a:	f7fe fa09 	bl	8001920 <HAL_GetTick>
 800350e:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fe fa05 	bl	8001920 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b64      	cmp	r3, #100	; 0x64
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e135      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_OscConfig+0x518>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10b      	bne.n	8003550 <HAL_RCC_OscConfig+0x51c>
 8003538:	4b03      	ldr	r3, [pc, #12]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a02      	ldr	r2, [pc, #8]	; (8003548 <HAL_RCC_OscConfig+0x514>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
 8003544:	e032      	b.n	80035ac <HAL_RCC_OscConfig+0x578>
 8003546:	bf00      	nop
 8003548:	58024400 	.word	0x58024400
 800354c:	58024800 	.word	0x58024800
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10c      	bne.n	8003572 <HAL_RCC_OscConfig+0x53e>
 8003558:	4b8f      	ldr	r3, [pc, #572]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	4a8e      	ldr	r2, [pc, #568]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	6713      	str	r3, [r2, #112]	; 0x70
 8003564:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a8b      	ldr	r2, [pc, #556]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800356a:	f023 0304 	bic.w	r3, r3, #4
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	e01c      	b.n	80035ac <HAL_RCC_OscConfig+0x578>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b05      	cmp	r3, #5
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0x560>
 800357a:	4b87      	ldr	r3, [pc, #540]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a86      	ldr	r2, [pc, #536]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
 8003586:	4b84      	ldr	r3, [pc, #528]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	4a83      	ldr	r2, [pc, #524]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	6713      	str	r3, [r2, #112]	; 0x70
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0x578>
 8003594:	4b80      	ldr	r3, [pc, #512]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4a7f      	ldr	r2, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	6713      	str	r3, [r2, #112]	; 0x70
 80035a0:	4b7d      	ldr	r3, [pc, #500]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a7c      	ldr	r2, [pc, #496]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80035a6:	f023 0304 	bic.w	r3, r3, #4
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d015      	beq.n	80035e0 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b4:	f7fe f9b4 	bl	8001920 <HAL_GetTick>
 80035b8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fe f9b0 	bl	8001920 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e0de      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035d2:	4b71      	ldr	r3, [pc, #452]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0ee      	beq.n	80035bc <HAL_RCC_OscConfig+0x588>
 80035de:	e014      	b.n	800360a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe f99e 	bl	8001920 <HAL_GetTick>
 80035e4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e8:	f7fe f99a 	bl	8001920 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e0c8      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035fe:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1ee      	bne.n	80035e8 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80bd 	beq.w	800378e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003614:	4b60      	ldr	r3, [pc, #384]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800361c:	2b18      	cmp	r3, #24
 800361e:	f000 80b4 	beq.w	800378a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	2b02      	cmp	r3, #2
 8003628:	f040 8095 	bne.w	8003756 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800362c:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a59      	ldr	r2, [pc, #356]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe f972 	bl	8001920 <HAL_GetTick>
 800363c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003640:	f7fe f96e 	bl	8001920 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e09e      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003652:	4b51      	ldr	r3, [pc, #324]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800365e:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003662:	4b4e      	ldr	r3, [pc, #312]	; (800379c <HAL_RCC_OscConfig+0x768>)
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	430a      	orrs	r2, r1
 8003672:	4949      	ldr	r1, [pc, #292]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003674:	4313      	orrs	r3, r2
 8003676:	628b      	str	r3, [r1, #40]	; 0x28
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	3b01      	subs	r3, #1
 800367e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	3b01      	subs	r3, #1
 8003688:	025b      	lsls	r3, r3, #9
 800368a:	b29b      	uxth	r3, r3
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	3b01      	subs	r3, #1
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a0:	3b01      	subs	r3, #1
 80036a2:	061b      	lsls	r3, r3, #24
 80036a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036a8:	493b      	ldr	r1, [pc, #236]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80036ae:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	4a39      	ldr	r2, [pc, #228]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036ba:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036be:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <HAL_RCC_OscConfig+0x76c>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036c6:	00d2      	lsls	r2, r2, #3
 80036c8:	4933      	ldr	r1, [pc, #204]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036ce:	4b32      	ldr	r3, [pc, #200]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	f023 020c 	bic.w	r2, r3, #12
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	492f      	ldr	r1, [pc, #188]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036e0:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f023 0202 	bic.w	r2, r3, #2
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	492a      	ldr	r1, [pc, #168]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036f2:	4b29      	ldr	r3, [pc, #164]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	4a28      	ldr	r2, [pc, #160]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	4a25      	ldr	r2, [pc, #148]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003708:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	4a22      	ldr	r2, [pc, #136]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	4a1f      	ldr	r2, [pc, #124]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800371c:	f043 0301 	orr.w	r3, r3, #1
 8003720:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003722:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1c      	ldr	r2, [pc, #112]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fe f8f7 	bl	8001920 <HAL_GetTick>
 8003732:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003736:	f7fe f8f3 	bl	8001920 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e023      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f0      	beq.n	8003736 <HAL_RCC_OscConfig+0x702>
 8003754:	e01b      	b.n	800378e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800375c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fe f8dd 	bl	8001920 <HAL_GetTick>
 8003766:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376a:	f7fe f8d9 	bl	8001920 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e009      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_OscConfig+0x764>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x736>
 8003788:	e001      	b.n	800378e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3728      	adds	r7, #40	; 0x28
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	58024400 	.word	0x58024400
 800379c:	fffffc0c 	.word	0xfffffc0c
 80037a0:	ffff0007 	.word	0xffff0007

080037a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e18d      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b8a      	ldr	r3, [pc, #552]	; (80039e4 <HAL_RCC_ClockConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d910      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b87      	ldr	r3, [pc, #540]	; (80039e4 <HAL_RCC_ClockConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 020f 	bic.w	r2, r3, #15
 80037ce:	4985      	ldr	r1, [pc, #532]	; (80039e4 <HAL_RCC_ClockConfig+0x240>)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b83      	ldr	r3, [pc, #524]	; (80039e4 <HAL_RCC_ClockConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e175      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003800:	429a      	cmp	r2, r3
 8003802:	d908      	bls.n	8003816 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003804:	4b78      	ldr	r3, [pc, #480]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	4975      	ldr	r1, [pc, #468]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003812:	4313      	orrs	r3, r2
 8003814:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d010      	beq.n	8003844 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800382e:	429a      	cmp	r2, r3
 8003830:	d908      	bls.n	8003844 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	496a      	ldr	r1, [pc, #424]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003840:	4313      	orrs	r3, r2
 8003842:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	d010      	beq.n	8003872 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	4b64      	ldr	r3, [pc, #400]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800385c:	429a      	cmp	r2, r3
 800385e:	d908      	bls.n	8003872 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003860:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	495e      	ldr	r1, [pc, #376]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 800386e:	4313      	orrs	r3, r2
 8003870:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d010      	beq.n	80038a0 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69da      	ldr	r2, [r3, #28]
 8003882:	4b59      	ldr	r3, [pc, #356]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800388a:	429a      	cmp	r2, r3
 800388c:	d908      	bls.n	80038a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800388e:	4b56      	ldr	r3, [pc, #344]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	4953      	ldr	r1, [pc, #332]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 800389c:	4313      	orrs	r3, r2
 800389e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d010      	beq.n	80038ce <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	4b4d      	ldr	r3, [pc, #308]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d908      	bls.n	80038ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038bc:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f023 020f 	bic.w	r2, r3, #15
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4947      	ldr	r1, [pc, #284]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d055      	beq.n	8003986 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038da:	4b43      	ldr	r3, [pc, #268]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4940      	ldr	r1, [pc, #256]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038f4:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d121      	bne.n	8003944 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0e7      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b03      	cmp	r3, #3
 800390a:	d107      	bne.n	800391c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800390c:	4b36      	ldr	r3, [pc, #216]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d115      	bne.n	8003944 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0db      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d107      	bne.n	8003934 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003924:	4b30      	ldr	r3, [pc, #192]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0cf      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0c7      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f023 0207 	bic.w	r2, r3, #7
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4925      	ldr	r1, [pc, #148]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003952:	4313      	orrs	r3, r2
 8003954:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003956:	f7fd ffe3 	bl	8001920 <HAL_GetTick>
 800395a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395c:	e00a      	b.n	8003974 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395e:	f7fd ffdf 	bl	8001920 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e0af      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	429a      	cmp	r2, r3
 8003984:	d1eb      	bne.n	800395e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d010      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	429a      	cmp	r2, r3
 80039a0:	d208      	bcs.n	80039b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a2:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f023 020f 	bic.w	r2, r3, #15
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	490e      	ldr	r1, [pc, #56]	; (80039e8 <HAL_RCC_ClockConfig+0x244>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <HAL_RCC_ClockConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d214      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HAL_RCC_ClockConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 020f 	bic.w	r2, r3, #15
 80039ca:	4906      	ldr	r1, [pc, #24]	; (80039e4 <HAL_RCC_ClockConfig+0x240>)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <HAL_RCC_ClockConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e077      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x330>
 80039e4:	52002000 	.word	0x52002000
 80039e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d010      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	4b37      	ldr	r3, [pc, #220]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d208      	bcs.n	8003a1a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a08:	4b34      	ldr	r3, [pc, #208]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	4931      	ldr	r1, [pc, #196]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d010      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d208      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	4926      	ldr	r1, [pc, #152]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d010      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699a      	ldr	r2, [r3, #24]
 8003a58:	4b20      	ldr	r3, [pc, #128]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d208      	bcs.n	8003a76 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	491a      	ldr	r1, [pc, #104]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d208      	bcs.n	8003aa4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	490f      	ldr	r1, [pc, #60]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003aa4:	f000 f822 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003aa8:	4601      	mov	r1, r0
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <HAL_RCC_ClockConfig+0x338>)
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <HAL_RCC_ClockConfig+0x33c>)
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	fa21 f303 	lsr.w	r3, r1, r3
 8003ac0:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <HAL_RCC_ClockConfig+0x340>)
 8003ac2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <HAL_RCC_ClockConfig+0x344>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fd fedf 	bl	800188c <HAL_InitTick>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003ad2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	58024400 	.word	0x58024400
 8003ae0:	08008e08 	.word	0x08008e08
 8003ae4:	24000000 	.word	0x24000000
 8003ae8:	24000008 	.word	0x24000008

08003aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b089      	sub	sp, #36	; 0x24
 8003af0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af2:	4baf      	ldr	r3, [pc, #700]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003afa:	2b18      	cmp	r3, #24
 8003afc:	f200 814e 	bhi.w	8003d9c <HAL_RCC_GetSysClockFreq+0x2b0>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b6d 	.word	0x08003b6d
 8003b0c:	08003d9d 	.word	0x08003d9d
 8003b10:	08003d9d 	.word	0x08003d9d
 8003b14:	08003d9d 	.word	0x08003d9d
 8003b18:	08003d9d 	.word	0x08003d9d
 8003b1c:	08003d9d 	.word	0x08003d9d
 8003b20:	08003d9d 	.word	0x08003d9d
 8003b24:	08003d9d 	.word	0x08003d9d
 8003b28:	08003b93 	.word	0x08003b93
 8003b2c:	08003d9d 	.word	0x08003d9d
 8003b30:	08003d9d 	.word	0x08003d9d
 8003b34:	08003d9d 	.word	0x08003d9d
 8003b38:	08003d9d 	.word	0x08003d9d
 8003b3c:	08003d9d 	.word	0x08003d9d
 8003b40:	08003d9d 	.word	0x08003d9d
 8003b44:	08003d9d 	.word	0x08003d9d
 8003b48:	08003b99 	.word	0x08003b99
 8003b4c:	08003d9d 	.word	0x08003d9d
 8003b50:	08003d9d 	.word	0x08003d9d
 8003b54:	08003d9d 	.word	0x08003d9d
 8003b58:	08003d9d 	.word	0x08003d9d
 8003b5c:	08003d9d 	.word	0x08003d9d
 8003b60:	08003d9d 	.word	0x08003d9d
 8003b64:	08003d9d 	.word	0x08003d9d
 8003b68:	08003b9f 	.word	0x08003b9f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b6c:	4b90      	ldr	r3, [pc, #576]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d009      	beq.n	8003b8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b78:	4b8d      	ldr	r3, [pc, #564]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	08db      	lsrs	r3, r3, #3
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	4a8c      	ldr	r2, [pc, #560]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
 8003b88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003b8a:	e10a      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003b8c:	4b89      	ldr	r3, [pc, #548]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003b8e:	61bb      	str	r3, [r7, #24]
    break;
 8003b90:	e107      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003b92:	4b89      	ldr	r3, [pc, #548]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003b94:	61bb      	str	r3, [r7, #24]
    break;
 8003b96:	e104      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003b98:	4b88      	ldr	r3, [pc, #544]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003b9a:	61bb      	str	r3, [r7, #24]
    break;
 8003b9c:	e101      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b9e:	4b84      	ldr	r3, [pc, #528]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003ba8:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003bb4:	4b7e      	ldr	r3, [pc, #504]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003bbe:	4b7c      	ldr	r3, [pc, #496]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc2:	08db      	lsrs	r3, r3, #3
 8003bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 80da 	beq.w	8003d96 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d05a      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x1b2>
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d302      	bcc.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x106>
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d078      	beq.n	8003ce2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003bf0:	e099      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bf2:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d02d      	beq.n	8003c5a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bfe:	4b6c      	ldr	r3, [pc, #432]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	08db      	lsrs	r3, r3, #3
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	4a6a      	ldr	r2, [pc, #424]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	ee07 3a90 	vmov	s15, r3
 8003c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c28:	4b61      	ldr	r3, [pc, #388]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c30:	ee07 3a90 	vmov	s15, r3
 8003c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c38:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c3c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003dc0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c54:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003c58:	e087      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c64:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003dc4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c80:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003dc0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003c84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c9c:	e065      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	ee07 3a90 	vmov	s15, r3
 8003ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003dc8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003cac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb0:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb8:	ee07 3a90 	vmov	s15, r3
 8003cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cc4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003dc0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003cc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ce0:	e043      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cec:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003dcc <HAL_RCC_GetSysClockFreq+0x2e0>
 8003cf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf4:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfc:	ee07 3a90 	vmov	s15, r3
 8003d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d04:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d08:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003dc0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003d0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d24:	e021      	b.n	8003d6a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	ee07 3a90 	vmov	s15, r3
 8003d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d30:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003dc8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d48:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d4c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003dc0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003d50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d68:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	0a5b      	lsrs	r3, r3, #9
 8003d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d74:	3301      	adds	r3, #1
 8003d76:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d8e:	ee17 3a90 	vmov	r3, s15
 8003d92:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003d94:	e005      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
    break;
 8003d9a:	e002      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003d9e:	61bb      	str	r3, [r7, #24]
    break;
 8003da0:	bf00      	nop
  }

  return sysclockfreq;
 8003da2:	69bb      	ldr	r3, [r7, #24]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3724      	adds	r7, #36	; 0x24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	58024400 	.word	0x58024400
 8003db4:	03d09000 	.word	0x03d09000
 8003db8:	003d0900 	.word	0x003d0900
 8003dbc:	017d7840 	.word	0x017d7840
 8003dc0:	46000000 	.word	0x46000000
 8003dc4:	4c742400 	.word	0x4c742400
 8003dc8:	4a742400 	.word	0x4a742400
 8003dcc:	4bbebc20 	.word	0x4bbebc20

08003dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dd4:	f001 fd64 	bl	80058a0 <HAL_RCCEx_GetD1SysClockFreq>
 8003dd8:	4601      	mov	r1, r0
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x2c>)
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <HAL_RCC_GetHCLKFreq+0x30>)
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	fa21 f303 	lsr.w	r3, r1, r3
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x34>)
 8003df0:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003df2:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <HAL_RCC_GetHCLKFreq+0x34>)
 8003df4:	681b      	ldr	r3, [r3, #0]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	08008e08 	.word	0x08008e08
 8003e04:	24000004 	.word	0x24000004

08003e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e0c:	f7ff ffe0 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003e10:	4601      	mov	r1, r0
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e1e:	5cd3      	ldrb	r3, [r2, r3]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	08008e08 	.word	0x08008e08

08003e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003e38:	f7ff ffca 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 8003e3c:	4601      	mov	r1, r0
 8003e3e:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4a04      	ldr	r2, [pc, #16]	; (8003e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e4a:	5cd3      	ldrb	r3, [r2, r3]
 8003e4c:	f003 031f 	and.w	r3, r3, #31
 8003e50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	58024400 	.word	0x58024400
 8003e5c:	08008e08 	.word	0x08008e08

08003e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e68:	2300      	movs	r3, #0
 8003e6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d03d      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e84:	d013      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e8a:	d802      	bhi.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003e90:	e01f      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e96:	d013      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003e98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e9c:	d01c      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003e9e:	e018      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea0:	4baf      	ldr	r3, [pc, #700]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	4aae      	ldr	r2, [pc, #696]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003eac:	e015      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 fd0f 	bl	80058d8 <RCCEx_PLL2_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ebe:	e00c      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3324      	adds	r3, #36	; 0x24
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 fdb8 	bl	8005a3c <RCCEx_PLL3_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ed0:	e003      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed6:	e000      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ee0:	4b9f      	ldr	r3, [pc, #636]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eec:	499c      	ldr	r1, [pc, #624]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ef2:	e001      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d03d      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d826      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003f0c:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f29 	.word	0x08003f29
 8003f18:	08003f37 	.word	0x08003f37
 8003f1c:	08003f49 	.word	0x08003f49
 8003f20:	08003f61 	.word	0x08003f61
 8003f24:	08003f61 	.word	0x08003f61
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f28:	4b8d      	ldr	r3, [pc, #564]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	4a8c      	ldr	r2, [pc, #560]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f34:	e015      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 fccb 	bl	80058d8 <RCCEx_PLL2_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f46:	e00c      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3324      	adds	r3, #36	; 0x24
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 fd74 	bl	8005a3c <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f58:	e003      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f68:	4b7d      	ldr	r3, [pc, #500]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6c:	f023 0207 	bic.w	r2, r3, #7
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	497a      	ldr	r1, [pc, #488]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	650b      	str	r3, [r1, #80]	; 0x50
 8003f7a:	e001      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d03e      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	d01c      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003f94:	2b80      	cmp	r3, #128	; 0x80
 8003f96:	d804      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d00d      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003fa0:	e01e      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fa4:	d01f      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003faa:	d01e      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003fac:	e018      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fae:	4b6c      	ldr	r3, [pc, #432]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4a6b      	ldr	r2, [pc, #428]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fba:	e017      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 fc88 	bl	80058d8 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fcc:	e00e      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 fd31 	bl	8005a3c <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003fde:	e005      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ff2:	4b5b      	ldr	r3, [pc, #364]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffe:	4958      	ldr	r1, [pc, #352]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004000:	4313      	orrs	r3, r2
 8004002:	650b      	str	r3, [r1, #80]	; 0x50
 8004004:	e001      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004012:	2b00      	cmp	r3, #0
 8004014:	d044      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800401c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004020:	d01f      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004026:	d805      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800402c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004030:	d00e      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004032:	e01f      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004034:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004038:	d01f      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800403a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800403e:	d01e      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004040:	e018      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004042:	4b47      	ldr	r3, [pc, #284]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	4a46      	ldr	r2, [pc, #280]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800404c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800404e:	e017      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	2100      	movs	r1, #0
 8004056:	4618      	mov	r0, r3
 8004058:	f001 fc3e 	bl	80058d8 <RCCEx_PLL2_Config>
 800405c:	4603      	mov	r3, r0
 800405e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004060:	e00e      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3324      	adds	r3, #36	; 0x24
 8004066:	2100      	movs	r1, #0
 8004068:	4618      	mov	r0, r3
 800406a:	f001 fce7 	bl	8005a3c <RCCEx_PLL3_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004072:	e005      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75fb      	strb	r3, [r7, #23]
      break;
 8004078:	e002      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800407a:	bf00      	nop
 800407c:	e000      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800407e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004086:	4b36      	ldr	r3, [pc, #216]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004094:	4932      	ldr	r1, [pc, #200]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004096:	4313      	orrs	r3, r2
 8004098:	658b      	str	r3, [r1, #88]	; 0x58
 800409a:	e001      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d044      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040b6:	d01f      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80040b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040bc:	d805      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80040c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040c6:	d00e      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80040c8:	e01f      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80040ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040ce:	d01f      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80040d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d4:	d01e      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80040d6:	e018      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d8:	4b21      	ldr	r3, [pc, #132]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	4a20      	ldr	r2, [pc, #128]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040e4:	e017      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3304      	adds	r3, #4
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 fbf3 	bl	80058d8 <RCCEx_PLL2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040f6:	e00e      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3324      	adds	r3, #36	; 0x24
 80040fc:	2100      	movs	r1, #0
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 fc9c 	bl	8005a3c <RCCEx_PLL3_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004108:	e005      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800411c:	4b10      	ldr	r3, [pc, #64]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800412a:	490d      	ldr	r1, [pc, #52]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800412c:	4313      	orrs	r3, r2
 800412e:	658b      	str	r3, [r1, #88]	; 0x58
 8004130:	e001      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d035      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004146:	2b10      	cmp	r3, #16
 8004148:	d00c      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800414a:	2b10      	cmp	r3, #16
 800414c:	d802      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01b      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004152:	e017      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004154:	2b20      	cmp	r3, #32
 8004156:	d00c      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004158:	2b30      	cmp	r3, #48	; 0x30
 800415a:	d018      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800415c:	e012      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004164:	4baf      	ldr	r3, [pc, #700]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	4aae      	ldr	r2, [pc, #696]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800416a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004170:	e00e      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3304      	adds	r3, #4
 8004176:	2102      	movs	r1, #2
 8004178:	4618      	mov	r0, r3
 800417a:	f001 fbad 	bl	80058d8 <RCCEx_PLL2_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004182:	e005      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
      break;
 8004188:	e002      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800418e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004196:	4ba3      	ldr	r3, [pc, #652]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a2:	49a0      	ldr	r1, [pc, #640]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041a8:	e001      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d042      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c2:	d01f      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80041c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041c8:	d805      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80041ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d2:	d00e      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80041d4:	e01f      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80041d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041da:	d01f      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80041dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e0:	d01e      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80041e2:	e018      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e4:	4b8f      	ldr	r3, [pc, #572]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	4a8e      	ldr	r2, [pc, #568]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80041f0:	e017      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3304      	adds	r3, #4
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 fb6d 	bl	80058d8 <RCCEx_PLL2_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004202:	e00e      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3324      	adds	r3, #36	; 0x24
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f001 fc16 	bl	8005a3c <RCCEx_PLL3_Config>
 8004210:	4603      	mov	r3, r0
 8004212:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004214:	e005      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]
      break;
 800421a:	e002      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800421c:	bf00      	nop
 800421e:	e000      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004228:	4b7e      	ldr	r3, [pc, #504]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800422a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	497b      	ldr	r1, [pc, #492]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004236:	4313      	orrs	r3, r2
 8004238:	650b      	str	r3, [r1, #80]	; 0x50
 800423a:	e001      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d042      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004254:	d01b      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800425a:	d805      	bhi.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d022      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004266:	e01b      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800426c:	d01d      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800426e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004272:	d01c      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004274:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004278:	d01b      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800427a:	e011      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	2101      	movs	r1, #1
 8004282:	4618      	mov	r0, r3
 8004284:	f001 fb28 	bl	80058d8 <RCCEx_PLL2_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800428c:	e012      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3324      	adds	r3, #36	; 0x24
 8004292:	2101      	movs	r1, #1
 8004294:	4618      	mov	r0, r3
 8004296:	f001 fbd1 	bl	8005a3c <RCCEx_PLL3_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800429e:	e009      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	75fb      	strb	r3, [r7, #23]
      break;
 80042a4:	e006      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80042a6:	bf00      	nop
 80042a8:	e004      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80042aa:	bf00      	nop
 80042ac:	e002      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80042b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042ba:	4b5a      	ldr	r3, [pc, #360]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c6:	4957      	ldr	r1, [pc, #348]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	650b      	str	r3, [r1, #80]	; 0x50
 80042cc:	e001      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d044      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e8:	d01b      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80042ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ee:	d805      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d022      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80042f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80042fa:	e01b      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80042fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004300:	d01d      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004306:	d01c      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004308:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800430c:	d01b      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800430e:	e011      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3304      	adds	r3, #4
 8004314:	2101      	movs	r1, #1
 8004316:	4618      	mov	r0, r3
 8004318:	f001 fade 	bl	80058d8 <RCCEx_PLL2_Config>
 800431c:	4603      	mov	r3, r0
 800431e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004320:	e012      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3324      	adds	r3, #36	; 0x24
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f001 fb87 	bl	8005a3c <RCCEx_PLL3_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004332:	e009      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]
      break;
 8004338:	e006      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800433a:	bf00      	nop
 800433c:	e004      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800433e:	bf00      	nop
 8004340:	e002      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004342:	bf00      	nop
 8004344:	e000      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800434e:	4b35      	ldr	r3, [pc, #212]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800435c:	4931      	ldr	r1, [pc, #196]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800435e:	4313      	orrs	r3, r2
 8004360:	658b      	str	r3, [r1, #88]	; 0x58
 8004362:	e001      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02d      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800437c:	d005      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800437e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004382:	d009      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d013      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004388:	e00f      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438a:	4b26      	ldr	r3, [pc, #152]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	4a25      	ldr	r2, [pc, #148]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004396:	e00c      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 fa9a 	bl	80058d8 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
      break;
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80043b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b2:	7dfb      	ldrb	r3, [r7, #23]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c4:	4917      	ldr	r1, [pc, #92]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	650b      	str	r3, [r1, #80]	; 0x50
 80043ca:	e001      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d035      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d81b      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004429 	.word	0x08004429
 80043f0:	080043fd 	.word	0x080043fd
 80043f4:	0800440b 	.word	0x0800440b
 80043f8:	08004429 	.word	0x08004429
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	4a08      	ldr	r2, [pc, #32]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004408:	e00f      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3304      	adds	r3, #4
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f001 fa61 	bl	80058d8 <RCCEx_PLL2_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800441a:	e006      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	75fb      	strb	r3, [r7, #23]
      break;
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004422:	bf00      	nop
 8004424:	58024400 	.word	0x58024400
      break;
 8004428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004430:	4bba      	ldr	r3, [pc, #744]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004434:	f023 0203 	bic.w	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	49b7      	ldr	r1, [pc, #732]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004442:	e001      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8086 	beq.w	8004562 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004456:	4bb2      	ldr	r3, [pc, #712]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4ab1      	ldr	r2, [pc, #708]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004462:	f7fd fa5d 	bl	8001920 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004468:	e009      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446a:	f7fd fa59 	bl	8001920 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b64      	cmp	r3, #100	; 0x64
 8004476:	d902      	bls.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	75fb      	strb	r3, [r7, #23]
        break;
 800447c:	e005      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800447e:	4ba8      	ldr	r3, [pc, #672]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0ef      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800448a:	7dfb      	ldrb	r3, [r7, #23]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d166      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004490:	4ba2      	ldr	r3, [pc, #648]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800449a:	4053      	eors	r3, r2
 800449c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d013      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a4:	4b9d      	ldr	r3, [pc, #628]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ac:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044ae:	4b9b      	ldr	r3, [pc, #620]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	4a9a      	ldr	r2, [pc, #616]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ba:	4b98      	ldr	r3, [pc, #608]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a97      	ldr	r2, [pc, #604]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80044c6:	4a95      	ldr	r2, [pc, #596]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d6:	d115      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fd fa22 	bl	8001920 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044de:	e00b      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f7fd fa1e 	bl	8001920 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d902      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	75fb      	strb	r3, [r7, #23]
            break;
 80044f6:	e005      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044f8:	4b88      	ldr	r3, [pc, #544]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ed      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d126      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004518:	d10d      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800451a:	4b80      	ldr	r3, [pc, #512]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004528:	0919      	lsrs	r1, r3, #4
 800452a:	4b7e      	ldr	r3, [pc, #504]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800452c:	400b      	ands	r3, r1
 800452e:	497b      	ldr	r1, [pc, #492]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	610b      	str	r3, [r1, #16]
 8004534:	e005      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004536:	4b79      	ldr	r3, [pc, #484]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	4a78      	ldr	r2, [pc, #480]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800453c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004540:	6113      	str	r3, [r2, #16]
 8004542:	4b76      	ldr	r3, [pc, #472]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004544:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800454c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004550:	4972      	ldr	r1, [pc, #456]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	670b      	str	r3, [r1, #112]	; 0x70
 8004556:	e004      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	75bb      	strb	r3, [r7, #22]
 800455c:	e001      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d07d      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004572:	2b28      	cmp	r3, #40	; 0x28
 8004574:	d866      	bhi.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004576:	a201      	add	r2, pc, #4	; (adr r2, 800457c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	0800464b 	.word	0x0800464b
 8004580:	08004645 	.word	0x08004645
 8004584:	08004645 	.word	0x08004645
 8004588:	08004645 	.word	0x08004645
 800458c:	08004645 	.word	0x08004645
 8004590:	08004645 	.word	0x08004645
 8004594:	08004645 	.word	0x08004645
 8004598:	08004645 	.word	0x08004645
 800459c:	08004621 	.word	0x08004621
 80045a0:	08004645 	.word	0x08004645
 80045a4:	08004645 	.word	0x08004645
 80045a8:	08004645 	.word	0x08004645
 80045ac:	08004645 	.word	0x08004645
 80045b0:	08004645 	.word	0x08004645
 80045b4:	08004645 	.word	0x08004645
 80045b8:	08004645 	.word	0x08004645
 80045bc:	08004633 	.word	0x08004633
 80045c0:	08004645 	.word	0x08004645
 80045c4:	08004645 	.word	0x08004645
 80045c8:	08004645 	.word	0x08004645
 80045cc:	08004645 	.word	0x08004645
 80045d0:	08004645 	.word	0x08004645
 80045d4:	08004645 	.word	0x08004645
 80045d8:	08004645 	.word	0x08004645
 80045dc:	0800464b 	.word	0x0800464b
 80045e0:	08004645 	.word	0x08004645
 80045e4:	08004645 	.word	0x08004645
 80045e8:	08004645 	.word	0x08004645
 80045ec:	08004645 	.word	0x08004645
 80045f0:	08004645 	.word	0x08004645
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004645 	.word	0x08004645
 80045fc:	0800464b 	.word	0x0800464b
 8004600:	08004645 	.word	0x08004645
 8004604:	08004645 	.word	0x08004645
 8004608:	08004645 	.word	0x08004645
 800460c:	08004645 	.word	0x08004645
 8004610:	08004645 	.word	0x08004645
 8004614:	08004645 	.word	0x08004645
 8004618:	08004645 	.word	0x08004645
 800461c:	0800464b 	.word	0x0800464b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	2101      	movs	r1, #1
 8004626:	4618      	mov	r0, r3
 8004628:	f001 f956 	bl	80058d8 <RCCEx_PLL2_Config>
 800462c:	4603      	mov	r3, r0
 800462e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004630:	e00c      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3324      	adds	r3, #36	; 0x24
 8004636:	2101      	movs	r1, #1
 8004638:	4618      	mov	r0, r3
 800463a:	f001 f9ff 	bl	8005a3c <RCCEx_PLL3_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004642:	e003      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	75fb      	strb	r3, [r7, #23]
      break;
 8004648:	e000      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800464a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004652:	4b32      	ldr	r3, [pc, #200]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800465e:	492f      	ldr	r1, [pc, #188]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	654b      	str	r3, [r1, #84]	; 0x54
 8004664:	e001      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d037      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467a:	2b05      	cmp	r3, #5
 800467c:	d820      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046c7 	.word	0x080046c7
 8004688:	0800469d 	.word	0x0800469d
 800468c:	080046af 	.word	0x080046af
 8004690:	080046c7 	.word	0x080046c7
 8004694:	080046c7 	.word	0x080046c7
 8004698:	080046c7 	.word	0x080046c7
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 f918 	bl	80058d8 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80046ac:	e00c      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3324      	adds	r3, #36	; 0x24
 80046b2:	2101      	movs	r1, #1
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f9c1 	bl	8005a3c <RCCEx_PLL3_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80046be:	e003      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
      break;
 80046c4:	e000      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80046c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	f023 0207 	bic.w	r2, r3, #7
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046da:	4910      	ldr	r1, [pc, #64]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	654b      	str	r3, [r1, #84]	; 0x54
 80046e0:	e001      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d040      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f8:	2b05      	cmp	r3, #5
 80046fa:	d827      	bhi.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004753 	.word	0x08004753
 8004708:	08004729 	.word	0x08004729
 800470c:	0800473b 	.word	0x0800473b
 8004710:	08004753 	.word	0x08004753
 8004714:	08004753 	.word	0x08004753
 8004718:	08004753 	.word	0x08004753
 800471c:	58024400 	.word	0x58024400
 8004720:	58024800 	.word	0x58024800
 8004724:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	2101      	movs	r1, #1
 800472e:	4618      	mov	r0, r3
 8004730:	f001 f8d2 	bl	80058d8 <RCCEx_PLL2_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004738:	e00c      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3324      	adds	r3, #36	; 0x24
 800473e:	2101      	movs	r1, #1
 8004740:	4618      	mov	r0, r3
 8004742:	f001 f97b 	bl	8005a3c <RCCEx_PLL3_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800474a:	e003      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	75fb      	strb	r3, [r7, #23]
      break;
 8004750:	e000      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800475a:	4bb3      	ldr	r3, [pc, #716]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	f023 0207 	bic.w	r2, r3, #7
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	49af      	ldr	r1, [pc, #700]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800476a:	4313      	orrs	r3, r2
 800476c:	658b      	str	r3, [r1, #88]	; 0x58
 800476e:	e001      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004770:	7dfb      	ldrb	r3, [r7, #23]
 8004772:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d044      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478a:	d01b      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800478c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004790:	d805      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004792:	2b00      	cmp	r3, #0
 8004794:	d022      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800479c:	e01b      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800479e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a2:	d01d      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80047a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047a8:	d01c      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80047aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047ae:	d01b      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80047b0:	e011      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3304      	adds	r3, #4
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f001 f88d 	bl	80058d8 <RCCEx_PLL2_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80047c2:	e012      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3324      	adds	r3, #36	; 0x24
 80047c8:	2102      	movs	r1, #2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 f936 	bl	8005a3c <RCCEx_PLL3_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80047d4:	e009      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
      break;
 80047da:	e006      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80047dc:	bf00      	nop
 80047de:	e004      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80047e0:	bf00      	nop
 80047e2:	e002      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80047e4:	bf00      	nop
 80047e6:	e000      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80047e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ea:	7dfb      	ldrb	r3, [r7, #23]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047f0:	4b8d      	ldr	r3, [pc, #564]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fe:	498a      	ldr	r1, [pc, #552]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004800:	4313      	orrs	r3, r2
 8004802:	654b      	str	r3, [r1, #84]	; 0x54
 8004804:	e001      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d044      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800481c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004820:	d01b      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d805      	bhi.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d022      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004832:	e01b      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004838:	d01d      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800483a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800483e:	d01c      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004844:	d01b      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004846:	e011      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f001 f842 	bl	80058d8 <RCCEx_PLL2_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004858:	e012      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3324      	adds	r3, #36	; 0x24
 800485e:	2102      	movs	r1, #2
 8004860:	4618      	mov	r0, r3
 8004862:	f001 f8eb 	bl	8005a3c <RCCEx_PLL3_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800486a:	e009      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]
      break;
 8004870:	e006      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004872:	bf00      	nop
 8004874:	e004      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004876:	bf00      	nop
 8004878:	e002      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800487e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004880:	7dfb      	ldrb	r3, [r7, #23]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004886:	4b68      	ldr	r3, [pc, #416]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004894:	4964      	ldr	r1, [pc, #400]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004896:	4313      	orrs	r3, r2
 8004898:	658b      	str	r3, [r1, #88]	; 0x58
 800489a:	e001      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d044      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b6:	d01b      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80048b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048bc:	d805      	bhi.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d022      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80048c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80048c8:	e01b      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ce:	d01d      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80048d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048d4:	d01c      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80048d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048da:	d01b      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80048dc:	e011      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2100      	movs	r1, #0
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fff7 	bl	80058d8 <RCCEx_PLL2_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80048ee:	e012      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	3324      	adds	r3, #36	; 0x24
 80048f4:	2102      	movs	r1, #2
 80048f6:	4618      	mov	r0, r3
 80048f8:	f001 f8a0 	bl	8005a3c <RCCEx_PLL3_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004900:	e009      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
      break;
 8004906:	e006      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004908:	bf00      	nop
 800490a:	e004      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800490c:	bf00      	nop
 800490e:	e002      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004910:	bf00      	nop
 8004912:	e000      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800491c:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004920:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800492a:	493f      	ldr	r1, [pc, #252]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800492c:	4313      	orrs	r3, r2
 800492e:	658b      	str	r3, [r1, #88]	; 0x58
 8004930:	e001      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01b      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	d10b      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3324      	adds	r3, #36	; 0x24
 8004952:	2102      	movs	r1, #2
 8004954:	4618      	mov	r0, r3
 8004956:	f001 f871 	bl	8005a3c <RCCEx_PLL3_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00c      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	75bb      	strb	r3, [r7, #22]
 8004964:	e009      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004966:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004974:	492c      	ldr	r1, [pc, #176]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004976:	4313      	orrs	r3, r2
 8004978:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01b      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800498c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004990:	d10b      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3324      	adds	r3, #36	; 0x24
 8004996:	2102      	movs	r1, #2
 8004998:	4618      	mov	r0, r3
 800499a:	f001 f84f 	bl	8005a3c <RCCEx_PLL3_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00c      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75bb      	strb	r3, [r7, #22]
 80049a8:	e009      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049aa:	4b1f      	ldr	r3, [pc, #124]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b8:	491b      	ldr	r1, [pc, #108]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d032      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d4:	d00d      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80049d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049da:	d016      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d111      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 ff76 	bl	80058d8 <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80049f0:	e00c      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	2102      	movs	r1, #2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 f81f 	bl	8005a3c <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a02:	e003      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
      break;
 8004a08:	e000      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8004a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a20:	4901      	ldr	r1, [pc, #4]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	658b      	str	r3, [r1, #88]	; 0x58
 8004a26:	e003      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d02f      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a46:	d00c      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004a48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a4c:	d015      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a52:	d10f      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a54:	4b79      	ldr	r3, [pc, #484]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	4a78      	ldr	r2, [pc, #480]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a60:	e00c      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3324      	adds	r3, #36	; 0x24
 8004a66:	2101      	movs	r1, #1
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 ffe7 	bl	8005a3c <RCCEx_PLL3_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004a72:	e003      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
      break;
 8004a78:	e000      	b.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8004a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7c:	7dfb      	ldrb	r3, [r7, #23]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a82:	4b6e      	ldr	r3, [pc, #440]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a90:	496a      	ldr	r1, [pc, #424]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	654b      	str	r3, [r1, #84]	; 0x54
 8004a96:	e001      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d029      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab4:	d007      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004ab6:	e00f      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab8:	4b60      	ldr	r3, [pc, #384]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4a5f      	ldr	r2, [pc, #380]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ac4:	e00b      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2102      	movs	r1, #2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 ff03 	bl	80058d8 <RCCEx_PLL2_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ad6:	e002      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	75fb      	strb	r3, [r7, #23]
      break;
 8004adc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ae4:	4b55      	ldr	r3, [pc, #340]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af0:	4952      	ldr	r1, [pc, #328]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004af6:	e001      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3324      	adds	r3, #36	; 0x24
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 ff94 	bl	8005a3c <RCCEx_PLL3_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d02f      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b32:	d00c      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b38:	d802      	bhi.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d011      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004b3e:	e00d      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b44:	d00f      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b4a:	d00e      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8004b4c:	e006      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	4a3a      	ldr	r2, [pc, #232]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004b5a:	e007      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b60:	e004      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004b62:	bf00      	nop
 8004b64:	e002      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004b66:	bf00      	nop
 8004b68:	e000      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b72:	4b32      	ldr	r3, [pc, #200]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b7e:	492f      	ldr	r1, [pc, #188]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	654b      	str	r3, [r1, #84]	; 0x54
 8004b84:	e001      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
 8004b88:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b96:	4b29      	ldr	r3, [pc, #164]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	4926      	ldr	r1, [pc, #152]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d009      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004bb4:	4b21      	ldr	r3, [pc, #132]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bc2:	491e      	ldr	r1, [pc, #120]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be0:	4916      	ldr	r1, [pc, #88]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00d      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bf2:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	4a11      	ldr	r2, [pc, #68]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004bfc:	6113      	str	r3, [r2, #16]
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c08:	490c      	ldr	r1, [pc, #48]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	da08      	bge.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	4906      	ldr	r1, [pc, #24]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004c28:	7dbb      	ldrb	r3, [r7, #22]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e000      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	58024400 	.word	0x58024400

08004c40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b090      	sub	sp, #64	; 0x40
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4e:	d150      	bne.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004c50:	4ba1      	ldr	r3, [pc, #644]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d844      	bhi.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004c7d 	.word	0x08004c7d
 8004c6c:	08004c8d 	.word	0x08004c8d
 8004c70:	08004c9d 	.word	0x08004c9d
 8004c74:	08004ce5 	.word	0x08004ce5
 8004c78:	08004cad 	.word	0x08004cad
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fcc1 	bl	8005608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c8a:	e200      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c8c:	f107 0318 	add.w	r3, r7, #24
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fa21 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c9a:	e1f8      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c9c:	f107 030c 	add.w	r3, r7, #12
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fb65 	bl	8005370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004caa:	e1f0      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004cac:	4b8a      	ldr	r3, [pc, #552]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004cbc:	4b87      	ldr	r3, [pc, #540]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004cc0:	e1e5      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc8:	d102      	bne.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8004cca:	4b85      	ldr	r3, [pc, #532]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cce:	e1de      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd6:	d102      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8004cd8:	4b82      	ldr	r3, [pc, #520]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cdc:	e1d7      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ce2:	e1d4      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ce4:	4b80      	ldr	r3, [pc, #512]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ce8:	e1d1      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cee:	bf00      	nop
 8004cf0:	e1cd      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf8:	d14f      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004cfa:	4b77      	ldr	r3, [pc, #476]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004d02:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	2b80      	cmp	r3, #128	; 0x80
 8004d08:	d01c      	beq.n	8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d804      	bhi.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d00e      	beq.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004d16:	e03c      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8004d18:	2bc0      	cmp	r3, #192	; 0xc0
 8004d1a:	d037      	beq.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8004d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d20:	d018      	beq.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8004d22:	e036      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fc6d 	bl	8005608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d32:	e1ac      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d34:	f107 0318 	add.w	r3, r7, #24
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 f9cd 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d42:	e1a4      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d44:	f107 030c 	add.w	r3, r7, #12
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fb11 	bl	8005370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d52:	e19c      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d54:	4b60      	ldr	r3, [pc, #384]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004d64:	4b5d      	ldr	r3, [pc, #372]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004d68:	e191      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d70:	d102      	bne.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8004d72:	4b5b      	ldr	r3, [pc, #364]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d76:	e18a      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d7e:	d102      	bne.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8004d80:	4b58      	ldr	r3, [pc, #352]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d84:	e183      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d8a:	e180      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d8c:	4b56      	ldr	r3, [pc, #344]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d90:	e17d      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d96:	bf00      	nop
 8004d98:	e179      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da0:	d153      	bne.n	8004e4a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004da2:	4b4d      	ldr	r3, [pc, #308]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004daa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db2:	d01f      	beq.n	8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db8:	d805      	bhi.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dc2:	d00f      	beq.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8004dc4:	e03d      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8004dc6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004dca:	d037      	beq.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dd0:	d018      	beq.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8004dd2:	e036      	b.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fc15 	bl	8005608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004de2:	e154      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004de4:	f107 0318 	add.w	r3, r7, #24
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 f975 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004df2:	e14c      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004df4:	f107 030c 	add.w	r3, r7, #12
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fab9 	bl	8005370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e02:	e144      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004e04:	4b34      	ldr	r3, [pc, #208]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e0c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d102      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004e14:	4b31      	ldr	r3, [pc, #196]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004e18:	e139      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e20:	d102      	bne.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8004e22:	4b2f      	ldr	r3, [pc, #188]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004e24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e26:	e132      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e2e:	d102      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8004e30:	4b2c      	ldr	r3, [pc, #176]	; (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e34:	e12b      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e3a:	e128      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e40:	e125      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e46:	bf00      	nop
 8004e48:	e121      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e50:	d15d      	bne.n	8004f0e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004e52:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e56:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e62:	d01f      	beq.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e68:	d805      	bhi.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8004e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e72:	d00f      	beq.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8004e74:	e047      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8004e76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e7a:	d041      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8004e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e80:	d018      	beq.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8004e82:	e040      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fbbd 	bl	8005608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e92:	e0fc      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e94:	f107 0318 	add.w	r3, r7, #24
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 f91d 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ea2:	e0f4      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ea4:	f107 030c 	add.w	r3, r7, #12
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fa61 	bl	8005370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eb2:	e0ec      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004eb4:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8004ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004ec8:	e0e1      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8004ed2:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ed6:	e0da      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004ed8:	58024400 	.word	0x58024400
 8004edc:	03d09000 	.word	0x03d09000
 8004ee0:	003d0900 	.word	0x003d0900
 8004ee4:	017d7840 	.word	0x017d7840
 8004ee8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef2:	d102      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8004ef4:	4b68      	ldr	r3, [pc, #416]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ef8:	e0c9      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004efe:	e0c6      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f00:	4b66      	ldr	r3, [pc, #408]	; (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8004f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f04:	e0c3      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0a:	bf00      	nop
 8004f0c:	e0bf      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f14:	d153      	bne.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004f16:	4b62      	ldr	r3, [pc, #392]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004f1e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f26:	d01f      	beq.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2c:	d805      	bhi.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d00f      	beq.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8004f38:	e03d      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8004f3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f3e:	d037      	beq.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8004f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f44:	d018      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004f46:	e036      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fb5b 	bl	8005608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f56:	e09a      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f58:	f107 0318 	add.w	r3, r7, #24
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 f8bb 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f66:	e092      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f68:	f107 030c 	add.w	r3, r7, #12
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 f9ff 	bl	8005370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f76:	e08a      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004f78:	4b49      	ldr	r3, [pc, #292]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8004f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8004f88:	4b46      	ldr	r3, [pc, #280]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8004f8c:	e07f      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8004f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f94:	d102      	bne.n	8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8004f96:	4b44      	ldr	r3, [pc, #272]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8004f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f9a:	e078      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa2:	d102      	bne.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8004fa4:	4b3c      	ldr	r3, [pc, #240]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa8:	e071      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fae:	e06e      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fb0:	4b3a      	ldr	r3, [pc, #232]	; (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fb4:	e06b      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fba:	bf00      	nop
 8004fbc:	e067      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fc4:	d13d      	bne.n	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004fc6:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d00c      	beq.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fdc:	d011      	beq.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d12b      	bne.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fe2:	f107 0318 	add.w	r3, r7, #24
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f876 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ff0:	e04d      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ff2:	f107 030c 	add.w	r3, r7, #12
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f9ba 	bl	8005370 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005000:	e045      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005002:	4b27      	ldr	r3, [pc, #156]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800500a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005012:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005016:	e03a      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800501a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800501e:	d102      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005020:	4b21      	ldr	r3, [pc, #132]	; (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8005022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005024:	e033      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502c:	d102      	bne.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800502e:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8005030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005032:	e02c      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005038:	e029      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800503e:	bf00      	nop
 8005040:	e025      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005048:	d11f      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800504a:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005052:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800505a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505e:	d008      	beq.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005060:	e00f      	b.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005066:	4618      	mov	r0, r3
 8005068:	f000 face 	bl	8005608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005070:	e00d      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005072:	f107 0318 	add.w	r3, r7, #24
 8005076:	4618      	mov	r0, r3
 8005078:	f000 f82e 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005080:	e005      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8005082:	2300      	movs	r3, #0
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005086:	bf00      	nop
 8005088:	e001      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800508e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005090:	4618      	mov	r0, r3
 8005092:	3740      	adds	r7, #64	; 0x40
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	017d7840 	.word	0x017d7840
 800509c:	00bb8000 	.word	0x00bb8000
 80050a0:	58024400 	.word	0x58024400
 80050a4:	03d09000 	.word	0x03d09000
 80050a8:	003d0900 	.word	0x003d0900

080050ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80050b0:	f7fe fe8e 	bl	8003dd0 <HAL_RCC_GetHCLKFreq>
 80050b4:	4601      	mov	r1, r0
 80050b6:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	091b      	lsrs	r3, r3, #4
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80050c2:	5cd3      	ldrb	r3, [r2, r3]
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	58024400 	.word	0x58024400
 80050d4:	08008e08 	.word	0x08008e08

080050d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80050d8:	b480      	push	{r7}
 80050da:	b089      	sub	sp, #36	; 0x24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050e0:	4b9d      	ldr	r3, [pc, #628]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80050e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 80050ea:	4b9b      	ldr	r3, [pc, #620]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	0b1b      	lsrs	r3, r3, #12
 80050f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f4:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80050f6:	4b98      	ldr	r3, [pc, #608]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005100:	4b95      	ldr	r3, [pc, #596]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005104:	08db      	lsrs	r3, r3, #3
 8005106:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	fb02 f303 	mul.w	r3, r2, r3
 8005110:	ee07 3a90 	vmov	s15, r3
 8005114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005118:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 810a 	beq.w	8005338 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d05a      	beq.n	80051e0 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 800512a:	2b01      	cmp	r3, #1
 800512c:	d302      	bcc.n	8005134 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 800512e:	2b02      	cmp	r3, #2
 8005130:	d078      	beq.n	8005224 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005132:	e099      	b.n	8005268 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005134:	4b88      	ldr	r3, [pc, #544]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d02d      	beq.n	800519c <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005140:	4b85      	ldr	r3, [pc, #532]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	08db      	lsrs	r3, r3, #3
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	4a84      	ldr	r2, [pc, #528]	; (800535c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800514c:	fa22 f303 	lsr.w	r3, r2, r3
 8005150:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	ee07 3a90 	vmov	s15, r3
 8005158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800516a:	4b7b      	ldr	r3, [pc, #492]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517a:	ed97 6a03 	vldr	s12, [r7, #12]
 800517e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005196:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800519a:	e087      	b.n	80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005364 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80051aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ae:	4b6a      	ldr	r3, [pc, #424]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051be:	ed97 6a03 	vldr	s12, [r7, #12]
 80051c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80051c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051de:	e065      	b.n	80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80051ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f2:	4b59      	ldr	r3, [pc, #356]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005202:	ed97 6a03 	vldr	s12, [r7, #12]
 8005206:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800520a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005222:	e043      	b.n	80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800536c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005236:	4b48      	ldr	r3, [pc, #288]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005246:	ed97 6a03 	vldr	s12, [r7, #12]
 800524a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800524e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800525a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005266:	e021      	b.n	80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527a:	4b37      	ldr	r3, [pc, #220]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528a:	ed97 6a03 	vldr	s12, [r7, #12]
 800528e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005360 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800529e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80052ac:	4b2a      	ldr	r3, [pc, #168]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	0a5b      	lsrs	r3, r3, #9
 80052b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d2:	ee17 2a90 	vmov	r2, s15
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80052da:	4b1f      	ldr	r3, [pc, #124]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e4:	ee07 3a90 	vmov	s15, r3
 80052e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005300:	ee17 2a90 	vmov	r2, s15
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005308:	4b13      	ldr	r3, [pc, #76]	; (8005358 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	0e1b      	lsrs	r3, r3, #24
 800530e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005312:	ee07 3a90 	vmov	s15, r3
 8005316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800531e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005322:	edd7 6a07 	vldr	s13, [r7, #28]
 8005326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800532a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800532e:	ee17 2a90 	vmov	r2, s15
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005336:	e008      	b.n	800534a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	609a      	str	r2, [r3, #8]
}
 800534a:	bf00      	nop
 800534c:	3724      	adds	r7, #36	; 0x24
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	58024400 	.word	0x58024400
 800535c:	03d09000 	.word	0x03d09000
 8005360:	46000000 	.word	0x46000000
 8005364:	4c742400 	.word	0x4c742400
 8005368:	4a742400 	.word	0x4a742400
 800536c:	4bbebc20 	.word	0x4bbebc20

08005370 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005370:	b480      	push	{r7}
 8005372:	b089      	sub	sp, #36	; 0x24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005378:	4b9d      	ldr	r3, [pc, #628]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800537a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005382:	4b9b      	ldr	r3, [pc, #620]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	0d1b      	lsrs	r3, r3, #20
 8005388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800538c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800538e:	4b98      	ldr	r3, [pc, #608]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005396:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005398:	4b95      	ldr	r3, [pc, #596]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800539a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539c:	08db      	lsrs	r3, r3, #3
 800539e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	fb02 f303 	mul.w	r3, r2, r3
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 810a 	beq.w	80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d05a      	beq.n	8005478 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d302      	bcc.n	80053cc <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d078      	beq.n	80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80053ca:	e099      	b.n	8005500 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053cc:	4b88      	ldr	r3, [pc, #544]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d02d      	beq.n	8005434 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053d8:	4b85      	ldr	r3, [pc, #532]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	08db      	lsrs	r3, r3, #3
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	4a84      	ldr	r2, [pc, #528]	; (80055f4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
 80053e8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	ee07 3a90 	vmov	s15, r3
 80053f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005402:	4b7b      	ldr	r3, [pc, #492]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005412:	ed97 6a03 	vldr	s12, [r7, #12]
 8005416:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800541a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005432:	e087      	b.n	8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80055fc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005446:	4b6a      	ldr	r3, [pc, #424]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005456:	ed97 6a03 	vldr	s12, [r7, #12]
 800545a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800545e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005476:	e065      	b.n	8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005482:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548a:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549a:	ed97 6a03 	vldr	s12, [r7, #12]
 800549e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80054a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054ba:	e043      	b.n	8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	ee07 3a90 	vmov	s15, r3
 80054c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005604 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80054ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ce:	4b48      	ldr	r3, [pc, #288]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054de:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80054e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054fe:	e021      	b.n	8005544 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	ee07 3a90 	vmov	s15, r3
 8005506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005600 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800550e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005512:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551a:	ee07 3a90 	vmov	s15, r3
 800551e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005522:	ed97 6a03 	vldr	s12, [r7, #12]
 8005526:	eddf 5a34 	vldr	s11, [pc, #208]	; 80055f8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800552a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800552e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800553a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005542:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005544:	4b2a      	ldr	r3, [pc, #168]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	0a5b      	lsrs	r3, r3, #9
 800554a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800555a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800555e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800556a:	ee17 2a90 	vmov	r2, s15
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005572:	4b1f      	ldr	r3, [pc, #124]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800557c:	ee07 3a90 	vmov	s15, r3
 8005580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005588:	ee37 7a87 	vadd.f32	s14, s15, s14
 800558c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005598:	ee17 2a90 	vmov	r2, s15
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	0e1b      	lsrs	r3, r3, #24
 80055a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80055be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c6:	ee17 2a90 	vmov	r2, s15
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80055ce:	e008      	b.n	80055e2 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	609a      	str	r2, [r3, #8]
}
 80055e2:	bf00      	nop
 80055e4:	3724      	adds	r7, #36	; 0x24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	58024400 	.word	0x58024400
 80055f4:	03d09000 	.word	0x03d09000
 80055f8:	46000000 	.word	0x46000000
 80055fc:	4c742400 	.word	0x4c742400
 8005600:	4a742400 	.word	0x4a742400
 8005604:	4bbebc20 	.word	0x4bbebc20

08005608 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005608:	b480      	push	{r7}
 800560a:	b089      	sub	sp, #36	; 0x24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005610:	4b9d      	ldr	r3, [pc, #628]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800561a:	4b9b      	ldr	r3, [pc, #620]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561e:	091b      	lsrs	r3, r3, #4
 8005620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005624:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005626:	4b98      	ldr	r3, [pc, #608]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005630:	4b95      	ldr	r3, [pc, #596]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005634:	08db      	lsrs	r3, r3, #3
 8005636:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	fb02 f303 	mul.w	r3, r2, r3
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005648:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 810a 	beq.w	8005868 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d05a      	beq.n	8005710 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800565a:	2b01      	cmp	r3, #1
 800565c:	d302      	bcc.n	8005664 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800565e:	2b02      	cmp	r3, #2
 8005660:	d078      	beq.n	8005754 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8005662:	e099      	b.n	8005798 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005664:	4b88      	ldr	r3, [pc, #544]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02d      	beq.n	80056cc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005670:	4b85      	ldr	r3, [pc, #532]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	08db      	lsrs	r3, r3, #3
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	4a84      	ldr	r2, [pc, #528]	; (800588c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
 8005680:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	ee07 3a90 	vmov	s15, r3
 8005688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569a:	4b7b      	ldr	r3, [pc, #492]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005890 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80056b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80056ca:	e087      	b.n	80057dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80056da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056de:	4b6a      	ldr	r3, [pc, #424]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005890 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80056f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800570e:	e065      	b.n	80057dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	ee07 3a90 	vmov	s15, r3
 8005716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005898 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800571e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005722:	4b59      	ldr	r3, [pc, #356]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572a:	ee07 3a90 	vmov	s15, r3
 800572e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005732:	ed97 6a03 	vldr	s12, [r7, #12]
 8005736:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005890 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800573a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005752:	e043      	b.n	80057dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800589c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005766:	4b48      	ldr	r3, [pc, #288]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8005768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800576e:	ee07 3a90 	vmov	s15, r3
 8005772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005776:	ed97 6a03 	vldr	s12, [r7, #12]
 800577a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005890 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800577e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800578a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800578e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005792:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005796:	e021      	b.n	80057dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005898 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80057a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057aa:	4b37      	ldr	r3, [pc, #220]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80057be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005890 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80057c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057da:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80057dc:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	0a5b      	lsrs	r3, r3, #9
 80057e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80057fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005802:	ee17 2a90 	vmov	r2, s15
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800580a:	4b1f      	ldr	r3, [pc, #124]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	0c1b      	lsrs	r3, r3, #16
 8005810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005814:	ee07 3a90 	vmov	s15, r3
 8005818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005820:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005824:	edd7 6a07 	vldr	s13, [r7, #28]
 8005828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800582c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005830:	ee17 2a90 	vmov	r2, s15
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005838:	4b13      	ldr	r3, [pc, #76]	; (8005888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	0e1b      	lsrs	r3, r3, #24
 800583e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800584e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005852:	edd7 6a07 	vldr	s13, [r7, #28]
 8005856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800585a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800585e:	ee17 2a90 	vmov	r2, s15
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005866:	e008      	b.n	800587a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	609a      	str	r2, [r3, #8]
}
 800587a:	bf00      	nop
 800587c:	3724      	adds	r7, #36	; 0x24
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	58024400 	.word	0x58024400
 800588c:	03d09000 	.word	0x03d09000
 8005890:	46000000 	.word	0x46000000
 8005894:	4c742400 	.word	0x4c742400
 8005898:	4a742400 	.word	0x4a742400
 800589c:	4bbebc20 	.word	0x4bbebc20

080058a0 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80058a4:	f7fe f922 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 80058a8:	4601      	mov	r1, r0
 80058aa:	4b08      	ldr	r3, [pc, #32]	; (80058cc <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	4a06      	ldr	r2, [pc, #24]	; (80058d0 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80058b6:	5cd3      	ldrb	r3, [r2, r3]
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	fa21 f303 	lsr.w	r3, r1, r3
 80058c0:	4a04      	ldr	r2, [pc, #16]	; (80058d4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80058c2:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80058c4:	4b03      	ldr	r3, [pc, #12]	; (80058d4 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80058c6:	681b      	ldr	r3, [r3, #0]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	58024400 	.word	0x58024400
 80058d0:	08008e08 	.word	0x08008e08
 80058d4:	24000000 	.word	0x24000000

080058d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80058e6:	4b53      	ldr	r3, [pc, #332]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d101      	bne.n	80058f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e099      	b.n	8005a2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80058f6:	4b4f      	ldr	r3, [pc, #316]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a4e      	ldr	r2, [pc, #312]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80058fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005902:	f7fc f80d 	bl	8001920 <HAL_GetTick>
 8005906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005908:	e008      	b.n	800591c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800590a:	f7fc f809 	bl	8001920 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e086      	b.n	8005a2a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800591c:	4b45      	ldr	r3, [pc, #276]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f0      	bne.n	800590a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005928:	4b42      	ldr	r3, [pc, #264]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 800592a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	493f      	ldr	r1, [pc, #252]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 8005938:	4313      	orrs	r3, r2
 800593a:	628b      	str	r3, [r1, #40]	; 0x28
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	3b01      	subs	r3, #1
 8005942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	3b01      	subs	r3, #1
 800594c:	025b      	lsls	r3, r3, #9
 800594e:	b29b      	uxth	r3, r3
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	3b01      	subs	r3, #1
 8005958:	041b      	lsls	r3, r3, #16
 800595a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	3b01      	subs	r3, #1
 8005966:	061b      	lsls	r3, r3, #24
 8005968:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800596c:	4931      	ldr	r1, [pc, #196]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 800596e:	4313      	orrs	r3, r2
 8005970:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005972:	4b30      	ldr	r3, [pc, #192]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	492d      	ldr	r1, [pc, #180]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 8005980:	4313      	orrs	r3, r2
 8005982:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005984:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	f023 0220 	bic.w	r2, r3, #32
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	4928      	ldr	r1, [pc, #160]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005996:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	4a26      	ldr	r2, [pc, #152]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 800599c:	f023 0310 	bic.w	r3, r3, #16
 80059a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80059a2:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a6:	4b24      	ldr	r3, [pc, #144]	; (8005a38 <RCCEx_PLL2_Config+0x160>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	69d2      	ldr	r2, [r2, #28]
 80059ae:	00d2      	lsls	r2, r2, #3
 80059b0:	4920      	ldr	r1, [pc, #128]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80059b6:	4b1f      	ldr	r3, [pc, #124]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	4a1e      	ldr	r2, [pc, #120]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059bc:	f043 0310 	orr.w	r3, r3, #16
 80059c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80059c8:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a19      	ldr	r2, [pc, #100]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059d4:	e00f      	b.n	80059f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d106      	bne.n	80059ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80059dc:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059e8:	e005      	b.n	80059f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	4a11      	ldr	r2, [pc, #68]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80059f6:	4b0f      	ldr	r3, [pc, #60]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a0e      	ldr	r2, [pc, #56]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 80059fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a02:	f7fb ff8d 	bl	8001920 <HAL_GetTick>
 8005a06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a08:	e008      	b.n	8005a1c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005a0a:	f7fb ff89 	bl	8001920 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e006      	b.n	8005a2a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a1c:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <RCCEx_PLL2_Config+0x15c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	58024400 	.word	0x58024400
 8005a38:	ffff0007 	.word	0xffff0007

08005a3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005a4a:	4b53      	ldr	r3, [pc, #332]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d101      	bne.n	8005a5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e099      	b.n	8005b8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005a5a:	4b4f      	ldr	r3, [pc, #316]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a4e      	ldr	r2, [pc, #312]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a66:	f7fb ff5b 	bl	8001920 <HAL_GetTick>
 8005a6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a6c:	e008      	b.n	8005a80 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a6e:	f7fb ff57 	bl	8001920 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e086      	b.n	8005b8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005a80:	4b45      	ldr	r3, [pc, #276]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f0      	bne.n	8005a6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005a8c:	4b42      	ldr	r3, [pc, #264]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	051b      	lsls	r3, r3, #20
 8005a9a:	493f      	ldr	r1, [pc, #252]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	628b      	str	r3, [r1, #40]	; 0x28
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	025b      	lsls	r3, r3, #9
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	041b      	lsls	r3, r3, #16
 8005abe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	061b      	lsls	r3, r3, #24
 8005acc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ad0:	4931      	ldr	r1, [pc, #196]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005ad6:	4b30      	ldr	r3, [pc, #192]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	492d      	ldr	r1, [pc, #180]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	4928      	ldr	r1, [pc, #160]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005afa:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005b06:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b0a:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <RCCEx_PLL3_Config+0x160>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	69d2      	ldr	r2, [r2, #28]
 8005b12:	00d2      	lsls	r2, r2, #3
 8005b14:	4920      	ldr	r1, [pc, #128]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005b1a:	4b1f      	ldr	r3, [pc, #124]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	4a19      	ldr	r2, [pc, #100]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b38:	e00f      	b.n	8005b5a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d106      	bne.n	8005b4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005b40:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4a14      	ldr	r2, [pc, #80]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005b4c:	e005      	b.n	8005b5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005b5a:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a0e      	ldr	r2, [pc, #56]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b66:	f7fb fedb 	bl	8001920 <HAL_GetTick>
 8005b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b6c:	e008      	b.n	8005b80 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005b6e:	f7fb fed7 	bl	8001920 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d901      	bls.n	8005b80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e006      	b.n	8005b8e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <RCCEx_PLL3_Config+0x15c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0f0      	beq.n	8005b6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	ffff0007 	.word	0xffff0007

08005ba0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e0e2      	b.n	8005d7c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a70      	ldr	r2, [pc, #448]	; (8005d84 <HAL_SPI_Init+0x1e4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00f      	beq.n	8005be6 <HAL_SPI_Init+0x46>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a6f      	ldr	r2, [pc, #444]	; (8005d88 <HAL_SPI_Init+0x1e8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00a      	beq.n	8005be6 <HAL_SPI_Init+0x46>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a6d      	ldr	r2, [pc, #436]	; (8005d8c <HAL_SPI_Init+0x1ec>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d005      	beq.n	8005be6 <HAL_SPI_Init+0x46>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	2b0f      	cmp	r3, #15
 8005be0:	d901      	bls.n	8005be6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e0ca      	b.n	8005d7c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f8d2 	bl	8005d90 <SPI_GetPacketSize>
 8005bec:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a64      	ldr	r2, [pc, #400]	; (8005d84 <HAL_SPI_Init+0x1e4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00c      	beq.n	8005c12 <HAL_SPI_Init+0x72>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a62      	ldr	r2, [pc, #392]	; (8005d88 <HAL_SPI_Init+0x1e8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d007      	beq.n	8005c12 <HAL_SPI_Init+0x72>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a61      	ldr	r2, [pc, #388]	; (8005d8c <HAL_SPI_Init+0x1ec>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_Init+0x72>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d811      	bhi.n	8005c36 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c16:	4a5b      	ldr	r2, [pc, #364]	; (8005d84 <HAL_SPI_Init+0x1e4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d009      	beq.n	8005c30 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a59      	ldr	r2, [pc, #356]	; (8005d88 <HAL_SPI_Init+0x1e8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_SPI_Init+0x90>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a58      	ldr	r2, [pc, #352]	; (8005d8c <HAL_SPI_Init+0x1ec>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d104      	bne.n	8005c3a <HAL_SPI_Init+0x9a>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b10      	cmp	r3, #16
 8005c34:	d901      	bls.n	8005c3a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e0a0      	b.n	8005d7c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fb fb6e 	bl	8001330 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c74:	d110      	bne.n	8005c98 <HAL_SPI_Init+0xf8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c7e:	d10b      	bne.n	8005c98 <HAL_SPI_Init+0xf8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d107      	bne.n	8005c98 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c96:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	ea42 0103 	orr.w	r1, r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68da      	ldr	r2, [r3, #12]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cf8:	ea42 0103 	orr.w	r1, r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d113      	bne.n	8005d38 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d22:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d36:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40013000 	.word	0x40013000
 8005d88:	40003800 	.word	0x40003800
 8005d8c:	40003c00 	.word	0x40003c00

08005d90 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	3301      	adds	r3, #1
 8005da8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	3307      	adds	r3, #7
 8005dae:	08db      	lsrs	r3, r3, #3
 8005db0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	fb02 f303 	mul.w	r3, r2, r3
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e01d      	b.n	8005e14 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d106      	bne.n	8005df2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7fb fae9 	bl	80013c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3304      	adds	r3, #4
 8005e02:	4619      	mov	r1, r3
 8005e04:	4610      	mov	r0, r2
 8005e06:	f000 f8a5 	bl	8005f54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e08a      	b.n	8005f4c <HAL_TIM_IC_ConfigChannel+0x130>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d11b      	bne.n	8005e84 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	6819      	ldr	r1, [r3, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f000 f914 	bl	8006088 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 020c 	bic.w	r2, r2, #12
 8005e6e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6999      	ldr	r1, [r3, #24]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	619a      	str	r2, [r3, #24]
 8005e82:	e05a      	b.n	8005f3a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d11c      	bne.n	8005ec4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	6819      	ldr	r1, [r3, #0]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f000 f969 	bl	8006170 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699a      	ldr	r2, [r3, #24]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005eac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6999      	ldr	r1, [r3, #24]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	021a      	lsls	r2, r3, #8
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	619a      	str	r2, [r3, #24]
 8005ec2:	e03a      	b.n	8005f3a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d11b      	bne.n	8005f02 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6819      	ldr	r1, [r3, #0]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f000 f986 	bl	80061ea <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 020c 	bic.w	r2, r2, #12
 8005eec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	69d9      	ldr	r1, [r3, #28]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	61da      	str	r2, [r3, #28]
 8005f00:	e01b      	b.n	8005f3a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6819      	ldr	r1, [r3, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f000 f9a6 	bl	8006262 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f24:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69d9      	ldr	r1, [r3, #28]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	021a      	lsls	r2, r3, #8
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a40      	ldr	r2, [pc, #256]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d013      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f72:	d00f      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a3d      	ldr	r2, [pc, #244]	; (800606c <TIM_Base_SetConfig+0x118>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00b      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a3c      	ldr	r2, [pc, #240]	; (8006070 <TIM_Base_SetConfig+0x11c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d007      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a3b      	ldr	r2, [pc, #236]	; (8006074 <TIM_Base_SetConfig+0x120>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_Base_SetConfig+0x40>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a3a      	ldr	r2, [pc, #232]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d108      	bne.n	8005fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a2f      	ldr	r2, [pc, #188]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d01f      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb4:	d01b      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a2c      	ldr	r2, [pc, #176]	; (800606c <TIM_Base_SetConfig+0x118>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d017      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2b      	ldr	r2, [pc, #172]	; (8006070 <TIM_Base_SetConfig+0x11c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a2a      	ldr	r2, [pc, #168]	; (8006074 <TIM_Base_SetConfig+0x120>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00f      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a29      	ldr	r2, [pc, #164]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00b      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a28      	ldr	r2, [pc, #160]	; (800607c <TIM_Base_SetConfig+0x128>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d007      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a27      	ldr	r2, [pc, #156]	; (8006080 <TIM_Base_SetConfig+0x12c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d003      	beq.n	8005fee <TIM_Base_SetConfig+0x9a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a26      	ldr	r2, [pc, #152]	; (8006084 <TIM_Base_SetConfig+0x130>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d108      	bne.n	8006000 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a10      	ldr	r2, [pc, #64]	; (8006068 <TIM_Base_SetConfig+0x114>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00f      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a12      	ldr	r2, [pc, #72]	; (8006078 <TIM_Base_SetConfig+0x124>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00b      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a11      	ldr	r2, [pc, #68]	; (800607c <TIM_Base_SetConfig+0x128>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d007      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a10      	ldr	r2, [pc, #64]	; (8006080 <TIM_Base_SetConfig+0x12c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d003      	beq.n	800604c <TIM_Base_SetConfig+0xf8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a0f      	ldr	r2, [pc, #60]	; (8006084 <TIM_Base_SetConfig+0x130>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d103      	bne.n	8006054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	615a      	str	r2, [r3, #20]
}
 800605a:	bf00      	nop
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40010000 	.word	0x40010000
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	40000c00 	.word	0x40000c00
 8006078:	40010400 	.word	0x40010400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800

08006088 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f023 0201 	bic.w	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a28      	ldr	r2, [pc, #160]	; (8006154 <TIM_TI1_SetConfig+0xcc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01b      	beq.n	80060ee <TIM_TI1_SetConfig+0x66>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060bc:	d017      	beq.n	80060ee <TIM_TI1_SetConfig+0x66>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	4a25      	ldr	r2, [pc, #148]	; (8006158 <TIM_TI1_SetConfig+0xd0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <TIM_TI1_SetConfig+0x66>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a24      	ldr	r2, [pc, #144]	; (800615c <TIM_TI1_SetConfig+0xd4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00f      	beq.n	80060ee <TIM_TI1_SetConfig+0x66>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a23      	ldr	r2, [pc, #140]	; (8006160 <TIM_TI1_SetConfig+0xd8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_TI1_SetConfig+0x66>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a22      	ldr	r2, [pc, #136]	; (8006164 <TIM_TI1_SetConfig+0xdc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_TI1_SetConfig+0x66>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a21      	ldr	r2, [pc, #132]	; (8006168 <TIM_TI1_SetConfig+0xe0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_TI1_SetConfig+0x66>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a20      	ldr	r2, [pc, #128]	; (800616c <TIM_TI1_SetConfig+0xe4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d101      	bne.n	80060f2 <TIM_TI1_SetConfig+0x6a>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <TIM_TI1_SetConfig+0x6c>
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0303 	bic.w	r3, r3, #3
 80060fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4313      	orrs	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	e003      	b.n	8006112 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f043 0301 	orr.w	r3, r3, #1
 8006110:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	b2db      	uxtb	r3, r3
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f023 030a 	bic.w	r3, r3, #10
 800612c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f003 030a 	and.w	r3, r3, #10
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	621a      	str	r2, [r3, #32]
}
 8006146:	bf00      	nop
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40010000 	.word	0x40010000
 8006158:	40000400 	.word	0x40000400
 800615c:	40000800 	.word	0x40000800
 8006160:	40000c00 	.word	0x40000c00
 8006164:	40010400 	.word	0x40010400
 8006168:	40001800 	.word	0x40001800
 800616c:	40014000 	.word	0x40014000

08006170 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	f023 0210 	bic.w	r2, r3, #16
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	021b      	lsls	r3, r3, #8
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	031b      	lsls	r3, r3, #12
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b087      	sub	sp, #28
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	69db      	ldr	r3, [r3, #28]
 8006208:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006226:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	011b      	lsls	r3, r3, #4
 800622c:	b2db      	uxtb	r3, r3
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800623a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006262:	b480      	push	{r7}
 8006264:	b087      	sub	sp, #28
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	031b      	lsls	r3, r3, #12
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80062b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	031b      	lsls	r3, r3, #12
 80062ba:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e045      	b.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1c      	ldr	r2, [pc, #112]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1b      	ldr	r2, [pc, #108]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d108      	bne.n	800633a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800632e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006340:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006352:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	4313      	orrs	r3, r2
 800635c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	40010000 	.word	0x40010000
 8006390:	40010400 	.word	0x40010400

08006394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e042      	b.n	800642c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d106      	bne.n	80063be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fb f84d 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2224      	movs	r2, #36	; 0x24
 80063c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f8c2 	bl	8006560 <UART_SetConfig>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e022      	b.n	800642c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f002 fa34 	bl	800885c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f002 fabb 	bl	80089a0 <UART_CheckIdleState>
 800642a:	4603      	mov	r3, r0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af02      	add	r7, sp, #8
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644a:	2b20      	cmp	r3, #32
 800644c:	f040 8083 	bne.w	8006556 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_UART_Transmit+0x28>
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e07b      	b.n	8006558 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_UART_Transmit+0x3a>
 800646a:	2302      	movs	r3, #2
 800646c:	e074      	b.n	8006558 <HAL_UART_Transmit+0x124>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2221      	movs	r2, #33	; 0x21
 8006482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006486:	f7fb fa4b 	bl	8001920 <HAL_GetTick>
 800648a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	88fa      	ldrh	r2, [r7, #6]
 8006490:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a4:	d108      	bne.n	80064b8 <HAL_UART_Transmit+0x84>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	e003      	b.n	80064c0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064c0:	e02c      	b.n	800651c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2200      	movs	r2, #0
 80064ca:	2180      	movs	r1, #128	; 0x80
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f002 faaf 	bl	8008a30 <UART_WaitOnFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e03d      	b.n	8006558 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10b      	bne.n	80064fa <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	3302      	adds	r3, #2
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	e007      	b.n	800650a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	781a      	ldrb	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	3301      	adds	r3, #1
 8006508:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1cc      	bne.n	80064c2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2200      	movs	r2, #0
 8006530:	2140      	movs	r1, #64	; 0x40
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f002 fa7c 	bl	8008a30 <UART_WaitOnFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e00a      	b.n	8006558 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2220      	movs	r2, #32
 8006546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e000      	b.n	8006558 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006556:	2302      	movs	r3, #2
  }
}
 8006558:	4618      	mov	r0, r3
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006560:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006564:	b090      	sub	sp, #64	; 0x40
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800656a:	2300      	movs	r3, #0
 800656c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006574:	2300      	movs	r3, #0
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	431a      	orrs	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	69db      	ldr	r3, [r3, #28]
 800658c:	4313      	orrs	r3, r2
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006594:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006596:	4313      	orrs	r3, r2
 8006598:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	4bc1      	ldr	r3, [pc, #772]	; (80068a8 <UART_SetConfig+0x348>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065aa:	430b      	orrs	r3, r1
 80065ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4ab7      	ldr	r2, [pc, #732]	; (80068ac <UART_SetConfig+0x34c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d004      	beq.n	80065de <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065da:	4313      	orrs	r3, r2
 80065dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	4bb2      	ldr	r3, [pc, #712]	; (80068b0 <UART_SetConfig+0x350>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ee:	430b      	orrs	r3, r1
 80065f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	f023 010f 	bic.w	r1, r3, #15
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4aa9      	ldr	r2, [pc, #676]	; (80068b4 <UART_SetConfig+0x354>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d177      	bne.n	8006702 <UART_SetConfig+0x1a2>
 8006612:	4ba9      	ldr	r3, [pc, #676]	; (80068b8 <UART_SetConfig+0x358>)
 8006614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800661a:	2b28      	cmp	r3, #40	; 0x28
 800661c:	d86c      	bhi.n	80066f8 <UART_SetConfig+0x198>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <UART_SetConfig+0xc4>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	080066c9 	.word	0x080066c9
 8006628:	080066f9 	.word	0x080066f9
 800662c:	080066f9 	.word	0x080066f9
 8006630:	080066f9 	.word	0x080066f9
 8006634:	080066f9 	.word	0x080066f9
 8006638:	080066f9 	.word	0x080066f9
 800663c:	080066f9 	.word	0x080066f9
 8006640:	080066f9 	.word	0x080066f9
 8006644:	080066d1 	.word	0x080066d1
 8006648:	080066f9 	.word	0x080066f9
 800664c:	080066f9 	.word	0x080066f9
 8006650:	080066f9 	.word	0x080066f9
 8006654:	080066f9 	.word	0x080066f9
 8006658:	080066f9 	.word	0x080066f9
 800665c:	080066f9 	.word	0x080066f9
 8006660:	080066f9 	.word	0x080066f9
 8006664:	080066d9 	.word	0x080066d9
 8006668:	080066f9 	.word	0x080066f9
 800666c:	080066f9 	.word	0x080066f9
 8006670:	080066f9 	.word	0x080066f9
 8006674:	080066f9 	.word	0x080066f9
 8006678:	080066f9 	.word	0x080066f9
 800667c:	080066f9 	.word	0x080066f9
 8006680:	080066f9 	.word	0x080066f9
 8006684:	080066e1 	.word	0x080066e1
 8006688:	080066f9 	.word	0x080066f9
 800668c:	080066f9 	.word	0x080066f9
 8006690:	080066f9 	.word	0x080066f9
 8006694:	080066f9 	.word	0x080066f9
 8006698:	080066f9 	.word	0x080066f9
 800669c:	080066f9 	.word	0x080066f9
 80066a0:	080066f9 	.word	0x080066f9
 80066a4:	080066e9 	.word	0x080066e9
 80066a8:	080066f9 	.word	0x080066f9
 80066ac:	080066f9 	.word	0x080066f9
 80066b0:	080066f9 	.word	0x080066f9
 80066b4:	080066f9 	.word	0x080066f9
 80066b8:	080066f9 	.word	0x080066f9
 80066bc:	080066f9 	.word	0x080066f9
 80066c0:	080066f9 	.word	0x080066f9
 80066c4:	080066f1 	.word	0x080066f1
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066ce:	e233      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80066d0:	2304      	movs	r3, #4
 80066d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066d6:	e22f      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80066d8:	2308      	movs	r3, #8
 80066da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066de:	e22b      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80066e0:	2310      	movs	r3, #16
 80066e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066e6:	e227      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80066e8:	2320      	movs	r3, #32
 80066ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066ee:	e223      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80066f0:	2340      	movs	r3, #64	; 0x40
 80066f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066f6:	e21f      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80066fe:	bf00      	nop
 8006700:	e21a      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a6d      	ldr	r2, [pc, #436]	; (80068bc <UART_SetConfig+0x35c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d132      	bne.n	8006772 <UART_SetConfig+0x212>
 800670c:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <UART_SetConfig+0x358>)
 800670e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	2b05      	cmp	r3, #5
 8006716:	d827      	bhi.n	8006768 <UART_SetConfig+0x208>
 8006718:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0x1c0>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	08006739 	.word	0x08006739
 8006724:	08006741 	.word	0x08006741
 8006728:	08006749 	.word	0x08006749
 800672c:	08006751 	.word	0x08006751
 8006730:	08006759 	.word	0x08006759
 8006734:	08006761 	.word	0x08006761
 8006738:	2300      	movs	r3, #0
 800673a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800673e:	e1fb      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006740:	2304      	movs	r3, #4
 8006742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006746:	e1f7      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006748:	2308      	movs	r3, #8
 800674a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800674e:	e1f3      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006750:	2310      	movs	r3, #16
 8006752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006756:	e1ef      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006758:	2320      	movs	r3, #32
 800675a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800675e:	e1eb      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006760:	2340      	movs	r3, #64	; 0x40
 8006762:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006766:	e1e7      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006768:	2380      	movs	r3, #128	; 0x80
 800676a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800676e:	bf00      	nop
 8006770:	e1e2      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a52      	ldr	r2, [pc, #328]	; (80068c0 <UART_SetConfig+0x360>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d132      	bne.n	80067e2 <UART_SetConfig+0x282>
 800677c:	4b4e      	ldr	r3, [pc, #312]	; (80068b8 <UART_SetConfig+0x358>)
 800677e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	2b05      	cmp	r3, #5
 8006786:	d827      	bhi.n	80067d8 <UART_SetConfig+0x278>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <UART_SetConfig+0x230>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067a9 	.word	0x080067a9
 8006794:	080067b1 	.word	0x080067b1
 8006798:	080067b9 	.word	0x080067b9
 800679c:	080067c1 	.word	0x080067c1
 80067a0:	080067c9 	.word	0x080067c9
 80067a4:	080067d1 	.word	0x080067d1
 80067a8:	2300      	movs	r3, #0
 80067aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ae:	e1c3      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80067b0:	2304      	movs	r3, #4
 80067b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067b6:	e1bf      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80067b8:	2308      	movs	r3, #8
 80067ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067be:	e1bb      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80067c0:	2310      	movs	r3, #16
 80067c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067c6:	e1b7      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80067c8:	2320      	movs	r3, #32
 80067ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067ce:	e1b3      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80067d0:	2340      	movs	r3, #64	; 0x40
 80067d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067d6:	e1af      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80067d8:	2380      	movs	r3, #128	; 0x80
 80067da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80067de:	bf00      	nop
 80067e0:	e1aa      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a37      	ldr	r2, [pc, #220]	; (80068c4 <UART_SetConfig+0x364>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d132      	bne.n	8006852 <UART_SetConfig+0x2f2>
 80067ec:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <UART_SetConfig+0x358>)
 80067ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	2b05      	cmp	r3, #5
 80067f6:	d827      	bhi.n	8006848 <UART_SetConfig+0x2e8>
 80067f8:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0x2a0>)
 80067fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fe:	bf00      	nop
 8006800:	08006819 	.word	0x08006819
 8006804:	08006821 	.word	0x08006821
 8006808:	08006829 	.word	0x08006829
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	2300      	movs	r3, #0
 800681a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800681e:	e18b      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006820:	2304      	movs	r3, #4
 8006822:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006826:	e187      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006828:	2308      	movs	r3, #8
 800682a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800682e:	e183      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006830:	2310      	movs	r3, #16
 8006832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006836:	e17f      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006838:	2320      	movs	r3, #32
 800683a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800683e:	e17b      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006840:	2340      	movs	r3, #64	; 0x40
 8006842:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006846:	e177      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006848:	2380      	movs	r3, #128	; 0x80
 800684a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800684e:	bf00      	nop
 8006850:	e172      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1c      	ldr	r2, [pc, #112]	; (80068c8 <UART_SetConfig+0x368>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d144      	bne.n	80068e6 <UART_SetConfig+0x386>
 800685c:	4b16      	ldr	r3, [pc, #88]	; (80068b8 <UART_SetConfig+0x358>)
 800685e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006860:	f003 0307 	and.w	r3, r3, #7
 8006864:	2b05      	cmp	r3, #5
 8006866:	d839      	bhi.n	80068dc <UART_SetConfig+0x37c>
 8006868:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <UART_SetConfig+0x310>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	08006889 	.word	0x08006889
 8006874:	08006891 	.word	0x08006891
 8006878:	08006899 	.word	0x08006899
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068cd 	.word	0x080068cd
 8006884:	080068d5 	.word	0x080068d5
 8006888:	2300      	movs	r3, #0
 800688a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800688e:	e153      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006890:	2304      	movs	r3, #4
 8006892:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006896:	e14f      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006898:	2308      	movs	r3, #8
 800689a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800689e:	e14b      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80068a0:	2310      	movs	r3, #16
 80068a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068a6:	e147      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80068a8:	cfff69f3 	.word	0xcfff69f3
 80068ac:	58000c00 	.word	0x58000c00
 80068b0:	11fff4ff 	.word	0x11fff4ff
 80068b4:	40011000 	.word	0x40011000
 80068b8:	58024400 	.word	0x58024400
 80068bc:	40004400 	.word	0x40004400
 80068c0:	40004800 	.word	0x40004800
 80068c4:	40004c00 	.word	0x40004c00
 80068c8:	40005000 	.word	0x40005000
 80068cc:	2320      	movs	r3, #32
 80068ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068d2:	e131      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80068d4:	2340      	movs	r3, #64	; 0x40
 80068d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068da:	e12d      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80068dc:	2380      	movs	r3, #128	; 0x80
 80068de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80068e2:	bf00      	nop
 80068e4:	e128      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4ac3      	ldr	r2, [pc, #780]	; (8006bf8 <UART_SetConfig+0x698>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d178      	bne.n	80069e2 <UART_SetConfig+0x482>
 80068f0:	4bc2      	ldr	r3, [pc, #776]	; (8006bfc <UART_SetConfig+0x69c>)
 80068f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f8:	2b28      	cmp	r3, #40	; 0x28
 80068fa:	d86d      	bhi.n	80069d8 <UART_SetConfig+0x478>
 80068fc:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <UART_SetConfig+0x3a4>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	080069a9 	.word	0x080069a9
 8006908:	080069d9 	.word	0x080069d9
 800690c:	080069d9 	.word	0x080069d9
 8006910:	080069d9 	.word	0x080069d9
 8006914:	080069d9 	.word	0x080069d9
 8006918:	080069d9 	.word	0x080069d9
 800691c:	080069d9 	.word	0x080069d9
 8006920:	080069d9 	.word	0x080069d9
 8006924:	080069b1 	.word	0x080069b1
 8006928:	080069d9 	.word	0x080069d9
 800692c:	080069d9 	.word	0x080069d9
 8006930:	080069d9 	.word	0x080069d9
 8006934:	080069d9 	.word	0x080069d9
 8006938:	080069d9 	.word	0x080069d9
 800693c:	080069d9 	.word	0x080069d9
 8006940:	080069d9 	.word	0x080069d9
 8006944:	080069b9 	.word	0x080069b9
 8006948:	080069d9 	.word	0x080069d9
 800694c:	080069d9 	.word	0x080069d9
 8006950:	080069d9 	.word	0x080069d9
 8006954:	080069d9 	.word	0x080069d9
 8006958:	080069d9 	.word	0x080069d9
 800695c:	080069d9 	.word	0x080069d9
 8006960:	080069d9 	.word	0x080069d9
 8006964:	080069c1 	.word	0x080069c1
 8006968:	080069d9 	.word	0x080069d9
 800696c:	080069d9 	.word	0x080069d9
 8006970:	080069d9 	.word	0x080069d9
 8006974:	080069d9 	.word	0x080069d9
 8006978:	080069d9 	.word	0x080069d9
 800697c:	080069d9 	.word	0x080069d9
 8006980:	080069d9 	.word	0x080069d9
 8006984:	080069c9 	.word	0x080069c9
 8006988:	080069d9 	.word	0x080069d9
 800698c:	080069d9 	.word	0x080069d9
 8006990:	080069d9 	.word	0x080069d9
 8006994:	080069d9 	.word	0x080069d9
 8006998:	080069d9 	.word	0x080069d9
 800699c:	080069d9 	.word	0x080069d9
 80069a0:	080069d9 	.word	0x080069d9
 80069a4:	080069d1 	.word	0x080069d1
 80069a8:	2301      	movs	r3, #1
 80069aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069ae:	e0c3      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80069b0:	2304      	movs	r3, #4
 80069b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069b6:	e0bf      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80069b8:	2308      	movs	r3, #8
 80069ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069be:	e0bb      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80069c0:	2310      	movs	r3, #16
 80069c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069c6:	e0b7      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80069c8:	2320      	movs	r3, #32
 80069ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069ce:	e0b3      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80069d0:	2340      	movs	r3, #64	; 0x40
 80069d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069d6:	e0af      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80069d8:	2380      	movs	r3, #128	; 0x80
 80069da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069de:	bf00      	nop
 80069e0:	e0aa      	b.n	8006b38 <UART_SetConfig+0x5d8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a86      	ldr	r2, [pc, #536]	; (8006c00 <UART_SetConfig+0x6a0>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d132      	bne.n	8006a52 <UART_SetConfig+0x4f2>
 80069ec:	4b83      	ldr	r3, [pc, #524]	; (8006bfc <UART_SetConfig+0x69c>)
 80069ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	2b05      	cmp	r3, #5
 80069f6:	d827      	bhi.n	8006a48 <UART_SetConfig+0x4e8>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <UART_SetConfig+0x4a0>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a19 	.word	0x08006a19
 8006a04:	08006a21 	.word	0x08006a21
 8006a08:	08006a29 	.word	0x08006a29
 8006a0c:	08006a31 	.word	0x08006a31
 8006a10:	08006a39 	.word	0x08006a39
 8006a14:	08006a41 	.word	0x08006a41
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a1e:	e08b      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006a20:	2304      	movs	r3, #4
 8006a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a26:	e087      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006a28:	2308      	movs	r3, #8
 8006a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a2e:	e083      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006a30:	2310      	movs	r3, #16
 8006a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a36:	e07f      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006a38:	2320      	movs	r3, #32
 8006a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a3e:	e07b      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006a40:	2340      	movs	r3, #64	; 0x40
 8006a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a46:	e077      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006a48:	2380      	movs	r3, #128	; 0x80
 8006a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a4e:	bf00      	nop
 8006a50:	e072      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a6b      	ldr	r2, [pc, #428]	; (8006c04 <UART_SetConfig+0x6a4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d132      	bne.n	8006ac2 <UART_SetConfig+0x562>
 8006a5c:	4b67      	ldr	r3, [pc, #412]	; (8006bfc <UART_SetConfig+0x69c>)
 8006a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	2b05      	cmp	r3, #5
 8006a66:	d827      	bhi.n	8006ab8 <UART_SetConfig+0x558>
 8006a68:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <UART_SetConfig+0x510>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006a89 	.word	0x08006a89
 8006a74:	08006a91 	.word	0x08006a91
 8006a78:	08006a99 	.word	0x08006a99
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a8e:	e053      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006a90:	2304      	movs	r3, #4
 8006a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a96:	e04f      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a9e:	e04b      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aa6:	e047      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006aa8:	2320      	movs	r3, #32
 8006aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aae:	e043      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006ab0:	2340      	movs	r3, #64	; 0x40
 8006ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ab6:	e03f      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006abe:	bf00      	nop
 8006ac0:	e03a      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a50      	ldr	r2, [pc, #320]	; (8006c08 <UART_SetConfig+0x6a8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d132      	bne.n	8006b32 <UART_SetConfig+0x5d2>
 8006acc:	4b4b      	ldr	r3, [pc, #300]	; (8006bfc <UART_SetConfig+0x69c>)
 8006ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	2b05      	cmp	r3, #5
 8006ad6:	d827      	bhi.n	8006b28 <UART_SetConfig+0x5c8>
 8006ad8:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <UART_SetConfig+0x580>)
 8006ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ade:	bf00      	nop
 8006ae0:	08006af9 	.word	0x08006af9
 8006ae4:	08006b01 	.word	0x08006b01
 8006ae8:	08006b09 	.word	0x08006b09
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	2302      	movs	r3, #2
 8006afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006afe:	e01b      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006b00:	2304      	movs	r3, #4
 8006b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b06:	e017      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006b08:	2308      	movs	r3, #8
 8006b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b0e:	e013      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006b10:	2310      	movs	r3, #16
 8006b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b16:	e00f      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006b18:	2320      	movs	r3, #32
 8006b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b1e:	e00b      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b26:	e007      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006b28:	2380      	movs	r3, #128	; 0x80
 8006b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b2e:	bf00      	nop
 8006b30:	e002      	b.n	8006b38 <UART_SetConfig+0x5d8>
 8006b32:	2380      	movs	r3, #128	; 0x80
 8006b34:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a32      	ldr	r2, [pc, #200]	; (8006c08 <UART_SetConfig+0x6a8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	f040 86f7 	bne.w	8007932 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	f000 80c0 	beq.w	8006cce <UART_SetConfig+0x76e>
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	dc04      	bgt.n	8006b5c <UART_SetConfig+0x5fc>
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d00c      	beq.n	8006b70 <UART_SetConfig+0x610>
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d065      	beq.n	8006c26 <UART_SetConfig+0x6c6>
 8006b5a:	e27a      	b.n	8007052 <UART_SetConfig+0xaf2>
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	f000 81b0 	beq.w	8006ec2 <UART_SetConfig+0x962>
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	f000 821e 	beq.w	8006fa4 <UART_SetConfig+0xa44>
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	f000 8104 	beq.w	8006d76 <UART_SetConfig+0x816>
 8006b6e:	e270      	b.n	8007052 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006b70:	f7fe fa9c 	bl	80050ac <HAL_RCCEx_GetD3PCLK1Freq>
 8006b74:	4602      	mov	r2, r0
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d04e      	beq.n	8006c1c <UART_SetConfig+0x6bc>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d048      	beq.n	8006c18 <UART_SetConfig+0x6b8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d042      	beq.n	8006c14 <UART_SetConfig+0x6b4>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d03c      	beq.n	8006c10 <UART_SetConfig+0x6b0>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d036      	beq.n	8006c0c <UART_SetConfig+0x6ac>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	2b05      	cmp	r3, #5
 8006ba4:	d026      	beq.n	8006bf4 <UART_SetConfig+0x694>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	2b06      	cmp	r3, #6
 8006bac:	d020      	beq.n	8006bf0 <UART_SetConfig+0x690>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	2b07      	cmp	r3, #7
 8006bb4:	d01a      	beq.n	8006bec <UART_SetConfig+0x68c>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d014      	beq.n	8006be8 <UART_SetConfig+0x688>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	2b09      	cmp	r3, #9
 8006bc4:	d00e      	beq.n	8006be4 <UART_SetConfig+0x684>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	2b0a      	cmp	r3, #10
 8006bcc:	d008      	beq.n	8006be0 <UART_SetConfig+0x680>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	2b0b      	cmp	r3, #11
 8006bd4:	d102      	bne.n	8006bdc <UART_SetConfig+0x67c>
 8006bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bda:	e020      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e01e      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006be0:	2380      	movs	r3, #128	; 0x80
 8006be2:	e01c      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006be4:	2340      	movs	r3, #64	; 0x40
 8006be6:	e01a      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006be8:	2320      	movs	r3, #32
 8006bea:	e018      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006bec:	2310      	movs	r3, #16
 8006bee:	e016      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006bf0:	230c      	movs	r3, #12
 8006bf2:	e014      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006bf4:	230a      	movs	r3, #10
 8006bf6:	e012      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006bf8:	40011400 	.word	0x40011400
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	40007800 	.word	0x40007800
 8006c04:	40007c00 	.word	0x40007c00
 8006c08:	58000c00 	.word	0x58000c00
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	e006      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006c10:	2306      	movs	r3, #6
 8006c12:	e004      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006c14:	2304      	movs	r3, #4
 8006c16:	e002      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e000      	b.n	8006c1e <UART_SetConfig+0x6be>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c24:	e219      	b.n	800705a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c26:	f107 0318 	add.w	r3, r7, #24
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fa54 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d044      	beq.n	8006cc4 <UART_SetConfig+0x764>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d03e      	beq.n	8006cc0 <UART_SetConfig+0x760>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d038      	beq.n	8006cbc <UART_SetConfig+0x75c>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d032      	beq.n	8006cb8 <UART_SetConfig+0x758>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d02c      	beq.n	8006cb4 <UART_SetConfig+0x754>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	2b05      	cmp	r3, #5
 8006c60:	d026      	beq.n	8006cb0 <UART_SetConfig+0x750>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	2b06      	cmp	r3, #6
 8006c68:	d020      	beq.n	8006cac <UART_SetConfig+0x74c>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b07      	cmp	r3, #7
 8006c70:	d01a      	beq.n	8006ca8 <UART_SetConfig+0x748>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d014      	beq.n	8006ca4 <UART_SetConfig+0x744>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	2b09      	cmp	r3, #9
 8006c80:	d00e      	beq.n	8006ca0 <UART_SetConfig+0x740>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b0a      	cmp	r3, #10
 8006c88:	d008      	beq.n	8006c9c <UART_SetConfig+0x73c>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b0b      	cmp	r3, #11
 8006c90:	d102      	bne.n	8006c98 <UART_SetConfig+0x738>
 8006c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c96:	e016      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e014      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006c9c:	2380      	movs	r3, #128	; 0x80
 8006c9e:	e012      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006ca0:	2340      	movs	r3, #64	; 0x40
 8006ca2:	e010      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006ca4:	2320      	movs	r3, #32
 8006ca6:	e00e      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	e00c      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006cac:	230c      	movs	r3, #12
 8006cae:	e00a      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006cb0:	230a      	movs	r3, #10
 8006cb2:	e008      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	e006      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006cb8:	2306      	movs	r3, #6
 8006cba:	e004      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	e002      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e000      	b.n	8006cc6 <UART_SetConfig+0x766>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ccc:	e1c5      	b.n	800705a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cce:	f107 030c 	add.w	r3, r7, #12
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe fb4c 	bl	8005370 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d044      	beq.n	8006d6c <UART_SetConfig+0x80c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d03e      	beq.n	8006d68 <UART_SetConfig+0x808>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d038      	beq.n	8006d64 <UART_SetConfig+0x804>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d032      	beq.n	8006d60 <UART_SetConfig+0x800>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d02c      	beq.n	8006d5c <UART_SetConfig+0x7fc>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d026      	beq.n	8006d58 <UART_SetConfig+0x7f8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	2b06      	cmp	r3, #6
 8006d10:	d020      	beq.n	8006d54 <UART_SetConfig+0x7f4>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	2b07      	cmp	r3, #7
 8006d18:	d01a      	beq.n	8006d50 <UART_SetConfig+0x7f0>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	2b08      	cmp	r3, #8
 8006d20:	d014      	beq.n	8006d4c <UART_SetConfig+0x7ec>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	2b09      	cmp	r3, #9
 8006d28:	d00e      	beq.n	8006d48 <UART_SetConfig+0x7e8>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2b0a      	cmp	r3, #10
 8006d30:	d008      	beq.n	8006d44 <UART_SetConfig+0x7e4>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	2b0b      	cmp	r3, #11
 8006d38:	d102      	bne.n	8006d40 <UART_SetConfig+0x7e0>
 8006d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d3e:	e016      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e014      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d44:	2380      	movs	r3, #128	; 0x80
 8006d46:	e012      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d48:	2340      	movs	r3, #64	; 0x40
 8006d4a:	e010      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d4c:	2320      	movs	r3, #32
 8006d4e:	e00e      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d50:	2310      	movs	r3, #16
 8006d52:	e00c      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d54:	230c      	movs	r3, #12
 8006d56:	e00a      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d58:	230a      	movs	r3, #10
 8006d5a:	e008      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	e006      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d60:	2306      	movs	r3, #6
 8006d62:	e004      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d64:	2304      	movs	r3, #4
 8006d66:	e002      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e000      	b.n	8006d6e <UART_SetConfig+0x80e>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d74:	e171      	b.n	800705a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d76:	4b7a      	ldr	r3, [pc, #488]	; (8006f60 <UART_SetConfig+0xa00>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d054      	beq.n	8006e2c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006d82:	4b77      	ldr	r3, [pc, #476]	; (8006f60 <UART_SetConfig+0xa00>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	08db      	lsrs	r3, r3, #3
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	4a75      	ldr	r2, [pc, #468]	; (8006f64 <UART_SetConfig+0xa04>)
 8006d8e:	40da      	lsrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d044      	beq.n	8006e22 <UART_SetConfig+0x8c2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d03e      	beq.n	8006e1e <UART_SetConfig+0x8be>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d038      	beq.n	8006e1a <UART_SetConfig+0x8ba>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d032      	beq.n	8006e16 <UART_SetConfig+0x8b6>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d02c      	beq.n	8006e12 <UART_SetConfig+0x8b2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	2b05      	cmp	r3, #5
 8006dbe:	d026      	beq.n	8006e0e <UART_SetConfig+0x8ae>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	2b06      	cmp	r3, #6
 8006dc6:	d020      	beq.n	8006e0a <UART_SetConfig+0x8aa>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	2b07      	cmp	r3, #7
 8006dce:	d01a      	beq.n	8006e06 <UART_SetConfig+0x8a6>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d014      	beq.n	8006e02 <UART_SetConfig+0x8a2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b09      	cmp	r3, #9
 8006dde:	d00e      	beq.n	8006dfe <UART_SetConfig+0x89e>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	2b0a      	cmp	r3, #10
 8006de6:	d008      	beq.n	8006dfa <UART_SetConfig+0x89a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	2b0b      	cmp	r3, #11
 8006dee:	d102      	bne.n	8006df6 <UART_SetConfig+0x896>
 8006df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006df4:	e016      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e014      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	e012      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006dfe:	2340      	movs	r3, #64	; 0x40
 8006e00:	e010      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006e02:	2320      	movs	r3, #32
 8006e04:	e00e      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006e06:	2310      	movs	r3, #16
 8006e08:	e00c      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	e00a      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006e0e:	230a      	movs	r3, #10
 8006e10:	e008      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006e12:	2308      	movs	r3, #8
 8006e14:	e006      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006e16:	2306      	movs	r3, #6
 8006e18:	e004      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006e1a:	2304      	movs	r3, #4
 8006e1c:	e002      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006e1e:	2302      	movs	r3, #2
 8006e20:	e000      	b.n	8006e24 <UART_SetConfig+0x8c4>
 8006e22:	2301      	movs	r3, #1
 8006e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8006e2a:	e116      	b.n	800705a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d043      	beq.n	8006ebc <UART_SetConfig+0x95c>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d03d      	beq.n	8006eb8 <UART_SetConfig+0x958>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d037      	beq.n	8006eb4 <UART_SetConfig+0x954>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d031      	beq.n	8006eb0 <UART_SetConfig+0x950>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d02b      	beq.n	8006eac <UART_SetConfig+0x94c>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	2b05      	cmp	r3, #5
 8006e5a:	d025      	beq.n	8006ea8 <UART_SetConfig+0x948>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	2b06      	cmp	r3, #6
 8006e62:	d01f      	beq.n	8006ea4 <UART_SetConfig+0x944>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e68:	2b07      	cmp	r3, #7
 8006e6a:	d019      	beq.n	8006ea0 <UART_SetConfig+0x940>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d013      	beq.n	8006e9c <UART_SetConfig+0x93c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e78:	2b09      	cmp	r3, #9
 8006e7a:	d00d      	beq.n	8006e98 <UART_SetConfig+0x938>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	2b0a      	cmp	r3, #10
 8006e82:	d007      	beq.n	8006e94 <UART_SetConfig+0x934>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	2b0b      	cmp	r3, #11
 8006e8a:	d101      	bne.n	8006e90 <UART_SetConfig+0x930>
 8006e8c:	4b36      	ldr	r3, [pc, #216]	; (8006f68 <UART_SetConfig+0xa08>)
 8006e8e:	e016      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006e90:	4b34      	ldr	r3, [pc, #208]	; (8006f64 <UART_SetConfig+0xa04>)
 8006e92:	e014      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006e94:	4b35      	ldr	r3, [pc, #212]	; (8006f6c <UART_SetConfig+0xa0c>)
 8006e96:	e012      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006e98:	4b35      	ldr	r3, [pc, #212]	; (8006f70 <UART_SetConfig+0xa10>)
 8006e9a:	e010      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006e9c:	4b35      	ldr	r3, [pc, #212]	; (8006f74 <UART_SetConfig+0xa14>)
 8006e9e:	e00e      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006ea0:	4b35      	ldr	r3, [pc, #212]	; (8006f78 <UART_SetConfig+0xa18>)
 8006ea2:	e00c      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006ea4:	4b35      	ldr	r3, [pc, #212]	; (8006f7c <UART_SetConfig+0xa1c>)
 8006ea6:	e00a      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006ea8:	4b35      	ldr	r3, [pc, #212]	; (8006f80 <UART_SetConfig+0xa20>)
 8006eaa:	e008      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006eac:	4b35      	ldr	r3, [pc, #212]	; (8006f84 <UART_SetConfig+0xa24>)
 8006eae:	e006      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006eb0:	4b35      	ldr	r3, [pc, #212]	; (8006f88 <UART_SetConfig+0xa28>)
 8006eb2:	e004      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006eb4:	4b35      	ldr	r3, [pc, #212]	; (8006f8c <UART_SetConfig+0xa2c>)
 8006eb6:	e002      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006eb8:	4b35      	ldr	r3, [pc, #212]	; (8006f90 <UART_SetConfig+0xa30>)
 8006eba:	e000      	b.n	8006ebe <UART_SetConfig+0x95e>
 8006ebc:	4b29      	ldr	r3, [pc, #164]	; (8006f64 <UART_SetConfig+0xa04>)
 8006ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ec0:	e0cb      	b.n	800705a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d046      	beq.n	8006f58 <UART_SetConfig+0x9f8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d040      	beq.n	8006f54 <UART_SetConfig+0x9f4>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d03a      	beq.n	8006f50 <UART_SetConfig+0x9f0>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d034      	beq.n	8006f4c <UART_SetConfig+0x9ec>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d02e      	beq.n	8006f48 <UART_SetConfig+0x9e8>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b05      	cmp	r3, #5
 8006ef0:	d028      	beq.n	8006f44 <UART_SetConfig+0x9e4>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b06      	cmp	r3, #6
 8006ef8:	d022      	beq.n	8006f40 <UART_SetConfig+0x9e0>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	2b07      	cmp	r3, #7
 8006f00:	d01c      	beq.n	8006f3c <UART_SetConfig+0x9dc>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d016      	beq.n	8006f38 <UART_SetConfig+0x9d8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b09      	cmp	r3, #9
 8006f10:	d00f      	beq.n	8006f32 <UART_SetConfig+0x9d2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b0a      	cmp	r3, #10
 8006f18:	d008      	beq.n	8006f2c <UART_SetConfig+0x9cc>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2b0b      	cmp	r3, #11
 8006f20:	d102      	bne.n	8006f28 <UART_SetConfig+0x9c8>
 8006f22:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006f26:	e018      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f28:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <UART_SetConfig+0xa18>)
 8006f2a:	e016      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f2c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006f30:	e013      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f32:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006f36:	e010      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f38:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <UART_SetConfig+0xa34>)
 8006f3a:	e00e      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <UART_SetConfig+0xa08>)
 8006f3e:	e00c      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f40:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <UART_SetConfig+0xa38>)
 8006f42:	e00a      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f44:	4b15      	ldr	r3, [pc, #84]	; (8006f9c <UART_SetConfig+0xa3c>)
 8006f46:	e008      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f48:	4b08      	ldr	r3, [pc, #32]	; (8006f6c <UART_SetConfig+0xa0c>)
 8006f4a:	e006      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f4c:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <UART_SetConfig+0xa40>)
 8006f4e:	e004      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <UART_SetConfig+0xa10>)
 8006f52:	e002      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f54:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <UART_SetConfig+0xa14>)
 8006f56:	e000      	b.n	8006f5a <UART_SetConfig+0x9fa>
 8006f58:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <UART_SetConfig+0xa18>)
 8006f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f5c:	e07d      	b.n	800705a <UART_SetConfig+0xafa>
 8006f5e:	bf00      	nop
 8006f60:	58024400 	.word	0x58024400
 8006f64:	03d09000 	.word	0x03d09000
 8006f68:	0003d090 	.word	0x0003d090
 8006f6c:	0007a120 	.word	0x0007a120
 8006f70:	000f4240 	.word	0x000f4240
 8006f74:	001e8480 	.word	0x001e8480
 8006f78:	003d0900 	.word	0x003d0900
 8006f7c:	00516155 	.word	0x00516155
 8006f80:	0061a800 	.word	0x0061a800
 8006f84:	007a1200 	.word	0x007a1200
 8006f88:	00a2c2aa 	.word	0x00a2c2aa
 8006f8c:	00f42400 	.word	0x00f42400
 8006f90:	01e84800 	.word	0x01e84800
 8006f94:	0001e848 	.word	0x0001e848
 8006f98:	00051615 	.word	0x00051615
 8006f9c:	00061a80 	.word	0x00061a80
 8006fa0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d04e      	beq.n	800704a <UART_SetConfig+0xaea>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d047      	beq.n	8007044 <UART_SetConfig+0xae4>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d040      	beq.n	800703e <UART_SetConfig+0xade>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d039      	beq.n	8007038 <UART_SetConfig+0xad8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d032      	beq.n	8007032 <UART_SetConfig+0xad2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	2b05      	cmp	r3, #5
 8006fd2:	d02b      	beq.n	800702c <UART_SetConfig+0xacc>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	2b06      	cmp	r3, #6
 8006fda:	d024      	beq.n	8007026 <UART_SetConfig+0xac6>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	2b07      	cmp	r3, #7
 8006fe2:	d01d      	beq.n	8007020 <UART_SetConfig+0xac0>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	2b08      	cmp	r3, #8
 8006fea:	d016      	beq.n	800701a <UART_SetConfig+0xaba>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	2b09      	cmp	r3, #9
 8006ff2:	d00f      	beq.n	8007014 <UART_SetConfig+0xab4>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	2b0a      	cmp	r3, #10
 8006ffa:	d008      	beq.n	800700e <UART_SetConfig+0xaae>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	2b0b      	cmp	r3, #11
 8007002:	d101      	bne.n	8007008 <UART_SetConfig+0xaa8>
 8007004:	2380      	movs	r3, #128	; 0x80
 8007006:	e022      	b.n	800704e <UART_SetConfig+0xaee>
 8007008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700c:	e01f      	b.n	800704e <UART_SetConfig+0xaee>
 800700e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007012:	e01c      	b.n	800704e <UART_SetConfig+0xaee>
 8007014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007018:	e019      	b.n	800704e <UART_SetConfig+0xaee>
 800701a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800701e:	e016      	b.n	800704e <UART_SetConfig+0xaee>
 8007020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007024:	e013      	b.n	800704e <UART_SetConfig+0xaee>
 8007026:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800702a:	e010      	b.n	800704e <UART_SetConfig+0xaee>
 800702c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007030:	e00d      	b.n	800704e <UART_SetConfig+0xaee>
 8007032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007036:	e00a      	b.n	800704e <UART_SetConfig+0xaee>
 8007038:	f241 5355 	movw	r3, #5461	; 0x1555
 800703c:	e007      	b.n	800704e <UART_SetConfig+0xaee>
 800703e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007042:	e004      	b.n	800704e <UART_SetConfig+0xaee>
 8007044:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007048:	e001      	b.n	800704e <UART_SetConfig+0xaee>
 800704a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800704e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007050:	e003      	b.n	800705a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007058:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	2b00      	cmp	r3, #0
 800705e:	f001 83e8 	beq.w	8008832 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	4613      	mov	r3, r2
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4413      	add	r3, r2
 800706c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800706e:	429a      	cmp	r2, r3
 8007070:	d305      	bcc.n	800707e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800707a:	429a      	cmp	r2, r3
 800707c:	d904      	bls.n	8007088 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007084:	f001 bbd5 	b.w	8008832 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007088:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800708c:	2b08      	cmp	r3, #8
 800708e:	f000 8154 	beq.w	800733a <UART_SetConfig+0xdda>
 8007092:	2b08      	cmp	r3, #8
 8007094:	dc06      	bgt.n	80070a4 <UART_SetConfig+0xb44>
 8007096:	2b02      	cmp	r3, #2
 8007098:	d00f      	beq.n	80070ba <UART_SetConfig+0xb5a>
 800709a:	2b04      	cmp	r3, #4
 800709c:	f000 80ac 	beq.w	80071f8 <UART_SetConfig+0xc98>
 80070a0:	f000 bc30 	b.w	8007904 <UART_SetConfig+0x13a4>
 80070a4:	2b20      	cmp	r3, #32
 80070a6:	f000 832d 	beq.w	8007704 <UART_SetConfig+0x11a4>
 80070aa:	2b40      	cmp	r3, #64	; 0x40
 80070ac:	f000 83a5 	beq.w	80077fa <UART_SetConfig+0x129a>
 80070b0:	2b10      	cmp	r3, #16
 80070b2:	f000 81e3 	beq.w	800747c <UART_SetConfig+0xf1c>
 80070b6:	f000 bc25 	b.w	8007904 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80070ba:	f7fd fff7 	bl	80050ac <HAL_RCCEx_GetD3PCLK1Freq>
 80070be:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	4618      	mov	r0, r3
 80070c4:	f04f 0100 	mov.w	r1, #0
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d067      	beq.n	80071a0 <UART_SetConfig+0xc40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d05e      	beq.n	8007196 <UART_SetConfig+0xc36>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d055      	beq.n	800718c <UART_SetConfig+0xc2c>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d04c      	beq.n	8007182 <UART_SetConfig+0xc22>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d043      	beq.n	8007178 <UART_SetConfig+0xc18>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	2b05      	cmp	r3, #5
 80070f6:	d03a      	beq.n	800716e <UART_SetConfig+0xc0e>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	2b06      	cmp	r3, #6
 80070fe:	d031      	beq.n	8007164 <UART_SetConfig+0xc04>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	2b07      	cmp	r3, #7
 8007106:	d028      	beq.n	800715a <UART_SetConfig+0xbfa>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b08      	cmp	r3, #8
 800710e:	d01f      	beq.n	8007150 <UART_SetConfig+0xbf0>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	2b09      	cmp	r3, #9
 8007116:	d016      	beq.n	8007146 <UART_SetConfig+0xbe6>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	2b0a      	cmp	r3, #10
 800711e:	d00d      	beq.n	800713c <UART_SetConfig+0xbdc>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	2b0b      	cmp	r3, #11
 8007126:	d104      	bne.n	8007132 <UART_SetConfig+0xbd2>
 8007128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800712c:	f04f 0400 	mov.w	r4, #0
 8007130:	e03a      	b.n	80071a8 <UART_SetConfig+0xc48>
 8007132:	f04f 0301 	mov.w	r3, #1
 8007136:	f04f 0400 	mov.w	r4, #0
 800713a:	e035      	b.n	80071a8 <UART_SetConfig+0xc48>
 800713c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007140:	f04f 0400 	mov.w	r4, #0
 8007144:	e030      	b.n	80071a8 <UART_SetConfig+0xc48>
 8007146:	f04f 0340 	mov.w	r3, #64	; 0x40
 800714a:	f04f 0400 	mov.w	r4, #0
 800714e:	e02b      	b.n	80071a8 <UART_SetConfig+0xc48>
 8007150:	f04f 0320 	mov.w	r3, #32
 8007154:	f04f 0400 	mov.w	r4, #0
 8007158:	e026      	b.n	80071a8 <UART_SetConfig+0xc48>
 800715a:	f04f 0310 	mov.w	r3, #16
 800715e:	f04f 0400 	mov.w	r4, #0
 8007162:	e021      	b.n	80071a8 <UART_SetConfig+0xc48>
 8007164:	f04f 030c 	mov.w	r3, #12
 8007168:	f04f 0400 	mov.w	r4, #0
 800716c:	e01c      	b.n	80071a8 <UART_SetConfig+0xc48>
 800716e:	f04f 030a 	mov.w	r3, #10
 8007172:	f04f 0400 	mov.w	r4, #0
 8007176:	e017      	b.n	80071a8 <UART_SetConfig+0xc48>
 8007178:	f04f 0308 	mov.w	r3, #8
 800717c:	f04f 0400 	mov.w	r4, #0
 8007180:	e012      	b.n	80071a8 <UART_SetConfig+0xc48>
 8007182:	f04f 0306 	mov.w	r3, #6
 8007186:	f04f 0400 	mov.w	r4, #0
 800718a:	e00d      	b.n	80071a8 <UART_SetConfig+0xc48>
 800718c:	f04f 0304 	mov.w	r3, #4
 8007190:	f04f 0400 	mov.w	r4, #0
 8007194:	e008      	b.n	80071a8 <UART_SetConfig+0xc48>
 8007196:	f04f 0302 	mov.w	r3, #2
 800719a:	f04f 0400 	mov.w	r4, #0
 800719e:	e003      	b.n	80071a8 <UART_SetConfig+0xc48>
 80071a0:	f04f 0301 	mov.w	r3, #1
 80071a4:	f04f 0400 	mov.w	r4, #0
 80071a8:	461a      	mov	r2, r3
 80071aa:	4623      	mov	r3, r4
 80071ac:	f7f9 f89c 	bl	80002e8 <__aeabi_uldivmod>
 80071b0:	4603      	mov	r3, r0
 80071b2:	460c      	mov	r4, r1
 80071b4:	4619      	mov	r1, r3
 80071b6:	4622      	mov	r2, r4
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	f04f 0400 	mov.w	r4, #0
 80071c0:	0214      	lsls	r4, r2, #8
 80071c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80071c6:	020b      	lsls	r3, r1, #8
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6852      	ldr	r2, [r2, #4]
 80071cc:	0852      	lsrs	r2, r2, #1
 80071ce:	4611      	mov	r1, r2
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	eb13 0b01 	adds.w	fp, r3, r1
 80071d8:	eb44 0c02 	adc.w	ip, r4, r2
 80071dc:	4658      	mov	r0, fp
 80071de:	4661      	mov	r1, ip
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f04f 0400 	mov.w	r4, #0
 80071e8:	461a      	mov	r2, r3
 80071ea:	4623      	mov	r3, r4
 80071ec:	f7f9 f87c 	bl	80002e8 <__aeabi_uldivmod>
 80071f0:	4603      	mov	r3, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071f6:	e389      	b.n	800790c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071f8:	f107 0318 	add.w	r3, r7, #24
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fd ff6b 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	4618      	mov	r0, r3
 8007206:	f04f 0100 	mov.w	r1, #0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	2b00      	cmp	r3, #0
 8007210:	d067      	beq.n	80072e2 <UART_SetConfig+0xd82>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	2b01      	cmp	r3, #1
 8007218:	d05e      	beq.n	80072d8 <UART_SetConfig+0xd78>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	2b02      	cmp	r3, #2
 8007220:	d055      	beq.n	80072ce <UART_SetConfig+0xd6e>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	2b03      	cmp	r3, #3
 8007228:	d04c      	beq.n	80072c4 <UART_SetConfig+0xd64>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	2b04      	cmp	r3, #4
 8007230:	d043      	beq.n	80072ba <UART_SetConfig+0xd5a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	2b05      	cmp	r3, #5
 8007238:	d03a      	beq.n	80072b0 <UART_SetConfig+0xd50>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	2b06      	cmp	r3, #6
 8007240:	d031      	beq.n	80072a6 <UART_SetConfig+0xd46>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	2b07      	cmp	r3, #7
 8007248:	d028      	beq.n	800729c <UART_SetConfig+0xd3c>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	2b08      	cmp	r3, #8
 8007250:	d01f      	beq.n	8007292 <UART_SetConfig+0xd32>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	2b09      	cmp	r3, #9
 8007258:	d016      	beq.n	8007288 <UART_SetConfig+0xd28>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2b0a      	cmp	r3, #10
 8007260:	d00d      	beq.n	800727e <UART_SetConfig+0xd1e>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	2b0b      	cmp	r3, #11
 8007268:	d104      	bne.n	8007274 <UART_SetConfig+0xd14>
 800726a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800726e:	f04f 0400 	mov.w	r4, #0
 8007272:	e03a      	b.n	80072ea <UART_SetConfig+0xd8a>
 8007274:	f04f 0301 	mov.w	r3, #1
 8007278:	f04f 0400 	mov.w	r4, #0
 800727c:	e035      	b.n	80072ea <UART_SetConfig+0xd8a>
 800727e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007282:	f04f 0400 	mov.w	r4, #0
 8007286:	e030      	b.n	80072ea <UART_SetConfig+0xd8a>
 8007288:	f04f 0340 	mov.w	r3, #64	; 0x40
 800728c:	f04f 0400 	mov.w	r4, #0
 8007290:	e02b      	b.n	80072ea <UART_SetConfig+0xd8a>
 8007292:	f04f 0320 	mov.w	r3, #32
 8007296:	f04f 0400 	mov.w	r4, #0
 800729a:	e026      	b.n	80072ea <UART_SetConfig+0xd8a>
 800729c:	f04f 0310 	mov.w	r3, #16
 80072a0:	f04f 0400 	mov.w	r4, #0
 80072a4:	e021      	b.n	80072ea <UART_SetConfig+0xd8a>
 80072a6:	f04f 030c 	mov.w	r3, #12
 80072aa:	f04f 0400 	mov.w	r4, #0
 80072ae:	e01c      	b.n	80072ea <UART_SetConfig+0xd8a>
 80072b0:	f04f 030a 	mov.w	r3, #10
 80072b4:	f04f 0400 	mov.w	r4, #0
 80072b8:	e017      	b.n	80072ea <UART_SetConfig+0xd8a>
 80072ba:	f04f 0308 	mov.w	r3, #8
 80072be:	f04f 0400 	mov.w	r4, #0
 80072c2:	e012      	b.n	80072ea <UART_SetConfig+0xd8a>
 80072c4:	f04f 0306 	mov.w	r3, #6
 80072c8:	f04f 0400 	mov.w	r4, #0
 80072cc:	e00d      	b.n	80072ea <UART_SetConfig+0xd8a>
 80072ce:	f04f 0304 	mov.w	r3, #4
 80072d2:	f04f 0400 	mov.w	r4, #0
 80072d6:	e008      	b.n	80072ea <UART_SetConfig+0xd8a>
 80072d8:	f04f 0302 	mov.w	r3, #2
 80072dc:	f04f 0400 	mov.w	r4, #0
 80072e0:	e003      	b.n	80072ea <UART_SetConfig+0xd8a>
 80072e2:	f04f 0301 	mov.w	r3, #1
 80072e6:	f04f 0400 	mov.w	r4, #0
 80072ea:	461a      	mov	r2, r3
 80072ec:	4623      	mov	r3, r4
 80072ee:	f7f8 fffb 	bl	80002e8 <__aeabi_uldivmod>
 80072f2:	4603      	mov	r3, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	4619      	mov	r1, r3
 80072f8:	4622      	mov	r2, r4
 80072fa:	f04f 0300 	mov.w	r3, #0
 80072fe:	f04f 0400 	mov.w	r4, #0
 8007302:	0214      	lsls	r4, r2, #8
 8007304:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007308:	020b      	lsls	r3, r1, #8
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6852      	ldr	r2, [r2, #4]
 800730e:	0852      	lsrs	r2, r2, #1
 8007310:	4611      	mov	r1, r2
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	eb13 0b01 	adds.w	fp, r3, r1
 800731a:	eb44 0c02 	adc.w	ip, r4, r2
 800731e:	4658      	mov	r0, fp
 8007320:	4661      	mov	r1, ip
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f04f 0400 	mov.w	r4, #0
 800732a:	461a      	mov	r2, r3
 800732c:	4623      	mov	r3, r4
 800732e:	f7f8 ffdb 	bl	80002e8 <__aeabi_uldivmod>
 8007332:	4603      	mov	r3, r0
 8007334:	460c      	mov	r4, r1
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007338:	e2e8      	b.n	800790c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800733a:	f107 030c 	add.w	r3, r7, #12
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe f816 	bl	8005370 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	4618      	mov	r0, r3
 8007348:	f04f 0100 	mov.w	r1, #0
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	d067      	beq.n	8007424 <UART_SetConfig+0xec4>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b01      	cmp	r3, #1
 800735a:	d05e      	beq.n	800741a <UART_SetConfig+0xeba>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2b02      	cmp	r3, #2
 8007362:	d055      	beq.n	8007410 <UART_SetConfig+0xeb0>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2b03      	cmp	r3, #3
 800736a:	d04c      	beq.n	8007406 <UART_SetConfig+0xea6>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b04      	cmp	r3, #4
 8007372:	d043      	beq.n	80073fc <UART_SetConfig+0xe9c>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2b05      	cmp	r3, #5
 800737a:	d03a      	beq.n	80073f2 <UART_SetConfig+0xe92>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	2b06      	cmp	r3, #6
 8007382:	d031      	beq.n	80073e8 <UART_SetConfig+0xe88>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	2b07      	cmp	r3, #7
 800738a:	d028      	beq.n	80073de <UART_SetConfig+0xe7e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2b08      	cmp	r3, #8
 8007392:	d01f      	beq.n	80073d4 <UART_SetConfig+0xe74>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b09      	cmp	r3, #9
 800739a:	d016      	beq.n	80073ca <UART_SetConfig+0xe6a>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b0a      	cmp	r3, #10
 80073a2:	d00d      	beq.n	80073c0 <UART_SetConfig+0xe60>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b0b      	cmp	r3, #11
 80073aa:	d104      	bne.n	80073b6 <UART_SetConfig+0xe56>
 80073ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073b0:	f04f 0400 	mov.w	r4, #0
 80073b4:	e03a      	b.n	800742c <UART_SetConfig+0xecc>
 80073b6:	f04f 0301 	mov.w	r3, #1
 80073ba:	f04f 0400 	mov.w	r4, #0
 80073be:	e035      	b.n	800742c <UART_SetConfig+0xecc>
 80073c0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80073c4:	f04f 0400 	mov.w	r4, #0
 80073c8:	e030      	b.n	800742c <UART_SetConfig+0xecc>
 80073ca:	f04f 0340 	mov.w	r3, #64	; 0x40
 80073ce:	f04f 0400 	mov.w	r4, #0
 80073d2:	e02b      	b.n	800742c <UART_SetConfig+0xecc>
 80073d4:	f04f 0320 	mov.w	r3, #32
 80073d8:	f04f 0400 	mov.w	r4, #0
 80073dc:	e026      	b.n	800742c <UART_SetConfig+0xecc>
 80073de:	f04f 0310 	mov.w	r3, #16
 80073e2:	f04f 0400 	mov.w	r4, #0
 80073e6:	e021      	b.n	800742c <UART_SetConfig+0xecc>
 80073e8:	f04f 030c 	mov.w	r3, #12
 80073ec:	f04f 0400 	mov.w	r4, #0
 80073f0:	e01c      	b.n	800742c <UART_SetConfig+0xecc>
 80073f2:	f04f 030a 	mov.w	r3, #10
 80073f6:	f04f 0400 	mov.w	r4, #0
 80073fa:	e017      	b.n	800742c <UART_SetConfig+0xecc>
 80073fc:	f04f 0308 	mov.w	r3, #8
 8007400:	f04f 0400 	mov.w	r4, #0
 8007404:	e012      	b.n	800742c <UART_SetConfig+0xecc>
 8007406:	f04f 0306 	mov.w	r3, #6
 800740a:	f04f 0400 	mov.w	r4, #0
 800740e:	e00d      	b.n	800742c <UART_SetConfig+0xecc>
 8007410:	f04f 0304 	mov.w	r3, #4
 8007414:	f04f 0400 	mov.w	r4, #0
 8007418:	e008      	b.n	800742c <UART_SetConfig+0xecc>
 800741a:	f04f 0302 	mov.w	r3, #2
 800741e:	f04f 0400 	mov.w	r4, #0
 8007422:	e003      	b.n	800742c <UART_SetConfig+0xecc>
 8007424:	f04f 0301 	mov.w	r3, #1
 8007428:	f04f 0400 	mov.w	r4, #0
 800742c:	461a      	mov	r2, r3
 800742e:	4623      	mov	r3, r4
 8007430:	f7f8 ff5a 	bl	80002e8 <__aeabi_uldivmod>
 8007434:	4603      	mov	r3, r0
 8007436:	460c      	mov	r4, r1
 8007438:	4619      	mov	r1, r3
 800743a:	4622      	mov	r2, r4
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	f04f 0400 	mov.w	r4, #0
 8007444:	0214      	lsls	r4, r2, #8
 8007446:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800744a:	020b      	lsls	r3, r1, #8
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6852      	ldr	r2, [r2, #4]
 8007450:	0852      	lsrs	r2, r2, #1
 8007452:	4611      	mov	r1, r2
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	eb13 0b01 	adds.w	fp, r3, r1
 800745c:	eb44 0c02 	adc.w	ip, r4, r2
 8007460:	4658      	mov	r0, fp
 8007462:	4661      	mov	r1, ip
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f04f 0400 	mov.w	r4, #0
 800746c:	461a      	mov	r2, r3
 800746e:	4623      	mov	r3, r4
 8007470:	f7f8 ff3a 	bl	80002e8 <__aeabi_uldivmod>
 8007474:	4603      	mov	r3, r0
 8007476:	460c      	mov	r4, r1
 8007478:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800747a:	e247      	b.n	800790c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800747c:	4b96      	ldr	r3, [pc, #600]	; (80076d8 <UART_SetConfig+0x1178>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80a3 	beq.w	80075d0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800748a:	4b93      	ldr	r3, [pc, #588]	; (80076d8 <UART_SetConfig+0x1178>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	08db      	lsrs	r3, r3, #3
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	4a91      	ldr	r2, [pc, #580]	; (80076dc <UART_SetConfig+0x117c>)
 8007496:	fa22 f303 	lsr.w	r3, r2, r3
 800749a:	4618      	mov	r0, r3
 800749c:	f04f 0100 	mov.w	r1, #0
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d067      	beq.n	8007578 <UART_SetConfig+0x1018>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d05e      	beq.n	800756e <UART_SetConfig+0x100e>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d055      	beq.n	8007564 <UART_SetConfig+0x1004>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d04c      	beq.n	800755a <UART_SetConfig+0xffa>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d043      	beq.n	8007550 <UART_SetConfig+0xff0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b05      	cmp	r3, #5
 80074ce:	d03a      	beq.n	8007546 <UART_SetConfig+0xfe6>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b06      	cmp	r3, #6
 80074d6:	d031      	beq.n	800753c <UART_SetConfig+0xfdc>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	2b07      	cmp	r3, #7
 80074de:	d028      	beq.n	8007532 <UART_SetConfig+0xfd2>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d01f      	beq.n	8007528 <UART_SetConfig+0xfc8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b09      	cmp	r3, #9
 80074ee:	d016      	beq.n	800751e <UART_SetConfig+0xfbe>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b0a      	cmp	r3, #10
 80074f6:	d00d      	beq.n	8007514 <UART_SetConfig+0xfb4>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b0b      	cmp	r3, #11
 80074fe:	d104      	bne.n	800750a <UART_SetConfig+0xfaa>
 8007500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007504:	f04f 0400 	mov.w	r4, #0
 8007508:	e03a      	b.n	8007580 <UART_SetConfig+0x1020>
 800750a:	f04f 0301 	mov.w	r3, #1
 800750e:	f04f 0400 	mov.w	r4, #0
 8007512:	e035      	b.n	8007580 <UART_SetConfig+0x1020>
 8007514:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007518:	f04f 0400 	mov.w	r4, #0
 800751c:	e030      	b.n	8007580 <UART_SetConfig+0x1020>
 800751e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007522:	f04f 0400 	mov.w	r4, #0
 8007526:	e02b      	b.n	8007580 <UART_SetConfig+0x1020>
 8007528:	f04f 0320 	mov.w	r3, #32
 800752c:	f04f 0400 	mov.w	r4, #0
 8007530:	e026      	b.n	8007580 <UART_SetConfig+0x1020>
 8007532:	f04f 0310 	mov.w	r3, #16
 8007536:	f04f 0400 	mov.w	r4, #0
 800753a:	e021      	b.n	8007580 <UART_SetConfig+0x1020>
 800753c:	f04f 030c 	mov.w	r3, #12
 8007540:	f04f 0400 	mov.w	r4, #0
 8007544:	e01c      	b.n	8007580 <UART_SetConfig+0x1020>
 8007546:	f04f 030a 	mov.w	r3, #10
 800754a:	f04f 0400 	mov.w	r4, #0
 800754e:	e017      	b.n	8007580 <UART_SetConfig+0x1020>
 8007550:	f04f 0308 	mov.w	r3, #8
 8007554:	f04f 0400 	mov.w	r4, #0
 8007558:	e012      	b.n	8007580 <UART_SetConfig+0x1020>
 800755a:	f04f 0306 	mov.w	r3, #6
 800755e:	f04f 0400 	mov.w	r4, #0
 8007562:	e00d      	b.n	8007580 <UART_SetConfig+0x1020>
 8007564:	f04f 0304 	mov.w	r3, #4
 8007568:	f04f 0400 	mov.w	r4, #0
 800756c:	e008      	b.n	8007580 <UART_SetConfig+0x1020>
 800756e:	f04f 0302 	mov.w	r3, #2
 8007572:	f04f 0400 	mov.w	r4, #0
 8007576:	e003      	b.n	8007580 <UART_SetConfig+0x1020>
 8007578:	f04f 0301 	mov.w	r3, #1
 800757c:	f04f 0400 	mov.w	r4, #0
 8007580:	461a      	mov	r2, r3
 8007582:	4623      	mov	r3, r4
 8007584:	f7f8 feb0 	bl	80002e8 <__aeabi_uldivmod>
 8007588:	4603      	mov	r3, r0
 800758a:	460c      	mov	r4, r1
 800758c:	4619      	mov	r1, r3
 800758e:	4622      	mov	r2, r4
 8007590:	f04f 0300 	mov.w	r3, #0
 8007594:	f04f 0400 	mov.w	r4, #0
 8007598:	0214      	lsls	r4, r2, #8
 800759a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800759e:	020b      	lsls	r3, r1, #8
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6852      	ldr	r2, [r2, #4]
 80075a4:	0852      	lsrs	r2, r2, #1
 80075a6:	4611      	mov	r1, r2
 80075a8:	f04f 0200 	mov.w	r2, #0
 80075ac:	eb13 0b01 	adds.w	fp, r3, r1
 80075b0:	eb44 0c02 	adc.w	ip, r4, r2
 80075b4:	4658      	mov	r0, fp
 80075b6:	4661      	mov	r1, ip
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f04f 0400 	mov.w	r4, #0
 80075c0:	461a      	mov	r2, r3
 80075c2:	4623      	mov	r3, r4
 80075c4:	f7f8 fe90 	bl	80002e8 <__aeabi_uldivmod>
 80075c8:	4603      	mov	r3, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80075ce:	e19d      	b.n	800790c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d05b      	beq.n	8007690 <UART_SetConfig+0x1130>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d053      	beq.n	8007688 <UART_SetConfig+0x1128>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d04b      	beq.n	8007680 <UART_SetConfig+0x1120>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	2b03      	cmp	r3, #3
 80075ee:	d043      	beq.n	8007678 <UART_SetConfig+0x1118>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d03b      	beq.n	8007670 <UART_SetConfig+0x1110>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	2b05      	cmp	r3, #5
 80075fe:	d033      	beq.n	8007668 <UART_SetConfig+0x1108>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b06      	cmp	r3, #6
 8007606:	d02b      	beq.n	8007660 <UART_SetConfig+0x1100>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	2b07      	cmp	r3, #7
 800760e:	d023      	beq.n	8007658 <UART_SetConfig+0x10f8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	2b08      	cmp	r3, #8
 8007616:	d01b      	beq.n	8007650 <UART_SetConfig+0x10f0>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	2b09      	cmp	r3, #9
 800761e:	d013      	beq.n	8007648 <UART_SetConfig+0x10e8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	2b0a      	cmp	r3, #10
 8007626:	d00b      	beq.n	8007640 <UART_SetConfig+0x10e0>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	2b0b      	cmp	r3, #11
 800762e:	d103      	bne.n	8007638 <UART_SetConfig+0x10d8>
 8007630:	4b2a      	ldr	r3, [pc, #168]	; (80076dc <UART_SetConfig+0x117c>)
 8007632:	f04f 0400 	mov.w	r4, #0
 8007636:	e02e      	b.n	8007696 <UART_SetConfig+0x1136>
 8007638:	4b29      	ldr	r3, [pc, #164]	; (80076e0 <UART_SetConfig+0x1180>)
 800763a:	f04f 0403 	mov.w	r4, #3
 800763e:	e02a      	b.n	8007696 <UART_SetConfig+0x1136>
 8007640:	4b28      	ldr	r3, [pc, #160]	; (80076e4 <UART_SetConfig+0x1184>)
 8007642:	f04f 0400 	mov.w	r4, #0
 8007646:	e026      	b.n	8007696 <UART_SetConfig+0x1136>
 8007648:	4b27      	ldr	r3, [pc, #156]	; (80076e8 <UART_SetConfig+0x1188>)
 800764a:	f04f 0400 	mov.w	r4, #0
 800764e:	e022      	b.n	8007696 <UART_SetConfig+0x1136>
 8007650:	4b26      	ldr	r3, [pc, #152]	; (80076ec <UART_SetConfig+0x118c>)
 8007652:	f04f 0400 	mov.w	r4, #0
 8007656:	e01e      	b.n	8007696 <UART_SetConfig+0x1136>
 8007658:	4b25      	ldr	r3, [pc, #148]	; (80076f0 <UART_SetConfig+0x1190>)
 800765a:	f04f 0400 	mov.w	r4, #0
 800765e:	e01a      	b.n	8007696 <UART_SetConfig+0x1136>
 8007660:	a419      	add	r4, pc, #100	; (adr r4, 80076c8 <UART_SetConfig+0x1168>)
 8007662:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007666:	e016      	b.n	8007696 <UART_SetConfig+0x1136>
 8007668:	4b22      	ldr	r3, [pc, #136]	; (80076f4 <UART_SetConfig+0x1194>)
 800766a:	f04f 0400 	mov.w	r4, #0
 800766e:	e012      	b.n	8007696 <UART_SetConfig+0x1136>
 8007670:	4b21      	ldr	r3, [pc, #132]	; (80076f8 <UART_SetConfig+0x1198>)
 8007672:	f04f 0400 	mov.w	r4, #0
 8007676:	e00e      	b.n	8007696 <UART_SetConfig+0x1136>
 8007678:	a415      	add	r4, pc, #84	; (adr r4, 80076d0 <UART_SetConfig+0x1170>)
 800767a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800767e:	e00a      	b.n	8007696 <UART_SetConfig+0x1136>
 8007680:	4b1e      	ldr	r3, [pc, #120]	; (80076fc <UART_SetConfig+0x119c>)
 8007682:	f04f 0400 	mov.w	r4, #0
 8007686:	e006      	b.n	8007696 <UART_SetConfig+0x1136>
 8007688:	4b1d      	ldr	r3, [pc, #116]	; (8007700 <UART_SetConfig+0x11a0>)
 800768a:	f04f 0401 	mov.w	r4, #1
 800768e:	e002      	b.n	8007696 <UART_SetConfig+0x1136>
 8007690:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <UART_SetConfig+0x1180>)
 8007692:	f04f 0403 	mov.w	r4, #3
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6852      	ldr	r2, [r2, #4]
 800769a:	0852      	lsrs	r2, r2, #1
 800769c:	4611      	mov	r1, r2
 800769e:	f04f 0200 	mov.w	r2, #0
 80076a2:	eb13 0b01 	adds.w	fp, r3, r1
 80076a6:	eb44 0c02 	adc.w	ip, r4, r2
 80076aa:	4658      	mov	r0, fp
 80076ac:	4661      	mov	r1, ip
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f04f 0400 	mov.w	r4, #0
 80076b6:	461a      	mov	r2, r3
 80076b8:	4623      	mov	r3, r4
 80076ba:	f7f8 fe15 	bl	80002e8 <__aeabi_uldivmod>
 80076be:	4603      	mov	r3, r0
 80076c0:	460c      	mov	r4, r1
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076c4:	e122      	b.n	800790c <UART_SetConfig+0x13ac>
 80076c6:	bf00      	nop
 80076c8:	51615500 	.word	0x51615500
 80076cc:	00000000 	.word	0x00000000
 80076d0:	a2c2aa00 	.word	0xa2c2aa00
 80076d4:	00000000 	.word	0x00000000
 80076d8:	58024400 	.word	0x58024400
 80076dc:	03d09000 	.word	0x03d09000
 80076e0:	d0900000 	.word	0xd0900000
 80076e4:	07a12000 	.word	0x07a12000
 80076e8:	0f424000 	.word	0x0f424000
 80076ec:	1e848000 	.word	0x1e848000
 80076f0:	3d090000 	.word	0x3d090000
 80076f4:	61a80000 	.word	0x61a80000
 80076f8:	7a120000 	.word	0x7a120000
 80076fc:	f4240000 	.word	0xf4240000
 8007700:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	d05b      	beq.n	80077c4 <UART_SetConfig+0x1264>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b01      	cmp	r3, #1
 8007712:	d053      	beq.n	80077bc <UART_SetConfig+0x125c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2b02      	cmp	r3, #2
 800771a:	d04b      	beq.n	80077b4 <UART_SetConfig+0x1254>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b03      	cmp	r3, #3
 8007722:	d043      	beq.n	80077ac <UART_SetConfig+0x124c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b04      	cmp	r3, #4
 800772a:	d03b      	beq.n	80077a4 <UART_SetConfig+0x1244>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	2b05      	cmp	r3, #5
 8007732:	d033      	beq.n	800779c <UART_SetConfig+0x123c>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2b06      	cmp	r3, #6
 800773a:	d02b      	beq.n	8007794 <UART_SetConfig+0x1234>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2b07      	cmp	r3, #7
 8007742:	d023      	beq.n	800778c <UART_SetConfig+0x122c>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2b08      	cmp	r3, #8
 800774a:	d01b      	beq.n	8007784 <UART_SetConfig+0x1224>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b09      	cmp	r3, #9
 8007752:	d013      	beq.n	800777c <UART_SetConfig+0x121c>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	2b0a      	cmp	r3, #10
 800775a:	d00b      	beq.n	8007774 <UART_SetConfig+0x1214>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	2b0b      	cmp	r3, #11
 8007762:	d103      	bne.n	800776c <UART_SetConfig+0x120c>
 8007764:	4bc0      	ldr	r3, [pc, #768]	; (8007a68 <UART_SetConfig+0x1508>)
 8007766:	f04f 0400 	mov.w	r4, #0
 800776a:	e02e      	b.n	80077ca <UART_SetConfig+0x126a>
 800776c:	4bbf      	ldr	r3, [pc, #764]	; (8007a6c <UART_SetConfig+0x150c>)
 800776e:	f04f 0400 	mov.w	r4, #0
 8007772:	e02a      	b.n	80077ca <UART_SetConfig+0x126a>
 8007774:	4bbe      	ldr	r3, [pc, #760]	; (8007a70 <UART_SetConfig+0x1510>)
 8007776:	f04f 0400 	mov.w	r4, #0
 800777a:	e026      	b.n	80077ca <UART_SetConfig+0x126a>
 800777c:	4bbd      	ldr	r3, [pc, #756]	; (8007a74 <UART_SetConfig+0x1514>)
 800777e:	f04f 0400 	mov.w	r4, #0
 8007782:	e022      	b.n	80077ca <UART_SetConfig+0x126a>
 8007784:	4bbc      	ldr	r3, [pc, #752]	; (8007a78 <UART_SetConfig+0x1518>)
 8007786:	f04f 0400 	mov.w	r4, #0
 800778a:	e01e      	b.n	80077ca <UART_SetConfig+0x126a>
 800778c:	4bbb      	ldr	r3, [pc, #748]	; (8007a7c <UART_SetConfig+0x151c>)
 800778e:	f04f 0400 	mov.w	r4, #0
 8007792:	e01a      	b.n	80077ca <UART_SetConfig+0x126a>
 8007794:	a4b0      	add	r4, pc, #704	; (adr r4, 8007a58 <UART_SetConfig+0x14f8>)
 8007796:	e9d4 3400 	ldrd	r3, r4, [r4]
 800779a:	e016      	b.n	80077ca <UART_SetConfig+0x126a>
 800779c:	4bb8      	ldr	r3, [pc, #736]	; (8007a80 <UART_SetConfig+0x1520>)
 800779e:	f04f 0400 	mov.w	r4, #0
 80077a2:	e012      	b.n	80077ca <UART_SetConfig+0x126a>
 80077a4:	4bb7      	ldr	r3, [pc, #732]	; (8007a84 <UART_SetConfig+0x1524>)
 80077a6:	f04f 0400 	mov.w	r4, #0
 80077aa:	e00e      	b.n	80077ca <UART_SetConfig+0x126a>
 80077ac:	a4ac      	add	r4, pc, #688	; (adr r4, 8007a60 <UART_SetConfig+0x1500>)
 80077ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80077b2:	e00a      	b.n	80077ca <UART_SetConfig+0x126a>
 80077b4:	4bb4      	ldr	r3, [pc, #720]	; (8007a88 <UART_SetConfig+0x1528>)
 80077b6:	f04f 0400 	mov.w	r4, #0
 80077ba:	e006      	b.n	80077ca <UART_SetConfig+0x126a>
 80077bc:	4bb3      	ldr	r3, [pc, #716]	; (8007a8c <UART_SetConfig+0x152c>)
 80077be:	f04f 0400 	mov.w	r4, #0
 80077c2:	e002      	b.n	80077ca <UART_SetConfig+0x126a>
 80077c4:	4ba9      	ldr	r3, [pc, #676]	; (8007a6c <UART_SetConfig+0x150c>)
 80077c6:	f04f 0400 	mov.w	r4, #0
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6852      	ldr	r2, [r2, #4]
 80077ce:	0852      	lsrs	r2, r2, #1
 80077d0:	4611      	mov	r1, r2
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	eb13 0b01 	adds.w	fp, r3, r1
 80077da:	eb44 0c02 	adc.w	ip, r4, r2
 80077de:	4658      	mov	r0, fp
 80077e0:	4661      	mov	r1, ip
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f04f 0400 	mov.w	r4, #0
 80077ea:	461a      	mov	r2, r3
 80077ec:	4623      	mov	r3, r4
 80077ee:	f7f8 fd7b 	bl	80002e8 <__aeabi_uldivmod>
 80077f2:	4603      	mov	r3, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077f8:	e088      	b.n	800790c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d064      	beq.n	80078cc <UART_SetConfig+0x136c>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	2b01      	cmp	r3, #1
 8007808:	d05b      	beq.n	80078c2 <UART_SetConfig+0x1362>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	2b02      	cmp	r3, #2
 8007810:	d052      	beq.n	80078b8 <UART_SetConfig+0x1358>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2b03      	cmp	r3, #3
 8007818:	d04a      	beq.n	80078b0 <UART_SetConfig+0x1350>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	2b04      	cmp	r3, #4
 8007820:	d041      	beq.n	80078a6 <UART_SetConfig+0x1346>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	2b05      	cmp	r3, #5
 8007828:	d039      	beq.n	800789e <UART_SetConfig+0x133e>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	2b06      	cmp	r3, #6
 8007830:	d031      	beq.n	8007896 <UART_SetConfig+0x1336>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b07      	cmp	r3, #7
 8007838:	d028      	beq.n	800788c <UART_SetConfig+0x132c>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b08      	cmp	r3, #8
 8007840:	d01f      	beq.n	8007882 <UART_SetConfig+0x1322>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	2b09      	cmp	r3, #9
 8007848:	d016      	beq.n	8007878 <UART_SetConfig+0x1318>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b0a      	cmp	r3, #10
 8007850:	d00d      	beq.n	800786e <UART_SetConfig+0x130e>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	2b0b      	cmp	r3, #11
 8007858:	d104      	bne.n	8007864 <UART_SetConfig+0x1304>
 800785a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800785e:	f04f 0400 	mov.w	r4, #0
 8007862:	e037      	b.n	80078d4 <UART_SetConfig+0x1374>
 8007864:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007868:	f04f 0400 	mov.w	r4, #0
 800786c:	e032      	b.n	80078d4 <UART_SetConfig+0x1374>
 800786e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007872:	f04f 0400 	mov.w	r4, #0
 8007876:	e02d      	b.n	80078d4 <UART_SetConfig+0x1374>
 8007878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800787c:	f04f 0400 	mov.w	r4, #0
 8007880:	e028      	b.n	80078d4 <UART_SetConfig+0x1374>
 8007882:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007886:	f04f 0400 	mov.w	r4, #0
 800788a:	e023      	b.n	80078d4 <UART_SetConfig+0x1374>
 800788c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007890:	f04f 0400 	mov.w	r4, #0
 8007894:	e01e      	b.n	80078d4 <UART_SetConfig+0x1374>
 8007896:	4b7e      	ldr	r3, [pc, #504]	; (8007a90 <UART_SetConfig+0x1530>)
 8007898:	f04f 0400 	mov.w	r4, #0
 800789c:	e01a      	b.n	80078d4 <UART_SetConfig+0x1374>
 800789e:	4b7d      	ldr	r3, [pc, #500]	; (8007a94 <UART_SetConfig+0x1534>)
 80078a0:	f04f 0400 	mov.w	r4, #0
 80078a4:	e016      	b.n	80078d4 <UART_SetConfig+0x1374>
 80078a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80078aa:	f04f 0400 	mov.w	r4, #0
 80078ae:	e011      	b.n	80078d4 <UART_SetConfig+0x1374>
 80078b0:	4b79      	ldr	r3, [pc, #484]	; (8007a98 <UART_SetConfig+0x1538>)
 80078b2:	f04f 0400 	mov.w	r4, #0
 80078b6:	e00d      	b.n	80078d4 <UART_SetConfig+0x1374>
 80078b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80078bc:	f04f 0400 	mov.w	r4, #0
 80078c0:	e008      	b.n	80078d4 <UART_SetConfig+0x1374>
 80078c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80078c6:	f04f 0400 	mov.w	r4, #0
 80078ca:	e003      	b.n	80078d4 <UART_SetConfig+0x1374>
 80078cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80078d0:	f04f 0400 	mov.w	r4, #0
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6852      	ldr	r2, [r2, #4]
 80078d8:	0852      	lsrs	r2, r2, #1
 80078da:	4611      	mov	r1, r2
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	eb13 0b01 	adds.w	fp, r3, r1
 80078e4:	eb44 0c02 	adc.w	ip, r4, r2
 80078e8:	4658      	mov	r0, fp
 80078ea:	4661      	mov	r1, ip
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f04f 0400 	mov.w	r4, #0
 80078f4:	461a      	mov	r2, r3
 80078f6:	4623      	mov	r3, r4
 80078f8:	f7f8 fcf6 	bl	80002e8 <__aeabi_uldivmod>
 80078fc:	4603      	mov	r3, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007902:	e003      	b.n	800790c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800790a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007912:	d309      	bcc.n	8007928 <UART_SetConfig+0x13c8>
 8007914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800791a:	d205      	bcs.n	8007928 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007922:	60da      	str	r2, [r3, #12]
 8007924:	f000 bf85 	b.w	8008832 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800792e:	f000 bf80 	b.w	8008832 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800793a:	f040 83da 	bne.w	80080f2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800793e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007942:	2b40      	cmp	r3, #64	; 0x40
 8007944:	f200 83b3 	bhi.w	80080ae <UART_SetConfig+0x1b4e>
 8007948:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <UART_SetConfig+0x13f0>)
 800794a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800794e:	bf00      	nop
 8007950:	08007a9d 	.word	0x08007a9d
 8007954:	08007b55 	.word	0x08007b55
 8007958:	080080af 	.word	0x080080af
 800795c:	080080af 	.word	0x080080af
 8007960:	08007c0d 	.word	0x08007c0d
 8007964:	080080af 	.word	0x080080af
 8007968:	080080af 	.word	0x080080af
 800796c:	080080af 	.word	0x080080af
 8007970:	08007cc9 	.word	0x08007cc9
 8007974:	080080af 	.word	0x080080af
 8007978:	080080af 	.word	0x080080af
 800797c:	080080af 	.word	0x080080af
 8007980:	080080af 	.word	0x080080af
 8007984:	080080af 	.word	0x080080af
 8007988:	080080af 	.word	0x080080af
 800798c:	080080af 	.word	0x080080af
 8007990:	08007d85 	.word	0x08007d85
 8007994:	080080af 	.word	0x080080af
 8007998:	080080af 	.word	0x080080af
 800799c:	080080af 	.word	0x080080af
 80079a0:	080080af 	.word	0x080080af
 80079a4:	080080af 	.word	0x080080af
 80079a8:	080080af 	.word	0x080080af
 80079ac:	080080af 	.word	0x080080af
 80079b0:	080080af 	.word	0x080080af
 80079b4:	080080af 	.word	0x080080af
 80079b8:	080080af 	.word	0x080080af
 80079bc:	080080af 	.word	0x080080af
 80079c0:	080080af 	.word	0x080080af
 80079c4:	080080af 	.word	0x080080af
 80079c8:	080080af 	.word	0x080080af
 80079cc:	080080af 	.word	0x080080af
 80079d0:	08007ef7 	.word	0x08007ef7
 80079d4:	080080af 	.word	0x080080af
 80079d8:	080080af 	.word	0x080080af
 80079dc:	080080af 	.word	0x080080af
 80079e0:	080080af 	.word	0x080080af
 80079e4:	080080af 	.word	0x080080af
 80079e8:	080080af 	.word	0x080080af
 80079ec:	080080af 	.word	0x080080af
 80079f0:	080080af 	.word	0x080080af
 80079f4:	080080af 	.word	0x080080af
 80079f8:	080080af 	.word	0x080080af
 80079fc:	080080af 	.word	0x080080af
 8007a00:	080080af 	.word	0x080080af
 8007a04:	080080af 	.word	0x080080af
 8007a08:	080080af 	.word	0x080080af
 8007a0c:	080080af 	.word	0x080080af
 8007a10:	080080af 	.word	0x080080af
 8007a14:	080080af 	.word	0x080080af
 8007a18:	080080af 	.word	0x080080af
 8007a1c:	080080af 	.word	0x080080af
 8007a20:	080080af 	.word	0x080080af
 8007a24:	080080af 	.word	0x080080af
 8007a28:	080080af 	.word	0x080080af
 8007a2c:	080080af 	.word	0x080080af
 8007a30:	080080af 	.word	0x080080af
 8007a34:	080080af 	.word	0x080080af
 8007a38:	080080af 	.word	0x080080af
 8007a3c:	080080af 	.word	0x080080af
 8007a40:	080080af 	.word	0x080080af
 8007a44:	080080af 	.word	0x080080af
 8007a48:	080080af 	.word	0x080080af
 8007a4c:	080080af 	.word	0x080080af
 8007a50:	08007fed 	.word	0x08007fed
 8007a54:	f3af 8000 	nop.w
 8007a58:	05161500 	.word	0x05161500
 8007a5c:	00000000 	.word	0x00000000
 8007a60:	0a2c2a00 	.word	0x0a2c2a00
 8007a64:	00000000 	.word	0x00000000
 8007a68:	003d0900 	.word	0x003d0900
 8007a6c:	3d090000 	.word	0x3d090000
 8007a70:	007a1200 	.word	0x007a1200
 8007a74:	00f42400 	.word	0x00f42400
 8007a78:	01e84800 	.word	0x01e84800
 8007a7c:	03d09000 	.word	0x03d09000
 8007a80:	061a8000 	.word	0x061a8000
 8007a84:	07a12000 	.word	0x07a12000
 8007a88:	0f424000 	.word	0x0f424000
 8007a8c:	1e848000 	.word	0x1e848000
 8007a90:	000aaa00 	.word	0x000aaa00
 8007a94:	000ccc00 	.word	0x000ccc00
 8007a98:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a9c:	f7fc f9b4 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 8007aa0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d044      	beq.n	8007b34 <UART_SetConfig+0x15d4>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d03e      	beq.n	8007b30 <UART_SetConfig+0x15d0>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d038      	beq.n	8007b2c <UART_SetConfig+0x15cc>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d032      	beq.n	8007b28 <UART_SetConfig+0x15c8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d02c      	beq.n	8007b24 <UART_SetConfig+0x15c4>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d026      	beq.n	8007b20 <UART_SetConfig+0x15c0>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b06      	cmp	r3, #6
 8007ad8:	d020      	beq.n	8007b1c <UART_SetConfig+0x15bc>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b07      	cmp	r3, #7
 8007ae0:	d01a      	beq.n	8007b18 <UART_SetConfig+0x15b8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d014      	beq.n	8007b14 <UART_SetConfig+0x15b4>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b09      	cmp	r3, #9
 8007af0:	d00e      	beq.n	8007b10 <UART_SetConfig+0x15b0>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b0a      	cmp	r3, #10
 8007af8:	d008      	beq.n	8007b0c <UART_SetConfig+0x15ac>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b0b      	cmp	r3, #11
 8007b00:	d102      	bne.n	8007b08 <UART_SetConfig+0x15a8>
 8007b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b06:	e016      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e014      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b0c:	2380      	movs	r3, #128	; 0x80
 8007b0e:	e012      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b10:	2340      	movs	r3, #64	; 0x40
 8007b12:	e010      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b14:	2320      	movs	r3, #32
 8007b16:	e00e      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	e00c      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b1c:	230c      	movs	r3, #12
 8007b1e:	e00a      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b20:	230a      	movs	r3, #10
 8007b22:	e008      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b24:	2308      	movs	r3, #8
 8007b26:	e006      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b28:	2306      	movs	r3, #6
 8007b2a:	e004      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b2c:	2304      	movs	r3, #4
 8007b2e:	e002      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e000      	b.n	8007b36 <UART_SetConfig+0x15d6>
 8007b34:	2301      	movs	r3, #1
 8007b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3c:	005a      	lsls	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	085b      	lsrs	r3, r3, #1
 8007b44:	441a      	add	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b52:	e2b0      	b.n	80080b6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b54:	f7fc f96e 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 8007b58:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d044      	beq.n	8007bec <UART_SetConfig+0x168c>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d03e      	beq.n	8007be8 <UART_SetConfig+0x1688>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d038      	beq.n	8007be4 <UART_SetConfig+0x1684>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d032      	beq.n	8007be0 <UART_SetConfig+0x1680>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d02c      	beq.n	8007bdc <UART_SetConfig+0x167c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b05      	cmp	r3, #5
 8007b88:	d026      	beq.n	8007bd8 <UART_SetConfig+0x1678>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	2b06      	cmp	r3, #6
 8007b90:	d020      	beq.n	8007bd4 <UART_SetConfig+0x1674>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	2b07      	cmp	r3, #7
 8007b98:	d01a      	beq.n	8007bd0 <UART_SetConfig+0x1670>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	2b08      	cmp	r3, #8
 8007ba0:	d014      	beq.n	8007bcc <UART_SetConfig+0x166c>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b09      	cmp	r3, #9
 8007ba8:	d00e      	beq.n	8007bc8 <UART_SetConfig+0x1668>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	2b0a      	cmp	r3, #10
 8007bb0:	d008      	beq.n	8007bc4 <UART_SetConfig+0x1664>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	2b0b      	cmp	r3, #11
 8007bb8:	d102      	bne.n	8007bc0 <UART_SetConfig+0x1660>
 8007bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bbe:	e016      	b.n	8007bee <UART_SetConfig+0x168e>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e014      	b.n	8007bee <UART_SetConfig+0x168e>
 8007bc4:	2380      	movs	r3, #128	; 0x80
 8007bc6:	e012      	b.n	8007bee <UART_SetConfig+0x168e>
 8007bc8:	2340      	movs	r3, #64	; 0x40
 8007bca:	e010      	b.n	8007bee <UART_SetConfig+0x168e>
 8007bcc:	2320      	movs	r3, #32
 8007bce:	e00e      	b.n	8007bee <UART_SetConfig+0x168e>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	e00c      	b.n	8007bee <UART_SetConfig+0x168e>
 8007bd4:	230c      	movs	r3, #12
 8007bd6:	e00a      	b.n	8007bee <UART_SetConfig+0x168e>
 8007bd8:	230a      	movs	r3, #10
 8007bda:	e008      	b.n	8007bee <UART_SetConfig+0x168e>
 8007bdc:	2308      	movs	r3, #8
 8007bde:	e006      	b.n	8007bee <UART_SetConfig+0x168e>
 8007be0:	2306      	movs	r3, #6
 8007be2:	e004      	b.n	8007bee <UART_SetConfig+0x168e>
 8007be4:	2304      	movs	r3, #4
 8007be6:	e002      	b.n	8007bee <UART_SetConfig+0x168e>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e000      	b.n	8007bee <UART_SetConfig+0x168e>
 8007bec:	2301      	movs	r3, #1
 8007bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf4:	005a      	lsls	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c0a:	e254      	b.n	80080b6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c0c:	f107 0318 	add.w	r3, r7, #24
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fd fa61 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d044      	beq.n	8007caa <UART_SetConfig+0x174a>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d03e      	beq.n	8007ca6 <UART_SetConfig+0x1746>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d038      	beq.n	8007ca2 <UART_SetConfig+0x1742>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d032      	beq.n	8007c9e <UART_SetConfig+0x173e>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d02c      	beq.n	8007c9a <UART_SetConfig+0x173a>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b05      	cmp	r3, #5
 8007c46:	d026      	beq.n	8007c96 <UART_SetConfig+0x1736>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	2b06      	cmp	r3, #6
 8007c4e:	d020      	beq.n	8007c92 <UART_SetConfig+0x1732>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	2b07      	cmp	r3, #7
 8007c56:	d01a      	beq.n	8007c8e <UART_SetConfig+0x172e>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d014      	beq.n	8007c8a <UART_SetConfig+0x172a>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	2b09      	cmp	r3, #9
 8007c66:	d00e      	beq.n	8007c86 <UART_SetConfig+0x1726>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	2b0a      	cmp	r3, #10
 8007c6e:	d008      	beq.n	8007c82 <UART_SetConfig+0x1722>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b0b      	cmp	r3, #11
 8007c76:	d102      	bne.n	8007c7e <UART_SetConfig+0x171e>
 8007c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c7c:	e016      	b.n	8007cac <UART_SetConfig+0x174c>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e014      	b.n	8007cac <UART_SetConfig+0x174c>
 8007c82:	2380      	movs	r3, #128	; 0x80
 8007c84:	e012      	b.n	8007cac <UART_SetConfig+0x174c>
 8007c86:	2340      	movs	r3, #64	; 0x40
 8007c88:	e010      	b.n	8007cac <UART_SetConfig+0x174c>
 8007c8a:	2320      	movs	r3, #32
 8007c8c:	e00e      	b.n	8007cac <UART_SetConfig+0x174c>
 8007c8e:	2310      	movs	r3, #16
 8007c90:	e00c      	b.n	8007cac <UART_SetConfig+0x174c>
 8007c92:	230c      	movs	r3, #12
 8007c94:	e00a      	b.n	8007cac <UART_SetConfig+0x174c>
 8007c96:	230a      	movs	r3, #10
 8007c98:	e008      	b.n	8007cac <UART_SetConfig+0x174c>
 8007c9a:	2308      	movs	r3, #8
 8007c9c:	e006      	b.n	8007cac <UART_SetConfig+0x174c>
 8007c9e:	2306      	movs	r3, #6
 8007ca0:	e004      	b.n	8007cac <UART_SetConfig+0x174c>
 8007ca2:	2304      	movs	r3, #4
 8007ca4:	e002      	b.n	8007cac <UART_SetConfig+0x174c>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e000      	b.n	8007cac <UART_SetConfig+0x174c>
 8007caa:	2301      	movs	r3, #1
 8007cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb0:	005a      	lsls	r2, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	085b      	lsrs	r3, r3, #1
 8007cb8:	441a      	add	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cc6:	e1f6      	b.n	80080b6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cc8:	f107 030c 	add.w	r3, r7, #12
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fd fb4f 	bl	8005370 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d044      	beq.n	8007d66 <UART_SetConfig+0x1806>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d03e      	beq.n	8007d62 <UART_SetConfig+0x1802>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d038      	beq.n	8007d5e <UART_SetConfig+0x17fe>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d032      	beq.n	8007d5a <UART_SetConfig+0x17fa>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d02c      	beq.n	8007d56 <UART_SetConfig+0x17f6>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	2b05      	cmp	r3, #5
 8007d02:	d026      	beq.n	8007d52 <UART_SetConfig+0x17f2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	2b06      	cmp	r3, #6
 8007d0a:	d020      	beq.n	8007d4e <UART_SetConfig+0x17ee>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	2b07      	cmp	r3, #7
 8007d12:	d01a      	beq.n	8007d4a <UART_SetConfig+0x17ea>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	d014      	beq.n	8007d46 <UART_SetConfig+0x17e6>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	2b09      	cmp	r3, #9
 8007d22:	d00e      	beq.n	8007d42 <UART_SetConfig+0x17e2>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	2b0a      	cmp	r3, #10
 8007d2a:	d008      	beq.n	8007d3e <UART_SetConfig+0x17de>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	2b0b      	cmp	r3, #11
 8007d32:	d102      	bne.n	8007d3a <UART_SetConfig+0x17da>
 8007d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d38:	e016      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e014      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d3e:	2380      	movs	r3, #128	; 0x80
 8007d40:	e012      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	e010      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d46:	2320      	movs	r3, #32
 8007d48:	e00e      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d4a:	2310      	movs	r3, #16
 8007d4c:	e00c      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	e00a      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d52:	230a      	movs	r3, #10
 8007d54:	e008      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d56:	2308      	movs	r3, #8
 8007d58:	e006      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d5a:	2306      	movs	r3, #6
 8007d5c:	e004      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d5e:	2304      	movs	r3, #4
 8007d60:	e002      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d62:	2302      	movs	r3, #2
 8007d64:	e000      	b.n	8007d68 <UART_SetConfig+0x1808>
 8007d66:	2301      	movs	r3, #1
 8007d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6c:	005a      	lsls	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	085b      	lsrs	r3, r3, #1
 8007d74:	441a      	add	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d82:	e198      	b.n	80080b6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d84:	4b87      	ldr	r3, [pc, #540]	; (8007fa4 <UART_SetConfig+0x1a44>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d05e      	beq.n	8007e4e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d90:	4b84      	ldr	r3, [pc, #528]	; (8007fa4 <UART_SetConfig+0x1a44>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	08db      	lsrs	r3, r3, #3
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	4a83      	ldr	r2, [pc, #524]	; (8007fa8 <UART_SetConfig+0x1a48>)
 8007d9c:	40da      	lsrs	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d044      	beq.n	8007e30 <UART_SetConfig+0x18d0>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d03e      	beq.n	8007e2c <UART_SetConfig+0x18cc>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d038      	beq.n	8007e28 <UART_SetConfig+0x18c8>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d032      	beq.n	8007e24 <UART_SetConfig+0x18c4>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d02c      	beq.n	8007e20 <UART_SetConfig+0x18c0>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	2b05      	cmp	r3, #5
 8007dcc:	d026      	beq.n	8007e1c <UART_SetConfig+0x18bc>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b06      	cmp	r3, #6
 8007dd4:	d020      	beq.n	8007e18 <UART_SetConfig+0x18b8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	2b07      	cmp	r3, #7
 8007ddc:	d01a      	beq.n	8007e14 <UART_SetConfig+0x18b4>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	2b08      	cmp	r3, #8
 8007de4:	d014      	beq.n	8007e10 <UART_SetConfig+0x18b0>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	2b09      	cmp	r3, #9
 8007dec:	d00e      	beq.n	8007e0c <UART_SetConfig+0x18ac>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	2b0a      	cmp	r3, #10
 8007df4:	d008      	beq.n	8007e08 <UART_SetConfig+0x18a8>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	2b0b      	cmp	r3, #11
 8007dfc:	d102      	bne.n	8007e04 <UART_SetConfig+0x18a4>
 8007dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e02:	e016      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e04:	2301      	movs	r3, #1
 8007e06:	e014      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e08:	2380      	movs	r3, #128	; 0x80
 8007e0a:	e012      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e0c:	2340      	movs	r3, #64	; 0x40
 8007e0e:	e010      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e10:	2320      	movs	r3, #32
 8007e12:	e00e      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e14:	2310      	movs	r3, #16
 8007e16:	e00c      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e18:	230c      	movs	r3, #12
 8007e1a:	e00a      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e1c:	230a      	movs	r3, #10
 8007e1e:	e008      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e20:	2308      	movs	r3, #8
 8007e22:	e006      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e24:	2306      	movs	r3, #6
 8007e26:	e004      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e28:	2304      	movs	r3, #4
 8007e2a:	e002      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e000      	b.n	8007e32 <UART_SetConfig+0x18d2>
 8007e30:	2301      	movs	r3, #1
 8007e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e36:	005a      	lsls	r2, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	085b      	lsrs	r3, r3, #1
 8007e3e:	441a      	add	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007e4c:	e133      	b.n	80080b6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d043      	beq.n	8007ede <UART_SetConfig+0x197e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d03d      	beq.n	8007eda <UART_SetConfig+0x197a>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d037      	beq.n	8007ed6 <UART_SetConfig+0x1976>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d031      	beq.n	8007ed2 <UART_SetConfig+0x1972>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d02b      	beq.n	8007ece <UART_SetConfig+0x196e>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	2b05      	cmp	r3, #5
 8007e7c:	d025      	beq.n	8007eca <UART_SetConfig+0x196a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b06      	cmp	r3, #6
 8007e84:	d01f      	beq.n	8007ec6 <UART_SetConfig+0x1966>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	2b07      	cmp	r3, #7
 8007e8c:	d019      	beq.n	8007ec2 <UART_SetConfig+0x1962>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d013      	beq.n	8007ebe <UART_SetConfig+0x195e>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b09      	cmp	r3, #9
 8007e9c:	d00d      	beq.n	8007eba <UART_SetConfig+0x195a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b0a      	cmp	r3, #10
 8007ea4:	d007      	beq.n	8007eb6 <UART_SetConfig+0x1956>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b0b      	cmp	r3, #11
 8007eac:	d101      	bne.n	8007eb2 <UART_SetConfig+0x1952>
 8007eae:	4b3f      	ldr	r3, [pc, #252]	; (8007fac <UART_SetConfig+0x1a4c>)
 8007eb0:	e016      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007eb2:	4b3f      	ldr	r3, [pc, #252]	; (8007fb0 <UART_SetConfig+0x1a50>)
 8007eb4:	e014      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007eb6:	4b3f      	ldr	r3, [pc, #252]	; (8007fb4 <UART_SetConfig+0x1a54>)
 8007eb8:	e012      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007eba:	4b3f      	ldr	r3, [pc, #252]	; (8007fb8 <UART_SetConfig+0x1a58>)
 8007ebc:	e010      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007ebe:	4b3f      	ldr	r3, [pc, #252]	; (8007fbc <UART_SetConfig+0x1a5c>)
 8007ec0:	e00e      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007ec2:	4b3f      	ldr	r3, [pc, #252]	; (8007fc0 <UART_SetConfig+0x1a60>)
 8007ec4:	e00c      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007ec6:	4b3f      	ldr	r3, [pc, #252]	; (8007fc4 <UART_SetConfig+0x1a64>)
 8007ec8:	e00a      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007eca:	4b3f      	ldr	r3, [pc, #252]	; (8007fc8 <UART_SetConfig+0x1a68>)
 8007ecc:	e008      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007ece:	4b3f      	ldr	r3, [pc, #252]	; (8007fcc <UART_SetConfig+0x1a6c>)
 8007ed0:	e006      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007ed2:	4b3f      	ldr	r3, [pc, #252]	; (8007fd0 <UART_SetConfig+0x1a70>)
 8007ed4:	e004      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007ed6:	4b3f      	ldr	r3, [pc, #252]	; (8007fd4 <UART_SetConfig+0x1a74>)
 8007ed8:	e002      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007eda:	4b33      	ldr	r3, [pc, #204]	; (8007fa8 <UART_SetConfig+0x1a48>)
 8007edc:	e000      	b.n	8007ee0 <UART_SetConfig+0x1980>
 8007ede:	4b34      	ldr	r3, [pc, #208]	; (8007fb0 <UART_SetConfig+0x1a50>)
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6852      	ldr	r2, [r2, #4]
 8007ee4:	0852      	lsrs	r2, r2, #1
 8007ee6:	441a      	add	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ef4:	e0df      	b.n	80080b6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d045      	beq.n	8007f8a <UART_SetConfig+0x1a2a>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d03f      	beq.n	8007f86 <UART_SetConfig+0x1a26>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d039      	beq.n	8007f82 <UART_SetConfig+0x1a22>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d033      	beq.n	8007f7e <UART_SetConfig+0x1a1e>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d02d      	beq.n	8007f7a <UART_SetConfig+0x1a1a>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	2b05      	cmp	r3, #5
 8007f24:	d027      	beq.n	8007f76 <UART_SetConfig+0x1a16>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	2b06      	cmp	r3, #6
 8007f2c:	d021      	beq.n	8007f72 <UART_SetConfig+0x1a12>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	2b07      	cmp	r3, #7
 8007f34:	d01b      	beq.n	8007f6e <UART_SetConfig+0x1a0e>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d015      	beq.n	8007f6a <UART_SetConfig+0x1a0a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	2b09      	cmp	r3, #9
 8007f44:	d00f      	beq.n	8007f66 <UART_SetConfig+0x1a06>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	2b0a      	cmp	r3, #10
 8007f4c:	d008      	beq.n	8007f60 <UART_SetConfig+0x1a00>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	2b0b      	cmp	r3, #11
 8007f54:	d102      	bne.n	8007f5c <UART_SetConfig+0x19fc>
 8007f56:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007f5a:	e017      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f5c:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <UART_SetConfig+0x1a60>)
 8007f5e:	e015      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f60:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007f64:	e012      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f66:	4b1c      	ldr	r3, [pc, #112]	; (8007fd8 <UART_SetConfig+0x1a78>)
 8007f68:	e010      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f6a:	4b1c      	ldr	r3, [pc, #112]	; (8007fdc <UART_SetConfig+0x1a7c>)
 8007f6c:	e00e      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f6e:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <UART_SetConfig+0x1a4c>)
 8007f70:	e00c      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f72:	4b1b      	ldr	r3, [pc, #108]	; (8007fe0 <UART_SetConfig+0x1a80>)
 8007f74:	e00a      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f76:	4b1b      	ldr	r3, [pc, #108]	; (8007fe4 <UART_SetConfig+0x1a84>)
 8007f78:	e008      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f7a:	4b0e      	ldr	r3, [pc, #56]	; (8007fb4 <UART_SetConfig+0x1a54>)
 8007f7c:	e006      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <UART_SetConfig+0x1a88>)
 8007f80:	e004      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f82:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <UART_SetConfig+0x1a58>)
 8007f84:	e002      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f86:	4b0d      	ldr	r3, [pc, #52]	; (8007fbc <UART_SetConfig+0x1a5c>)
 8007f88:	e000      	b.n	8007f8c <UART_SetConfig+0x1a2c>
 8007f8a:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <UART_SetConfig+0x1a60>)
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	6852      	ldr	r2, [r2, #4]
 8007f90:	0852      	lsrs	r2, r2, #1
 8007f92:	441a      	add	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fa0:	e089      	b.n	80080b6 <UART_SetConfig+0x1b56>
 8007fa2:	bf00      	nop
 8007fa4:	58024400 	.word	0x58024400
 8007fa8:	03d09000 	.word	0x03d09000
 8007fac:	0007a120 	.word	0x0007a120
 8007fb0:	07a12000 	.word	0x07a12000
 8007fb4:	000f4240 	.word	0x000f4240
 8007fb8:	001e8480 	.word	0x001e8480
 8007fbc:	003d0900 	.word	0x003d0900
 8007fc0:	007a1200 	.word	0x007a1200
 8007fc4:	00a2c2aa 	.word	0x00a2c2aa
 8007fc8:	00c35000 	.word	0x00c35000
 8007fcc:	00f42400 	.word	0x00f42400
 8007fd0:	01458554 	.word	0x01458554
 8007fd4:	01e84800 	.word	0x01e84800
 8007fd8:	0001e848 	.word	0x0001e848
 8007fdc:	0003d090 	.word	0x0003d090
 8007fe0:	000a2c2a 	.word	0x000a2c2a
 8007fe4:	000c3500 	.word	0x000c3500
 8007fe8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d04f      	beq.n	8008094 <UART_SetConfig+0x1b34>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d048      	beq.n	800808e <UART_SetConfig+0x1b2e>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b02      	cmp	r3, #2
 8008002:	d041      	beq.n	8008088 <UART_SetConfig+0x1b28>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2b03      	cmp	r3, #3
 800800a:	d03a      	beq.n	8008082 <UART_SetConfig+0x1b22>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b04      	cmp	r3, #4
 8008012:	d033      	beq.n	800807c <UART_SetConfig+0x1b1c>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	2b05      	cmp	r3, #5
 800801a:	d02c      	beq.n	8008076 <UART_SetConfig+0x1b16>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	2b06      	cmp	r3, #6
 8008022:	d025      	beq.n	8008070 <UART_SetConfig+0x1b10>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	2b07      	cmp	r3, #7
 800802a:	d01e      	beq.n	800806a <UART_SetConfig+0x1b0a>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	2b08      	cmp	r3, #8
 8008032:	d017      	beq.n	8008064 <UART_SetConfig+0x1b04>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	2b09      	cmp	r3, #9
 800803a:	d010      	beq.n	800805e <UART_SetConfig+0x1afe>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	2b0a      	cmp	r3, #10
 8008042:	d009      	beq.n	8008058 <UART_SetConfig+0x1af8>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	2b0b      	cmp	r3, #11
 800804a:	d102      	bne.n	8008052 <UART_SetConfig+0x1af2>
 800804c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008050:	e022      	b.n	8008098 <UART_SetConfig+0x1b38>
 8008052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008056:	e01f      	b.n	8008098 <UART_SetConfig+0x1b38>
 8008058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800805c:	e01c      	b.n	8008098 <UART_SetConfig+0x1b38>
 800805e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008062:	e019      	b.n	8008098 <UART_SetConfig+0x1b38>
 8008064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008068:	e016      	b.n	8008098 <UART_SetConfig+0x1b38>
 800806a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800806e:	e013      	b.n	8008098 <UART_SetConfig+0x1b38>
 8008070:	f241 5354 	movw	r3, #5460	; 0x1554
 8008074:	e010      	b.n	8008098 <UART_SetConfig+0x1b38>
 8008076:	f641 1398 	movw	r3, #6552	; 0x1998
 800807a:	e00d      	b.n	8008098 <UART_SetConfig+0x1b38>
 800807c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008080:	e00a      	b.n	8008098 <UART_SetConfig+0x1b38>
 8008082:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008086:	e007      	b.n	8008098 <UART_SetConfig+0x1b38>
 8008088:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800808c:	e004      	b.n	8008098 <UART_SetConfig+0x1b38>
 800808e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008092:	e001      	b.n	8008098 <UART_SetConfig+0x1b38>
 8008094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6852      	ldr	r2, [r2, #4]
 800809c:	0852      	lsrs	r2, r2, #1
 800809e:	441a      	add	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080ac:	e003      	b.n	80080b6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80080b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b8:	2b0f      	cmp	r3, #15
 80080ba:	d916      	bls.n	80080ea <UART_SetConfig+0x1b8a>
 80080bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c2:	d212      	bcs.n	80080ea <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f023 030f 	bic.w	r3, r3, #15
 80080cc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d0:	085b      	lsrs	r3, r3, #1
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	b29a      	uxth	r2, r3
 80080da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80080dc:	4313      	orrs	r3, r2
 80080de:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80080e6:	60da      	str	r2, [r3, #12]
 80080e8:	e3a3      	b.n	8008832 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080f0:	e39f      	b.n	8008832 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 80080f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80080f6:	2b40      	cmp	r3, #64	; 0x40
 80080f8:	f200 8388 	bhi.w	800880c <UART_SetConfig+0x22ac>
 80080fc:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <UART_SetConfig+0x1ba4>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	08008209 	.word	0x08008209
 8008108:	080082bf 	.word	0x080082bf
 800810c:	0800880d 	.word	0x0800880d
 8008110:	0800880d 	.word	0x0800880d
 8008114:	08008375 	.word	0x08008375
 8008118:	0800880d 	.word	0x0800880d
 800811c:	0800880d 	.word	0x0800880d
 8008120:	0800880d 	.word	0x0800880d
 8008124:	0800842f 	.word	0x0800842f
 8008128:	0800880d 	.word	0x0800880d
 800812c:	0800880d 	.word	0x0800880d
 8008130:	0800880d 	.word	0x0800880d
 8008134:	0800880d 	.word	0x0800880d
 8008138:	0800880d 	.word	0x0800880d
 800813c:	0800880d 	.word	0x0800880d
 8008140:	0800880d 	.word	0x0800880d
 8008144:	080084e9 	.word	0x080084e9
 8008148:	0800880d 	.word	0x0800880d
 800814c:	0800880d 	.word	0x0800880d
 8008150:	0800880d 	.word	0x0800880d
 8008154:	0800880d 	.word	0x0800880d
 8008158:	0800880d 	.word	0x0800880d
 800815c:	0800880d 	.word	0x0800880d
 8008160:	0800880d 	.word	0x0800880d
 8008164:	0800880d 	.word	0x0800880d
 8008168:	0800880d 	.word	0x0800880d
 800816c:	0800880d 	.word	0x0800880d
 8008170:	0800880d 	.word	0x0800880d
 8008174:	0800880d 	.word	0x0800880d
 8008178:	0800880d 	.word	0x0800880d
 800817c:	0800880d 	.word	0x0800880d
 8008180:	0800880d 	.word	0x0800880d
 8008184:	08008659 	.word	0x08008659
 8008188:	0800880d 	.word	0x0800880d
 800818c:	0800880d 	.word	0x0800880d
 8008190:	0800880d 	.word	0x0800880d
 8008194:	0800880d 	.word	0x0800880d
 8008198:	0800880d 	.word	0x0800880d
 800819c:	0800880d 	.word	0x0800880d
 80081a0:	0800880d 	.word	0x0800880d
 80081a4:	0800880d 	.word	0x0800880d
 80081a8:	0800880d 	.word	0x0800880d
 80081ac:	0800880d 	.word	0x0800880d
 80081b0:	0800880d 	.word	0x0800880d
 80081b4:	0800880d 	.word	0x0800880d
 80081b8:	0800880d 	.word	0x0800880d
 80081bc:	0800880d 	.word	0x0800880d
 80081c0:	0800880d 	.word	0x0800880d
 80081c4:	0800880d 	.word	0x0800880d
 80081c8:	0800880d 	.word	0x0800880d
 80081cc:	0800880d 	.word	0x0800880d
 80081d0:	0800880d 	.word	0x0800880d
 80081d4:	0800880d 	.word	0x0800880d
 80081d8:	0800880d 	.word	0x0800880d
 80081dc:	0800880d 	.word	0x0800880d
 80081e0:	0800880d 	.word	0x0800880d
 80081e4:	0800880d 	.word	0x0800880d
 80081e8:	0800880d 	.word	0x0800880d
 80081ec:	0800880d 	.word	0x0800880d
 80081f0:	0800880d 	.word	0x0800880d
 80081f4:	0800880d 	.word	0x0800880d
 80081f8:	0800880d 	.word	0x0800880d
 80081fc:	0800880d 	.word	0x0800880d
 8008200:	0800880d 	.word	0x0800880d
 8008204:	0800874d 	.word	0x0800874d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008208:	f7fb fdfe 	bl	8003e08 <HAL_RCC_GetPCLK1Freq>
 800820c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	2b00      	cmp	r3, #0
 8008214:	d044      	beq.n	80082a0 <UART_SetConfig+0x1d40>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	2b01      	cmp	r3, #1
 800821c:	d03e      	beq.n	800829c <UART_SetConfig+0x1d3c>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	2b02      	cmp	r3, #2
 8008224:	d038      	beq.n	8008298 <UART_SetConfig+0x1d38>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	2b03      	cmp	r3, #3
 800822c:	d032      	beq.n	8008294 <UART_SetConfig+0x1d34>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	2b04      	cmp	r3, #4
 8008234:	d02c      	beq.n	8008290 <UART_SetConfig+0x1d30>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	2b05      	cmp	r3, #5
 800823c:	d026      	beq.n	800828c <UART_SetConfig+0x1d2c>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	2b06      	cmp	r3, #6
 8008244:	d020      	beq.n	8008288 <UART_SetConfig+0x1d28>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	2b07      	cmp	r3, #7
 800824c:	d01a      	beq.n	8008284 <UART_SetConfig+0x1d24>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	2b08      	cmp	r3, #8
 8008254:	d014      	beq.n	8008280 <UART_SetConfig+0x1d20>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b09      	cmp	r3, #9
 800825c:	d00e      	beq.n	800827c <UART_SetConfig+0x1d1c>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	2b0a      	cmp	r3, #10
 8008264:	d008      	beq.n	8008278 <UART_SetConfig+0x1d18>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	2b0b      	cmp	r3, #11
 800826c:	d102      	bne.n	8008274 <UART_SetConfig+0x1d14>
 800826e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008272:	e016      	b.n	80082a2 <UART_SetConfig+0x1d42>
 8008274:	2301      	movs	r3, #1
 8008276:	e014      	b.n	80082a2 <UART_SetConfig+0x1d42>
 8008278:	2380      	movs	r3, #128	; 0x80
 800827a:	e012      	b.n	80082a2 <UART_SetConfig+0x1d42>
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	e010      	b.n	80082a2 <UART_SetConfig+0x1d42>
 8008280:	2320      	movs	r3, #32
 8008282:	e00e      	b.n	80082a2 <UART_SetConfig+0x1d42>
 8008284:	2310      	movs	r3, #16
 8008286:	e00c      	b.n	80082a2 <UART_SetConfig+0x1d42>
 8008288:	230c      	movs	r3, #12
 800828a:	e00a      	b.n	80082a2 <UART_SetConfig+0x1d42>
 800828c:	230a      	movs	r3, #10
 800828e:	e008      	b.n	80082a2 <UART_SetConfig+0x1d42>
 8008290:	2308      	movs	r3, #8
 8008292:	e006      	b.n	80082a2 <UART_SetConfig+0x1d42>
 8008294:	2306      	movs	r3, #6
 8008296:	e004      	b.n	80082a2 <UART_SetConfig+0x1d42>
 8008298:	2304      	movs	r3, #4
 800829a:	e002      	b.n	80082a2 <UART_SetConfig+0x1d42>
 800829c:	2302      	movs	r3, #2
 800829e:	e000      	b.n	80082a2 <UART_SetConfig+0x1d42>
 80082a0:	2301      	movs	r3, #1
 80082a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	085b      	lsrs	r3, r3, #1
 80082ae:	441a      	add	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082bc:	e2aa      	b.n	8008814 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082be:	f7fb fdb9 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 80082c2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d044      	beq.n	8008356 <UART_SetConfig+0x1df6>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d03e      	beq.n	8008352 <UART_SetConfig+0x1df2>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d038      	beq.n	800834e <UART_SetConfig+0x1dee>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d032      	beq.n	800834a <UART_SetConfig+0x1dea>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	d02c      	beq.n	8008346 <UART_SetConfig+0x1de6>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b05      	cmp	r3, #5
 80082f2:	d026      	beq.n	8008342 <UART_SetConfig+0x1de2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	2b06      	cmp	r3, #6
 80082fa:	d020      	beq.n	800833e <UART_SetConfig+0x1dde>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	2b07      	cmp	r3, #7
 8008302:	d01a      	beq.n	800833a <UART_SetConfig+0x1dda>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	2b08      	cmp	r3, #8
 800830a:	d014      	beq.n	8008336 <UART_SetConfig+0x1dd6>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	2b09      	cmp	r3, #9
 8008312:	d00e      	beq.n	8008332 <UART_SetConfig+0x1dd2>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b0a      	cmp	r3, #10
 800831a:	d008      	beq.n	800832e <UART_SetConfig+0x1dce>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b0b      	cmp	r3, #11
 8008322:	d102      	bne.n	800832a <UART_SetConfig+0x1dca>
 8008324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008328:	e016      	b.n	8008358 <UART_SetConfig+0x1df8>
 800832a:	2301      	movs	r3, #1
 800832c:	e014      	b.n	8008358 <UART_SetConfig+0x1df8>
 800832e:	2380      	movs	r3, #128	; 0x80
 8008330:	e012      	b.n	8008358 <UART_SetConfig+0x1df8>
 8008332:	2340      	movs	r3, #64	; 0x40
 8008334:	e010      	b.n	8008358 <UART_SetConfig+0x1df8>
 8008336:	2320      	movs	r3, #32
 8008338:	e00e      	b.n	8008358 <UART_SetConfig+0x1df8>
 800833a:	2310      	movs	r3, #16
 800833c:	e00c      	b.n	8008358 <UART_SetConfig+0x1df8>
 800833e:	230c      	movs	r3, #12
 8008340:	e00a      	b.n	8008358 <UART_SetConfig+0x1df8>
 8008342:	230a      	movs	r3, #10
 8008344:	e008      	b.n	8008358 <UART_SetConfig+0x1df8>
 8008346:	2308      	movs	r3, #8
 8008348:	e006      	b.n	8008358 <UART_SetConfig+0x1df8>
 800834a:	2306      	movs	r3, #6
 800834c:	e004      	b.n	8008358 <UART_SetConfig+0x1df8>
 800834e:	2304      	movs	r3, #4
 8008350:	e002      	b.n	8008358 <UART_SetConfig+0x1df8>
 8008352:	2302      	movs	r3, #2
 8008354:	e000      	b.n	8008358 <UART_SetConfig+0x1df8>
 8008356:	2301      	movs	r3, #1
 8008358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800835a:	fbb2 f2f3 	udiv	r2, r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	441a      	add	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	fbb2 f3f3 	udiv	r3, r2, r3
 800836e:	b29b      	uxth	r3, r3
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008372:	e24f      	b.n	8008814 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008374:	f107 0318 	add.w	r3, r7, #24
 8008378:	4618      	mov	r0, r3
 800837a:	f7fc fead 	bl	80050d8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837e:	69fa      	ldr	r2, [r7, #28]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	2b00      	cmp	r3, #0
 8008386:	d044      	beq.n	8008412 <UART_SetConfig+0x1eb2>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	2b01      	cmp	r3, #1
 800838e:	d03e      	beq.n	800840e <UART_SetConfig+0x1eae>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b02      	cmp	r3, #2
 8008396:	d038      	beq.n	800840a <UART_SetConfig+0x1eaa>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	2b03      	cmp	r3, #3
 800839e:	d032      	beq.n	8008406 <UART_SetConfig+0x1ea6>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d02c      	beq.n	8008402 <UART_SetConfig+0x1ea2>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b05      	cmp	r3, #5
 80083ae:	d026      	beq.n	80083fe <UART_SetConfig+0x1e9e>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b06      	cmp	r3, #6
 80083b6:	d020      	beq.n	80083fa <UART_SetConfig+0x1e9a>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2b07      	cmp	r3, #7
 80083be:	d01a      	beq.n	80083f6 <UART_SetConfig+0x1e96>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	2b08      	cmp	r3, #8
 80083c6:	d014      	beq.n	80083f2 <UART_SetConfig+0x1e92>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b09      	cmp	r3, #9
 80083ce:	d00e      	beq.n	80083ee <UART_SetConfig+0x1e8e>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	2b0a      	cmp	r3, #10
 80083d6:	d008      	beq.n	80083ea <UART_SetConfig+0x1e8a>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b0b      	cmp	r3, #11
 80083de:	d102      	bne.n	80083e6 <UART_SetConfig+0x1e86>
 80083e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083e4:	e016      	b.n	8008414 <UART_SetConfig+0x1eb4>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e014      	b.n	8008414 <UART_SetConfig+0x1eb4>
 80083ea:	2380      	movs	r3, #128	; 0x80
 80083ec:	e012      	b.n	8008414 <UART_SetConfig+0x1eb4>
 80083ee:	2340      	movs	r3, #64	; 0x40
 80083f0:	e010      	b.n	8008414 <UART_SetConfig+0x1eb4>
 80083f2:	2320      	movs	r3, #32
 80083f4:	e00e      	b.n	8008414 <UART_SetConfig+0x1eb4>
 80083f6:	2310      	movs	r3, #16
 80083f8:	e00c      	b.n	8008414 <UART_SetConfig+0x1eb4>
 80083fa:	230c      	movs	r3, #12
 80083fc:	e00a      	b.n	8008414 <UART_SetConfig+0x1eb4>
 80083fe:	230a      	movs	r3, #10
 8008400:	e008      	b.n	8008414 <UART_SetConfig+0x1eb4>
 8008402:	2308      	movs	r3, #8
 8008404:	e006      	b.n	8008414 <UART_SetConfig+0x1eb4>
 8008406:	2306      	movs	r3, #6
 8008408:	e004      	b.n	8008414 <UART_SetConfig+0x1eb4>
 800840a:	2304      	movs	r3, #4
 800840c:	e002      	b.n	8008414 <UART_SetConfig+0x1eb4>
 800840e:	2302      	movs	r3, #2
 8008410:	e000      	b.n	8008414 <UART_SetConfig+0x1eb4>
 8008412:	2301      	movs	r3, #1
 8008414:	fbb2 f2f3 	udiv	r2, r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	085b      	lsrs	r3, r3, #1
 800841e:	441a      	add	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	fbb2 f3f3 	udiv	r3, r2, r3
 8008428:	b29b      	uxth	r3, r3
 800842a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800842c:	e1f2      	b.n	8008814 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800842e:	f107 030c 	add.w	r3, r7, #12
 8008432:	4618      	mov	r0, r3
 8008434:	f7fc ff9c 	bl	8005370 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	2b00      	cmp	r3, #0
 8008440:	d044      	beq.n	80084cc <UART_SetConfig+0x1f6c>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	2b01      	cmp	r3, #1
 8008448:	d03e      	beq.n	80084c8 <UART_SetConfig+0x1f68>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	2b02      	cmp	r3, #2
 8008450:	d038      	beq.n	80084c4 <UART_SetConfig+0x1f64>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	2b03      	cmp	r3, #3
 8008458:	d032      	beq.n	80084c0 <UART_SetConfig+0x1f60>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	2b04      	cmp	r3, #4
 8008460:	d02c      	beq.n	80084bc <UART_SetConfig+0x1f5c>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	2b05      	cmp	r3, #5
 8008468:	d026      	beq.n	80084b8 <UART_SetConfig+0x1f58>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846e:	2b06      	cmp	r3, #6
 8008470:	d020      	beq.n	80084b4 <UART_SetConfig+0x1f54>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2b07      	cmp	r3, #7
 8008478:	d01a      	beq.n	80084b0 <UART_SetConfig+0x1f50>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2b08      	cmp	r3, #8
 8008480:	d014      	beq.n	80084ac <UART_SetConfig+0x1f4c>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	2b09      	cmp	r3, #9
 8008488:	d00e      	beq.n	80084a8 <UART_SetConfig+0x1f48>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	2b0a      	cmp	r3, #10
 8008490:	d008      	beq.n	80084a4 <UART_SetConfig+0x1f44>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	2b0b      	cmp	r3, #11
 8008498:	d102      	bne.n	80084a0 <UART_SetConfig+0x1f40>
 800849a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800849e:	e016      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084a0:	2301      	movs	r3, #1
 80084a2:	e014      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084a4:	2380      	movs	r3, #128	; 0x80
 80084a6:	e012      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084a8:	2340      	movs	r3, #64	; 0x40
 80084aa:	e010      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084ac:	2320      	movs	r3, #32
 80084ae:	e00e      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084b0:	2310      	movs	r3, #16
 80084b2:	e00c      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084b4:	230c      	movs	r3, #12
 80084b6:	e00a      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084b8:	230a      	movs	r3, #10
 80084ba:	e008      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084bc:	2308      	movs	r3, #8
 80084be:	e006      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084c0:	2306      	movs	r3, #6
 80084c2:	e004      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084c4:	2304      	movs	r3, #4
 80084c6:	e002      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084c8:	2302      	movs	r3, #2
 80084ca:	e000      	b.n	80084ce <UART_SetConfig+0x1f6e>
 80084cc:	2301      	movs	r3, #1
 80084ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	085b      	lsrs	r3, r3, #1
 80084d8:	441a      	add	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80084e6:	e195      	b.n	8008814 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084e8:	4b87      	ldr	r3, [pc, #540]	; (8008708 <UART_SetConfig+0x21a8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d05d      	beq.n	80085b0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f4:	4b84      	ldr	r3, [pc, #528]	; (8008708 <UART_SetConfig+0x21a8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	08db      	lsrs	r3, r3, #3
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	4a83      	ldr	r2, [pc, #524]	; (800870c <UART_SetConfig+0x21ac>)
 8008500:	40da      	lsrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	2b00      	cmp	r3, #0
 8008508:	d044      	beq.n	8008594 <UART_SetConfig+0x2034>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	2b01      	cmp	r3, #1
 8008510:	d03e      	beq.n	8008590 <UART_SetConfig+0x2030>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b02      	cmp	r3, #2
 8008518:	d038      	beq.n	800858c <UART_SetConfig+0x202c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	2b03      	cmp	r3, #3
 8008520:	d032      	beq.n	8008588 <UART_SetConfig+0x2028>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	2b04      	cmp	r3, #4
 8008528:	d02c      	beq.n	8008584 <UART_SetConfig+0x2024>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b05      	cmp	r3, #5
 8008530:	d026      	beq.n	8008580 <UART_SetConfig+0x2020>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b06      	cmp	r3, #6
 8008538:	d020      	beq.n	800857c <UART_SetConfig+0x201c>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b07      	cmp	r3, #7
 8008540:	d01a      	beq.n	8008578 <UART_SetConfig+0x2018>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b08      	cmp	r3, #8
 8008548:	d014      	beq.n	8008574 <UART_SetConfig+0x2014>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2b09      	cmp	r3, #9
 8008550:	d00e      	beq.n	8008570 <UART_SetConfig+0x2010>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008556:	2b0a      	cmp	r3, #10
 8008558:	d008      	beq.n	800856c <UART_SetConfig+0x200c>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855e:	2b0b      	cmp	r3, #11
 8008560:	d102      	bne.n	8008568 <UART_SetConfig+0x2008>
 8008562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008566:	e016      	b.n	8008596 <UART_SetConfig+0x2036>
 8008568:	2301      	movs	r3, #1
 800856a:	e014      	b.n	8008596 <UART_SetConfig+0x2036>
 800856c:	2380      	movs	r3, #128	; 0x80
 800856e:	e012      	b.n	8008596 <UART_SetConfig+0x2036>
 8008570:	2340      	movs	r3, #64	; 0x40
 8008572:	e010      	b.n	8008596 <UART_SetConfig+0x2036>
 8008574:	2320      	movs	r3, #32
 8008576:	e00e      	b.n	8008596 <UART_SetConfig+0x2036>
 8008578:	2310      	movs	r3, #16
 800857a:	e00c      	b.n	8008596 <UART_SetConfig+0x2036>
 800857c:	230c      	movs	r3, #12
 800857e:	e00a      	b.n	8008596 <UART_SetConfig+0x2036>
 8008580:	230a      	movs	r3, #10
 8008582:	e008      	b.n	8008596 <UART_SetConfig+0x2036>
 8008584:	2308      	movs	r3, #8
 8008586:	e006      	b.n	8008596 <UART_SetConfig+0x2036>
 8008588:	2306      	movs	r3, #6
 800858a:	e004      	b.n	8008596 <UART_SetConfig+0x2036>
 800858c:	2304      	movs	r3, #4
 800858e:	e002      	b.n	8008596 <UART_SetConfig+0x2036>
 8008590:	2302      	movs	r3, #2
 8008592:	e000      	b.n	8008596 <UART_SetConfig+0x2036>
 8008594:	2301      	movs	r3, #1
 8008596:	fbb2 f2f3 	udiv	r2, r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	085b      	lsrs	r3, r3, #1
 80085a0:	441a      	add	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085aa:	b29b      	uxth	r3, r3
 80085ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80085ae:	e131      	b.n	8008814 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d043      	beq.n	8008640 <UART_SetConfig+0x20e0>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d03d      	beq.n	800863c <UART_SetConfig+0x20dc>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d037      	beq.n	8008638 <UART_SetConfig+0x20d8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d031      	beq.n	8008634 <UART_SetConfig+0x20d4>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d4:	2b04      	cmp	r3, #4
 80085d6:	d02b      	beq.n	8008630 <UART_SetConfig+0x20d0>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	2b05      	cmp	r3, #5
 80085de:	d025      	beq.n	800862c <UART_SetConfig+0x20cc>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	2b06      	cmp	r3, #6
 80085e6:	d01f      	beq.n	8008628 <UART_SetConfig+0x20c8>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	2b07      	cmp	r3, #7
 80085ee:	d019      	beq.n	8008624 <UART_SetConfig+0x20c4>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d013      	beq.n	8008620 <UART_SetConfig+0x20c0>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	2b09      	cmp	r3, #9
 80085fe:	d00d      	beq.n	800861c <UART_SetConfig+0x20bc>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b0a      	cmp	r3, #10
 8008606:	d007      	beq.n	8008618 <UART_SetConfig+0x20b8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2b0b      	cmp	r3, #11
 800860e:	d101      	bne.n	8008614 <UART_SetConfig+0x20b4>
 8008610:	4b3f      	ldr	r3, [pc, #252]	; (8008710 <UART_SetConfig+0x21b0>)
 8008612:	e016      	b.n	8008642 <UART_SetConfig+0x20e2>
 8008614:	4b3d      	ldr	r3, [pc, #244]	; (800870c <UART_SetConfig+0x21ac>)
 8008616:	e014      	b.n	8008642 <UART_SetConfig+0x20e2>
 8008618:	4b3e      	ldr	r3, [pc, #248]	; (8008714 <UART_SetConfig+0x21b4>)
 800861a:	e012      	b.n	8008642 <UART_SetConfig+0x20e2>
 800861c:	4b3e      	ldr	r3, [pc, #248]	; (8008718 <UART_SetConfig+0x21b8>)
 800861e:	e010      	b.n	8008642 <UART_SetConfig+0x20e2>
 8008620:	4b3e      	ldr	r3, [pc, #248]	; (800871c <UART_SetConfig+0x21bc>)
 8008622:	e00e      	b.n	8008642 <UART_SetConfig+0x20e2>
 8008624:	4b3e      	ldr	r3, [pc, #248]	; (8008720 <UART_SetConfig+0x21c0>)
 8008626:	e00c      	b.n	8008642 <UART_SetConfig+0x20e2>
 8008628:	4b3e      	ldr	r3, [pc, #248]	; (8008724 <UART_SetConfig+0x21c4>)
 800862a:	e00a      	b.n	8008642 <UART_SetConfig+0x20e2>
 800862c:	4b3e      	ldr	r3, [pc, #248]	; (8008728 <UART_SetConfig+0x21c8>)
 800862e:	e008      	b.n	8008642 <UART_SetConfig+0x20e2>
 8008630:	4b3e      	ldr	r3, [pc, #248]	; (800872c <UART_SetConfig+0x21cc>)
 8008632:	e006      	b.n	8008642 <UART_SetConfig+0x20e2>
 8008634:	4b3e      	ldr	r3, [pc, #248]	; (8008730 <UART_SetConfig+0x21d0>)
 8008636:	e004      	b.n	8008642 <UART_SetConfig+0x20e2>
 8008638:	4b3e      	ldr	r3, [pc, #248]	; (8008734 <UART_SetConfig+0x21d4>)
 800863a:	e002      	b.n	8008642 <UART_SetConfig+0x20e2>
 800863c:	4b3e      	ldr	r3, [pc, #248]	; (8008738 <UART_SetConfig+0x21d8>)
 800863e:	e000      	b.n	8008642 <UART_SetConfig+0x20e2>
 8008640:	4b32      	ldr	r3, [pc, #200]	; (800870c <UART_SetConfig+0x21ac>)
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6852      	ldr	r2, [r2, #4]
 8008646:	0852      	lsrs	r2, r2, #1
 8008648:	441a      	add	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008652:	b29b      	uxth	r3, r3
 8008654:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008656:	e0dd      	b.n	8008814 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	2b00      	cmp	r3, #0
 800865e:	d046      	beq.n	80086ee <UART_SetConfig+0x218e>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b01      	cmp	r3, #1
 8008666:	d040      	beq.n	80086ea <UART_SetConfig+0x218a>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	2b02      	cmp	r3, #2
 800866e:	d03a      	beq.n	80086e6 <UART_SetConfig+0x2186>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	2b03      	cmp	r3, #3
 8008676:	d034      	beq.n	80086e2 <UART_SetConfig+0x2182>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	2b04      	cmp	r3, #4
 800867e:	d02e      	beq.n	80086de <UART_SetConfig+0x217e>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	2b05      	cmp	r3, #5
 8008686:	d028      	beq.n	80086da <UART_SetConfig+0x217a>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	2b06      	cmp	r3, #6
 800868e:	d022      	beq.n	80086d6 <UART_SetConfig+0x2176>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	2b07      	cmp	r3, #7
 8008696:	d01c      	beq.n	80086d2 <UART_SetConfig+0x2172>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	2b08      	cmp	r3, #8
 800869e:	d016      	beq.n	80086ce <UART_SetConfig+0x216e>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2b09      	cmp	r3, #9
 80086a6:	d00f      	beq.n	80086c8 <UART_SetConfig+0x2168>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b0a      	cmp	r3, #10
 80086ae:	d008      	beq.n	80086c2 <UART_SetConfig+0x2162>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b0b      	cmp	r3, #11
 80086b6:	d102      	bne.n	80086be <UART_SetConfig+0x215e>
 80086b8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80086bc:	e018      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086be:	4b18      	ldr	r3, [pc, #96]	; (8008720 <UART_SetConfig+0x21c0>)
 80086c0:	e016      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086c2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80086c6:	e013      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086c8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80086cc:	e010      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086ce:	4b1b      	ldr	r3, [pc, #108]	; (800873c <UART_SetConfig+0x21dc>)
 80086d0:	e00e      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086d2:	4b0f      	ldr	r3, [pc, #60]	; (8008710 <UART_SetConfig+0x21b0>)
 80086d4:	e00c      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086d6:	4b1a      	ldr	r3, [pc, #104]	; (8008740 <UART_SetConfig+0x21e0>)
 80086d8:	e00a      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086da:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <UART_SetConfig+0x21e4>)
 80086dc:	e008      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086de:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <UART_SetConfig+0x21b4>)
 80086e0:	e006      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086e2:	4b19      	ldr	r3, [pc, #100]	; (8008748 <UART_SetConfig+0x21e8>)
 80086e4:	e004      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <UART_SetConfig+0x21b8>)
 80086e8:	e002      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086ea:	4b0c      	ldr	r3, [pc, #48]	; (800871c <UART_SetConfig+0x21bc>)
 80086ec:	e000      	b.n	80086f0 <UART_SetConfig+0x2190>
 80086ee:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <UART_SetConfig+0x21c0>)
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6852      	ldr	r2, [r2, #4]
 80086f4:	0852      	lsrs	r2, r2, #1
 80086f6:	441a      	add	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008700:	b29b      	uxth	r3, r3
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008704:	e086      	b.n	8008814 <UART_SetConfig+0x22b4>
 8008706:	bf00      	nop
 8008708:	58024400 	.word	0x58024400
 800870c:	03d09000 	.word	0x03d09000
 8008710:	0003d090 	.word	0x0003d090
 8008714:	0007a120 	.word	0x0007a120
 8008718:	000f4240 	.word	0x000f4240
 800871c:	001e8480 	.word	0x001e8480
 8008720:	003d0900 	.word	0x003d0900
 8008724:	00516155 	.word	0x00516155
 8008728:	0061a800 	.word	0x0061a800
 800872c:	007a1200 	.word	0x007a1200
 8008730:	00a2c2aa 	.word	0x00a2c2aa
 8008734:	00f42400 	.word	0x00f42400
 8008738:	01e84800 	.word	0x01e84800
 800873c:	0001e848 	.word	0x0001e848
 8008740:	00051615 	.word	0x00051615
 8008744:	00061a80 	.word	0x00061a80
 8008748:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d04e      	beq.n	80087f2 <UART_SetConfig+0x2292>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	2b01      	cmp	r3, #1
 800875a:	d047      	beq.n	80087ec <UART_SetConfig+0x228c>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008760:	2b02      	cmp	r3, #2
 8008762:	d040      	beq.n	80087e6 <UART_SetConfig+0x2286>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	2b03      	cmp	r3, #3
 800876a:	d039      	beq.n	80087e0 <UART_SetConfig+0x2280>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	2b04      	cmp	r3, #4
 8008772:	d032      	beq.n	80087da <UART_SetConfig+0x227a>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	2b05      	cmp	r3, #5
 800877a:	d02b      	beq.n	80087d4 <UART_SetConfig+0x2274>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	2b06      	cmp	r3, #6
 8008782:	d024      	beq.n	80087ce <UART_SetConfig+0x226e>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	2b07      	cmp	r3, #7
 800878a:	d01d      	beq.n	80087c8 <UART_SetConfig+0x2268>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	2b08      	cmp	r3, #8
 8008792:	d016      	beq.n	80087c2 <UART_SetConfig+0x2262>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008798:	2b09      	cmp	r3, #9
 800879a:	d00f      	beq.n	80087bc <UART_SetConfig+0x225c>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	2b0a      	cmp	r3, #10
 80087a2:	d008      	beq.n	80087b6 <UART_SetConfig+0x2256>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	2b0b      	cmp	r3, #11
 80087aa:	d101      	bne.n	80087b0 <UART_SetConfig+0x2250>
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	e022      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087b4:	e01f      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ba:	e01c      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087c0:	e019      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c6:	e016      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087cc:	e013      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087ce:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80087d2:	e010      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087d4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80087d8:	e00d      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087de:	e00a      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087e0:	f241 5355 	movw	r3, #5461	; 0x1555
 80087e4:	e007      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087ea:	e004      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087f0:	e001      	b.n	80087f6 <UART_SetConfig+0x2296>
 80087f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	6852      	ldr	r2, [r2, #4]
 80087fa:	0852      	lsrs	r2, r2, #1
 80087fc:	441a      	add	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	fbb2 f3f3 	udiv	r3, r2, r3
 8008806:	b29b      	uxth	r3, r3
 8008808:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800880a:	e003      	b.n	8008814 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008812:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008816:	2b0f      	cmp	r3, #15
 8008818:	d908      	bls.n	800882c <UART_SetConfig+0x22cc>
 800881a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008820:	d204      	bcs.n	800882c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008828:	60da      	str	r2, [r3, #12]
 800882a:	e002      	b.n	8008832 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800884e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008852:	4618      	mov	r0, r3
 8008854:	3740      	adds	r7, #64	; 0x40
 8008856:	46bd      	mov	sp, r7
 8008858:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800885c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00a      	beq.n	8008886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00a      	beq.n	80088a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00a      	beq.n	80088ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	430a      	orrs	r2, r1
 80088c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	f003 0308 	and.w	r3, r3, #8
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	f003 0310 	and.w	r3, r3, #16
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00a      	beq.n	800890e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	f003 0320 	and.w	r3, r3, #32
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008938:	2b00      	cmp	r3, #0
 800893a:	d01a      	beq.n	8008972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800895a:	d10a      	bne.n	8008972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	605a      	str	r2, [r3, #4]
  }
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af02      	add	r7, sp, #8
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80089b0:	f7f8 ffb6 	bl	8001920 <HAL_GetTick>
 80089b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0308 	and.w	r3, r3, #8
 80089c0:	2b08      	cmp	r3, #8
 80089c2:	d10e      	bne.n	80089e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f82c 	bl	8008a30 <UART_WaitOnFlagUntilTimeout>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e022      	b.n	8008a28 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b04      	cmp	r3, #4
 80089ee:	d10e      	bne.n	8008a0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f816 	bl	8008a30 <UART_WaitOnFlagUntilTimeout>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e00c      	b.n	8008a28 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2220      	movs	r2, #32
 8008a12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a40:	e062      	b.n	8008b08 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a48:	d05e      	beq.n	8008b08 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a4a:	f7f8 ff69 	bl	8001920 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d302      	bcc.n	8008a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d11d      	bne.n	8008a9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a6e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 0201 	bic.w	r2, r2, #1
 8008a7e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2220      	movs	r2, #32
 8008a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e045      	b.n	8008b28 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d02e      	beq.n	8008b08 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ab8:	d126      	bne.n	8008b08 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ac2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ad2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0201 	bic.w	r2, r2, #1
 8008ae2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e00f      	b.n	8008b28 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	69da      	ldr	r2, [r3, #28]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	4013      	ands	r3, r2
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	bf0c      	ite	eq
 8008b18:	2301      	moveq	r3, #1
 8008b1a:	2300      	movne	r3, #0
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	461a      	mov	r2, r3
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d08d      	beq.n	8008a42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d101      	bne.n	8008b46 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b42:	2302      	movs	r3, #2
 8008b44:	e027      	b.n	8008b96 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2224      	movs	r2, #36	; 0x24
 8008b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0201 	bic.w	r2, r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d101      	bne.n	8008bba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e02d      	b.n	8008c16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2224      	movs	r2, #36	; 0x24
 8008bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0201 	bic.w	r2, r2, #1
 8008be0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f850 	bl	8008c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d101      	bne.n	8008c36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c32:	2302      	movs	r3, #2
 8008c34:	e02d      	b.n	8008c92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2224      	movs	r2, #36	; 0x24
 8008c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0201 	bic.w	r2, r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f812 	bl	8008c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2220      	movs	r2, #32
 8008c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b089      	sub	sp, #36	; 0x24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008ca4:	4a2f      	ldr	r2, [pc, #188]	; (8008d64 <UARTEx_SetNbDataToProcess+0xc8>)
 8008ca6:	f107 0314 	add.w	r3, r7, #20
 8008caa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cae:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008cb2:	4a2d      	ldr	r2, [pc, #180]	; (8008d68 <UARTEx_SetNbDataToProcess+0xcc>)
 8008cb4:	f107 030c 	add.w	r3, r7, #12
 8008cb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008cbc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d108      	bne.n	8008cda <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cd8:	e03d      	b.n	8008d56 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cda:	2308      	movs	r3, #8
 8008cdc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cde:	2308      	movs	r3, #8
 8008ce0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	0e5b      	lsrs	r3, r3, #25
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	0f5b      	lsrs	r3, r3, #29
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	f003 0307 	and.w	r3, r3, #7
 8008d00:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008d02:	7fbb      	ldrb	r3, [r7, #30]
 8008d04:	7f3a      	ldrb	r2, [r7, #28]
 8008d06:	f107 0120 	add.w	r1, r7, #32
 8008d0a:	440a      	add	r2, r1
 8008d0c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d10:	fb02 f303 	mul.w	r3, r2, r3
 8008d14:	7f3a      	ldrb	r2, [r7, #28]
 8008d16:	f107 0120 	add.w	r1, r7, #32
 8008d1a:	440a      	add	r2, r1
 8008d1c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d20:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008d2c:	7ffb      	ldrb	r3, [r7, #31]
 8008d2e:	7f7a      	ldrb	r2, [r7, #29]
 8008d30:	f107 0120 	add.w	r1, r7, #32
 8008d34:	440a      	add	r2, r1
 8008d36:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008d3a:	fb02 f303 	mul.w	r3, r2, r3
 8008d3e:	7f7a      	ldrb	r2, [r7, #29]
 8008d40:	f107 0120 	add.w	r1, r7, #32
 8008d44:	440a      	add	r2, r1
 8008d46:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008d4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d56:	bf00      	nop
 8008d58:	3724      	adds	r7, #36	; 0x24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	08008df8 	.word	0x08008df8
 8008d68:	08008e00 	.word	0x08008e00

08008d6c <__libc_init_array>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	4e0d      	ldr	r6, [pc, #52]	; (8008da4 <__libc_init_array+0x38>)
 8008d70:	4c0d      	ldr	r4, [pc, #52]	; (8008da8 <__libc_init_array+0x3c>)
 8008d72:	1ba4      	subs	r4, r4, r6
 8008d74:	10a4      	asrs	r4, r4, #2
 8008d76:	2500      	movs	r5, #0
 8008d78:	42a5      	cmp	r5, r4
 8008d7a:	d109      	bne.n	8008d90 <__libc_init_array+0x24>
 8008d7c:	4e0b      	ldr	r6, [pc, #44]	; (8008dac <__libc_init_array+0x40>)
 8008d7e:	4c0c      	ldr	r4, [pc, #48]	; (8008db0 <__libc_init_array+0x44>)
 8008d80:	f000 f820 	bl	8008dc4 <_init>
 8008d84:	1ba4      	subs	r4, r4, r6
 8008d86:	10a4      	asrs	r4, r4, #2
 8008d88:	2500      	movs	r5, #0
 8008d8a:	42a5      	cmp	r5, r4
 8008d8c:	d105      	bne.n	8008d9a <__libc_init_array+0x2e>
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}
 8008d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d94:	4798      	blx	r3
 8008d96:	3501      	adds	r5, #1
 8008d98:	e7ee      	b.n	8008d78 <__libc_init_array+0xc>
 8008d9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d9e:	4798      	blx	r3
 8008da0:	3501      	adds	r5, #1
 8008da2:	e7f2      	b.n	8008d8a <__libc_init_array+0x1e>
 8008da4:	08008e20 	.word	0x08008e20
 8008da8:	08008e20 	.word	0x08008e20
 8008dac:	08008e20 	.word	0x08008e20
 8008db0:	08008e24 	.word	0x08008e24

08008db4 <memset>:
 8008db4:	4402      	add	r2, r0
 8008db6:	4603      	mov	r3, r0
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d100      	bne.n	8008dbe <memset+0xa>
 8008dbc:	4770      	bx	lr
 8008dbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008dc2:	e7f9      	b.n	8008db8 <memset+0x4>

08008dc4 <_init>:
 8008dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc6:	bf00      	nop
 8008dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dca:	bc08      	pop	{r3}
 8008dcc:	469e      	mov	lr, r3
 8008dce:	4770      	bx	lr

08008dd0 <_fini>:
 8008dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd2:	bf00      	nop
 8008dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd6:	bc08      	pop	{r3}
 8008dd8:	469e      	mov	lr, r3
 8008dda:	4770      	bx	lr
