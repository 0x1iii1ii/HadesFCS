
HadesTEST_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5c8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800b868  0800b868  0001b868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb30  0800bb30  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb30  0800bb30  0001bb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb38  0800bb38  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb38  0800bb38  0001bb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb3c  0800bb3c  0001bb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800bb40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  240001e0  0800bd20  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240006f8  0800bd20  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e8b  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003496  00000000  00000000  00043099  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001688  00000000  00000000  00046530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001540  00000000  00000000  00047bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039b0e  00000000  00000000  000490f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013509  00000000  00000000  00082c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00177ae7  00000000  00000000  0009610f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020dbf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000692c  00000000  00000000  0020dc74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b850 	.word	0x0800b850

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800b850 	.word	0x0800b850

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <INA219_Init32V2A>:
	uint16_t conf = (0x2000) | (0x1000) | (0x0180) | (0x0018) | (0x0007);
	INA219_WriteReg16(ina, INA219_REG_CONF, conf);

}

void INA219_Init32V2A(INA219 *ina, I2C_HandleTypeDef *I2Chandle) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
	ina->I2Chandle       = I2Chandle;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	601a      	str	r2, [r3, #0]
	ina->currentmA       = 0.0f;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
	ina->voltageBusmV    = 0.0f;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
	ina->voltageShuntmV  = 0.0f;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
	ina->powermW         = 0.0f;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f04f 0200 	mov.w	r2, #0
 80006be:	611a      	str	r2, [r3, #16]

	/* Set calibration parameters */
	ina->calVal = 40960;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80006c6:	829a      	strh	r2, [r3, #20]
	ina->curDiv = 10;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	220a      	movs	r2, #10
 80006cc:	82da      	strh	r2, [r3, #22]
	ina->powMul = 2;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2202      	movs	r2, #2
 80006d2:	831a      	strh	r2, [r3, #24]

	INA219_WriteReg16(ina, INA219_REG_CALI, ina->calVal);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	8a9b      	ldrh	r3, [r3, #20]
 80006d8:	461a      	mov	r2, r3
 80006da:	2105      	movs	r1, #5
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f875 	bl	80007cc <INA219_WriteReg16>

	/* Write to config register */
	uint16_t conf = (0x2000) | (0x1000) | (0x0180) | (0x0018) | (0x0007);
 80006e2:	f243 139f 	movw	r3, #12703	; 0x319f
 80006e6:	81fb      	strh	r3, [r7, #14]
	INA219_WriteReg16(ina, INA219_REG_CONF, conf);
 80006e8:	89fb      	ldrh	r3, [r7, #14]
 80006ea:	461a      	mov	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f86c 	bl	80007cc <INA219_WriteReg16>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <INA219_Read>:

void INA219_Read(INA219 *ina) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	uint16_t regRaw;
	int16_t regVal;

	/* Bus voltage */
	INA219_ReadReg16(ina, INA219_REG_BUS, &regRaw);
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	461a      	mov	r2, r3
 800070a:	2102      	movs	r1, #2
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f000 f87d 	bl	800080c <INA219_ReadReg16>
	regVal = (int16_t) ((regRaw >> 3) * 4);
 8000712:	89bb      	ldrh	r3, [r7, #12]
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	b29b      	uxth	r3, r3
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	b29b      	uxth	r3, r3
 800071c:	81fb      	strh	r3, [r7, #14]
	ina->voltageBusmV = (float) regVal;
 800071e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000722:	ee07 3a90 	vmov	s15, r3
 8000726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Shunt voltage */
	INA219_ReadReg16(ina, INA219_REG_SHNT, &regRaw);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	461a      	mov	r2, r3
 8000736:	2101      	movs	r1, #1
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f867 	bl	800080c <INA219_ReadReg16>
	ina->voltageShuntmV = ((int16_t) regRaw) * 0.01f;
 800073e:	89bb      	ldrh	r3, [r7, #12]
 8000740:	b21b      	sxth	r3, r3
 8000742:	ee07 3a90 	vmov	s15, r3
 8000746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80007c8 <INA219_Read+0xcc>
 800074e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	edc3 7a03 	vstr	s15, [r3, #12]

	/*
	 * FROM ADAFRUIT DRIVERL: Sharp load may reset INA219, which also resets cal register. Thus, always set to make sure...
	 */
	INA219_WriteReg16(ina, INA219_REG_CALI, ina->calVal);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	8a9b      	ldrh	r3, [r3, #20]
 800075c:	461a      	mov	r2, r3
 800075e:	2105      	movs	r1, #5
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f833 	bl	80007cc <INA219_WriteReg16>

	/* Current */
	INA219_ReadReg16(ina, INA219_REG_CUR, &regRaw);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	461a      	mov	r2, r3
 800076c:	2104      	movs	r1, #4
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 f84c 	bl	800080c <INA219_ReadReg16>
	ina->currentmA = ((int16_t) regRaw) / ((float) ina->curDiv);
 8000774:	89bb      	ldrh	r3, [r7, #12]
 8000776:	b21b      	sxth	r3, r3
 8000778:	ee07 3a90 	vmov	s15, r3
 800077c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	8adb      	ldrh	r3, [r3, #22]
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800078c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Power */
	INA219_ReadReg16(ina, INA219_REG_PWR, &regRaw);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	461a      	mov	r2, r3
 800079c:	2103      	movs	r1, #3
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 f834 	bl	800080c <INA219_ReadReg16>
	ina->powermW = ((int16_t) regRaw) * ina->powMul;
 80007a4:	89bb      	ldrh	r3, [r7, #12]
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	8b1b      	ldrh	r3, [r3, #24]
 80007ae:	fb03 f302 	mul.w	r3, r3, r2
 80007b2:	ee07 3a90 	vmov	s15, r3
 80007b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80007c0:	bf00      	nop
 80007c2:	3710      	adds	r7, #16
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	3c23d70a 	.word	0x3c23d70a

080007cc <INA219_WriteReg16>:

void INA219_WriteReg16(INA219 *ina, uint8_t reg, uint16_t val) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af02      	add	r7, sp, #8
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
 80007d8:	4613      	mov	r3, r2
 80007da:	803b      	strh	r3, [r7, #0]
	uint8_t txBuf[3];
	txBuf[0] = reg;
 80007dc:	78fb      	ldrb	r3, [r7, #3]
 80007de:	733b      	strb	r3, [r7, #12]
	txBuf[1] = (val >> 8) & 0xFF;
 80007e0:	883b      	ldrh	r3, [r7, #0]
 80007e2:	0a1b      	lsrs	r3, r3, #8
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	737b      	strb	r3, [r7, #13]
	txBuf[2] = val & 0xFF;
 80007ea:	883b      	ldrh	r3, [r7, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(ina->I2Chandle, INA219_I2C_ADDR, txBuf, 3, INA219_I2C_TIMEOUT);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	f107 020c 	add.w	r2, r7, #12
 80007f8:	2364      	movs	r3, #100	; 0x64
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2303      	movs	r3, #3
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	f002 fd00 	bl	8003204 <HAL_I2C_Master_Transmit>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <INA219_ReadReg16>:

void INA219_ReadReg16(INA219 *ina, uint8_t reg, uint16_t *val) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af04      	add	r7, sp, #16
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	460b      	mov	r3, r1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	72fb      	strb	r3, [r7, #11]
	uint8_t rxBuf[2];
	HAL_I2C_Mem_Read(ina->I2Chandle, INA219_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, rxBuf, 2, INA219_I2C_TIMEOUT);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	7afb      	ldrb	r3, [r7, #11]
 8000820:	b29a      	uxth	r2, r3
 8000822:	2364      	movs	r3, #100	; 0x64
 8000824:	9302      	str	r3, [sp, #8]
 8000826:	2302      	movs	r3, #2
 8000828:	9301      	str	r3, [sp, #4]
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2301      	movs	r3, #1
 8000832:	2180      	movs	r1, #128	; 0x80
 8000834:	f002 fdda 	bl	80033ec <HAL_I2C_Mem_Read>

	*val = (rxBuf[0] << 8) | rxBuf[1];
 8000838:	7d3b      	ldrb	r3, [r7, #20]
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	b21a      	sxth	r2, r3
 800083e:	7d7b      	ldrb	r3, [r7, #21]
 8000840:	b21b      	sxth	r3, r3
 8000842:	4313      	orrs	r3, r2
 8000844:	b21b      	sxth	r3, r3
 8000846:	b29a      	uxth	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	801a      	strh	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <printDebug>:
static void MX_USART3_UART_Init(void);

/* Peripherals */
INA219 ina;

void printDebug(char *buf) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) buf, strlen(buf), HAL_MAX_DELAY);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fd3f 	bl	80002e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <printDebug+0x28>)
 800086e:	f006 fb6f 	bl	8006f50 <HAL_UART_Transmit>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	240004c4 	.word	0x240004c4

08000880 <main>:

int main(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b0ae      	sub	sp, #184	; 0xb8
 8000884:	af08      	add	r7, sp, #32
  HAL_Init();
 8000886:	f001 f981 	bl	8001b8c <HAL_Init>

  SystemClock_Config();
 800088a:	f000 f89b 	bl	80009c4 <SystemClock_Config>

  MX_GPIO_Init();
 800088e:	f000 fcf9 	bl	8001284 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000892:	f000 f98f 	bl	8000bb4 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000896:	f000 f9ef 	bl	8000c78 <MX_I2C1_Init>
  MX_I2C2_Init();
 800089a:	f000 fa2d 	bl	8000cf8 <MX_I2C2_Init>
  MX_I2C3_Init();
 800089e:	f000 fa6b 	bl	8000d78 <MX_I2C3_Init>
  MX_SPI1_Init();
 80008a2:	f000 faa9 	bl	8000df8 <MX_SPI1_Init>
  MX_TIM4_Init();
 80008a6:	f000 fafd 	bl	8000ea4 <MX_TIM4_Init>
  MX_UART4_Init();
 80008aa:	f000 fb6f 	bl	8000f8c <MX_UART4_Init>
  MX_UART5_Init();
 80008ae:	f000 fbb9 	bl	8001024 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80008b2:	f000 fc03 	bl	80010bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008b6:	f000 fc4d 	bl	8001154 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80008ba:	f000 fc97 	bl	80011ec <MX_USART3_UART_Init>

  /* Initialise current/voltage/power sensor */
  INA219_Init32V2A(&ina, &hi2c2);
 80008be:	493d      	ldr	r1, [pc, #244]	; (80009b4 <main+0x134>)
 80008c0:	483d      	ldr	r0, [pc, #244]	; (80009b8 <main+0x138>)
 80008c2:	f7ff fee5 	bl	8000690 <INA219_Init32V2A>

  uint32_t timerPVI = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t timerLED = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t timerDbg = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  const uint32_t SAMPLE_TIME_PVI_MS =  100;
 80008d8:	2364      	movs	r3, #100	; 0x64
 80008da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const uint32_t SAMPLE_TIME_LED_MS = 1000;
 80008de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const uint32_t SAMPLE_TIME_DBG_MS =  250;
 80008e6:	23fa      	movs	r3, #250	; 0xfa
 80008e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  while (1)
  {
	  if (HAL_GetTick() - timerPVI >= SAMPLE_TIME_PVI_MS) {
 80008ec:	f001 f9d0 	bl	8001c90 <HAL_GetTick>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d809      	bhi.n	8000914 <main+0x94>
		  INA219_Read(&ina);
 8000900:	482d      	ldr	r0, [pc, #180]	; (80009b8 <main+0x138>)
 8000902:	f7ff fefb 	bl	80006fc <INA219_Read>

		  timerPVI += SAMPLE_TIME_PVI_MS;
 8000906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800090a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800090e:	4413      	add	r3, r2
 8000910:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  }

	  if (HAL_GetTick() - timerLED >= SAMPLE_TIME_LED_MS) {
 8000914:	f001 f9bc 	bl	8001c90 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000924:	429a      	cmp	r2, r3
 8000926:	d80a      	bhi.n	800093e <main+0xbe>
		  HAL_GPIO_TogglePin(GPIOB, LEDA_Pin);
 8000928:	2101      	movs	r1, #1
 800092a:	4824      	ldr	r0, [pc, #144]	; (80009bc <main+0x13c>)
 800092c:	f002 fbbf 	bl	80030ae <HAL_GPIO_TogglePin>

		  timerLED += SAMPLE_TIME_LED_MS;
 8000930:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000938:	4413      	add	r3, r2
 800093a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  }

	  if (HAL_GetTick() - timerDbg >= SAMPLE_TIME_DBG_MS) {
 800093e:	f001 f9a7 	bl	8001c90 <HAL_GetTick>
 8000942:	4602      	mov	r2, r0
 8000944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800094e:	429a      	cmp	r2, r3
 8000950:	d8cc      	bhi.n	80008ec <main+0x6c>
		  char buf[128];

		  sprintf(buf, "[%ld] Vbus (mV): %f | Vshnt (mV): %f | Current (mA): %f | Power (mW): %f\r\n",
 8000952:	f001 f99d 	bl	8001c90 <HAL_GetTick>
 8000956:	4602      	mov	r2, r0
				  	  HAL_GetTick(),
				  	  ina.voltageBusmV,
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <main+0x138>)
 800095a:	edd3 7a02 	vldr	s15, [r3, #8]
		  sprintf(buf, "[%ld] Vbus (mV): %f | Vshnt (mV): %f | Current (mA): %f | Power (mW): %f\r\n",
 800095e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					  ina.voltageShuntmV,
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <main+0x138>)
 8000964:	edd3 6a03 	vldr	s13, [r3, #12]
		  sprintf(buf, "[%ld] Vbus (mV): %f | Vshnt (mV): %f | Current (mA): %f | Power (mW): %f\r\n",
 8000968:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
					  ina.currentmA,
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <main+0x138>)
 800096e:	edd3 5a01 	vldr	s11, [r3, #4]
		  sprintf(buf, "[%ld] Vbus (mV): %f | Vshnt (mV): %f | Current (mA): %f | Power (mW): %f\r\n",
 8000972:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
					  ina.powermW);
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <main+0x138>)
 8000978:	edd3 4a04 	vldr	s9, [r3, #16]
		  sprintf(buf, "[%ld] Vbus (mV): %f | Vshnt (mV): %f | Current (mA): %f | Power (mW): %f\r\n",
 800097c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000980:	463b      	mov	r3, r7
 8000982:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000986:	ed8d 5b04 	vstr	d5, [sp, #16]
 800098a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800098e:	ed8d 7b00 	vstr	d7, [sp]
 8000992:	490b      	ldr	r1, [pc, #44]	; (80009c0 <main+0x140>)
 8000994:	4618      	mov	r0, r3
 8000996:	f009 fbe7 	bl	800a168 <siprintf>

		  printDebug(buf);
 800099a:	463b      	mov	r3, r7
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff59 	bl	8000854 <printDebug>

		  timerDbg += SAMPLE_TIME_DBG_MS;
 80009a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80009a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80009aa:	4413      	add	r3, r2
 80009ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (HAL_GetTick() - timerPVI >= SAMPLE_TIME_PVI_MS) {
 80009b0:	e79c      	b.n	80008ec <main+0x6c>
 80009b2:	bf00      	nop
 80009b4:	2400036c 	.word	0x2400036c
 80009b8:	240003b8 	.word	0x240003b8
 80009bc:	58020400 	.word	0x58020400
 80009c0:	0800b868 	.word	0x0800b868

080009c4 <SystemClock_Config>:
	  }
  }
}

void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0cc      	sub	sp, #304	; 0x130
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009ce:	224c      	movs	r2, #76	; 0x4c
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 ff84 	bl	80098e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009dc:	2220      	movs	r2, #32
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f008 ff7d 	bl	80098e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	4618      	mov	r0, r3
 80009ec:	23bc      	movs	r3, #188	; 0xbc
 80009ee:	461a      	mov	r2, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	f008 ff75 	bl	80098e0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009f6:	2002      	movs	r0, #2
 80009f8:	f003 f872 	bl	8003ae0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	4b68      	ldr	r3, [pc, #416]	; (8000ba4 <SystemClock_Config+0x1e0>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	4a67      	ldr	r2, [pc, #412]	; (8000ba4 <SystemClock_Config+0x1e0>)
 8000a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a0c:	6193      	str	r3, [r2, #24]
 8000a0e:	4b65      	ldr	r3, [pc, #404]	; (8000ba4 <SystemClock_Config+0x1e0>)
 8000a10:	699b      	ldr	r3, [r3, #24]
 8000a12:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	4b63      	ldr	r3, [pc, #396]	; (8000ba8 <SystemClock_Config+0x1e4>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	4a62      	ldr	r2, [pc, #392]	; (8000ba8 <SystemClock_Config+0x1e4>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a26:	4b60      	ldr	r3, [pc, #384]	; (8000ba8 <SystemClock_Config+0x1e4>)
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2a:	f003 0201 	and.w	r2, r3, #1
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a36:	bf00      	nop
 8000a38:	4b5a      	ldr	r3, [pc, #360]	; (8000ba4 <SystemClock_Config+0x1e0>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a44:	d1f8      	bne.n	8000a38 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000a46:	4b59      	ldr	r3, [pc, #356]	; (8000bac <SystemClock_Config+0x1e8>)
 8000a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4a:	f023 0303 	bic.w	r3, r3, #3
 8000a4e:	4a57      	ldr	r2, [pc, #348]	; (8000bac <SystemClock_Config+0x1e8>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a56:	2303      	movs	r3, #3
 8000a58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2320      	movs	r3, #32
 8000a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a76:	2302      	movs	r3, #2
 8000a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a82:	2348      	movs	r3, #72	; 0x48
 8000a84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f003 f84d 	bl	8003b50 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000abc:	f000 fc8a 	bl	80013d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	233f      	movs	r3, #63	; 0x3f
 8000ac2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ad8:	2340      	movs	r3, #64	; 0x40
 8000ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ade:	2340      	movs	r3, #64	; 0x40
 8000ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aec:	2340      	movs	r3, #64	; 0x40
 8000aee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000af2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000af6:	2103      	movs	r1, #3
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fbe1 	bl	80042c0 <HAL_RCC_ClockConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x144>
  {
    Error_Handler();
 8000b04:	f000 fc66 	bl	80013d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART2
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4a28      	ldr	r2, [pc, #160]	; (8000bb0 <SystemClock_Config+0x1ec>)
 8000b0e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2202      	movs	r2, #2
 8000b16:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	220c      	movs	r2, #12
 8000b1e:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	2201      	movs	r2, #1
 8000b26:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	2202      	movs	r2, #2
 8000b36:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	22c0      	movs	r2, #192	; 0xc0
 8000b3e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b40:	f107 0308 	add.w	r3, r7, #8
 8000b44:	2220      	movs	r2, #32
 8000b46:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2200      	movs	r2, #0
 8000b56:	651a      	str	r2, [r3, #80]	; 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b60:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b62:	f107 0308 	add.w	r3, r7, #8
 8000b66:	2200      	movs	r2, #0
 8000b68:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	2200      	movs	r2, #0
 8000b70:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	2200      	movs	r2, #0
 8000b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	2200      	movs	r2, #0
 8000b82:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 fef6 	bl	800497c <HAL_RCCEx_PeriphCLKConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x1d6>
  {
    Error_Handler();
 8000b96:	f000 fc1d 	bl	80013d4 <Error_Handler>
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	58024800 	.word	0x58024800
 8000ba8:	58000400 	.word	0x58000400
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	8008100b 	.word	0x8008100b

08000bb4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8000bcc:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000bce:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <MX_ADC3_Init+0xc0>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000bd4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bd8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bda:	4b25      	ldr	r3, [pc, #148]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000be8:	2204      	movs	r2, #4
 8000bea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c2a:	4811      	ldr	r0, [pc, #68]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000c2c:	f001 f9de 	bl	8001fec <HAL_ADC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000c36:	f000 fbcd 	bl	80013d4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c3e:	2306      	movs	r3, #6
 8000c40:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c46:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c4a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_ADC3_Init+0xbc>)
 8000c5a:	f001 fb67 	bl	800232c <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8000c64:	f000 fbb6 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	24000460 	.word	0x24000460
 8000c74:	58026000 	.word	0x58026000

08000c78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_I2C1_Init+0x74>)
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	; (8000cf0 <MX_I2C1_Init+0x78>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x209093DD;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_I2C1_Init+0x74>)
 8000c84:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <MX_I2C1_Init+0x7c>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_I2C1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_I2C1_Init+0x74>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_I2C1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_I2C1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_I2C1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <MX_I2C1_Init+0x74>)
 8000cb4:	f002 fa16 	bl	80030e4 <HAL_I2C_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cbe:	f000 fb89 	bl	80013d4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <MX_I2C1_Init+0x74>)
 8000cc6:	f002 fe73 	bl	80039b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cd0:	f000 fb80 	bl	80013d4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_I2C1_Init+0x74>)
 8000cd8:	f002 feb5 	bl	8003a46 <HAL_I2CEx_ConfigDigitalFilter>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 fb77 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000320 	.word	0x24000320
 8000cf0:	40005400 	.word	0x40005400
 8000cf4:	209093dd 	.word	0x209093dd

08000cf8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <MX_I2C2_Init+0x78>)
 8000d00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x209093DD;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <MX_I2C2_Init+0x7c>)
 8000d06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d34:	f002 f9d6 	bl	80030e4 <HAL_I2C_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d3e:	f000 fb49 	bl	80013d4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d46:	f002 fe33 	bl	80039b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d50:	f000 fb40 	bl	80013d4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_I2C2_Init+0x74>)
 8000d58:	f002 fe75 	bl	8003a46 <HAL_I2CEx_ConfigDigitalFilter>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 fb37 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2400036c 	.word	0x2400036c
 8000d70:	40005800 	.word	0x40005800
 8000d74:	209093dd 	.word	0x209093dd

08000d78 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_I2C3_Init+0x74>)
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <MX_I2C3_Init+0x78>)
 8000d80:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x209093DD;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_I2C3_Init+0x74>)
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <MX_I2C3_Init+0x7c>)
 8000d86:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_I2C3_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_I2C3_Init+0x74>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <MX_I2C3_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_I2C3_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_I2C3_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_I2C3_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_I2C3_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <MX_I2C3_Init+0x74>)
 8000db4:	f002 f996 	bl	80030e4 <HAL_I2C_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000dbe:	f000 fb09 	bl	80013d4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <MX_I2C3_Init+0x74>)
 8000dc6:	f002 fdf3 	bl	80039b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000dd0:	f000 fb00 	bl	80013d4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_I2C3_Init+0x74>)
 8000dd8:	f002 fe35 	bl	8003a46 <HAL_I2CEx_ConfigDigitalFilter>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 faf7 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	24000208 	.word	0x24000208
 8000df0:	40005c00 	.word	0x40005c00
 8000df4:	209093dd 	.word	0x209093dd

08000df8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000dfe:	4a28      	ldr	r2, [pc, #160]	; (8000ea0 <MX_SPI1_Init+0xa8>)
 8000e00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e12:	2203      	movs	r2, #3
 8000e14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_SPI1_Init+0xa4>)
 8000e88:	f005 fc18 	bl	80066bc <HAL_SPI_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000e92:	f000 fa9f 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	240005dc 	.word	0x240005dc
 8000ea0:	40013000 	.word	0x40013000

08000ea4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000ec4:	4a30      	ldr	r2, [pc, #192]	; (8000f88 <MX_TIM4_Init+0xe4>)
 8000ec6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000ee6:	4827      	ldr	r0, [pc, #156]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000ee8:	f005 fcfb 	bl	80068e2 <HAL_TIM_IC_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ef2:	f000 fa6f 	bl	80013d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	481f      	ldr	r0, [pc, #124]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000f06:	f005 ff77 	bl	8006df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000f10:	f000 fa60 	bl	80013d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2200      	movs	r2, #0
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4816      	ldr	r0, [pc, #88]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000f2c:	f005 fd04 	bl	8006938 <HAL_TIM_IC_ConfigChannel>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000f36:	f000 fa4d 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4810      	ldr	r0, [pc, #64]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000f42:	f005 fcf9 	bl	8006938 <HAL_TIM_IC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000f4c:	f000 fa42 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2208      	movs	r2, #8
 8000f54:	4619      	mov	r1, r3
 8000f56:	480b      	ldr	r0, [pc, #44]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000f58:	f005 fcee 	bl	8006938 <HAL_TIM_IC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM4_Init+0xc2>
  {
    Error_Handler();
 8000f62:	f000 fa37 	bl	80013d4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	220c      	movs	r2, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_TIM4_Init+0xe0>)
 8000f6e:	f005 fce3 	bl	8006938 <HAL_TIM_IC_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f78:	f000 fa2c 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	24000254 	.word	0x24000254
 8000f88:	40000800 	.word	0x40000800

08000f8c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f90:	4b22      	ldr	r3, [pc, #136]	; (800101c <MX_UART4_Init+0x90>)
 8000f92:	4a23      	ldr	r2, [pc, #140]	; (8001020 <MX_UART4_Init+0x94>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f96:	4b21      	ldr	r3, [pc, #132]	; (800101c <MX_UART4_Init+0x90>)
 8000f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_UART4_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_UART4_Init+0x90>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <MX_UART4_Init+0x90>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_UART4_Init+0x90>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_UART4_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_UART4_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <MX_UART4_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_UART4_Init+0x90>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <MX_UART4_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000fd4:	4811      	ldr	r0, [pc, #68]	; (800101c <MX_UART4_Init+0x90>)
 8000fd6:	f005 ff6b 	bl	8006eb0 <HAL_UART_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000fe0:	f000 f9f8 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_UART4_Init+0x90>)
 8000fe8:	f008 fb6b 	bl	80096c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ff2:	f000 f9ef 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <MX_UART4_Init+0x90>)
 8000ffa:	f008 fba0 	bl	800973e <HAL_UARTEx_SetRxFifoThreshold>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001004:	f000 f9e6 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_UART4_Init+0x90>)
 800100a:	f008 fb21 	bl	8009650 <HAL_UARTEx_DisableFifoMode>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001014:	f000 f9de 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	24000550 	.word	0x24000550
 8001020:	40004c00 	.word	0x40004c00

08001024 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <MX_UART5_Init+0x90>)
 800102a:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <MX_UART5_Init+0x94>)
 800102c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_UART5_Init+0x90>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_UART5_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_UART5_Init+0x90>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_UART5_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_UART5_Init+0x90>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_UART5_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_UART5_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_UART5_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_UART5_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_UART5_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800106c:	4811      	ldr	r0, [pc, #68]	; (80010b4 <MX_UART5_Init+0x90>)
 800106e:	f005 ff1f 	bl	8006eb0 <HAL_UART_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001078:	f000 f9ac 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_UART5_Init+0x90>)
 8001080:	f008 fb1f 	bl	80096c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800108a:	f000 f9a3 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108e:	2100      	movs	r1, #0
 8001090:	4808      	ldr	r0, [pc, #32]	; (80010b4 <MX_UART5_Init+0x90>)
 8001092:	f008 fb54 	bl	800973e <HAL_UARTEx_SetRxFifoThreshold>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800109c:	f000 f99a 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_UART5_Init+0x90>)
 80010a2:	f008 fad5 	bl	8009650 <HAL_UARTEx_DisableFifoMode>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80010ac:	f000 f992 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	240003d4 	.word	0x240003d4
 80010b8:	40005000 	.word	0x40005000

080010bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <MX_USART1_UART_Init+0x94>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART1_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART1_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001104:	4811      	ldr	r0, [pc, #68]	; (800114c <MX_USART1_UART_Init+0x90>)
 8001106:	f005 fed3 	bl	8006eb0 <HAL_UART_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001110:	f000 f960 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_USART1_UART_Init+0x90>)
 8001118:	f008 fad3 	bl	80096c2 <HAL_UARTEx_SetTxFifoThreshold>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001122:	f000 f957 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001126:	2100      	movs	r1, #0
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <MX_USART1_UART_Init+0x90>)
 800112a:	f008 fb08 	bl	800973e <HAL_UARTEx_SetRxFifoThreshold>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001134:	f000 f94e 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_USART1_UART_Init+0x90>)
 800113a:	f008 fa89 	bl	8009650 <HAL_UARTEx_DisableFifoMode>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001144:	f000 f946 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	240004c4 	.word	0x240004c4
 8001150:	40011000 	.word	0x40011000

08001154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 800115a:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <MX_USART2_UART_Init+0x94>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119c:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 800119e:	f005 fe87 	bl	8006eb0 <HAL_UART_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011a8:	f000 f914 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 80011b0:	f008 fa87 	bl	80096c2 <HAL_UARTEx_SetTxFifoThreshold>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011ba:	f000 f90b 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011be:	2100      	movs	r1, #0
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 80011c2:	f008 fabc 	bl	800973e <HAL_UARTEx_SetRxFifoThreshold>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011cc:	f000 f902 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011d0:	4804      	ldr	r0, [pc, #16]	; (80011e4 <MX_USART2_UART_Init+0x90>)
 80011d2:	f008 fa3d 	bl	8009650 <HAL_UARTEx_DisableFifoMode>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011dc:	f000 f8fa 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	24000664 	.word	0x24000664
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <MX_USART3_UART_Init+0x90>)
 80011f2:	4a23      	ldr	r2, [pc, #140]	; (8001280 <MX_USART3_UART_Init+0x94>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <MX_USART3_UART_Init+0x90>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b1f      	ldr	r3, [pc, #124]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800120a:	4b1c      	ldr	r3, [pc, #112]	; (800127c <MX_USART3_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_USART3_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001236:	f005 fe3b 	bl	8006eb0 <HAL_UART_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001240:	f000 f8c8 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001244:	2100      	movs	r1, #0
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_USART3_UART_Init+0x90>)
 8001248:	f008 fa3b 	bl	80096c2 <HAL_UARTEx_SetTxFifoThreshold>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001252:	f000 f8bf 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001256:	2100      	movs	r1, #0
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <MX_USART3_UART_Init+0x90>)
 800125a:	f008 fa70 	bl	800973e <HAL_UARTEx_SetRxFifoThreshold>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001264:	f000 f8b6 	bl	80013d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_USART3_UART_Init+0x90>)
 800126a:	f008 f9f1 	bl	8009650 <HAL_UARTEx_DisableFifoMode>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001274:	f000 f8ae 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24000294 	.word	0x24000294
 8001280:	40004800 	.word	0x40004800

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129a:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <MX_GPIO_Init+0x140>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a0:	4a48      	ldr	r2, [pc, #288]	; (80013c4 <MX_GPIO_Init+0x140>)
 80012a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012aa:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <MX_GPIO_Init+0x140>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b8:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <MX_GPIO_Init+0x140>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	4a41      	ldr	r2, [pc, #260]	; (80013c4 <MX_GPIO_Init+0x140>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c8:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <MX_GPIO_Init+0x140>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <MX_GPIO_Init+0x140>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012dc:	4a39      	ldr	r2, [pc, #228]	; (80013c4 <MX_GPIO_Init+0x140>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <MX_GPIO_Init+0x140>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <MX_GPIO_Init+0x140>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fa:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <MX_GPIO_Init+0x140>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <MX_GPIO_Init+0x140>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	4b2c      	ldr	r3, [pc, #176]	; (80013c4 <MX_GPIO_Init+0x140>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001318:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <MX_GPIO_Init+0x140>)
 800131a:	f043 0308 	orr.w	r3, r3, #8
 800131e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001322:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <MX_GPIO_Init+0x140>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_FLASH_GPIO_Port, SPI1_CS_FLASH_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2110      	movs	r1, #16
 8001334:	4824      	ldr	r0, [pc, #144]	; (80013c8 <MX_GPIO_Init+0x144>)
 8001336:	f001 fea1 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin 
 800133a:	2200      	movs	r2, #0
 800133c:	213f      	movs	r1, #63	; 0x3f
 800133e:	4823      	ldr	r0, [pc, #140]	; (80013cc <MX_GPIO_Init+0x148>)
 8001340:	f001 fe9c 	bl	800307c <HAL_GPIO_WritePin>
                          |LEDE_Pin|LEDF_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, NAVCRXA_Pin|NAVCRXB_Pin|NAVCRXC_Pin|NAVRXD_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	210f      	movs	r1, #15
 8001348:	4821      	ldr	r0, [pc, #132]	; (80013d0 <MX_GPIO_Init+0x14c>)
 800134a:	f001 fe97 	bl	800307c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_FLASH_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_FLASH_Pin;
 800134e:	2310      	movs	r3, #16
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_FLASH_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4818      	ldr	r0, [pc, #96]	; (80013c8 <MX_GPIO_Init+0x144>)
 8001366:	f001 fcd9 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDA_Pin LEDB_Pin LEDC_Pin LEDD_Pin 
                           LEDE_Pin LEDF_Pin */
  GPIO_InitStruct.Pin = LEDA_Pin|LEDB_Pin|LEDC_Pin|LEDD_Pin 
 800136a:	233f      	movs	r3, #63	; 0x3f
 800136c:	617b      	str	r3, [r7, #20]
                          |LEDE_Pin|LEDF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	4812      	ldr	r0, [pc, #72]	; (80013cc <MX_GPIO_Init+0x148>)
 8001382:	f001 fccb 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : NAVCRXA_Pin NAVCRXB_Pin NAVCRXC_Pin NAVRXD_Pin */
  GPIO_InitStruct.Pin = NAVCRXA_Pin|NAVCRXB_Pin|NAVCRXC_Pin|NAVRXD_Pin;
 8001386:	230f      	movs	r3, #15
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_GPIO_Init+0x14c>)
 800139e:	f001 fcbd 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : NAVCTXA_Pin NAVCTXB_Pin NAVCTXC_Pin NAVCTXD_Pin */
  GPIO_InitStruct.Pin = NAVCTXA_Pin|NAVCTXB_Pin|NAVCTXC_Pin|NAVCTXD_Pin;
 80013a2:	23f0      	movs	r3, #240	; 0xf0
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4806      	ldr	r0, [pc, #24]	; (80013d0 <MX_GPIO_Init+0x14c>)
 80013b6:	f001 fcb1 	bl	8002d1c <HAL_GPIO_Init>

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	58024400 	.word	0x58024400
 80013c8:	58020000 	.word	0x58020000
 80013cc:	58020400 	.word	0x58020400
 80013d0:	58020c00 	.word	0x58020c00

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_MspInit+0x30>)
 80013ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x30>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x30>)
 80013fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	58024400 	.word	0x58024400

08001418 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a18      	ldr	r2, [pc, #96]	; (8001488 <HAL_ADC_MspInit+0x70>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d129      	bne.n	800147e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_ADC_MspInit+0x74>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	4a16      	ldr	r2, [pc, #88]	; (800148c <HAL_ADC_MspInit+0x74>)
 8001432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <HAL_ADC_MspInit+0x74>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <HAL_ADC_MspInit+0x74>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144e:	4a0f      	ldr	r2, [pc, #60]	; (800148c <HAL_ADC_MspInit+0x74>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_ADC_MspInit+0x74>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration    
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1 
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001466:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800146a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800146e:	f000 fc27 	bl	8001cc0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001472:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001476:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800147a:	f000 fc21 	bl	8001cc0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	58026000 	.word	0x58026000
 800148c:	58024400 	.word	0x58024400

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08e      	sub	sp, #56	; 0x38
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a5f      	ldr	r2, [pc, #380]	; (800162c <HAL_I2C_MspInit+0x19c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12e      	bne.n	8001510 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b5f      	ldr	r3, [pc, #380]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a5d      	ldr	r2, [pc, #372]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	623b      	str	r3, [r7, #32]
 80014ce:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d0:	23c0      	movs	r3, #192	; 0xc0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014e0:	2304      	movs	r3, #4
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	4619      	mov	r1, r3
 80014ea:	4852      	ldr	r0, [pc, #328]	; (8001634 <HAL_I2C_MspInit+0x1a4>)
 80014ec:	f001 fc16 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f0:	4b4f      	ldr	r3, [pc, #316]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 80014f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f6:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 80014f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001500:	4b4b      	ldr	r3, [pc, #300]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 8001502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150a:	61fb      	str	r3, [r7, #28]
 800150c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800150e:	e088      	b.n	8001622 <HAL_I2C_MspInit+0x192>
  else if(hi2c->Instance==I2C2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a48      	ldr	r2, [pc, #288]	; (8001638 <HAL_I2C_MspInit+0x1a8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d12f      	bne.n	800157a <HAL_I2C_MspInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b45      	ldr	r3, [pc, #276]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	4a43      	ldr	r2, [pc, #268]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001538:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153e:	2312      	movs	r3, #18
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800154a:	2304      	movs	r3, #4
 800154c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001552:	4619      	mov	r1, r3
 8001554:	4837      	ldr	r0, [pc, #220]	; (8001634 <HAL_I2C_MspInit+0x1a4>)
 8001556:	f001 fbe1 	bl	8002d1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 800155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001560:	4a33      	ldr	r2, [pc, #204]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 8001562:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 800156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697b      	ldr	r3, [r7, #20]
}
 8001578:	e053      	b.n	8001622 <HAL_I2C_MspInit+0x192>
  else if(hi2c->Instance==I2C3)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a2f      	ldr	r2, [pc, #188]	; (800163c <HAL_I2C_MspInit+0x1ac>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d14e      	bne.n	8001622 <HAL_I2C_MspInit+0x192>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 8001586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158a:	4a29      	ldr	r2, [pc, #164]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 8001596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	4a21      	ldr	r2, [pc, #132]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b2:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 80015b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c6:	2312      	movs	r3, #18
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015d2:	2304      	movs	r3, #4
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4818      	ldr	r0, [pc, #96]	; (8001640 <HAL_I2C_MspInit+0x1b0>)
 80015de:	f001 fb9d 	bl	8002d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e8:	2312      	movs	r3, #18
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015f4:	2304      	movs	r3, #4
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4811      	ldr	r0, [pc, #68]	; (8001644 <HAL_I2C_MspInit+0x1b4>)
 8001600:	f001 fb8c 	bl	8002d1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 8001606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 800160c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001610:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_I2C_MspInit+0x1a0>)
 8001616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800161a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
}
 8001622:	bf00      	nop
 8001624:	3738      	adds	r7, #56	; 0x38
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40005400 	.word	0x40005400
 8001630:	58024400 	.word	0x58024400
 8001634:	58020400 	.word	0x58020400
 8001638:	40005800 	.word	0x40005800
 800163c:	40005c00 	.word	0x40005c00
 8001640:	58020800 	.word	0x58020800
 8001644:	58020000 	.word	0x58020000

08001648 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <HAL_SPI_MspInit+0x88>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d12d      	bne.n	80016c6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 800166c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001670:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 8001672:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001676:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 800167c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_SPI_MspInit+0x8c>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016a6:	23e0      	movs	r3, #224	; 0xe0
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016b6:	2305      	movs	r3, #5
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_SPI_MspInit+0x90>)
 80016c2:	f001 fb2b 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40013000 	.word	0x40013000
 80016d4:	58024400 	.word	0x58024400
 80016d8:	58020000 	.word	0x58020000

080016dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <HAL_TIM_IC_MspInit+0x88>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12e      	bne.n	800175c <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <HAL_TIM_IC_MspInit+0x8c>)
 8001700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <HAL_TIM_IC_MspInit+0x8c>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_TIM_IC_MspInit+0x8c>)
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_TIM_IC_MspInit+0x8c>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	4a11      	ldr	r2, [pc, #68]	; (8001768 <HAL_TIM_IC_MspInit+0x8c>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_TIM_IC_MspInit+0x8c>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800173a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800174c:	2302      	movs	r3, #2
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <HAL_TIM_IC_MspInit+0x90>)
 8001758:	f001 fae0 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800175c:	bf00      	nop
 800175e:	3728      	adds	r7, #40	; 0x28
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40000800 	.word	0x40000800
 8001768:	58024400 	.word	0x58024400
 800176c:	58020c00 	.word	0x58020c00

08001770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b092      	sub	sp, #72	; 0x48
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a83      	ldr	r2, [pc, #524]	; (800199c <HAL_UART_MspInit+0x22c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d12e      	bne.n	80017f0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001792:	4b83      	ldr	r3, [pc, #524]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001798:	4a81      	ldr	r2, [pc, #516]	; (80019a0 <HAL_UART_MspInit+0x230>)
 800179a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800179e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017a2:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80017a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
 80017ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c0:	4b77      	ldr	r3, [pc, #476]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80017c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ce:	2303      	movs	r3, #3
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017de:	2308      	movs	r3, #8
 80017e0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017e6:	4619      	mov	r1, r3
 80017e8:	486e      	ldr	r0, [pc, #440]	; (80019a4 <HAL_UART_MspInit+0x234>)
 80017ea:	f001 fa97 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ee:	e0d1      	b.n	8001994 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==UART5)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a6c      	ldr	r2, [pc, #432]	; (80019a8 <HAL_UART_MspInit+0x238>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12f      	bne.n	800185a <HAL_UART_MspInit+0xea>
    __HAL_RCC_UART5_CLK_ENABLE();
 80017fa:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80017fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001800:	4a67      	ldr	r2, [pc, #412]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001806:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800180a:	4b65      	ldr	r3, [pc, #404]	; (80019a0 <HAL_UART_MspInit+0x230>)
 800180c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001818:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <HAL_UART_MspInit+0x230>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181e:	4a60      	ldr	r2, [pc, #384]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001828:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_UART_MspInit+0x230>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
 8001834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001836:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001848:	230e      	movs	r3, #14
 800184a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001850:	4619      	mov	r1, r3
 8001852:	4856      	ldr	r0, [pc, #344]	; (80019ac <HAL_UART_MspInit+0x23c>)
 8001854:	f001 fa62 	bl	8002d1c <HAL_GPIO_Init>
}
 8001858:	e09c      	b.n	8001994 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a54      	ldr	r2, [pc, #336]	; (80019b0 <HAL_UART_MspInit+0x240>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d12f      	bne.n	80018c4 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001864:	4b4e      	ldr	r3, [pc, #312]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800186a:	4a4d      	ldr	r2, [pc, #308]	; (80019a0 <HAL_UART_MspInit+0x230>)
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001874:	4b4a      	ldr	r3, [pc, #296]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001888:	4a45      	ldr	r2, [pc, #276]	; (80019a0 <HAL_UART_MspInit+0x230>)
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001892:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018a0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80018b2:	2304      	movs	r3, #4
 80018b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ba:	4619      	mov	r1, r3
 80018bc:	483b      	ldr	r0, [pc, #236]	; (80019ac <HAL_UART_MspInit+0x23c>)
 80018be:	f001 fa2d 	bl	8002d1c <HAL_GPIO_Init>
}
 80018c2:	e067      	b.n	8001994 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <HAL_UART_MspInit+0x244>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12e      	bne.n	800192c <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ce:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80018d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018d4:	4a32      	ldr	r2, [pc, #200]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80018d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018de:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80018e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	4a2b      	ldr	r2, [pc, #172]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <HAL_UART_MspInit+0x230>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800190a:	230c      	movs	r3, #12
 800190c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800191a:	2307      	movs	r3, #7
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001922:	4619      	mov	r1, r3
 8001924:	481f      	ldr	r0, [pc, #124]	; (80019a4 <HAL_UART_MspInit+0x234>)
 8001926:	f001 f9f9 	bl	8002d1c <HAL_GPIO_Init>
}
 800192a:	e033      	b.n	8001994 <HAL_UART_MspInit+0x224>
  else if(huart->Instance==USART3)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <HAL_UART_MspInit+0x248>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d12e      	bne.n	8001994 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800193c:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <HAL_UART_MspInit+0x230>)
 800193e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001942:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800194c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195a:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <HAL_UART_MspInit+0x230>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_UART_MspInit+0x230>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001984:	2307      	movs	r3, #7
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800198c:	4619      	mov	r1, r3
 800198e:	480b      	ldr	r0, [pc, #44]	; (80019bc <HAL_UART_MspInit+0x24c>)
 8001990:	f001 f9c4 	bl	8002d1c <HAL_GPIO_Init>
}
 8001994:	bf00      	nop
 8001996:	3748      	adds	r7, #72	; 0x48
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40004c00 	.word	0x40004c00
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58020000 	.word	0x58020000
 80019a8:	40005000 	.word	0x40005000
 80019ac:	58020400 	.word	0x58020400
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40004400 	.word	0x40004400
 80019b8:	40004800 	.word	0x40004800
 80019bc:	58020c00 	.word	0x58020c00

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a14:	f000 f928 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <_sbrk+0x50>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x16>
		heap_end = &end;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <_sbrk+0x50>)
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <_sbrk+0x54>)
 8001a30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <_sbrk+0x50>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <_sbrk+0x50>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4413      	add	r3, r2
 8001a40:	466a      	mov	r2, sp
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d907      	bls.n	8001a56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a46:	f007 ff21 	bl	800988c <__errno>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
 8001a54:	e006      	b.n	8001a64 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a56:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <_sbrk+0x50>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <_sbrk+0x50>)
 8001a60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	240001fc 	.word	0x240001fc
 8001a70:	240006f8 	.word	0x240006f8

08001a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <SystemInit+0xac>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <SystemInit+0xac>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <SystemInit+0xb0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a25      	ldr	r2, [pc, #148]	; (8001b24 <SystemInit+0xb0>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <SystemInit+0xb0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <SystemInit+0xb0>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4921      	ldr	r1, [pc, #132]	; (8001b24 <SystemInit+0xb0>)
 8001aa0:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <SystemInit+0xb4>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <SystemInit+0xb0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <SystemInit+0xb0>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <SystemInit+0xb0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <SystemInit+0xb0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <SystemInit+0xb0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <SystemInit+0xb0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <SystemInit+0xb0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <SystemInit+0xb0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <SystemInit+0xb0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <SystemInit+0xb0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <SystemInit+0xb0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <SystemInit+0xb0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <SystemInit+0xb0>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <SystemInit+0xb0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <SystemInit+0xb8>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <SystemInit+0xbc>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b06:	d202      	bcs.n	8001b0e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <SystemInit+0xc0>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SystemInit+0xac>)
 8001b10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b14:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00
 8001b24:	58024400 	.word	0x58024400
 8001b28:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b2c:	5c001000 	.word	0x5c001000
 8001b30:	ffff0000 	.word	0xffff0000
 8001b34:	51008108 	.word	0x51008108

08001b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b3e:	e003      	b.n	8001b48 <LoopCopyDataInit>

08001b40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b46:	3104      	adds	r1, #4

08001b48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b50:	d3f6      	bcc.n	8001b40 <CopyDataInit>
  ldr  r2, =_sbss
 8001b52:	4a0b      	ldr	r2, [pc, #44]	; (8001b80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b54:	e002      	b.n	8001b5c <LoopFillZerobss>

08001b56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b58:	f842 3b04 	str.w	r3, [r2], #4

08001b5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b60:	d3f9      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b62:	f7ff ff87 	bl	8001a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b66:	f007 fe97 	bl	8009898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6a:	f7fe fe89 	bl	8000880 <main>
  bx  lr    
 8001b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b70:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001b74:	0800bb40 	.word	0x0800bb40
  ldr  r0, =_sdata
 8001b78:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b7c:	240001e0 	.word	0x240001e0
  ldr  r2, =_sbss
 8001b80:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 8001b84:	240006f8 	.word	0x240006f8

08001b88 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC3_IRQHandler>
	...

08001b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f001 f891 	bl	8002cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b96:	f002 fd37 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_Init+0x60>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <HAL_Init+0x64>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	fa21 f303 	lsr.w	r3, r1, r3
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_Init+0x68>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_Init+0x68>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_Init+0x60>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	490b      	ldr	r1, [pc, #44]	; (8001bf0 <HAL_Init+0x64>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_Init+0x6c>)
 8001bd0:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 f812 	bl	8001bfc <HAL_InitTick>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e002      	b.n	8001be8 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001be2:	f7ff fbff 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	0800b8c4 	.word	0x0800b8c4
 8001bf4:	24000000 	.word	0x24000000
 8001bf8:	24000004 	.word	0x24000004

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_InitTick+0x60>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e021      	b.n	8001c54 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_InitTick+0x64>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <HAL_InitTick+0x60>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 f86b 	bl	8002d02 <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f001 f843 	bl	8002cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_InitTick+0x68>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	2400000c 	.word	0x2400000c
 8001c60:	24000000 	.word	0x24000000
 8001c64:	24000008 	.word	0x24000008

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	2400000c 	.word	0x2400000c
 8001c8c:	240006f0 	.word	0x240006f0

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	240006f0 	.word	0x240006f0

08001ca8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <HAL_GetREVID+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	5c001000 	.word	0x5c001000

08001cc0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	4904      	ldr	r1, [pc, #16]	; (8001ce8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	58000400 	.word	0x58000400

08001cec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	609a      	str	r2, [r3, #8]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d54:	b490      	push	{r4, r7}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3360      	adds	r3, #96	; 0x60
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	430b      	orrs	r3, r1
 8001d80:	4313      	orrs	r3, r2
 8001d82:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc90      	pop	{r4, r7}
 8001d8c:	4770      	bx	lr

08001d8e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b085      	sub	sp, #20
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	431a      	orrs	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	611a      	str	r2, [r3, #16]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001dc0:	b490      	push	{r4, r7}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3360      	adds	r3, #96	; 0x60
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	6023      	str	r3, [r4, #0]
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc90      	pop	{r4, r7}
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001df0:	b490      	push	{r4, r7}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	3330      	adds	r3, #48	; 0x30
 8001e00:	461a      	mov	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	4413      	add	r3, r2
 8001e0e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e10:	6822      	ldr	r2, [r4, #0]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	211f      	movs	r1, #31
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	401a      	ands	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0e9b      	lsrs	r3, r3, #26
 8001e26:	f003 011f 	and.w	r1, r3, #31
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	4313      	orrs	r3, r2
 8001e36:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc90      	pop	{r4, r7}
 8001e40:	4770      	bx	lr

08001e42 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e42:	b490      	push	{r4, r7}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3314      	adds	r3, #20
 8001e52:	461a      	mov	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	0e5b      	lsrs	r3, r3, #25
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	4413      	add	r3, r2
 8001e60:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	0d1b      	lsrs	r3, r3, #20
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2107      	movs	r1, #7
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	401a      	ands	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	0d1b      	lsrs	r3, r3, #20
 8001e7a:	f003 031f 	and.w	r3, r3, #31
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	4313      	orrs	r3, r2
 8001e86:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc90      	pop	{r4, r7}
 8001e90:	4770      	bx	lr
	...

08001e94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eac:	43db      	mvns	r3, r3
 8001eae:	401a      	ands	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0318 	and.w	r3, r3, #24
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eb8:	40d9      	lsrs	r1, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	400b      	ands	r3, r1
 8001ebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	000fffff 	.word	0x000fffff

08001edc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6093      	str	r3, [r2, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	5fffffc0 	.word	0x5fffffc0

08001f00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f14:	d101      	bne.n	8001f1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <LL_ADC_EnableInternalRegulator+0x24>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	6fffffc0 	.word	0x6fffffc0

08001f50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f64:	d101      	bne.n	8001f6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <LL_ADC_IsEnabled+0x18>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <LL_ADC_IsEnabled+0x1a>
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d101      	bne.n	8001fb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d101      	bne.n	8001fdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e18e      	b.n	8002324 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff f9ff 	bl	8001418 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff67 	bl	8001f00 <LL_ADC_IsDeepPowerDownEnabled>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff4d 	bl	8001edc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff82 	bl	8001f50 <LL_ADC_IsInternalRegulatorEnabled>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d113      	bne.n	800207a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff66 	bl	8001f28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800205c:	4b9a      	ldr	r3, [pc, #616]	; (80022c8 <HAL_ADC_Init+0x2dc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	4a9a      	ldr	r2, [pc, #616]	; (80022cc <HAL_ADC_Init+0x2e0>)
 8002064:	fba2 2303 	umull	r2, r3, r2, r3
 8002068:	099b      	lsrs	r3, r3, #6
 800206a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800206c:	e002      	b.n	8002074 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3b01      	subs	r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f9      	bne.n	800206e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff66 	bl	8001f50 <LL_ADC_IsInternalRegulatorEnabled>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10d      	bne.n	80020a6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f043 0210 	orr.w	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	f043 0201 	orr.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff77 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 80020b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 8129 	bne.w	8002312 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 8125 	bne.w	8002312 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020d0:	f043 0202 	orr.w	r2, r3, #2
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff4b 	bl	8001f78 <LL_ADC_IsEnabled>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d136      	bne.n	8002156 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a78      	ldr	r2, [pc, #480]	; (80022d0 <HAL_ADC_Init+0x2e4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d004      	beq.n	80020fc <HAL_ADC_Init+0x110>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a77      	ldr	r2, [pc, #476]	; (80022d4 <HAL_ADC_Init+0x2e8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10e      	bne.n	800211a <HAL_ADC_Init+0x12e>
 80020fc:	4874      	ldr	r0, [pc, #464]	; (80022d0 <HAL_ADC_Init+0x2e4>)
 80020fe:	f7ff ff3b 	bl	8001f78 <LL_ADC_IsEnabled>
 8002102:	4604      	mov	r4, r0
 8002104:	4873      	ldr	r0, [pc, #460]	; (80022d4 <HAL_ADC_Init+0x2e8>)
 8002106:	f7ff ff37 	bl	8001f78 <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	4323      	orrs	r3, r4
 800210e:	2b00      	cmp	r3, #0
 8002110:	bf0c      	ite	eq
 8002112:	2301      	moveq	r3, #1
 8002114:	2300      	movne	r3, #0
 8002116:	b2db      	uxtb	r3, r3
 8002118:	e008      	b.n	800212c <HAL_ADC_Init+0x140>
 800211a:	486f      	ldr	r0, [pc, #444]	; (80022d8 <HAL_ADC_Init+0x2ec>)
 800211c:	f7ff ff2c 	bl	8001f78 <LL_ADC_IsEnabled>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a66      	ldr	r2, [pc, #408]	; (80022d0 <HAL_ADC_Init+0x2e4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_ADC_Init+0x158>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a65      	ldr	r2, [pc, #404]	; (80022d4 <HAL_ADC_Init+0x2e8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d101      	bne.n	8002148 <HAL_ADC_Init+0x15c>
 8002144:	4a65      	ldr	r2, [pc, #404]	; (80022dc <HAL_ADC_Init+0x2f0>)
 8002146:	e000      	b.n	800214a <HAL_ADC_Init+0x15e>
 8002148:	4a65      	ldr	r2, [pc, #404]	; (80022e0 <HAL_ADC_Init+0x2f4>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4619      	mov	r1, r3
 8002150:	4610      	mov	r0, r2
 8002152:	f7ff fdcb 	bl	8001cec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002156:	f7ff fda7 	bl	8001ca8 <HAL_GetREVID>
 800215a:	4602      	mov	r2, r0
 800215c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002160:	429a      	cmp	r2, r3
 8002162:	d914      	bls.n	800218e <HAL_ADC_Init+0x1a2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b10      	cmp	r3, #16
 800216a:	d110      	bne.n	800218e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7d5b      	ldrb	r3, [r3, #21]
 8002170:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002176:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800217c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	7f1b      	ldrb	r3, [r3, #28]
 8002182:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002184:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002186:	f043 030c 	orr.w	r3, r3, #12
 800218a:	61bb      	str	r3, [r7, #24]
 800218c:	e00d      	b.n	80021aa <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7d5b      	ldrb	r3, [r3, #21]
 8002192:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002198:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800219e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7f1b      	ldrb	r3, [r3, #28]
 80021a4:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
    }


    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7f1b      	ldrb	r3, [r3, #28]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d106      	bne.n	80021c0 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	045b      	lsls	r3, r3, #17
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <HAL_ADC_Init+0x2f8>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	69b9      	ldr	r1, [r7, #24]
 80021ec:	430b      	orrs	r3, r1
 80021ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fed2 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 80021fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fedf 	bl	8001fc4 <LL_ADC_INJ_IsConversionOngoing>
 8002206:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d14a      	bne.n	80022a4 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d147      	bne.n	80022a4 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7d1b      	ldrb	r3, [r3, #20]
 8002218:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	4b2f      	ldr	r3, [pc, #188]	; (80022e8 <HAL_ADC_Init+0x2fc>)
 800222a:	4013      	ands	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	430b      	orrs	r3, r1
 8002234:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800223c:	2b01      	cmp	r3, #1
 800223e:	d11b      	bne.n	8002278 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_ADC_Init+0x300>)
 800224e:	4013      	ands	r3, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002254:	3a01      	subs	r2, #1
 8002256:	0411      	lsls	r1, r2, #16
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800225c:	4311      	orrs	r1, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002262:	4311      	orrs	r1, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002268:	430a      	orrs	r2, r1
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	e007      	b.n	8002288 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691a      	ldr	r2, [r3, #16]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fb58 	bl	8002954 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d121      	bne.n	80022f0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f023 010f 	bic.w	r1, r3, #15
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	1e5a      	subs	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
 80022c4:	e01c      	b.n	8002300 <HAL_ADC_Init+0x314>
 80022c6:	bf00      	nop
 80022c8:	24000000 	.word	0x24000000
 80022cc:	053e2d63 	.word	0x053e2d63
 80022d0:	40022000 	.word	0x40022000
 80022d4:	40022100 	.word	0x40022100
 80022d8:	58026000 	.word	0x58026000
 80022dc:	40022300 	.word	0x40022300
 80022e0:	58026300 	.word	0x58026300
 80022e4:	fff0c003 	.word	0xfff0c003
 80022e8:	ffffbffc 	.word	0xffffbffc
 80022ec:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 020f 	bic.w	r2, r2, #15
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	f023 0303 	bic.w	r3, r3, #3
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	655a      	str	r2, [r3, #84]	; 0x54
 8002310:	e007      	b.n	8002322 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f043 0210 	orr.w	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002322:	7ffb      	ldrb	r3, [r7, #31]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3724      	adds	r7, #36	; 0x24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}

0800232c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b099      	sub	sp, #100	; 0x64
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a99      	ldr	r2, [pc, #612]	; (80025ac <HAL_ADC_ConfigChannel+0x280>)
 8002346:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x2a>
 8002352:	2302      	movs	r3, #2
 8002354:	e2e6      	b.n	8002924 <HAL_ADC_ConfigChannel+0x5f8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fe1b 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 82cb 	bne.w	8002906 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002378:	2b00      	cmp	r3, #0
 800237a:	d108      	bne.n	800238e <HAL_ADC_ConfigChannel+0x62>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	2201      	movs	r2, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	e00f      	b.n	80023ae <HAL_ADC_ConfigChannel+0x82>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800239c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	2201      	movs	r2, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	69d1      	ldr	r1, [r2, #28]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	f7ff fd11 	bl	8001df0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fde3 	bl	8001f9e <LL_ADC_REG_IsConversionOngoing>
 80023d8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fdf0 	bl	8001fc4 <LL_ADC_INJ_IsConversionOngoing>
 80023e4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f040 80b3 	bne.w	8002554 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 80af 	bne.w	8002554 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	461a      	mov	r2, r3
 8002404:	f7ff fd1d 	bl	8001e42 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002408:	4b69      	ldr	r3, [pc, #420]	; (80025b0 <HAL_ADC_ConfigChannel+0x284>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002414:	d10b      	bne.n	800242e <HAL_ADC_ConfigChannel+0x102>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	695a      	ldr	r2, [r3, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	e01d      	b.n	800246a <HAL_ADC_ConfigChannel+0x13e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10b      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x128>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	695a      	ldr	r2, [r3, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	e00a      	b.n	800246a <HAL_ADC_ConfigChannel+0x13e>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b04      	cmp	r3, #4
 8002472:	d027      	beq.n	80024c4 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6919      	ldr	r1, [r3, #16]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002482:	f7ff fc67 	bl	8001d54 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6919      	ldr	r1, [r3, #16]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7e5b      	ldrb	r3, [r3, #25]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d102      	bne.n	800249c <HAL_ADC_ConfigChannel+0x170>
 8002496:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800249a:	e000      	b.n	800249e <HAL_ADC_ConfigChannel+0x172>
 800249c:	2300      	movs	r3, #0
 800249e:	461a      	mov	r2, r3
 80024a0:	f7ff fc8e 	bl	8001dc0 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6919      	ldr	r1, [r3, #16]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	7e1b      	ldrb	r3, [r3, #24]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d102      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x18e>
 80024b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b8:	e000      	b.n	80024bc <HAL_ADC_ConfigChannel+0x190>
 80024ba:	2300      	movs	r3, #0
 80024bc:	461a      	mov	r2, r3
 80024be:	f7ff fc66 	bl	8001d8e <LL_ADC_SetDataRightShift>
 80024c2:	e047      	b.n	8002554 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d107      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800250a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	069b      	lsls	r3, r3, #26
 800251c:	429a      	cmp	r2, r3
 800251e:	d107      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800252e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002536:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	069b      	lsls	r3, r3, #26
 8002540:	429a      	cmp	r2, r3
 8002542:	d107      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002552:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fd0d 	bl	8001f78 <LL_ADC_IsEnabled>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	f040 81d9 	bne.w	8002918 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6819      	ldr	r1, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	461a      	mov	r2, r3
 8002574:	f7ff fc8e 	bl	8001e94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <HAL_ADC_ConfigChannel+0x280>)
 800257e:	4293      	cmp	r3, r2
 8002580:	f040 8101 	bne.w	8002786 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10f      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x288>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	bf94      	ite	ls
 80025a4:	2301      	movls	r3, #1
 80025a6:	2300      	movhi	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e016      	b.n	80025da <HAL_ADC_ConfigChannel+0x2ae>
 80025ac:	47ff0000 	.word	0x47ff0000
 80025b0:	5c001000 	.word	0x5c001000
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025bc:	fa93 f3a3 	rbit	r3, r3
 80025c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025c4:	fab3 f383 	clz	r3, r3
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2b09      	cmp	r3, #9
 80025d2:	bf94      	ite	ls
 80025d4:	2301      	movls	r3, #1
 80025d6:	2300      	movhi	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d064      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d107      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x2ce>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	3301      	adds	r3, #1
 80025f2:	069b      	lsls	r3, r3, #26
 80025f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025f8:	e00e      	b.n	8002618 <HAL_ADC_ConfigChannel+0x2ec>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3301      	adds	r3, #1
 8002612:	069b      	lsls	r3, r3, #26
 8002614:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002620:	2b00      	cmp	r3, #0
 8002622:	d109      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x30c>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0e9b      	lsrs	r3, r3, #26
 800262a:	3301      	adds	r3, #1
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	e010      	b.n	800265a <HAL_ADC_ConfigChannel+0x32e>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	fab3 f383 	clz	r3, r3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	3301      	adds	r3, #1
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	ea42 0103 	orr.w	r1, r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x354>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	3301      	adds	r3, #1
 8002672:	f003 021f 	and.w	r2, r3, #31
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	051b      	lsls	r3, r3, #20
 800267e:	e011      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x378>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f003 021f 	and.w	r2, r3, #31
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a4:	430b      	orrs	r3, r1
 80026a6:	e069      	b.n	800277c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x398>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	3301      	adds	r3, #1
 80026bc:	069b      	lsls	r3, r3, #26
 80026be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c2:	e00e      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x3b6>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	61fb      	str	r3, [r7, #28]
  return result;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	069b      	lsls	r3, r3, #26
 80026de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x3d6>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0e9b      	lsrs	r3, r3, #26
 80026f4:	3301      	adds	r3, #1
 80026f6:	f003 031f 	and.w	r3, r3, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	e010      	b.n	8002724 <HAL_ADC_ConfigChannel+0x3f8>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	617b      	str	r3, [r7, #20]
  return result;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	3301      	adds	r3, #1
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	2101      	movs	r1, #1
 8002720:	fa01 f303 	lsl.w	r3, r1, r3
 8002724:	ea42 0103 	orr.w	r1, r2, r3
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10d      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x424>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0e9b      	lsrs	r3, r3, #26
 800273a:	3301      	adds	r3, #1
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	3b1e      	subs	r3, #30
 8002748:	051b      	lsls	r3, r3, #20
 800274a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800274e:	e014      	b.n	800277a <HAL_ADC_ConfigChannel+0x44e>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	60fb      	str	r3, [r7, #12]
  return result;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	3b1e      	subs	r3, #30
 8002774:	051b      	lsls	r3, r3, #20
 8002776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277a:	430b      	orrs	r3, r1
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	6892      	ldr	r2, [r2, #8]
 8002780:	4619      	mov	r1, r3
 8002782:	f7ff fb5e 	bl	8001e42 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f280 80c4 	bge.w	8002918 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a65      	ldr	r2, [pc, #404]	; (800292c <HAL_ADC_ConfigChannel+0x600>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d004      	beq.n	80027a4 <HAL_ADC_ConfigChannel+0x478>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a64      	ldr	r2, [pc, #400]	; (8002930 <HAL_ADC_ConfigChannel+0x604>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x47c>
 80027a4:	4b63      	ldr	r3, [pc, #396]	; (8002934 <HAL_ADC_ConfigChannel+0x608>)
 80027a6:	e000      	b.n	80027aa <HAL_ADC_ConfigChannel+0x47e>
 80027a8:	4b63      	ldr	r3, [pc, #396]	; (8002938 <HAL_ADC_ConfigChannel+0x60c>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fac4 	bl	8001d38 <LL_ADC_GetCommonPathInternalCh>
 80027b0:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5d      	ldr	r2, [pc, #372]	; (800292c <HAL_ADC_ConfigChannel+0x600>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_ADC_ConfigChannel+0x49a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a5b      	ldr	r2, [pc, #364]	; (8002930 <HAL_ADC_ConfigChannel+0x604>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10e      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x4b8>
 80027c6:	4859      	ldr	r0, [pc, #356]	; (800292c <HAL_ADC_ConfigChannel+0x600>)
 80027c8:	f7ff fbd6 	bl	8001f78 <LL_ADC_IsEnabled>
 80027cc:	4604      	mov	r4, r0
 80027ce:	4858      	ldr	r0, [pc, #352]	; (8002930 <HAL_ADC_ConfigChannel+0x604>)
 80027d0:	f7ff fbd2 	bl	8001f78 <LL_ADC_IsEnabled>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4323      	orrs	r3, r4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	e008      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x4ca>
 80027e4:	4855      	ldr	r0, [pc, #340]	; (800293c <HAL_ADC_ConfigChannel+0x610>)
 80027e6:	f7ff fbc7 	bl	8001f78 <LL_ADC_IsEnabled>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d07b      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a50      	ldr	r2, [pc, #320]	; (8002940 <HAL_ADC_ConfigChannel+0x614>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d12e      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x536>
 8002804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002806:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d129      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a4a      	ldr	r2, [pc, #296]	; (800293c <HAL_ADC_ConfigChannel+0x610>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d17f      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a43      	ldr	r2, [pc, #268]	; (800292c <HAL_ADC_ConfigChannel+0x600>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d004      	beq.n	800282c <HAL_ADC_ConfigChannel+0x500>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a42      	ldr	r2, [pc, #264]	; (8002930 <HAL_ADC_ConfigChannel+0x604>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x504>
 800282c:	4a41      	ldr	r2, [pc, #260]	; (8002934 <HAL_ADC_ConfigChannel+0x608>)
 800282e:	e000      	b.n	8002832 <HAL_ADC_ConfigChannel+0x506>
 8002830:	4a41      	ldr	r2, [pc, #260]	; (8002938 <HAL_ADC_ConfigChannel+0x60c>)
 8002832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002834:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	f7ff fa69 	bl	8001d12 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <HAL_ADC_ConfigChannel+0x618>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	099b      	lsrs	r3, r3, #6
 8002846:	4a40      	ldr	r2, [pc, #256]	; (8002948 <HAL_ADC_ConfigChannel+0x61c>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002852:	e002      	b.n	800285a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	3b01      	subs	r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f9      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002860:	e05a      	b.n	8002918 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a39      	ldr	r2, [pc, #228]	; (800294c <HAL_ADC_ConfigChannel+0x620>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d11e      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x57e>
 800286c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d119      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a30      	ldr	r2, [pc, #192]	; (800293c <HAL_ADC_ConfigChannel+0x610>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d14b      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a29      	ldr	r2, [pc, #164]	; (800292c <HAL_ADC_ConfigChannel+0x600>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_ADC_ConfigChannel+0x568>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a28      	ldr	r2, [pc, #160]	; (8002930 <HAL_ADC_ConfigChannel+0x604>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d101      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x56c>
 8002894:	4a27      	ldr	r2, [pc, #156]	; (8002934 <HAL_ADC_ConfigChannel+0x608>)
 8002896:	e000      	b.n	800289a <HAL_ADC_ConfigChannel+0x56e>
 8002898:	4a27      	ldr	r2, [pc, #156]	; (8002938 <HAL_ADC_ConfigChannel+0x60c>)
 800289a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800289c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f7ff fa35 	bl	8001d12 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a8:	e036      	b.n	8002918 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a28      	ldr	r2, [pc, #160]	; (8002950 <HAL_ADC_ConfigChannel+0x624>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d131      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x5ec>
 80028b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d12c      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1e      	ldr	r2, [pc, #120]	; (800293c <HAL_ADC_ConfigChannel+0x610>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d127      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a17      	ldr	r2, [pc, #92]	; (800292c <HAL_ADC_ConfigChannel+0x600>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_ADC_ConfigChannel+0x5b0>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a16      	ldr	r2, [pc, #88]	; (8002930 <HAL_ADC_ConfigChannel+0x604>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x5b4>
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <HAL_ADC_ConfigChannel+0x608>)
 80028de:	e000      	b.n	80028e2 <HAL_ADC_ConfigChannel+0x5b6>
 80028e0:	4a15      	ldr	r2, [pc, #84]	; (8002938 <HAL_ADC_ConfigChannel+0x60c>)
 80028e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f7ff fa11 	bl	8001d12 <LL_ADC_SetCommonPathInternalCh>
 80028f0:	e012      	b.n	8002918 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	f043 0220 	orr.w	r2, r3, #32
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002904:	e008      	b.n	8002918 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	f043 0220 	orr.w	r2, r3, #32
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002920:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002924:	4618      	mov	r0, r3
 8002926:	3764      	adds	r7, #100	; 0x64
 8002928:	46bd      	mov	sp, r7
 800292a:	bd90      	pop	{r4, r7, pc}
 800292c:	40022000 	.word	0x40022000
 8002930:	40022100 	.word	0x40022100
 8002934:	40022300 	.word	0x40022300
 8002938:	58026300 	.word	0x58026300
 800293c:	58026000 	.word	0x58026000
 8002940:	cb840000 	.word	0xcb840000
 8002944:	24000000 	.word	0x24000000
 8002948:	053e2d63 	.word	0x053e2d63
 800294c:	c7520000 	.word	0xc7520000
 8002950:	cfb80000 	.word	0xcfb80000

08002954 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a74      	ldr	r2, [pc, #464]	; (8002b34 <ADC_ConfigureBoostMode+0x1e0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d004      	beq.n	8002970 <ADC_ConfigureBoostMode+0x1c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a73      	ldr	r2, [pc, #460]	; (8002b38 <ADC_ConfigureBoostMode+0x1e4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d109      	bne.n	8002984 <ADC_ConfigureBoostMode+0x30>
 8002970:	4b72      	ldr	r3, [pc, #456]	; (8002b3c <ADC_ConfigureBoostMode+0x1e8>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e008      	b.n	8002996 <ADC_ConfigureBoostMode+0x42>
 8002984:	4b6e      	ldr	r3, [pc, #440]	; (8002b40 <ADC_ConfigureBoostMode+0x1ec>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01a      	beq.n	80029d0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800299a:	f001 ffa7 	bl	80048ec <HAL_RCC_GetHCLKFreq>
 800299e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029a8:	d006      	beq.n	80029b8 <ADC_ConfigureBoostMode+0x64>
 80029aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029ae:	d00b      	beq.n	80029c8 <ADC_ConfigureBoostMode+0x74>
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d000      	beq.n	80029b8 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80029b6:	e05d      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	60fb      	str	r3, [r7, #12]
        break;
 80029c6:	e055      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	60fb      	str	r3, [r7, #12]
        break;
 80029ce:	e051      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029d0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029d4:	f002 fec2 	bl	800575c <HAL_RCCEx_GetPeriphCLKFreq>
 80029d8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029e2:	d02a      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
 80029e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029e8:	d813      	bhi.n	8002a12 <ADC_ConfigureBoostMode+0xbe>
 80029ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029ee:	d024      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
 80029f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029f4:	d806      	bhi.n	8002a04 <ADC_ConfigureBoostMode+0xb0>
 80029f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029fa:	d01e      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
 80029fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a00:	d01b      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002a02:	e037      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a08:	d017      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
 8002a0a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a0e:	d014      	beq.n	8002a3a <ADC_ConfigureBoostMode+0xe6>
        break;
 8002a10:	e030      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002a12:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a16:	d021      	beq.n	8002a5c <ADC_ConfigureBoostMode+0x108>
 8002a18:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002a1c:	d806      	bhi.n	8002a2c <ADC_ConfigureBoostMode+0xd8>
 8002a1e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a22:	d013      	beq.n	8002a4c <ADC_ConfigureBoostMode+0xf8>
 8002a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a28:	d014      	beq.n	8002a54 <ADC_ConfigureBoostMode+0x100>
        break;
 8002a2a:	e023      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 8002a2c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a30:	d018      	beq.n	8002a64 <ADC_ConfigureBoostMode+0x110>
 8002a32:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a36:	d019      	beq.n	8002a6c <ADC_ConfigureBoostMode+0x118>
        break;
 8002a38:	e01c      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	0c9b      	lsrs	r3, r3, #18
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	60fb      	str	r3, [r7, #12]
        break;
 8002a4a:	e013      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	60fb      	str	r3, [r7, #12]
      break;
 8002a52:	e00f      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	60fb      	str	r3, [r7, #12]
        break;
 8002a5a:	e00b      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	60fb      	str	r3, [r7, #12]
        break;
 8002a62:	e007      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	09db      	lsrs	r3, r3, #7
 8002a68:	60fb      	str	r3, [r7, #12]
        break;
 8002a6a:	e003      	b.n	8002a74 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	60fb      	str	r3, [r7, #12]
        break;
 8002a72:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a74:	f7ff f918 	bl	8001ca8 <HAL_GetREVID>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d815      	bhi.n	8002aae <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a2f      	ldr	r2, [pc, #188]	; (8002b44 <ADC_ConfigureBoostMode+0x1f0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d908      	bls.n	8002a9c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a98:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 8002a9a:	e047      	b.n	8002b2c <ADC_ConfigureBoostMode+0x1d8>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aaa:	609a      	str	r2, [r3, #8]
}
 8002aac:	e03e      	b.n	8002b2c <ADC_ConfigureBoostMode+0x1d8>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <ADC_ConfigureBoostMode+0x1f4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d808      	bhi.n	8002ace <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	e02e      	b.n	8002b2c <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <ADC_ConfigureBoostMode+0x1f4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d90e      	bls.n	8002af4 <ADC_ConfigureBoostMode+0x1a0>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a1c      	ldr	r2, [pc, #112]	; (8002b4c <ADC_ConfigureBoostMode+0x1f8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d80a      	bhi.n	8002af4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	e01b      	b.n	8002b2c <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <ADC_ConfigureBoostMode+0x1f8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d90e      	bls.n	8002b1a <ADC_ConfigureBoostMode+0x1c6>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a14      	ldr	r2, [pc, #80]	; (8002b50 <ADC_ConfigureBoostMode+0x1fc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d80a      	bhi.n	8002b1a <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	e008      	b.n	8002b2c <ADC_ConfigureBoostMode+0x1d8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b28:	609a      	str	r2, [r3, #8]
}
 8002b2a:	e7ff      	b.n	8002b2c <ADC_ConfigureBoostMode+0x1d8>
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40022000 	.word	0x40022000
 8002b38:	40022100 	.word	0x40022100
 8002b3c:	40022300 	.word	0x40022300
 8002b40:	58026300 	.word	0x58026300
 8002b44:	01312d00 	.word	0x01312d00
 8002b48:	005f5e10 	.word	0x005f5e10
 8002b4c:	00bebc20 	.word	0x00bebc20
 8002b50:	017d7840 	.word	0x017d7840

08002b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <__NVIC_SetPriorityGrouping+0x40>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b70:	4013      	ands	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <__NVIC_SetPriorityGrouping+0x44>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b82:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <__NVIC_SetPriorityGrouping+0x40>)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	60d3      	str	r3, [r2, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000ed00 	.word	0xe000ed00
 8002b98:	05fa0000 	.word	0x05fa0000

08002b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	f003 0307 	and.w	r3, r3, #7
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	db0a      	blt.n	8002be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	490c      	ldr	r1, [pc, #48]	; (8002c04 <__NVIC_SetPriority+0x4c>)
 8002bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd6:	0112      	lsls	r2, r2, #4
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	440b      	add	r3, r1
 8002bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be0:	e00a      	b.n	8002bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4908      	ldr	r1, [pc, #32]	; (8002c08 <__NVIC_SetPriority+0x50>)
 8002be8:	88fb      	ldrh	r3, [r7, #6]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	3b04      	subs	r3, #4
 8002bf0:	0112      	lsls	r2, r2, #4
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	761a      	strb	r2, [r3, #24]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000e100 	.word	0xe000e100
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b089      	sub	sp, #36	; 0x24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f1c3 0307 	rsb	r3, r3, #7
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	bf28      	it	cs
 8002c2a:	2304      	movcs	r3, #4
 8002c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3304      	adds	r3, #4
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d902      	bls.n	8002c3c <NVIC_EncodePriority+0x30>
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3b03      	subs	r3, #3
 8002c3a:	e000      	b.n	8002c3e <NVIC_EncodePriority+0x32>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	f04f 32ff 	mov.w	r2, #4294967295
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43da      	mvns	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	401a      	ands	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c54:	f04f 31ff 	mov.w	r1, #4294967295
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	43d9      	mvns	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c64:	4313      	orrs	r3, r2
         );
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c84:	d301      	bcc.n	8002c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00f      	b.n	8002caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <SysTick_Config+0x40>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c92:	210f      	movs	r1, #15
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	f7ff ff8e 	bl	8002bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <SysTick_Config+0x40>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca2:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <SysTick_Config+0x40>)
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	e000e010 	.word	0xe000e010

08002cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ff47 	bl	8002b54 <__NVIC_SetPriorityGrouping>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cdc:	f7ff ff5e 	bl	8002b9c <__NVIC_GetPriorityGrouping>
 8002ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68b9      	ldr	r1, [r7, #8]
 8002ce6:	6978      	ldr	r0, [r7, #20]
 8002ce8:	f7ff ff90 	bl	8002c0c <NVIC_EncodePriority>
 8002cec:	4602      	mov	r2, r0
 8002cee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff ff5f 	bl	8002bb8 <__NVIC_SetPriority>
}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ffb2 	bl	8002c74 <SysTick_Config>
 8002d10:	4603      	mov	r3, r0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d2a:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <HAL_GPIO_Init+0x234>)
 8002d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d2e:	e194      	b.n	800305a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8186 	beq.w	8003054 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x3c>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b12      	cmp	r3, #18
 8002d56:	d123      	bne.n	8002da0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	08da      	lsrs	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	69b9      	ldr	r1, [r7, #24]
 8002d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d00b      	beq.n	8002df4 <HAL_GPIO_Init+0xd8>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d007      	beq.n	8002df4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002de8:	2b11      	cmp	r3, #17
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b12      	cmp	r3, #18
 8002df2:	d130      	bne.n	8002e56 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 0201 	and.w	r2, r3, #1
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	2203      	movs	r2, #3
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80e0 	beq.w	8003054 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e94:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <HAL_GPIO_Init+0x238>)
 8002e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e9a:	4a2e      	ldr	r2, [pc, #184]	; (8002f54 <HAL_GPIO_Init+0x238>)
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_GPIO_Init+0x238>)
 8002ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb2:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <HAL_GPIO_Init+0x23c>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a20      	ldr	r2, [pc, #128]	; (8002f5c <HAL_GPIO_Init+0x240>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d052      	beq.n	8002f84 <HAL_GPIO_Init+0x268>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1f      	ldr	r2, [pc, #124]	; (8002f60 <HAL_GPIO_Init+0x244>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d031      	beq.n	8002f4a <HAL_GPIO_Init+0x22e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <HAL_GPIO_Init+0x248>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02b      	beq.n	8002f46 <HAL_GPIO_Init+0x22a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1d      	ldr	r2, [pc, #116]	; (8002f68 <HAL_GPIO_Init+0x24c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d025      	beq.n	8002f42 <HAL_GPIO_Init+0x226>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	; (8002f6c <HAL_GPIO_Init+0x250>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <HAL_GPIO_Init+0x222>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <HAL_GPIO_Init+0x254>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <HAL_GPIO_Init+0x21e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_GPIO_Init+0x258>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x21a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <HAL_GPIO_Init+0x25c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x216>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a18      	ldr	r2, [pc, #96]	; (8002f7c <HAL_GPIO_Init+0x260>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x212>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <HAL_GPIO_Init+0x264>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x20e>
 8002f26:	2309      	movs	r3, #9
 8002f28:	e02d      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	e02b      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e029      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e027      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f36:	2306      	movs	r3, #6
 8002f38:	e025      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e023      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e021      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e01f      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e01d      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e01b      	b.n	8002f86 <HAL_GPIO_Init+0x26a>
 8002f4e:	bf00      	nop
 8002f50:	58000080 	.word	0x58000080
 8002f54:	58024400 	.word	0x58024400
 8002f58:	58000400 	.word	0x58000400
 8002f5c:	58020000 	.word	0x58020000
 8002f60:	58020400 	.word	0x58020400
 8002f64:	58020800 	.word	0x58020800
 8002f68:	58020c00 	.word	0x58020c00
 8002f6c:	58021000 	.word	0x58021000
 8002f70:	58021400 	.word	0x58021400
 8002f74:	58021800 	.word	0x58021800
 8002f78:	58021c00 	.word	0x58021c00
 8002f7c:	58022000 	.word	0x58022000
 8002f80:	58022400 	.word	0x58022400
 8002f84:	2300      	movs	r3, #0
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	f002 0203 	and.w	r2, r2, #3
 8002f8c:	0092      	lsls	r2, r2, #2
 8002f8e:	4093      	lsls	r3, r2
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f96:	4938      	ldr	r1, [pc, #224]	; (8003078 <HAL_GPIO_Init+0x35c>)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800301e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800304c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	f47f ae63 	bne.w	8002d30 <HAL_GPIO_Init+0x14>
  }
}
 800306a:	bf00      	nop
 800306c:	3724      	adds	r7, #36	; 0x24
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	58000400 	.word	0x58000400

0800307c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
 8003088:	4613      	mov	r3, r2
 800308a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800308c:	787b      	ldrb	r3, [r7, #1]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003092:	887a      	ldrh	r2, [r7, #2]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003098:	e003      	b.n	80030a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800309a:	887b      	ldrh	r3, [r7, #2]
 800309c:	041a      	lsls	r2, r3, #16
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	619a      	str	r2, [r3, #24]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	401a      	ands	r2, r3
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d104      	bne.n	80030d2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	041a      	lsls	r2, r3, #16
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80030d0:	e002      	b.n	80030d8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e07f      	b.n	80031f6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7fe f9c0 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2224      	movs	r2, #36	; 0x24
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003134:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003144:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d107      	bne.n	800315e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689a      	ldr	r2, [r3, #8]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	e006      	b.n	800316c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800316a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d104      	bne.n	800317e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800317c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_I2C_Init+0x11c>)
 800318a:	430b      	orrs	r3, r1
 800318c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800319c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	ea42 0103 	orr.w	r1, r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	021a      	lsls	r2, r3, #8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69d9      	ldr	r1, [r3, #28]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	02008000 	.word	0x02008000

08003204 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	607a      	str	r2, [r7, #4]
 800320e:	461a      	mov	r2, r3
 8003210:	460b      	mov	r3, r1
 8003212:	817b      	strh	r3, [r7, #10]
 8003214:	4613      	mov	r3, r2
 8003216:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b20      	cmp	r3, #32
 8003222:	f040 80da 	bne.w	80033da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_I2C_Master_Transmit+0x30>
 8003230:	2302      	movs	r3, #2
 8003232:	e0d3      	b.n	80033dc <HAL_I2C_Master_Transmit+0x1d8>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800323c:	f7fe fd28 	bl	8001c90 <HAL_GetTick>
 8003240:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	2319      	movs	r3, #25
 8003248:	2201      	movs	r2, #1
 800324a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fa5e 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0be      	b.n	80033dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2221      	movs	r2, #33	; 0x21
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2210      	movs	r2, #16
 800326a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	893a      	ldrh	r2, [r7, #8]
 800327e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	2bff      	cmp	r3, #255	; 0xff
 800328e:	d90e      	bls.n	80032ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	22ff      	movs	r2, #255	; 0xff
 8003294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	b2da      	uxtb	r2, r3
 800329c:	8979      	ldrh	r1, [r7, #10]
 800329e:	4b51      	ldr	r3, [pc, #324]	; (80033e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fb54 	bl	8003954 <I2C_TransferConfig>
 80032ac:	e06c      	b.n	8003388 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	8979      	ldrh	r1, [r7, #10]
 80032c0:	4b48      	ldr	r3, [pc, #288]	; (80033e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fb43 	bl	8003954 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80032ce:	e05b      	b.n	8003388 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	6a39      	ldr	r1, [r7, #32]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fa5b 	bl	8003790 <I2C_WaitOnTXISFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e07b      	b.n	80033dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d034      	beq.n	8003388 <HAL_I2C_Master_Transmit+0x184>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	d130      	bne.n	8003388 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	6a3b      	ldr	r3, [r7, #32]
 800332c:	2200      	movs	r2, #0
 800332e:	2180      	movs	r1, #128	; 0x80
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f9ed 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e04d      	b.n	80033dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2bff      	cmp	r3, #255	; 0xff
 8003348:	d90e      	bls.n	8003368 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22ff      	movs	r2, #255	; 0xff
 800334e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003354:	b2da      	uxtb	r2, r3
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	2300      	movs	r3, #0
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 faf7 	bl	8003954 <I2C_TransferConfig>
 8003366:	e00f      	b.n	8003388 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	b2da      	uxtb	r2, r3
 8003378:	8979      	ldrh	r1, [r7, #10]
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fae6 	bl	8003954 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d19e      	bne.n	80032d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	6a39      	ldr	r1, [r7, #32]
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fa3a 	bl	8003810 <I2C_WaitOnSTOPFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e01a      	b.n	80033dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2220      	movs	r2, #32
 80033ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80033ba:	400b      	ands	r3, r1
 80033bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	80002000 	.word	0x80002000
 80033e8:	fe00e800 	.word	0xfe00e800

080033ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	4603      	mov	r3, r0
 80033fc:	817b      	strh	r3, [r7, #10]
 80033fe:	460b      	mov	r3, r1
 8003400:	813b      	strh	r3, [r7, #8]
 8003402:	4613      	mov	r3, r2
 8003404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	f040 80fd 	bne.w	800360e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_I2C_Mem_Read+0x34>
 800341a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0f1      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_I2C_Mem_Read+0x4e>
 8003436:	2302      	movs	r3, #2
 8003438:	e0ea      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003442:	f7fe fc25 	bl	8001c90 <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2319      	movs	r3, #25
 800344e:	2201      	movs	r2, #1
 8003450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f95b 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0d5      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2222      	movs	r2, #34	; 0x22
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800348c:	88f8      	ldrh	r0, [r7, #6]
 800348e:	893a      	ldrh	r2, [r7, #8]
 8003490:	8979      	ldrh	r1, [r7, #10]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	4603      	mov	r3, r0
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f8bf 	bl	8003620 <I2C_RequestMemoryRead>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0ad      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2bff      	cmp	r3, #255	; 0xff
 80034bc:	d90e      	bls.n	80034dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	22ff      	movs	r2, #255	; 0xff
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	8979      	ldrh	r1, [r7, #10]
 80034cc:	4b52      	ldr	r3, [pc, #328]	; (8003618 <HAL_I2C_Mem_Read+0x22c>)
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 fa3d 	bl	8003954 <I2C_TransferConfig>
 80034da:	e00f      	b.n	80034fc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	8979      	ldrh	r1, [r7, #10]
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <HAL_I2C_Mem_Read+0x22c>)
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 fa2c 	bl	8003954 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	2200      	movs	r2, #0
 8003504:	2104      	movs	r1, #4
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f902 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e07c      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d034      	beq.n	80035bc <HAL_I2C_Mem_Read+0x1d0>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	2b00      	cmp	r3, #0
 8003558:	d130      	bne.n	80035bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	2200      	movs	r2, #0
 8003562:	2180      	movs	r1, #128	; 0x80
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f8d3 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e04d      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003578:	b29b      	uxth	r3, r3
 800357a:	2bff      	cmp	r3, #255	; 0xff
 800357c:	d90e      	bls.n	800359c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	22ff      	movs	r2, #255	; 0xff
 8003582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	2300      	movs	r3, #0
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f9dd 	bl	8003954 <I2C_TransferConfig>
 800359a:	e00f      	b.n	80035bc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	8979      	ldrh	r1, [r7, #10]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f9cc 	bl	8003954 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d19a      	bne.n	80034fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f920 	bl	8003810 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e01a      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2220      	movs	r2, #32
 80035e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_I2C_Mem_Read+0x230>)
 80035ee:	400b      	ands	r3, r1
 80035f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e000      	b.n	8003610 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	80002400 	.word	0x80002400
 800361c:	fe00e800 	.word	0xfe00e800

08003620 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	b2da      	uxtb	r2, r3
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <I2C_RequestMemoryRead+0xa4>)
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	2300      	movs	r3, #0
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f984 	bl	8003954 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	69b9      	ldr	r1, [r7, #24]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f89d 	bl	8003790 <I2C_WaitOnTXISFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e02c      	b.n	80036ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d105      	bne.n	8003672 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003666:	893b      	ldrh	r3, [r7, #8]
 8003668:	b2da      	uxtb	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
 8003670:	e015      	b.n	800369e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003672:	893b      	ldrh	r3, [r7, #8]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	b29b      	uxth	r3, r3
 8003678:	b2da      	uxtb	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003680:	69fa      	ldr	r2, [r7, #28]
 8003682:	69b9      	ldr	r1, [r7, #24]
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f883 	bl	8003790 <I2C_WaitOnTXISFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e012      	b.n	80036ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003694:	893b      	ldrh	r3, [r7, #8]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2200      	movs	r2, #0
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f831 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	80002000 	.word	0x80002000

080036c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d103      	bne.n	80036e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2200      	movs	r2, #0
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d007      	beq.n	8003704 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	619a      	str	r2, [r3, #24]
  }
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003720:	e022      	b.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d01e      	beq.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fe fab1 	bl	8001c90 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d113      	bne.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e00f      	b.n	8003788 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	429a      	cmp	r2, r3
 8003784:	d0cd      	beq.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800379c:	e02c      	b.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f870 	bl	8003888 <I2C_IsAcknowledgeFailed>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e02a      	b.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d01e      	beq.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ba:	f7fe fa69 	bl	8001c90 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d302      	bcc.n	80037d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d113      	bne.n	80037f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e007      	b.n	8003808 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d1cb      	bne.n	800379e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800381c:	e028      	b.n	8003870 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f830 	bl	8003888 <I2C_IsAcknowledgeFailed>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e026      	b.n	8003880 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7fe fa2d 	bl	8001c90 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d113      	bne.n	8003870 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e007      	b.n	8003880 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	d1cf      	bne.n	800381e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b10      	cmp	r3, #16
 80038a0:	d151      	bne.n	8003946 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038a2:	e022      	b.n	80038ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038aa:	d01e      	beq.n	80038ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ac:	f7fe f9f0 	bl	8001c90 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d302      	bcc.n	80038c2 <I2C_IsAcknowledgeFailed+0x3a>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d113      	bne.n	80038ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f043 0220 	orr.w	r2, r3, #32
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e02e      	b.n	8003948 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d1d5      	bne.n	80038a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2210      	movs	r2, #16
 80038fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2220      	movs	r2, #32
 8003906:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff fedd 	bl	80036c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <I2C_IsAcknowledgeFailed+0xc8>)
 800391a:	400b      	ands	r3, r1
 800391c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f043 0204 	orr.w	r2, r3, #4
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	fe00e800 	.word	0xfe00e800

08003954 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	817b      	strh	r3, [r7, #10]
 8003962:	4613      	mov	r3, r2
 8003964:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	0d5b      	lsrs	r3, r3, #21
 8003970:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <I2C_TransferConfig+0x58>)
 8003976:	430b      	orrs	r3, r1
 8003978:	43db      	mvns	r3, r3
 800397a:	ea02 0103 	and.w	r1, r2, r3
 800397e:	897b      	ldrh	r3, [r7, #10]
 8003980:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003984:	7a7b      	ldrb	r3, [r7, #9]
 8003986:	041b      	lsls	r3, r3, #16
 8003988:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	431a      	orrs	r2, r3
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	03ff63ff 	.word	0x03ff63ff

080039b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d138      	bne.n	8003a38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e032      	b.n	8003a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2224      	movs	r2, #36	; 0x24
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6819      	ldr	r1, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d139      	bne.n	8003ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e033      	b.n	8003ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2224      	movs	r2, #36	; 0x24
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e000      	b.n	8003ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8003ae8:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_PWREx_ConfigSupply+0x6c>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d008      	beq.n	8003b06 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003af4:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <HAL_PWREx_ConfigSupply+0x6c>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e01d      	b.n	8003b42 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_PWREx_ConfigSupply+0x6c>)
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f023 0207 	bic.w	r2, r3, #7
 8003b0e:	490f      	ldr	r1, [pc, #60]	; (8003b4c <HAL_PWREx_ConfigSupply+0x6c>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b16:	f7fe f8bb 	bl	8001c90 <HAL_GetTick>
 8003b1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003b1c:	e009      	b.n	8003b32 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8003b1e:	f7fe f8b7 	bl	8001c90 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b2c:	d901      	bls.n	8003b32 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e007      	b.n	8003b42 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_PWREx_ConfigSupply+0x6c>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b3e:	d1ee      	bne.n	8003b1e <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	58024800 	.word	0x58024800

08003b50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e3a4      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8087 	beq.w	8003c7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b70:	4b9a      	ldr	r3, [pc, #616]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b7a:	4b98      	ldr	r3, [pc, #608]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	2b10      	cmp	r3, #16
 8003b84:	d007      	beq.n	8003b96 <HAL_RCC_OscConfig+0x46>
 8003b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b88:	2b18      	cmp	r3, #24
 8003b8a:	d110      	bne.n	8003bae <HAL_RCC_OscConfig+0x5e>
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d10b      	bne.n	8003bae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b96:	4b91      	ldr	r3, [pc, #580]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d06c      	beq.n	8003c7c <HAL_RCC_OscConfig+0x12c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d168      	bne.n	8003c7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e37e      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb6:	d106      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x76>
 8003bb8:	4b88      	ldr	r3, [pc, #544]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a87      	ldr	r2, [pc, #540]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	e02e      	b.n	8003c24 <HAL_RCC_OscConfig+0xd4>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x98>
 8003bce:	4b83      	ldr	r3, [pc, #524]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a82      	ldr	r2, [pc, #520]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b80      	ldr	r3, [pc, #512]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a7f      	ldr	r2, [pc, #508]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01d      	b.n	8003c24 <HAL_RCC_OscConfig+0xd4>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0xbc>
 8003bf2:	4b7a      	ldr	r3, [pc, #488]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a79      	ldr	r2, [pc, #484]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b77      	ldr	r3, [pc, #476]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a76      	ldr	r2, [pc, #472]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0xd4>
 8003c0c:	4b73      	ldr	r3, [pc, #460]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a72      	ldr	r2, [pc, #456]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b70      	ldr	r3, [pc, #448]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6f      	ldr	r2, [pc, #444]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fe f830 	bl	8001c90 <HAL_GetTick>
 8003c30:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fe f82c 	bl	8001c90 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e332      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c46:	4b65      	ldr	r3, [pc, #404]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0xe4>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe f81c 	bl	8001c90 <HAL_GetTick>
 8003c58:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fe f818 	bl	8001c90 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e31e      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c6e:	4b5b      	ldr	r3, [pc, #364]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x10c>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80b0 	beq.w	8003dec <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8c:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c94:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c96:	4b51      	ldr	r3, [pc, #324]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x162>
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b18      	cmp	r3, #24
 8003ca6:	d149      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1ec>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d144      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_RCC_OscConfig+0x17a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e2f0      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cca:	4b44      	ldr	r3, [pc, #272]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 0219 	bic.w	r2, r3, #25
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	4941      	ldr	r1, [pc, #260]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd ffd8 	bl	8001c90 <HAL_GetTick>
 8003ce0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce4:	f7fd ffd4 	bl	8001c90 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e2da      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cf6:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d02:	f7fd ffd1 	bl	8001ca8 <HAL_GetREVID>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d80a      	bhi.n	8003d26 <HAL_RCC_OscConfig+0x1d6>
 8003d10:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	031b      	lsls	r3, r3, #12
 8003d1e:	492f      	ldr	r1, [pc, #188]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d24:	e062      	b.n	8003dec <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	061b      	lsls	r3, r3, #24
 8003d34:	4929      	ldr	r1, [pc, #164]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d3a:	e057      	b.n	8003dec <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d038      	beq.n	8003db6 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f023 0219 	bic.w	r2, r3, #25
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	4922      	ldr	r1, [pc, #136]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d56:	f7fd ff9b 	bl	8001c90 <HAL_GetTick>
 8003d5a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5e:	f7fd ff97 	bl	8001c90 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e29d      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d70:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f0      	beq.n	8003d5e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7c:	f7fd ff94 	bl	8001ca8 <HAL_GetREVID>
 8003d80:	4602      	mov	r2, r0
 8003d82:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d80a      	bhi.n	8003da0 <HAL_RCC_OscConfig+0x250>
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	031b      	lsls	r3, r3, #12
 8003d98:	4910      	ldr	r1, [pc, #64]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	604b      	str	r3, [r1, #4]
 8003d9e:	e025      	b.n	8003dec <HAL_RCC_OscConfig+0x29c>
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	061b      	lsls	r3, r3, #24
 8003dae:	490b      	ldr	r1, [pc, #44]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	604b      	str	r3, [r1, #4]
 8003db4:	e01a      	b.n	8003dec <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <HAL_RCC_OscConfig+0x28c>)
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fd ff65 	bl	8001c90 <HAL_GetTick>
 8003dc6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dca:	f7fd ff61 	bl	8001c90 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d903      	bls.n	8003de0 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e267      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
 8003ddc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003de0:	4ba0      	ldr	r3, [pc, #640]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ee      	bne.n	8003dca <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 808f 	beq.w	8003f18 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfa:	4b9a      	ldr	r3, [pc, #616]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e02:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e04:	4b97      	ldr	r3, [pc, #604]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d007      	beq.n	8003e20 <HAL_RCC_OscConfig+0x2d0>
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b18      	cmp	r3, #24
 8003e14:	d12d      	bne.n	8003e72 <HAL_RCC_OscConfig+0x322>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d128      	bne.n	8003e72 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e20:	4b90      	ldr	r3, [pc, #576]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_OscConfig+0x2e8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b80      	cmp	r3, #128	; 0x80
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e239      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e38:	f7fd ff36 	bl	8001ca8 <HAL_GetREVID>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d80a      	bhi.n	8003e5c <HAL_RCC_OscConfig+0x30c>
 8003e46:	4b87      	ldr	r3, [pc, #540]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	069b      	lsls	r3, r3, #26
 8003e54:	4983      	ldr	r1, [pc, #524]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e5a:	e05d      	b.n	8003f18 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e5c:	4b81      	ldr	r3, [pc, #516]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	497e      	ldr	r1, [pc, #504]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e70:	e052      	b.n	8003f18 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d035      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e7a:	4b7a      	ldr	r3, [pc, #488]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a79      	ldr	r2, [pc, #484]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fd ff03 	bl	8001c90 <HAL_GetTick>
 8003e8a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e8e:	f7fd feff 	bl	8001c90 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e205      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ea0:	4b70      	ldr	r3, [pc, #448]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eac:	f7fd fefc 	bl	8001ca8 <HAL_GetREVID>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	f241 0303 	movw	r3, #4099	; 0x1003
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d80a      	bhi.n	8003ed0 <HAL_RCC_OscConfig+0x380>
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	069b      	lsls	r3, r3, #26
 8003ec8:	4966      	ldr	r1, [pc, #408]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]
 8003ece:	e023      	b.n	8003f18 <HAL_RCC_OscConfig+0x3c8>
 8003ed0:	4b64      	ldr	r3, [pc, #400]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	4961      	ldr	r1, [pc, #388]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60cb      	str	r3, [r1, #12]
 8003ee4:	e018      	b.n	8003f18 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ee6:	4b5f      	ldr	r3, [pc, #380]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a5e      	ldr	r2, [pc, #376]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fecd 	bl	8001c90 <HAL_GetTick>
 8003ef6:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003efa:	f7fd fec9 	bl	8001c90 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e1cf      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f0c:	4b55      	ldr	r3, [pc, #340]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d036      	beq.n	8003f92 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d019      	beq.n	8003f60 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f30:	4a4c      	ldr	r2, [pc, #304]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fd feaa 	bl	8001c90 <HAL_GetTick>
 8003f3c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f40:	f7fd fea6 	bl	8001c90 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e1ac      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f52:	4b44      	ldr	r3, [pc, #272]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0x3f0>
 8003f5e:	e018      	b.n	8003f92 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f60:	4b40      	ldr	r3, [pc, #256]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f64:	4a3f      	ldr	r2, [pc, #252]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6c:	f7fd fe90 	bl	8001c90 <HAL_GetTick>
 8003f70:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f74:	f7fd fe8c 	bl	8001c90 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e192      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f86:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d036      	beq.n	800400c <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d019      	beq.n	8003fda <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fa6:	4b2f      	ldr	r3, [pc, #188]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a2e      	ldr	r2, [pc, #184]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fb0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fb2:	f7fd fe6d 	bl	8001c90 <HAL_GetTick>
 8003fb6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003fba:	f7fd fe69 	bl	8001c90 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e16f      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003fcc:	4b25      	ldr	r3, [pc, #148]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x46a>
 8003fd8:	e018      	b.n	800400c <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a21      	ldr	r2, [pc, #132]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8003fe0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd fe53 	bl	8001c90 <HAL_GetTick>
 8003fea:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003fee:	f7fd fe4f 	bl	8001c90 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e155      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004000:	4b18      	ldr	r3, [pc, #96]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8086 	beq.w	8004126 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <HAL_RCC_OscConfig+0x518>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a12      	ldr	r2, [pc, #72]	; (8004068 <HAL_RCC_OscConfig+0x518>)
 8004020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004024:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004026:	f7fd fe33 	bl	8001c90 <HAL_GetTick>
 800402a:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800402e:	f7fd fe2f 	bl	8001c90 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b64      	cmp	r3, #100	; 0x64
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e135      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004040:	4b09      	ldr	r3, [pc, #36]	; (8004068 <HAL_RCC_OscConfig+0x518>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d10b      	bne.n	800406c <HAL_RCC_OscConfig+0x51c>
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4a02      	ldr	r2, [pc, #8]	; (8004064 <HAL_RCC_OscConfig+0x514>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	6713      	str	r3, [r2, #112]	; 0x70
 8004060:	e032      	b.n	80040c8 <HAL_RCC_OscConfig+0x578>
 8004062:	bf00      	nop
 8004064:	58024400 	.word	0x58024400
 8004068:	58024800 	.word	0x58024800
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10c      	bne.n	800408e <HAL_RCC_OscConfig+0x53e>
 8004074:	4b8f      	ldr	r3, [pc, #572]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4a8e      	ldr	r2, [pc, #568]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	6713      	str	r3, [r2, #112]	; 0x70
 8004080:	4b8c      	ldr	r3, [pc, #560]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	4a8b      	ldr	r2, [pc, #556]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004086:	f023 0304 	bic.w	r3, r3, #4
 800408a:	6713      	str	r3, [r2, #112]	; 0x70
 800408c:	e01c      	b.n	80040c8 <HAL_RCC_OscConfig+0x578>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b05      	cmp	r3, #5
 8004094:	d10c      	bne.n	80040b0 <HAL_RCC_OscConfig+0x560>
 8004096:	4b87      	ldr	r3, [pc, #540]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	4a86      	ldr	r2, [pc, #536]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	6713      	str	r3, [r2, #112]	; 0x70
 80040a2:	4b84      	ldr	r3, [pc, #528]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	4a83      	ldr	r2, [pc, #524]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6713      	str	r3, [r2, #112]	; 0x70
 80040ae:	e00b      	b.n	80040c8 <HAL_RCC_OscConfig+0x578>
 80040b0:	4b80      	ldr	r3, [pc, #512]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	4a7f      	ldr	r2, [pc, #508]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80040b6:	f023 0301 	bic.w	r3, r3, #1
 80040ba:	6713      	str	r3, [r2, #112]	; 0x70
 80040bc:	4b7d      	ldr	r3, [pc, #500]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	4a7c      	ldr	r2, [pc, #496]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80040c2:	f023 0304 	bic.w	r3, r3, #4
 80040c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d015      	beq.n	80040fc <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d0:	f7fd fdde 	bl	8001c90 <HAL_GetTick>
 80040d4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040d6:	e00a      	b.n	80040ee <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d8:	f7fd fdda 	bl	8001c90 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e0de      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040ee:	4b71      	ldr	r3, [pc, #452]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0ee      	beq.n	80040d8 <HAL_RCC_OscConfig+0x588>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fd fdc8 	bl	8001c90 <HAL_GetTick>
 8004100:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004102:	e00a      	b.n	800411a <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004104:	f7fd fdc4 	bl	8001c90 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e0c8      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800411a:	4b66      	ldr	r3, [pc, #408]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1ee      	bne.n	8004104 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 80bd 	beq.w	80042aa <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004130:	4b60      	ldr	r3, [pc, #384]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004138:	2b18      	cmp	r3, #24
 800413a:	f000 80b4 	beq.w	80042a6 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2b02      	cmp	r3, #2
 8004144:	f040 8095 	bne.w	8004272 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004148:	4b5a      	ldr	r3, [pc, #360]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a59      	ldr	r2, [pc, #356]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 800414e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd fd9c 	bl	8001c90 <HAL_GetTick>
 8004158:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd fd98 	bl	8001c90 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e09e      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800416e:	4b51      	ldr	r3, [pc, #324]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417a:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 800417c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800417e:	4b4e      	ldr	r3, [pc, #312]	; (80042b8 <HAL_RCC_OscConfig+0x768>)
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800418a:	0112      	lsls	r2, r2, #4
 800418c:	430a      	orrs	r2, r1
 800418e:	4949      	ldr	r1, [pc, #292]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004190:	4313      	orrs	r3, r2
 8004192:	628b      	str	r3, [r1, #40]	; 0x28
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	3b01      	subs	r3, #1
 800419a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	3b01      	subs	r3, #1
 80041a4:	025b      	lsls	r3, r3, #9
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	3b01      	subs	r3, #1
 80041b0:	041b      	lsls	r3, r3, #16
 80041b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041bc:	3b01      	subs	r3, #1
 80041be:	061b      	lsls	r3, r3, #24
 80041c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041c4:	493b      	ldr	r1, [pc, #236]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80041ca:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	4a39      	ldr	r2, [pc, #228]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041d6:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80041d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041da:	4b38      	ldr	r3, [pc, #224]	; (80042bc <HAL_RCC_OscConfig+0x76c>)
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041e2:	00d2      	lsls	r2, r2, #3
 80041e4:	4933      	ldr	r1, [pc, #204]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80041ea:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	f023 020c 	bic.w	r2, r3, #12
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	492f      	ldr	r1, [pc, #188]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80041fc:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	f023 0202 	bic.w	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	492a      	ldr	r1, [pc, #168]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 800420a:	4313      	orrs	r3, r2
 800420c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800420e:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	4a28      	ldr	r2, [pc, #160]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421a:	4b26      	ldr	r3, [pc, #152]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	4a25      	ldr	r2, [pc, #148]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004224:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 800422c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004230:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	4a1f      	ldr	r2, [pc, #124]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424a:	f7fd fd21 	bl	8001c90 <HAL_GetTick>
 800424e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004252:	f7fd fd1d 	bl	8001c90 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e023      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x702>
 8004270:	e01b      	b.n	80042aa <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a0f      	ldr	r2, [pc, #60]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 8004278:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fd fd07 	bl	8001c90 <HAL_GetTick>
 8004282:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004286:	f7fd fd03 	bl	8001c90 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e009      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_RCC_OscConfig+0x764>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f0      	bne.n	8004286 <HAL_RCC_OscConfig+0x736>
 80042a4:	e001      	b.n	80042aa <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3728      	adds	r7, #40	; 0x28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	58024400 	.word	0x58024400
 80042b8:	fffffc0c 	.word	0xfffffc0c
 80042bc:	ffff0007 	.word	0xffff0007

080042c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e18d      	b.n	80045f0 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042d4:	4b8a      	ldr	r3, [pc, #552]	; (8004500 <HAL_RCC_ClockConfig+0x240>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d910      	bls.n	8004304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b87      	ldr	r3, [pc, #540]	; (8004500 <HAL_RCC_ClockConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 020f 	bic.w	r2, r3, #15
 80042ea:	4985      	ldr	r1, [pc, #532]	; (8004500 <HAL_RCC_ClockConfig+0x240>)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f2:	4b83      	ldr	r3, [pc, #524]	; (8004500 <HAL_RCC_ClockConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d001      	beq.n	8004304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e175      	b.n	80045f0 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d010      	beq.n	8004332 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	4b7b      	ldr	r3, [pc, #492]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800431c:	429a      	cmp	r2, r3
 800431e:	d908      	bls.n	8004332 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004320:	4b78      	ldr	r3, [pc, #480]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	4975      	ldr	r1, [pc, #468]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 800432e:	4313      	orrs	r3, r2
 8004330:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d010      	beq.n	8004360 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	4b70      	ldr	r3, [pc, #448]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800434a:	429a      	cmp	r2, r3
 800434c:	d908      	bls.n	8004360 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800434e:	4b6d      	ldr	r3, [pc, #436]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	496a      	ldr	r1, [pc, #424]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 800435c:	4313      	orrs	r3, r2
 800435e:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d010      	beq.n	800438e <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	4b64      	ldr	r3, [pc, #400]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004378:	429a      	cmp	r2, r3
 800437a:	d908      	bls.n	800438e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800437c:	4b61      	ldr	r3, [pc, #388]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	495e      	ldr	r1, [pc, #376]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 800438a:	4313      	orrs	r3, r2
 800438c:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d010      	beq.n	80043bc <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	4b59      	ldr	r3, [pc, #356]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d908      	bls.n	80043bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043aa:	4b56      	ldr	r3, [pc, #344]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	4953      	ldr	r1, [pc, #332]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d010      	beq.n	80043ea <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	4b4d      	ldr	r3, [pc, #308]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d908      	bls.n	80043ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d8:	4b4a      	ldr	r3, [pc, #296]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f023 020f 	bic.w	r2, r3, #15
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4947      	ldr	r1, [pc, #284]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d055      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80043f6:	4b43      	ldr	r3, [pc, #268]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	4940      	ldr	r1, [pc, #256]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004404:	4313      	orrs	r3, r2
 8004406:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d107      	bne.n	8004420 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004410:	4b3c      	ldr	r3, [pc, #240]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d121      	bne.n	8004460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0e7      	b.n	80045f0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d107      	bne.n	8004438 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004428:	4b36      	ldr	r3, [pc, #216]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d115      	bne.n	8004460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0db      	b.n	80045f0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d107      	bne.n	8004450 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004440:	4b30      	ldr	r3, [pc, #192]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0cf      	b.n	80045f0 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004450:	4b2c      	ldr	r3, [pc, #176]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0c7      	b.n	80045f0 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004460:	4b28      	ldr	r3, [pc, #160]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	f023 0207 	bic.w	r2, r3, #7
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	4925      	ldr	r1, [pc, #148]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 800446e:	4313      	orrs	r3, r2
 8004470:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f7fd fc0d 	bl	8001c90 <HAL_GetTick>
 8004476:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004478:	e00a      	b.n	8004490 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447a:	f7fd fc09 	bl	8001c90 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	f241 3288 	movw	r2, #5000	; 0x1388
 8004488:	4293      	cmp	r3, r2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e0af      	b.n	80045f0 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	429a      	cmp	r2, r3
 80044a0:	d1eb      	bne.n	800447a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d010      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	4b14      	ldr	r3, [pc, #80]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d208      	bcs.n	80044d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044be:	4b11      	ldr	r3, [pc, #68]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f023 020f 	bic.w	r2, r3, #15
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	490e      	ldr	r1, [pc, #56]	; (8004504 <HAL_RCC_ClockConfig+0x244>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_ClockConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d214      	bcs.n	8004508 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <HAL_RCC_ClockConfig+0x240>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 020f 	bic.w	r2, r3, #15
 80044e6:	4906      	ldr	r1, [pc, #24]	; (8004500 <HAL_RCC_ClockConfig+0x240>)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b04      	ldr	r3, [pc, #16]	; (8004500 <HAL_RCC_ClockConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e077      	b.n	80045f0 <HAL_RCC_ClockConfig+0x330>
 8004500:	52002000 	.word	0x52002000
 8004504:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d010      	beq.n	8004536 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	4b37      	ldr	r3, [pc, #220]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004520:	429a      	cmp	r2, r3
 8004522:	d208      	bcs.n	8004536 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004524:	4b34      	ldr	r3, [pc, #208]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	4931      	ldr	r1, [pc, #196]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 8004532:	4313      	orrs	r3, r2
 8004534:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d010      	beq.n	8004564 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800454e:	429a      	cmp	r2, r3
 8004550:	d208      	bcs.n	8004564 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004552:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4926      	ldr	r1, [pc, #152]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 8004560:	4313      	orrs	r3, r2
 8004562:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699a      	ldr	r2, [r3, #24]
 8004574:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800457c:	429a      	cmp	r2, r3
 800457e:	d208      	bcs.n	8004592 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004580:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	491a      	ldr	r1, [pc, #104]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 800458e:	4313      	orrs	r3, r2
 8004590:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d010      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d208      	bcs.n	80045c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	490f      	ldr	r1, [pc, #60]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045c0:	f000 f822 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80045c4:	4601      	mov	r1, r0
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <HAL_RCC_ClockConfig+0x338>)
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	f003 030f 	and.w	r3, r3, #15
 80045d0:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <HAL_RCC_ClockConfig+0x33c>)
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	fa21 f303 	lsr.w	r3, r1, r3
 80045dc:	4a08      	ldr	r2, [pc, #32]	; (8004600 <HAL_RCC_ClockConfig+0x340>)
 80045de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <HAL_RCC_ClockConfig+0x344>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fd fb09 	bl	8001bfc <HAL_InitTick>
 80045ea:	4603      	mov	r3, r0
 80045ec:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80045ee:	7afb      	ldrb	r3, [r7, #11]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	58024400 	.word	0x58024400
 80045fc:	0800b8c4 	.word	0x0800b8c4
 8004600:	24000000 	.word	0x24000000
 8004604:	24000008 	.word	0x24000008

08004608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800460e:	4baf      	ldr	r3, [pc, #700]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004616:	2b18      	cmp	r3, #24
 8004618:	f200 814e 	bhi.w	80048b8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800461c:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <HAL_RCC_GetSysClockFreq+0x1c>)
 800461e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004622:	bf00      	nop
 8004624:	08004689 	.word	0x08004689
 8004628:	080048b9 	.word	0x080048b9
 800462c:	080048b9 	.word	0x080048b9
 8004630:	080048b9 	.word	0x080048b9
 8004634:	080048b9 	.word	0x080048b9
 8004638:	080048b9 	.word	0x080048b9
 800463c:	080048b9 	.word	0x080048b9
 8004640:	080048b9 	.word	0x080048b9
 8004644:	080046af 	.word	0x080046af
 8004648:	080048b9 	.word	0x080048b9
 800464c:	080048b9 	.word	0x080048b9
 8004650:	080048b9 	.word	0x080048b9
 8004654:	080048b9 	.word	0x080048b9
 8004658:	080048b9 	.word	0x080048b9
 800465c:	080048b9 	.word	0x080048b9
 8004660:	080048b9 	.word	0x080048b9
 8004664:	080046b5 	.word	0x080046b5
 8004668:	080048b9 	.word	0x080048b9
 800466c:	080048b9 	.word	0x080048b9
 8004670:	080048b9 	.word	0x080048b9
 8004674:	080048b9 	.word	0x080048b9
 8004678:	080048b9 	.word	0x080048b9
 800467c:	080048b9 	.word	0x080048b9
 8004680:	080048b9 	.word	0x080048b9
 8004684:	080046bb 	.word	0x080046bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004688:	4b90      	ldr	r3, [pc, #576]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d009      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004694:	4b8d      	ldr	r3, [pc, #564]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	08db      	lsrs	r3, r3, #3
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	4a8c      	ldr	r2, [pc, #560]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
 80046a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80046a6:	e10a      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046a8:	4b89      	ldr	r3, [pc, #548]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80046aa:	61bb      	str	r3, [r7, #24]
    break;
 80046ac:	e107      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80046ae:	4b89      	ldr	r3, [pc, #548]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80046b0:	61bb      	str	r3, [r7, #24]
    break;
 80046b2:	e104      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80046b4:	4b88      	ldr	r3, [pc, #544]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80046b6:	61bb      	str	r3, [r7, #24]
    break;
 80046b8:	e101      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046ba:	4b84      	ldr	r3, [pc, #528]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80046c4:	4b81      	ldr	r3, [pc, #516]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80046d0:	4b7e      	ldr	r3, [pc, #504]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80046da:	4b7c      	ldr	r3, [pc, #496]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	08db      	lsrs	r3, r3, #3
 80046e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80da 	beq.w	80048b2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d05a      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x1b2>
 8004704:	2b01      	cmp	r3, #1
 8004706:	d302      	bcc.n	800470e <HAL_RCC_GetSysClockFreq+0x106>
 8004708:	2b02      	cmp	r3, #2
 800470a:	d078      	beq.n	80047fe <HAL_RCC_GetSysClockFreq+0x1f6>
 800470c:	e099      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800470e:	4b6f      	ldr	r3, [pc, #444]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d02d      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800471a:	4b6c      	ldr	r3, [pc, #432]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	08db      	lsrs	r3, r3, #3
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	4a6a      	ldr	r2, [pc, #424]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004726:	fa22 f303 	lsr.w	r3, r2, r3
 800472a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004744:	4b61      	ldr	r3, [pc, #388]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004754:	ed97 6a02 	vldr	s12, [r7, #8]
 8004758:	eddf 5a60 	vldr	s11, [pc, #384]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2d4>
 800475c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004770:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004774:	e087      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	ee07 3a90 	vmov	s15, r3
 800477c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004780:	eddf 6a57 	vldr	s13, [pc, #348]	; 80048e0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004788:	4b50      	ldr	r3, [pc, #320]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004798:	ed97 6a02 	vldr	s12, [r7, #8]
 800479c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2d4>
 80047a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047b8:	e065      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	ee07 3a90 	vmov	s15, r3
 80047c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c4:	eddf 6a47 	vldr	s13, [pc, #284]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x2dc>
 80047c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047cc:	4b3f      	ldr	r3, [pc, #252]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d4:	ee07 3a90 	vmov	s15, r3
 80047d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80047e0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2d4>
 80047e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047fc:	e043      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004808:	eddf 6a37 	vldr	s13, [pc, #220]	; 80048e8 <HAL_RCC_GetSysClockFreq+0x2e0>
 800480c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004810:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004818:	ee07 3a90 	vmov	s15, r3
 800481c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004820:	ed97 6a02 	vldr	s12, [r7, #8]
 8004824:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2d4>
 8004828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800482c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800483c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004840:	e021      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80048e4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004854:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004864:	ed97 6a02 	vldr	s12, [r7, #8]
 8004868:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80048dc <HAL_RCC_GetSysClockFreq+0x2d4>
 800486c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004880:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004884:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	0a5b      	lsrs	r3, r3, #9
 800488c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004890:	3301      	adds	r3, #1
 8004892:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800489e:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048aa:	ee17 3a90 	vmov	r3, s15
 80048ae:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80048b0:	e005      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61bb      	str	r3, [r7, #24]
    break;
 80048b6:	e002      	b.n	80048be <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80048ba:	61bb      	str	r3, [r7, #24]
    break;
 80048bc:	bf00      	nop
  }

  return sysclockfreq;
 80048be:	69bb      	ldr	r3, [r7, #24]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3724      	adds	r7, #36	; 0x24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	58024400 	.word	0x58024400
 80048d0:	03d09000 	.word	0x03d09000
 80048d4:	003d0900 	.word	0x003d0900
 80048d8:	017d7840 	.word	0x017d7840
 80048dc:	46000000 	.word	0x46000000
 80048e0:	4c742400 	.word	0x4c742400
 80048e4:	4a742400 	.word	0x4a742400
 80048e8:	4bbebc20 	.word	0x4bbebc20

080048ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048f0:	f001 fd64 	bl	80063bc <HAL_RCCEx_GetD1SysClockFreq>
 80048f4:	4601      	mov	r1, r0
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <HAL_RCC_GetHCLKFreq+0x2c>)
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	4a07      	ldr	r2, [pc, #28]	; (800491c <HAL_RCC_GetHCLKFreq+0x30>)
 8004900:	5cd3      	ldrb	r3, [r2, r3]
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	fa21 f303 	lsr.w	r3, r1, r3
 800490a:	4a05      	ldr	r2, [pc, #20]	; (8004920 <HAL_RCC_GetHCLKFreq+0x34>)
 800490c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <HAL_RCC_GetHCLKFreq+0x34>)
 8004910:	681b      	ldr	r3, [r3, #0]
}
 8004912:	4618      	mov	r0, r3
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	58024400 	.word	0x58024400
 800491c:	0800b8c4 	.word	0x0800b8c4
 8004920:	24000004 	.word	0x24000004

08004924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004928:	f7ff ffe0 	bl	80048ec <HAL_RCC_GetHCLKFreq>
 800492c:	4601      	mov	r1, r0
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	091b      	lsrs	r3, r3, #4
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	4a04      	ldr	r2, [pc, #16]	; (800494c <HAL_RCC_GetPCLK1Freq+0x28>)
 800493a:	5cd3      	ldrb	r3, [r2, r3]
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004944:	4618      	mov	r0, r3
 8004946:	bd80      	pop	{r7, pc}
 8004948:	58024400 	.word	0x58024400
 800494c:	0800b8c4 	.word	0x0800b8c4

08004950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004954:	f7ff ffca 	bl	80048ec <HAL_RCC_GetHCLKFreq>
 8004958:	4601      	mov	r1, r0
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4a04      	ldr	r2, [pc, #16]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004966:	5cd3      	ldrb	r3, [r2, r3]
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004970:	4618      	mov	r0, r3
 8004972:	bd80      	pop	{r7, pc}
 8004974:	58024400 	.word	0x58024400
 8004978:	0800b8c4 	.word	0x0800b8c4

0800497c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004984:	2300      	movs	r3, #0
 8004986:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004988:	2300      	movs	r3, #0
 800498a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d03d      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800499c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a0:	d013      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80049a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a6:	d802      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x32>
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80049ac:	e01f      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x72>
 80049ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049b2:	d013      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x60>
 80049b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049b8:	d01c      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80049ba:	e018      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049bc:	4baf      	ldr	r3, [pc, #700]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	4aae      	ldr	r2, [pc, #696]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049c8:	e015      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3304      	adds	r3, #4
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 fd0f 	bl	80063f4 <RCCEx_PLL2_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049da:	e00c      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3324      	adds	r3, #36	; 0x24
 80049e0:	2102      	movs	r1, #2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f001 fdb8 	bl	8006558 <RCCEx_PLL3_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049ec:	e003      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	75fb      	strb	r3, [r7, #23]
      break;
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80049f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d109      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049fc:	4b9f      	ldr	r3, [pc, #636]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80049fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a08:	499c      	ldr	r1, [pc, #624]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a0e:	e001      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d03d      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d826      	bhi.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004a28:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2e:	bf00      	nop
 8004a30:	08004a45 	.word	0x08004a45
 8004a34:	08004a53 	.word	0x08004a53
 8004a38:	08004a65 	.word	0x08004a65
 8004a3c:	08004a7d 	.word	0x08004a7d
 8004a40:	08004a7d 	.word	0x08004a7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a44:	4b8d      	ldr	r3, [pc, #564]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	4a8c      	ldr	r2, [pc, #560]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a50:	e015      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2100      	movs	r1, #0
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f001 fccb 	bl	80063f4 <RCCEx_PLL2_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a62:	e00c      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3324      	adds	r3, #36	; 0x24
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f001 fd74 	bl	8006558 <RCCEx_PLL3_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a74:	e003      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	75fb      	strb	r3, [r7, #23]
      break;
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a84:	4b7d      	ldr	r3, [pc, #500]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a88:	f023 0207 	bic.w	r2, r3, #7
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a90:	497a      	ldr	r1, [pc, #488]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	650b      	str	r3, [r1, #80]	; 0x50
 8004a96:	e001      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d03e      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d01c      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004ab0:	2b80      	cmp	r3, #128	; 0x80
 8004ab2:	d804      	bhi.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d00d      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004abc:	e01e      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004abe:	2bc0      	cmp	r3, #192	; 0xc0
 8004ac0:	d01f      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac6:	d01e      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004ac8:	e018      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aca:	4b6c      	ldr	r3, [pc, #432]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	4a6b      	ldr	r2, [pc, #428]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ad6:	e017      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f001 fc88 	bl	80063f4 <RCCEx_PLL2_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ae8:	e00e      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3324      	adds	r3, #36	; 0x24
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fd31 	bl	8006558 <RCCEx_PLL3_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004afa:	e005      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	75fb      	strb	r3, [r7, #23]
      break;
 8004b00:	e002      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004b02:	bf00      	nop
 8004b04:	e000      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b0e:	4b5b      	ldr	r3, [pc, #364]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1a:	4958      	ldr	r1, [pc, #352]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	650b      	str	r3, [r1, #80]	; 0x50
 8004b20:	e001      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d044      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b3c:	d01f      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b42:	d805      	bhi.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b4c:	d00e      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004b4e:	e01f      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004b50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b54:	d01f      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004b56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b5a:	d01e      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004b5c:	e018      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5e:	4b47      	ldr	r3, [pc, #284]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	4a46      	ldr	r2, [pc, #280]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b6a:	e017      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3304      	adds	r3, #4
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 fc3e 	bl	80063f4 <RCCEx_PLL2_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b7c:	e00e      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3324      	adds	r3, #36	; 0x24
 8004b82:	2100      	movs	r1, #0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f001 fce7 	bl	8006558 <RCCEx_PLL3_Config>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b8e:	e005      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75fb      	strb	r3, [r7, #23]
      break;
 8004b94:	e002      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004b9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10a      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004ba2:	4b36      	ldr	r3, [pc, #216]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004bb0:	4932      	ldr	r1, [pc, #200]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	658b      	str	r3, [r1, #88]	; 0x58
 8004bb6:	e001      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d044      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bd2:	d01f      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004bd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bd8:	d805      	bhi.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004bde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004be2:	d00e      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004be4:	e01f      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004be6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bea:	d01f      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004bec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bf0:	d01e      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004bf2:	e018      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf4:	4b21      	ldr	r3, [pc, #132]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	4a20      	ldr	r2, [pc, #128]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c00:	e017      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 fbf3 	bl	80063f4 <RCCEx_PLL2_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c12:	e00e      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3324      	adds	r3, #36	; 0x24
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 fc9c 	bl	8006558 <RCCEx_PLL3_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c24:	e005      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2a:	e002      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004c2c:	bf00      	nop
 8004c2e:	e000      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10a      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c38:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c46:	490d      	ldr	r1, [pc, #52]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	658b      	str	r3, [r1, #88]	; 0x58
 8004c4c:	e001      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d035      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c62:	2b10      	cmp	r3, #16
 8004c64:	d00c      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d802      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01b      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004c6e:	e017      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d00c      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	d018      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004c78:	e012      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004c7a:	bf00      	nop
 8004c7c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c80:	4baf      	ldr	r3, [pc, #700]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	4aae      	ldr	r2, [pc, #696]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c8c:	e00e      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3304      	adds	r3, #4
 8004c92:	2102      	movs	r1, #2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 fbad 	bl	80063f4 <RCCEx_PLL2_Config>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c9e:	e005      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca4:	e002      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cb2:	4ba3      	ldr	r3, [pc, #652]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	49a0      	ldr	r1, [pc, #640]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004cc4:	e001      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d042      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cde:	d01f      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce4:	d805      	bhi.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cee:	d00e      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004cf0:	e01f      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004cf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cf6:	d01f      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cfc:	d01e      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004cfe:	e018      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d00:	4b8f      	ldr	r3, [pc, #572]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d04:	4a8e      	ldr	r2, [pc, #568]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d0c:	e017      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3304      	adds	r3, #4
 8004d12:	2100      	movs	r1, #0
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 fb6d 	bl	80063f4 <RCCEx_PLL2_Config>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d1e:	e00e      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3324      	adds	r3, #36	; 0x24
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 fc16 	bl	8006558 <RCCEx_PLL3_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d30:	e005      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
      break;
 8004d36:	e002      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004d38:	bf00      	nop
 8004d3a:	e000      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d44:	4b7e      	ldr	r3, [pc, #504]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	497b      	ldr	r1, [pc, #492]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	650b      	str	r3, [r1, #80]	; 0x50
 8004d56:	e001      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
 8004d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d042      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d70:	d01b      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d76:	d805      	bhi.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d022      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004d82:	e01b      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d88:	d01d      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004d8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d8e:	d01c      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004d90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d94:	d01b      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004d96:	e011      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fb28 	bl	80063f4 <RCCEx_PLL2_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004da8:	e012      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3324      	adds	r3, #36	; 0x24
 8004dae:	2101      	movs	r1, #1
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 fbd1 	bl	8006558 <RCCEx_PLL3_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004dba:	e009      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8004dc0:	e006      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e004      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004dc6:	bf00      	nop
 8004dc8:	e002      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004dca:	bf00      	nop
 8004dcc:	e000      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004dd6:	4b5a      	ldr	r3, [pc, #360]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dda:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de2:	4957      	ldr	r1, [pc, #348]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	650b      	str	r3, [r1, #80]	; 0x50
 8004de8:	e001      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d044      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e04:	d01b      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e0a:	d805      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d022      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e14:	d00a      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004e16:	e01b      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d01d      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e22:	d01c      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004e24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e28:	d01b      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004e2a:	e011      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	2101      	movs	r1, #1
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 fade 	bl	80063f4 <RCCEx_PLL2_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e3c:	e012      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3324      	adds	r3, #36	; 0x24
 8004e42:	2101      	movs	r1, #1
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 fb87 	bl	8006558 <RCCEx_PLL3_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e4e:	e009      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
      break;
 8004e54:	e006      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004e56:	bf00      	nop
 8004e58:	e004      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e002      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e000      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e6a:	4b35      	ldr	r3, [pc, #212]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e78:	4931      	ldr	r1, [pc, #196]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	658b      	str	r3, [r1, #88]	; 0x58
 8004e7e:	e001      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d02d      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e98:	d005      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9e:	d009      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d013      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004ea4:	e00f      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea6:	4b26      	ldr	r3, [pc, #152]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004eb2:	e00c      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	2101      	movs	r1, #1
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f001 fa9a 	bl	80063f4 <RCCEx_PLL2_Config>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ec4:	e003      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8004eca:	e000      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ece:	7dfb      	ldrb	r3, [r7, #23]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d109      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ed4:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ee0:	4917      	ldr	r1, [pc, #92]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	650b      	str	r3, [r1, #80]	; 0x50
 8004ee6:	e001      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d035      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d81b      	bhi.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f45 	.word	0x08004f45
 8004f0c:	08004f19 	.word	0x08004f19
 8004f10:	08004f27 	.word	0x08004f27
 8004f14:	08004f45 	.word	0x08004f45
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f24:	e00f      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	2102      	movs	r1, #2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 fa61 	bl	80063f4 <RCCEx_PLL2_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f36:	e006      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3c:	e003      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004f3e:	bf00      	nop
 8004f40:	58024400 	.word	0x58024400
      break;
 8004f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d109      	bne.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f4c:	4bba      	ldr	r3, [pc, #744]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f50:	f023 0203 	bic.w	r2, r3, #3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f58:	49b7      	ldr	r1, [pc, #732]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f5e:	e001      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
 8004f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8086 	beq.w	800507e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f72:	4bb2      	ldr	r3, [pc, #712]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4ab1      	ldr	r2, [pc, #708]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f7e:	f7fc fe87 	bl	8001c90 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f84:	e009      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f86:	f7fc fe83 	bl	8001c90 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b64      	cmp	r3, #100	; 0x64
 8004f92:	d902      	bls.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	75fb      	strb	r3, [r7, #23]
        break;
 8004f98:	e005      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f9a:	4ba8      	ldr	r3, [pc, #672]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0ef      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d166      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fac:	4ba2      	ldr	r3, [pc, #648]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fb6:	4053      	eors	r3, r2
 8004fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d013      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fc0:	4b9d      	ldr	r3, [pc, #628]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fca:	4b9b      	ldr	r3, [pc, #620]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	4a9a      	ldr	r2, [pc, #616]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd6:	4b98      	ldr	r3, [pc, #608]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fda:	4a97      	ldr	r2, [pc, #604]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fe2:	4a95      	ldr	r2, [pc, #596]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff2:	d115      	bne.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fc fe4c 	bl	8001c90 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ffa:	e00b      	b.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffc:	f7fc fe48 	bl	8001c90 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	; 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d902      	bls.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	75fb      	strb	r3, [r7, #23]
            break;
 8005012:	e005      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005014:	4b88      	ldr	r3, [pc, #544]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0ed      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d126      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800502c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005034:	d10d      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005036:	4b80      	ldr	r3, [pc, #512]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005044:	0919      	lsrs	r1, r3, #4
 8005046:	4b7e      	ldr	r3, [pc, #504]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005048:	400b      	ands	r3, r1
 800504a:	497b      	ldr	r1, [pc, #492]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800504c:	4313      	orrs	r3, r2
 800504e:	610b      	str	r3, [r1, #16]
 8005050:	e005      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005052:	4b79      	ldr	r3, [pc, #484]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	4a78      	ldr	r2, [pc, #480]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005058:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800505c:	6113      	str	r3, [r2, #16]
 800505e:	4b76      	ldr	r3, [pc, #472]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005060:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800506c:	4972      	ldr	r1, [pc, #456]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800506e:	4313      	orrs	r3, r2
 8005070:	670b      	str	r3, [r1, #112]	; 0x70
 8005072:	e004      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005074:	7dfb      	ldrb	r3, [r7, #23]
 8005076:	75bb      	strb	r3, [r7, #22]
 8005078:	e001      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d07d      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508e:	2b28      	cmp	r3, #40	; 0x28
 8005090:	d866      	bhi.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	08005167 	.word	0x08005167
 800509c:	08005161 	.word	0x08005161
 80050a0:	08005161 	.word	0x08005161
 80050a4:	08005161 	.word	0x08005161
 80050a8:	08005161 	.word	0x08005161
 80050ac:	08005161 	.word	0x08005161
 80050b0:	08005161 	.word	0x08005161
 80050b4:	08005161 	.word	0x08005161
 80050b8:	0800513d 	.word	0x0800513d
 80050bc:	08005161 	.word	0x08005161
 80050c0:	08005161 	.word	0x08005161
 80050c4:	08005161 	.word	0x08005161
 80050c8:	08005161 	.word	0x08005161
 80050cc:	08005161 	.word	0x08005161
 80050d0:	08005161 	.word	0x08005161
 80050d4:	08005161 	.word	0x08005161
 80050d8:	0800514f 	.word	0x0800514f
 80050dc:	08005161 	.word	0x08005161
 80050e0:	08005161 	.word	0x08005161
 80050e4:	08005161 	.word	0x08005161
 80050e8:	08005161 	.word	0x08005161
 80050ec:	08005161 	.word	0x08005161
 80050f0:	08005161 	.word	0x08005161
 80050f4:	08005161 	.word	0x08005161
 80050f8:	08005167 	.word	0x08005167
 80050fc:	08005161 	.word	0x08005161
 8005100:	08005161 	.word	0x08005161
 8005104:	08005161 	.word	0x08005161
 8005108:	08005161 	.word	0x08005161
 800510c:	08005161 	.word	0x08005161
 8005110:	08005161 	.word	0x08005161
 8005114:	08005161 	.word	0x08005161
 8005118:	08005167 	.word	0x08005167
 800511c:	08005161 	.word	0x08005161
 8005120:	08005161 	.word	0x08005161
 8005124:	08005161 	.word	0x08005161
 8005128:	08005161 	.word	0x08005161
 800512c:	08005161 	.word	0x08005161
 8005130:	08005161 	.word	0x08005161
 8005134:	08005161 	.word	0x08005161
 8005138:	08005167 	.word	0x08005167
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f001 f956 	bl	80063f4 <RCCEx_PLL2_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800514c:	e00c      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3324      	adds	r3, #36	; 0x24
 8005152:	2101      	movs	r1, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f001 f9ff 	bl	8006558 <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800515e:	e003      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	75fb      	strb	r3, [r7, #23]
      break;
 8005164:	e000      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800516e:	4b32      	ldr	r3, [pc, #200]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005172:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800517a:	492f      	ldr	r1, [pc, #188]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	654b      	str	r3, [r1, #84]	; 0x54
 8005180:	e001      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005182:	7dfb      	ldrb	r3, [r7, #23]
 8005184:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d037      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005196:	2b05      	cmp	r3, #5
 8005198:	d820      	bhi.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x860>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051e3 	.word	0x080051e3
 80051a4:	080051b9 	.word	0x080051b9
 80051a8:	080051cb 	.word	0x080051cb
 80051ac:	080051e3 	.word	0x080051e3
 80051b0:	080051e3 	.word	0x080051e3
 80051b4:	080051e3 	.word	0x080051e3
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	2101      	movs	r1, #1
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 f918 	bl	80063f4 <RCCEx_PLL2_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051c8:	e00c      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3324      	adds	r3, #36	; 0x24
 80051ce:	2101      	movs	r1, #1
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 f9c1 	bl	8006558 <RCCEx_PLL3_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80051da:	e003      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	75fb      	strb	r3, [r7, #23]
      break;
 80051e0:	e000      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80051e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d109      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051ea:	4b13      	ldr	r3, [pc, #76]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	f023 0207 	bic.w	r2, r3, #7
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f6:	4910      	ldr	r1, [pc, #64]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	654b      	str	r3, [r1, #84]	; 0x54
 80051fc:	e001      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0304 	and.w	r3, r3, #4
 800520a:	2b00      	cmp	r3, #0
 800520c:	d040      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005214:	2b05      	cmp	r3, #5
 8005216:	d827      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005218:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800521a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521e:	bf00      	nop
 8005220:	0800526f 	.word	0x0800526f
 8005224:	08005245 	.word	0x08005245
 8005228:	08005257 	.word	0x08005257
 800522c:	0800526f 	.word	0x0800526f
 8005230:	0800526f 	.word	0x0800526f
 8005234:	0800526f 	.word	0x0800526f
 8005238:	58024400 	.word	0x58024400
 800523c:	58024800 	.word	0x58024800
 8005240:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	2101      	movs	r1, #1
 800524a:	4618      	mov	r0, r3
 800524c:	f001 f8d2 	bl	80063f4 <RCCEx_PLL2_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005254:	e00c      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3324      	adds	r3, #36	; 0x24
 800525a:	2101      	movs	r1, #1
 800525c:	4618      	mov	r0, r3
 800525e:	f001 f97b 	bl	8006558 <RCCEx_PLL3_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005266:	e003      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	75fb      	strb	r3, [r7, #23]
      break;
 800526c:	e000      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800526e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005270:	7dfb      	ldrb	r3, [r7, #23]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005276:	4bb3      	ldr	r3, [pc, #716]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527a:	f023 0207 	bic.w	r2, r3, #7
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	49af      	ldr	r1, [pc, #700]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005286:	4313      	orrs	r3, r2
 8005288:	658b      	str	r3, [r1, #88]	; 0x58
 800528a:	e001      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d044      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a6:	d01b      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80052a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ac:	d805      	bhi.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d022      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80052b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052b6:	d00a      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x952>
 80052b8:	e01b      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80052ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052be:	d01d      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x980>
 80052c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052c4:	d01c      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80052c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052ca:	d01b      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80052cc:	e011      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 f88d 	bl	80063f4 <RCCEx_PLL2_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052de:	e012      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	2102      	movs	r1, #2
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 f936 	bl	8006558 <RCCEx_PLL3_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80052f0:	e009      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
      break;
 80052f6:	e006      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80052f8:	bf00      	nop
 80052fa:	e004      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80052fc:	bf00      	nop
 80052fe:	e002      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005300:	bf00      	nop
 8005302:	e000      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005306:	7dfb      	ldrb	r3, [r7, #23]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800530c:	4b8d      	ldr	r3, [pc, #564]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800531a:	498a      	ldr	r1, [pc, #552]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800531c:	4313      	orrs	r3, r2
 800531e:	654b      	str	r3, [r1, #84]	; 0x54
 8005320:	e001      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d044      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800533c:	d01b      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800533e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005342:	d805      	bhi.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d022      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534c:	d00a      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800534e:	e01b      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005354:	d01d      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005356:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800535a:	d01c      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800535c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005360:	d01b      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005362:	e011      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f001 f842 	bl	80063f4 <RCCEx_PLL2_Config>
 8005370:	4603      	mov	r3, r0
 8005372:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005374:	e012      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3324      	adds	r3, #36	; 0x24
 800537a:	2102      	movs	r1, #2
 800537c:	4618      	mov	r0, r3
 800537e:	f001 f8eb 	bl	8006558 <RCCEx_PLL3_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005386:	e009      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	75fb      	strb	r3, [r7, #23]
      break;
 800538c:	e006      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800538e:	bf00      	nop
 8005390:	e004      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005392:	bf00      	nop
 8005394:	e002      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005396:	bf00      	nop
 8005398:	e000      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800539a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053a2:	4b68      	ldr	r3, [pc, #416]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053b0:	4964      	ldr	r1, [pc, #400]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	658b      	str	r3, [r1, #88]	; 0x58
 80053b6:	e001      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d044      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d2:	d01b      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80053d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d8:	d805      	bhi.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d022      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80053de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e2:	d00a      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80053e4:	e01b      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80053e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ea:	d01d      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80053ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053f0:	d01c      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80053f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80053f6:	d01b      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80053f8:	e011      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3304      	adds	r3, #4
 80053fe:	2100      	movs	r1, #0
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fff7 	bl	80063f4 <RCCEx_PLL2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800540a:	e012      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3324      	adds	r3, #36	; 0x24
 8005410:	2102      	movs	r1, #2
 8005412:	4618      	mov	r0, r3
 8005414:	f001 f8a0 	bl	8006558 <RCCEx_PLL3_Config>
 8005418:	4603      	mov	r3, r0
 800541a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800541c:	e009      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	75fb      	strb	r3, [r7, #23]
      break;
 8005422:	e006      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005424:	bf00      	nop
 8005426:	e004      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005428:	bf00      	nop
 800542a:	e002      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800542c:	bf00      	nop
 800542e:	e000      	b.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005430:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005438:	4b42      	ldr	r3, [pc, #264]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005446:	493f      	ldr	r1, [pc, #252]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005448:	4313      	orrs	r3, r2
 800544a:	658b      	str	r3, [r1, #88]	; 0x58
 800544c:	e001      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544e:	7dfb      	ldrb	r3, [r7, #23]
 8005450:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d01b      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005468:	d10b      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3324      	adds	r3, #36	; 0x24
 800546e:	2102      	movs	r1, #2
 8005470:	4618      	mov	r0, r3
 8005472:	f001 f871 	bl	8006558 <RCCEx_PLL3_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00c      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75bb      	strb	r3, [r7, #22]
 8005480:	e009      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005482:	4b30      	ldr	r3, [pc, #192]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005486:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005490:	492c      	ldr	r1, [pc, #176]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005492:	4313      	orrs	r3, r2
 8005494:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01b      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ac:	d10b      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3324      	adds	r3, #36	; 0x24
 80054b2:	2102      	movs	r1, #2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f001 f84f 	bl	8006558 <RCCEx_PLL3_Config>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	75bb      	strb	r3, [r7, #22]
 80054c4:	e009      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054c6:	4b1f      	ldr	r3, [pc, #124]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054d4:	491b      	ldr	r1, [pc, #108]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d032      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f0:	d00d      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80054f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054f6:	d016      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d111      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3304      	adds	r3, #4
 8005500:	2100      	movs	r1, #0
 8005502:	4618      	mov	r0, r3
 8005504:	f000 ff76 	bl	80063f4 <RCCEx_PLL2_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800550c:	e00c      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3324      	adds	r3, #36	; 0x24
 8005512:	2102      	movs	r1, #2
 8005514:	4618      	mov	r0, r3
 8005516:	f001 f81f 	bl	8006558 <RCCEx_PLL3_Config>
 800551a:	4603      	mov	r3, r0
 800551c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800551e:	e003      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	75fb      	strb	r3, [r7, #23]
      break;
 8005524:	e000      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8005526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005528:	7dfb      	ldrb	r3, [r7, #23]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10c      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800553c:	4901      	ldr	r1, [pc, #4]	; (8005544 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800553e:	4313      	orrs	r3, r2
 8005540:	658b      	str	r3, [r1, #88]	; 0x58
 8005542:	e003      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8005544:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d02f      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800555e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005562:	d00c      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005564:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005568:	d015      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800556a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800556e:	d10f      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005570:	4b79      	ldr	r3, [pc, #484]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	4a78      	ldr	r2, [pc, #480]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800557c:	e00c      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3324      	adds	r3, #36	; 0x24
 8005582:	2101      	movs	r1, #1
 8005584:	4618      	mov	r0, r3
 8005586:	f000 ffe7 	bl	8006558 <RCCEx_PLL3_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800558e:	e003      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	75fb      	strb	r3, [r7, #23]
      break;
 8005594:	e000      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8005596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005598:	7dfb      	ldrb	r3, [r7, #23]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800559e:	4b6e      	ldr	r3, [pc, #440]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80055a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ac:	496a      	ldr	r1, [pc, #424]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	654b      	str	r3, [r1, #84]	; 0x54
 80055b2:	e001      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d029      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 80055cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d0:	d007      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80055d2:	e00f      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d4:	4b60      	ldr	r3, [pc, #384]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	4a5f      	ldr	r2, [pc, #380]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80055da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055e0:	e00b      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	2102      	movs	r1, #2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f000 ff03 	bl	80063f4 <RCCEx_PLL2_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055f2:	e002      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	75fb      	strb	r3, [r7, #23]
      break;
 80055f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055fa:	7dfb      	ldrb	r3, [r7, #23]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d109      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005600:	4b55      	ldr	r3, [pc, #340]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005604:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800560c:	4952      	ldr	r1, [pc, #328]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800560e:	4313      	orrs	r3, r2
 8005610:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005612:	e001      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3324      	adds	r3, #36	; 0x24
 8005628:	2102      	movs	r1, #2
 800562a:	4618      	mov	r0, r3
 800562c:	f000 ff94 	bl	8006558 <RCCEx_PLL3_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d02f      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800564a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564e:	d00c      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8005650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005654:	d802      	bhi.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8005656:	2b00      	cmp	r3, #0
 8005658:	d011      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800565a:	e00d      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 800565c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005660:	d00f      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005666:	d00e      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8005668:	e006      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566a:	4b3b      	ldr	r3, [pc, #236]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	4a3a      	ldr	r2, [pc, #232]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005674:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005676:	e007      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	75fb      	strb	r3, [r7, #23]
      break;
 800567c:	e004      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800567e:	bf00      	nop
 8005680:	e002      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8005686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005688:	7dfb      	ldrb	r3, [r7, #23]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800568e:	4b32      	ldr	r3, [pc, #200]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800569a:	492f      	ldr	r1, [pc, #188]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800569c:	4313      	orrs	r3, r2
 800569e:	654b      	str	r3, [r1, #84]	; 0x54
 80056a0:	e001      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056b2:	4b29      	ldr	r3, [pc, #164]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80056b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	4926      	ldr	r1, [pc, #152]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d009      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80056d0:	4b21      	ldr	r3, [pc, #132]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056de:	491e      	ldr	r1, [pc, #120]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056f0:	4b19      	ldr	r3, [pc, #100]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80056f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056fc:	4916      	ldr	r1, [pc, #88]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00d      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800570e:	4b12      	ldr	r3, [pc, #72]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	4a11      	ldr	r2, [pc, #68]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005714:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005718:	6113      	str	r3, [r2, #16]
 800571a:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005724:	490c      	ldr	r1, [pc, #48]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005726:	4313      	orrs	r3, r2
 8005728:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	da08      	bge.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005732:	4b09      	ldr	r3, [pc, #36]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573e:	4906      	ldr	r1, [pc, #24]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8005740:	4313      	orrs	r3, r2
 8005742:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005744:	7dbb      	ldrb	r3, [r7, #22]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e000      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	58024400 	.word	0x58024400

0800575c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b090      	sub	sp, #64	; 0x40
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576a:	d150      	bne.n	800580e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800576c:	4ba1      	ldr	r3, [pc, #644]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800576e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	2b04      	cmp	r3, #4
 800577a:	d844      	bhi.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800577c:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	08005799 	.word	0x08005799
 8005788:	080057a9 	.word	0x080057a9
 800578c:	080057b9 	.word	0x080057b9
 8005790:	08005801 	.word	0x08005801
 8005794:	080057c9 	.word	0x080057c9
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fcc1 	bl	8006124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a6:	e200      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057a8:	f107 0318 	add.w	r3, r7, #24
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fa21 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057b6:	e1f8      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057b8:	f107 030c 	add.w	r3, r7, #12
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 fb65 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057c6:	e1f0      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057c8:	4b8a      	ldr	r3, [pc, #552]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80057ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80057d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80057d8:	4b87      	ldr	r3, [pc, #540]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80057da:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80057dc:	e1e5      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80057de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057e4:	d102      	bne.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80057e6:	4b85      	ldr	r3, [pc, #532]	; (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ea:	e1de      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 80057ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057f2:	d102      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80057f4:	4b82      	ldr	r3, [pc, #520]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f8:	e1d7      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057fe:	e1d4      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005800:	4b80      	ldr	r3, [pc, #512]	; (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005804:	e1d1      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800580a:	bf00      	nop
 800580c:	e1cd      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005814:	d14f      	bne.n	80058b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005816:	4b77      	ldr	r3, [pc, #476]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800581e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005822:	2b80      	cmp	r3, #128	; 0x80
 8005824:	d01c      	beq.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005826:	2b80      	cmp	r3, #128	; 0x80
 8005828:	d804      	bhi.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800582a:	2b00      	cmp	r3, #0
 800582c:	d008      	beq.n	8005840 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d00e      	beq.n	8005850 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005832:	e03c      	b.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005834:	2bc0      	cmp	r3, #192	; 0xc0
 8005836:	d037      	beq.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583c:	d018      	beq.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800583e:	e036      	b.n	80058ae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fc6d 	bl	8006124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800584e:	e1ac      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005850:	f107 0318 	add.w	r3, r7, #24
 8005854:	4618      	mov	r0, r3
 8005856:	f000 f9cd 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800585e:	e1a4      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005860:	f107 030c 	add.w	r3, r7, #12
 8005864:	4618      	mov	r0, r3
 8005866:	f000 fb11 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800586e:	e19c      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005870:	4b60      	ldr	r3, [pc, #384]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005874:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005878:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800587a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005880:	4b5d      	ldr	r3, [pc, #372]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005884:	e191      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8005886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800588c:	d102      	bne.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800588e:	4b5b      	ldr	r3, [pc, #364]	; (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005892:	e18a      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8005894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800589a:	d102      	bne.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800589c:	4b58      	ldr	r3, [pc, #352]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058a0:	e183      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058a6:	e180      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80058a8:	4b56      	ldr	r3, [pc, #344]	; (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80058aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ac:	e17d      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058b2:	bf00      	nop
 80058b4:	e179      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058bc:	d153      	bne.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80058be:	4b4d      	ldr	r3, [pc, #308]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80058c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ce:	d01f      	beq.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80058d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058d4:	d805      	bhi.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80058da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058de:	d00f      	beq.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80058e0:	e03d      	b.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80058e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058e6:	d037      	beq.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80058e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058ec:	d018      	beq.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 80058ee:	e036      	b.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fc15 	bl	8006124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058fe:	e154      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005900:	f107 0318 	add.w	r3, r7, #24
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f975 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800590e:	e14c      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005910:	f107 030c 	add.w	r3, r7, #12
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fab9 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800591e:	e144      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005920:	4b34      	ldr	r3, [pc, #208]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005928:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 800592a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005930:	4b31      	ldr	r3, [pc, #196]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005934:	e139      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8005936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800593c:	d102      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800593e:	4b2f      	ldr	r3, [pc, #188]	; (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005942:	e132      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8005944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800594a:	d102      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800594c:	4b2c      	ldr	r3, [pc, #176]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005950:	e12b      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005956:	e128      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005958:	4b2a      	ldr	r3, [pc, #168]	; (8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800595c:	e125      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005962:	bf00      	nop
 8005964:	e121      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800596c:	d15d      	bne.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800596e:	4b21      	ldr	r3, [pc, #132]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005976:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800597e:	d01f      	beq.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005980:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005984:	d805      	bhi.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800598a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800598e:	d00f      	beq.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005990:	e047      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005992:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005996:	d041      	beq.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800599c:	d018      	beq.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800599e:	e040      	b.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fbbd 	bl	8006124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059ae:	e0fc      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059b0:	f107 0318 	add.w	r3, r7, #24
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f91d 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059be:	e0f4      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059c0:	f107 030c 	add.w	r3, r7, #12
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fa61 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059ce:	e0ec      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059d0:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80059d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059d8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 80059da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80059e0:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80059e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80059e4:	e0e1      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 80059e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ec:	d10c      	bne.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80059ee:	4b03      	ldr	r3, [pc, #12]	; (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059f2:	e0da      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80059f4:	58024400 	.word	0x58024400
 80059f8:	03d09000 	.word	0x03d09000
 80059fc:	003d0900 	.word	0x003d0900
 8005a00:	017d7840 	.word	0x017d7840
 8005a04:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8005a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a0e:	d102      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8005a10:	4b68      	ldr	r3, [pc, #416]	; (8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a14:	e0c9      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a1a:	e0c6      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a1c:	4b66      	ldr	r3, [pc, #408]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a20:	e0c3      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a26:	bf00      	nop
 8005a28:	e0bf      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a30:	d153      	bne.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005a32:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a36:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005a3a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a42:	d01f      	beq.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a48:	d805      	bhi.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a52:	d00f      	beq.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005a54:	e03d      	b.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005a56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a5a:	d037      	beq.n	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a60:	d018      	beq.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005a62:	e036      	b.n	8005ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fb5b 	bl	8006124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a72:	e09a      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a74:	f107 0318 	add.w	r3, r7, #24
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 f8bb 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a82:	e092      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 f9ff 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a92:	e08a      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a94:	4b49      	ldr	r3, [pc, #292]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a9c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005aa4:	4b46      	ldr	r3, [pc, #280]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8005aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005aa8:	e07f      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ab0:	d102      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8005ab2:	4b44      	ldr	r3, [pc, #272]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8005ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab6:	e078      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005abe:	d102      	bne.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8005ac0:	4b3c      	ldr	r3, [pc, #240]	; (8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ac4:	e071      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aca:	e06e      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005acc:	4b3a      	ldr	r3, [pc, #232]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8005ace:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad0:	e06b      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad6:	bf00      	nop
 8005ad8:	e067      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ae0:	d13d      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005ae2:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005aea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af2:	d00c      	beq.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005af8:	d011      	beq.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d12b      	bne.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005afe:	f107 0318 	add.w	r3, r7, #24
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f876 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b0c:	e04d      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f9ba 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b1c:	e045      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b1e:	4b27      	ldr	r3, [pc, #156]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005b2e:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005b32:	e03a      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b3a:	d102      	bne.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005b3c:	4b21      	ldr	r3, [pc, #132]	; (8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b40:	e033      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b48:	d102      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8005b4a:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8005b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b4e:	e02c      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b54:	e029      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b5a:	bf00      	nop
 8005b5c:	e025      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b64:	d11f      	bne.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005b66:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8005b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b6e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7a:	d008      	beq.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005b7c:	e00f      	b.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 face 	bl	8006124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b8c:	e00d      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b8e:	f107 0318 	add.w	r3, r7, #24
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f82e 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b9c:	e005      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ba2:	bf00      	nop
 8005ba4:	e001      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3740      	adds	r7, #64	; 0x40
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	017d7840 	.word	0x017d7840
 8005bb8:	00bb8000 	.word	0x00bb8000
 8005bbc:	58024400 	.word	0x58024400
 8005bc0:	03d09000 	.word	0x03d09000
 8005bc4:	003d0900 	.word	0x003d0900

08005bc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bcc:	f7fe fe8e 	bl	80048ec <HAL_RCC_GetHCLKFreq>
 8005bd0:	4601      	mov	r1, r0
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	091b      	lsrs	r3, r3, #4
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bde:	5cd3      	ldrb	r3, [r2, r3]
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	58024400 	.word	0x58024400
 8005bf0:	0800b8c4 	.word	0x0800b8c4

08005bf4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b089      	sub	sp, #36	; 0x24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bfc:	4b9d      	ldr	r3, [pc, #628]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8005c06:	4b9b      	ldr	r3, [pc, #620]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	0b1b      	lsrs	r3, r3, #12
 8005c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c10:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8005c12:	4b98      	ldr	r3, [pc, #608]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005c1c:	4b95      	ldr	r3, [pc, #596]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c20:	08db      	lsrs	r3, r3, #3
 8005c22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	ee07 3a90 	vmov	s15, r3
 8005c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 810a 	beq.w	8005e54 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d05a      	beq.n	8005cfc <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d302      	bcc.n	8005c50 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d078      	beq.n	8005d40 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8005c4e:	e099      	b.n	8005d84 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c50:	4b88      	ldr	r3, [pc, #544]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02d      	beq.n	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c5c:	4b85      	ldr	r3, [pc, #532]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	08db      	lsrs	r3, r3, #3
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	4a84      	ldr	r2, [pc, #528]	; (8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c86:	4b7b      	ldr	r3, [pc, #492]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005cb6:	e087      	b.n	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cca:	4b6a      	ldr	r3, [pc, #424]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cfa:	e065      	b.n	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0e:	4b59      	ldr	r3, [pc, #356]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d3e:	e043      	b.n	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d52:	4b48      	ldr	r3, [pc, #288]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5a:	ee07 3a90 	vmov	s15, r3
 8005d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d82:	e021      	b.n	8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d96:	4b37      	ldr	r3, [pc, #220]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005daa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005dc8:	4b2a      	ldr	r3, [pc, #168]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dcc:	0a5b      	lsrs	r3, r3, #9
 8005dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dee:	ee17 2a90 	vmov	r2, s15
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005df6:	4b1f      	ldr	r3, [pc, #124]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	0c1b      	lsrs	r3, r3, #16
 8005dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e00:	ee07 3a90 	vmov	s15, r3
 8005e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1c:	ee17 2a90 	vmov	r2, s15
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005e24:	4b13      	ldr	r3, [pc, #76]	; (8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	0e1b      	lsrs	r3, r3, #24
 8005e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e4a:	ee17 2a90 	vmov	r2, s15
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e52:	e008      	b.n	8005e66 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	609a      	str	r2, [r3, #8]
}
 8005e66:	bf00      	nop
 8005e68:	3724      	adds	r7, #36	; 0x24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	58024400 	.word	0x58024400
 8005e78:	03d09000 	.word	0x03d09000
 8005e7c:	46000000 	.word	0x46000000
 8005e80:	4c742400 	.word	0x4c742400
 8005e84:	4a742400 	.word	0x4a742400
 8005e88:	4bbebc20 	.word	0x4bbebc20

08005e8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	; 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e94:	4b9d      	ldr	r3, [pc, #628]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005e9e:	4b9b      	ldr	r3, [pc, #620]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	0d1b      	lsrs	r3, r3, #20
 8005ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea8:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8005eaa:	4b98      	ldr	r3, [pc, #608]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005eb4:	4b95      	ldr	r3, [pc, #596]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb8:	08db      	lsrs	r3, r3, #3
 8005eba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	fb02 f303 	mul.w	r3, r2, r3
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ecc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 810a 	beq.w	80060ec <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d05a      	beq.n	8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d302      	bcc.n	8005ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d078      	beq.n	8005fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005ee6:	e099      	b.n	800601c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ee8:	4b88      	ldr	r3, [pc, #544]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d02d      	beq.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ef4:	4b85      	ldr	r3, [pc, #532]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	08db      	lsrs	r3, r3, #3
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	4a84      	ldr	r2, [pc, #528]	; (8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005f00:	fa22 f303 	lsr.w	r3, r2, r3
 8005f04:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	ee07 3a90 	vmov	s15, r3
 8005f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1e:	4b7b      	ldr	r3, [pc, #492]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f4e:	e087      	b.n	8006060 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f62:	4b6a      	ldr	r3, [pc, #424]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f92:	e065      	b.n	8006060 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa6:	4b59      	ldr	r3, [pc, #356]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fd6:	e043      	b.n	8006060 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fea:	4b48      	ldr	r3, [pc, #288]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ffe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800600a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800600e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006016:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800601a:	e021      	b.n	8006060 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006026:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800602a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602e:	4b37      	ldr	r3, [pc, #220]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006042:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800605e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006060:	4b2a      	ldr	r3, [pc, #168]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	0a5b      	lsrs	r3, r3, #9
 8006066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800607a:	edd7 6a07 	vldr	s13, [r7, #28]
 800607e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006086:	ee17 2a90 	vmov	r2, s15
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800608e:	4b1f      	ldr	r3, [pc, #124]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	0c1b      	lsrs	r3, r3, #16
 8006094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b4:	ee17 2a90 	vmov	r2, s15
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80060bc:	4b13      	ldr	r3, [pc, #76]	; (800610c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	0e1b      	lsrs	r3, r3, #24
 80060c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80060da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e2:	ee17 2a90 	vmov	r2, s15
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060ea:	e008      	b.n	80060fe <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	609a      	str	r2, [r3, #8]
}
 80060fe:	bf00      	nop
 8006100:	3724      	adds	r7, #36	; 0x24
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	58024400 	.word	0x58024400
 8006110:	03d09000 	.word	0x03d09000
 8006114:	46000000 	.word	0x46000000
 8006118:	4c742400 	.word	0x4c742400
 800611c:	4a742400 	.word	0x4a742400
 8006120:	4bbebc20 	.word	0x4bbebc20

08006124 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006124:	b480      	push	{r7}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800612c:	4b9d      	ldr	r3, [pc, #628]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006136:	4b9b      	ldr	r3, [pc, #620]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	091b      	lsrs	r3, r3, #4
 800613c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006140:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006142:	4b98      	ldr	r3, [pc, #608]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800614c:	4b95      	ldr	r3, [pc, #596]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800614e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006150:	08db      	lsrs	r3, r3, #3
 8006152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	fb02 f303 	mul.w	r3, r2, r3
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006164:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 810a 	beq.w	8006384 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d05a      	beq.n	800622c <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006176:	2b01      	cmp	r3, #1
 8006178:	d302      	bcc.n	8006180 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800617a:	2b02      	cmp	r3, #2
 800617c:	d078      	beq.n	8006270 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800617e:	e099      	b.n	80062b4 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006180:	4b88      	ldr	r3, [pc, #544]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d02d      	beq.n	80061e8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800618c:	4b85      	ldr	r3, [pc, #532]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	08db      	lsrs	r3, r3, #3
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	4a84      	ldr	r2, [pc, #528]	; (80063a8 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
 800619c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b6:	4b7b      	ldr	r3, [pc, #492]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80061ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80061e6:	e087      	b.n	80062f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80063b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80061f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fa:	4b6a      	ldr	r3, [pc, #424]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620a:	ed97 6a03 	vldr	s12, [r7, #12]
 800620e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80063ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006226:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800622a:	e065      	b.n	80062f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006236:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80063b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800623a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800623e:	4b59      	ldr	r3, [pc, #356]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800624e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006252:	eddf 5a56 	vldr	s11, [pc, #344]	; 80063ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800625a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800625e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800626a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800626e:	e043      	b.n	80062f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800627e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006282:	4b48      	ldr	r3, [pc, #288]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006292:	ed97 6a03 	vldr	s12, [r7, #12]
 8006296:	eddf 5a45 	vldr	s11, [pc, #276]	; 80063ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800629a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062b2:	e021      	b.n	80062f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80063b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80062c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c6:	4b37      	ldr	r3, [pc, #220]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062da:	eddf 5a34 	vldr	s11, [pc, #208]	; 80063ac <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80062de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062f6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80062f8:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	0a5b      	lsrs	r3, r3, #9
 80062fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800630e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006312:	edd7 6a07 	vldr	s13, [r7, #28]
 8006316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800631a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800631e:	ee17 2a90 	vmov	r2, s15
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006326:	4b1f      	ldr	r3, [pc, #124]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006330:	ee07 3a90 	vmov	s15, r3
 8006334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006338:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800633c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006340:	edd7 6a07 	vldr	s13, [r7, #28]
 8006344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800634c:	ee17 2a90 	vmov	r2, s15
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006354:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	0e1b      	lsrs	r3, r3, #24
 800635a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800636a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800636e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800637a:	ee17 2a90 	vmov	r2, s15
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006382:	e008      	b.n	8006396 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	609a      	str	r2, [r3, #8]
}
 8006396:	bf00      	nop
 8006398:	3724      	adds	r7, #36	; 0x24
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	58024400 	.word	0x58024400
 80063a8:	03d09000 	.word	0x03d09000
 80063ac:	46000000 	.word	0x46000000
 80063b0:	4c742400 	.word	0x4c742400
 80063b4:	4a742400 	.word	0x4a742400
 80063b8:	4bbebc20 	.word	0x4bbebc20

080063bc <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80063c0:	f7fe f922 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80063c4:	4601      	mov	r1, r0
 80063c6:	4b08      	ldr	r3, [pc, #32]	; (80063e8 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	0a1b      	lsrs	r3, r3, #8
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	4a06      	ldr	r2, [pc, #24]	; (80063ec <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 80063d2:	5cd3      	ldrb	r3, [r2, r3]
 80063d4:	f003 031f 	and.w	r3, r3, #31
 80063d8:	fa21 f303 	lsr.w	r3, r1, r3
 80063dc:	4a04      	ldr	r2, [pc, #16]	; (80063f0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80063de:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80063e0:	4b03      	ldr	r3, [pc, #12]	; (80063f0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 80063e2:	681b      	ldr	r3, [r3, #0]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	58024400 	.word	0x58024400
 80063ec:	0800b8c4 	.word	0x0800b8c4
 80063f0:	24000000 	.word	0x24000000

080063f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006402:	4b53      	ldr	r3, [pc, #332]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	2b03      	cmp	r3, #3
 800640c:	d101      	bne.n	8006412 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e099      	b.n	8006546 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006412:	4b4f      	ldr	r3, [pc, #316]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a4e      	ldr	r2, [pc, #312]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 8006418:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800641c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800641e:	f7fb fc37 	bl	8001c90 <HAL_GetTick>
 8006422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006424:	e008      	b.n	8006438 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006426:	f7fb fc33 	bl	8001c90 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e086      	b.n	8006546 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006438:	4b45      	ldr	r3, [pc, #276]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1f0      	bne.n	8006426 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006444:	4b42      	ldr	r3, [pc, #264]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	031b      	lsls	r3, r3, #12
 8006452:	493f      	ldr	r1, [pc, #252]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 8006454:	4313      	orrs	r3, r2
 8006456:	628b      	str	r3, [r1, #40]	; 0x28
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	3b01      	subs	r3, #1
 800645e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	3b01      	subs	r3, #1
 8006468:	025b      	lsls	r3, r3, #9
 800646a:	b29b      	uxth	r3, r3
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	3b01      	subs	r3, #1
 8006474:	041b      	lsls	r3, r3, #16
 8006476:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	3b01      	subs	r3, #1
 8006482:	061b      	lsls	r3, r3, #24
 8006484:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006488:	4931      	ldr	r1, [pc, #196]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 800648a:	4313      	orrs	r3, r2
 800648c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800648e:	4b30      	ldr	r3, [pc, #192]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	492d      	ldr	r1, [pc, #180]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 800649c:	4313      	orrs	r3, r2
 800649e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80064a0:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	f023 0220 	bic.w	r2, r3, #32
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	4928      	ldr	r1, [pc, #160]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80064b2:	4b27      	ldr	r3, [pc, #156]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	4a26      	ldr	r2, [pc, #152]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064b8:	f023 0310 	bic.w	r3, r3, #16
 80064bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80064be:	4b24      	ldr	r3, [pc, #144]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064c2:	4b24      	ldr	r3, [pc, #144]	; (8006554 <RCCEx_PLL2_Config+0x160>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	69d2      	ldr	r2, [r2, #28]
 80064ca:	00d2      	lsls	r2, r2, #3
 80064cc:	4920      	ldr	r1, [pc, #128]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80064d2:	4b1f      	ldr	r3, [pc, #124]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064d8:	f043 0310 	orr.w	r3, r3, #16
 80064dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d106      	bne.n	80064f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80064e4:	4b1a      	ldr	r3, [pc, #104]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	4a19      	ldr	r2, [pc, #100]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064f0:	e00f      	b.n	8006512 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d106      	bne.n	8006506 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80064f8:	4b15      	ldr	r3, [pc, #84]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	4a14      	ldr	r2, [pc, #80]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 80064fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006502:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006504:	e005      	b.n	8006512 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006506:	4b12      	ldr	r3, [pc, #72]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 8006508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650a:	4a11      	ldr	r2, [pc, #68]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 800650c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006510:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006512:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a0e      	ldr	r2, [pc, #56]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 8006518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800651c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800651e:	f7fb fbb7 	bl	8001c90 <HAL_GetTick>
 8006522:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006524:	e008      	b.n	8006538 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006526:	f7fb fbb3 	bl	8001c90 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d901      	bls.n	8006538 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e006      	b.n	8006546 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <RCCEx_PLL2_Config+0x15c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0f0      	beq.n	8006526 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006544:	7bfb      	ldrb	r3, [r7, #15]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	58024400 	.word	0x58024400
 8006554:	ffff0007 	.word	0xffff0007

08006558 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006566:	4b53      	ldr	r3, [pc, #332]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b03      	cmp	r3, #3
 8006570:	d101      	bne.n	8006576 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e099      	b.n	80066aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006576:	4b4f      	ldr	r3, [pc, #316]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a4e      	ldr	r2, [pc, #312]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 800657c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006582:	f7fb fb85 	bl	8001c90 <HAL_GetTick>
 8006586:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006588:	e008      	b.n	800659c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800658a:	f7fb fb81 	bl	8001c90 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e086      	b.n	80066aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800659c:	4b45      	ldr	r3, [pc, #276]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1f0      	bne.n	800658a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80065a8:	4b42      	ldr	r3, [pc, #264]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	051b      	lsls	r3, r3, #20
 80065b6:	493f      	ldr	r1, [pc, #252]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	628b      	str	r3, [r1, #40]	; 0x28
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	025b      	lsls	r3, r3, #9
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	061b      	lsls	r3, r3, #24
 80065e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065ec:	4931      	ldr	r1, [pc, #196]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80065f2:	4b30      	ldr	r3, [pc, #192]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	492d      	ldr	r1, [pc, #180]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006600:	4313      	orrs	r3, r2
 8006602:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006604:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	4928      	ldr	r1, [pc, #160]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006612:	4313      	orrs	r3, r2
 8006614:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006616:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	4a26      	ldr	r2, [pc, #152]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 800661c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006620:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006622:	4b24      	ldr	r3, [pc, #144]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006626:	4b24      	ldr	r3, [pc, #144]	; (80066b8 <RCCEx_PLL3_Config+0x160>)
 8006628:	4013      	ands	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	69d2      	ldr	r2, [r2, #28]
 800662e:	00d2      	lsls	r2, r2, #3
 8006630:	4920      	ldr	r1, [pc, #128]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006632:	4313      	orrs	r3, r2
 8006634:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006636:	4b1f      	ldr	r3, [pc, #124]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	4a1e      	ldr	r2, [pc, #120]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 800663c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d106      	bne.n	8006656 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 800664e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006652:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006654:	e00f      	b.n	8006676 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d106      	bne.n	800666a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800665c:	4b15      	ldr	r3, [pc, #84]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	4a14      	ldr	r2, [pc, #80]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006662:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006668:	e005      	b.n	8006676 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800666a:	4b12      	ldr	r3, [pc, #72]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 800666c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666e:	4a11      	ldr	r2, [pc, #68]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006674:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006676:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a0e      	ldr	r2, [pc, #56]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 800667c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006680:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006682:	f7fb fb05 	bl	8001c90 <HAL_GetTick>
 8006686:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006688:	e008      	b.n	800669c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800668a:	f7fb fb01 	bl	8001c90 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e006      	b.n	80066aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800669c:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <RCCEx_PLL3_Config+0x15c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f0      	beq.n	800668a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	58024400 	.word	0x58024400
 80066b8:	ffff0007 	.word	0xffff0007

080066bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e0e2      	b.n	8006898 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a70      	ldr	r2, [pc, #448]	; (80068a0 <HAL_SPI_Init+0x1e4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00f      	beq.n	8006702 <HAL_SPI_Init+0x46>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a6f      	ldr	r2, [pc, #444]	; (80068a4 <HAL_SPI_Init+0x1e8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00a      	beq.n	8006702 <HAL_SPI_Init+0x46>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a6d      	ldr	r2, [pc, #436]	; (80068a8 <HAL_SPI_Init+0x1ec>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d005      	beq.n	8006702 <HAL_SPI_Init+0x46>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b0f      	cmp	r3, #15
 80066fc:	d901      	bls.n	8006702 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e0ca      	b.n	8006898 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f8d2 	bl	80068ac <SPI_GetPacketSize>
 8006708:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a64      	ldr	r2, [pc, #400]	; (80068a0 <HAL_SPI_Init+0x1e4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d00c      	beq.n	800672e <HAL_SPI_Init+0x72>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a62      	ldr	r2, [pc, #392]	; (80068a4 <HAL_SPI_Init+0x1e8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d007      	beq.n	800672e <HAL_SPI_Init+0x72>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a61      	ldr	r2, [pc, #388]	; (80068a8 <HAL_SPI_Init+0x1ec>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d002      	beq.n	800672e <HAL_SPI_Init+0x72>
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b08      	cmp	r3, #8
 800672c:	d811      	bhi.n	8006752 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006732:	4a5b      	ldr	r2, [pc, #364]	; (80068a0 <HAL_SPI_Init+0x1e4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d009      	beq.n	800674c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a59      	ldr	r2, [pc, #356]	; (80068a4 <HAL_SPI_Init+0x1e8>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d004      	beq.n	800674c <HAL_SPI_Init+0x90>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a58      	ldr	r2, [pc, #352]	; (80068a8 <HAL_SPI_Init+0x1ec>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d104      	bne.n	8006756 <HAL_SPI_Init+0x9a>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b10      	cmp	r3, #16
 8006750:	d901      	bls.n	8006756 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e0a0      	b.n	8006898 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fa ff6c 	bl	8001648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006790:	d110      	bne.n	80067b4 <HAL_SPI_Init+0xf8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800679a:	d10b      	bne.n	80067b4 <HAL_SPI_Init+0xf8>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d107      	bne.n	80067b4 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067b2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	431a      	orrs	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	ea42 0103 	orr.w	r1, r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	431a      	orrs	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006814:	ea42 0103 	orr.w	r1, r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d113      	bne.n	8006854 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800683e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006852:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40013000 	.word	0x40013000
 80068a4:	40003800 	.word	0x40003800
 80068a8:	40003c00 	.word	0x40003c00

080068ac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	3301      	adds	r3, #1
 80068c4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	3307      	adds	r3, #7
 80068ca:	08db      	lsrs	r3, r3, #3
 80068cc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	fb02 f303 	mul.w	r3, r2, r3
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e01d      	b.n	8006930 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7fa fee7 	bl	80016dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3304      	adds	r3, #4
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f000 f8a5 	bl	8006a70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800694a:	2b01      	cmp	r3, #1
 800694c:	d101      	bne.n	8006952 <HAL_TIM_IC_ConfigChannel+0x1a>
 800694e:	2302      	movs	r3, #2
 8006950:	e08a      	b.n	8006a68 <HAL_TIM_IC_ConfigChannel+0x130>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2202      	movs	r2, #2
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11b      	bne.n	80069a0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	6819      	ldr	r1, [r3, #0]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f000 f914 	bl	8006ba4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699a      	ldr	r2, [r3, #24]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 020c 	bic.w	r2, r2, #12
 800698a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6999      	ldr	r1, [r3, #24]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	619a      	str	r2, [r3, #24]
 800699e:	e05a      	b.n	8006a56 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d11c      	bne.n	80069e0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	6819      	ldr	r1, [r3, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f000 f969 	bl	8006c8c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699a      	ldr	r2, [r3, #24]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80069c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6999      	ldr	r1, [r3, #24]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	021a      	lsls	r2, r3, #8
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	619a      	str	r2, [r3, #24]
 80069de:	e03a      	b.n	8006a56 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d11b      	bne.n	8006a1e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	6819      	ldr	r1, [r3, #0]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f000 f986 	bl	8006d06 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 020c 	bic.w	r2, r2, #12
 8006a08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69d9      	ldr	r1, [r3, #28]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	61da      	str	r2, [r3, #28]
 8006a1c:	e01b      	b.n	8006a56 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	6819      	ldr	r1, [r3, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f000 f9a6 	bl	8006d7e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006a40:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69d9      	ldr	r1, [r3, #28]
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	021a      	lsls	r2, r3, #8
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a40      	ldr	r2, [pc, #256]	; (8006b84 <TIM_Base_SetConfig+0x114>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d013      	beq.n	8006ab0 <TIM_Base_SetConfig+0x40>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8e:	d00f      	beq.n	8006ab0 <TIM_Base_SetConfig+0x40>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a3d      	ldr	r2, [pc, #244]	; (8006b88 <TIM_Base_SetConfig+0x118>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <TIM_Base_SetConfig+0x40>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a3c      	ldr	r2, [pc, #240]	; (8006b8c <TIM_Base_SetConfig+0x11c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d007      	beq.n	8006ab0 <TIM_Base_SetConfig+0x40>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a3b      	ldr	r2, [pc, #236]	; (8006b90 <TIM_Base_SetConfig+0x120>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <TIM_Base_SetConfig+0x40>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a3a      	ldr	r2, [pc, #232]	; (8006b94 <TIM_Base_SetConfig+0x124>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d108      	bne.n	8006ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a2f      	ldr	r2, [pc, #188]	; (8006b84 <TIM_Base_SetConfig+0x114>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d01f      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad0:	d01b      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a2c      	ldr	r2, [pc, #176]	; (8006b88 <TIM_Base_SetConfig+0x118>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d017      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a2b      	ldr	r2, [pc, #172]	; (8006b8c <TIM_Base_SetConfig+0x11c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2a      	ldr	r2, [pc, #168]	; (8006b90 <TIM_Base_SetConfig+0x120>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00f      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a29      	ldr	r2, [pc, #164]	; (8006b94 <TIM_Base_SetConfig+0x124>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d00b      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a28      	ldr	r2, [pc, #160]	; (8006b98 <TIM_Base_SetConfig+0x128>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d007      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a27      	ldr	r2, [pc, #156]	; (8006b9c <TIM_Base_SetConfig+0x12c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d003      	beq.n	8006b0a <TIM_Base_SetConfig+0x9a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a26      	ldr	r2, [pc, #152]	; (8006ba0 <TIM_Base_SetConfig+0x130>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d108      	bne.n	8006b1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a10      	ldr	r2, [pc, #64]	; (8006b84 <TIM_Base_SetConfig+0x114>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d00f      	beq.n	8006b68 <TIM_Base_SetConfig+0xf8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a12      	ldr	r2, [pc, #72]	; (8006b94 <TIM_Base_SetConfig+0x124>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00b      	beq.n	8006b68 <TIM_Base_SetConfig+0xf8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a11      	ldr	r2, [pc, #68]	; (8006b98 <TIM_Base_SetConfig+0x128>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d007      	beq.n	8006b68 <TIM_Base_SetConfig+0xf8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <TIM_Base_SetConfig+0x12c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_Base_SetConfig+0xf8>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a0f      	ldr	r2, [pc, #60]	; (8006ba0 <TIM_Base_SetConfig+0x130>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d103      	bne.n	8006b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	615a      	str	r2, [r3, #20]
}
 8006b76:	bf00      	nop
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40010000 	.word	0x40010000
 8006b88:	40000400 	.word	0x40000400
 8006b8c:	40000800 	.word	0x40000800
 8006b90:	40000c00 	.word	0x40000c00
 8006b94:	40010400 	.word	0x40010400
 8006b98:	40014000 	.word	0x40014000
 8006b9c:	40014400 	.word	0x40014400
 8006ba0:	40014800 	.word	0x40014800

08006ba4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f023 0201 	bic.w	r2, r3, #1
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4a28      	ldr	r2, [pc, #160]	; (8006c70 <TIM_TI1_SetConfig+0xcc>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d01b      	beq.n	8006c0a <TIM_TI1_SetConfig+0x66>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd8:	d017      	beq.n	8006c0a <TIM_TI1_SetConfig+0x66>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4a25      	ldr	r2, [pc, #148]	; (8006c74 <TIM_TI1_SetConfig+0xd0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <TIM_TI1_SetConfig+0x66>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4a24      	ldr	r2, [pc, #144]	; (8006c78 <TIM_TI1_SetConfig+0xd4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d00f      	beq.n	8006c0a <TIM_TI1_SetConfig+0x66>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4a23      	ldr	r2, [pc, #140]	; (8006c7c <TIM_TI1_SetConfig+0xd8>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d00b      	beq.n	8006c0a <TIM_TI1_SetConfig+0x66>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4a22      	ldr	r2, [pc, #136]	; (8006c80 <TIM_TI1_SetConfig+0xdc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d007      	beq.n	8006c0a <TIM_TI1_SetConfig+0x66>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4a21      	ldr	r2, [pc, #132]	; (8006c84 <TIM_TI1_SetConfig+0xe0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d003      	beq.n	8006c0a <TIM_TI1_SetConfig+0x66>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4a20      	ldr	r2, [pc, #128]	; (8006c88 <TIM_TI1_SetConfig+0xe4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d101      	bne.n	8006c0e <TIM_TI1_SetConfig+0x6a>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <TIM_TI1_SetConfig+0x6c>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f023 0303 	bic.w	r3, r3, #3
 8006c1a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	e003      	b.n	8006c2e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f023 030a 	bic.w	r3, r3, #10
 8006c48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f003 030a 	and.w	r3, r3, #10
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	621a      	str	r2, [r3, #32]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40010400 	.word	0x40010400
 8006c84:	40001800 	.word	0x40001800
 8006c88:	40014000 	.word	0x40014000

08006c8c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f023 0210 	bic.w	r2, r3, #16
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	031b      	lsls	r3, r3, #12
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cde:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b087      	sub	sp, #28
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f023 0303 	bic.w	r3, r3, #3
 8006d32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d42:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d56:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	621a      	str	r2, [r3, #32]
}
 8006d72:	bf00      	nop
 8006d74:	371c      	adds	r7, #28
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr

08006d7e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b087      	sub	sp, #28
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006daa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	031b      	lsls	r3, r3, #12
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	031b      	lsls	r3, r3, #12
 8006dd6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	621a      	str	r2, [r3, #32]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e045      	b.n	8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a1c      	ldr	r2, [pc, #112]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d004      	beq.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1b      	ldr	r2, [pc, #108]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d108      	bne.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e6e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40010000 	.word	0x40010000
 8006eac:	40010400 	.word	0x40010400

08006eb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e042      	b.n	8006f48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d106      	bne.n	8006eda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7fa fc4b 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2224      	movs	r2, #36	; 0x24
 8006ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0201 	bic.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f8c4 	bl	8007080 <UART_SetConfig>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d101      	bne.n	8006f02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e022      	b.n	8006f48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f002 fa36 	bl	800937c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f002 fabd 	bl	80094c0 <UART_CheckIdleState>
 8006f46:	4603      	mov	r3, r0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	; 0x28
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	f040 8083 	bne.w	8007072 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <HAL_UART_Transmit+0x28>
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e07b      	b.n	8007074 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <HAL_UART_Transmit+0x3a>
 8006f86:	2302      	movs	r3, #2
 8006f88:	e074      	b.n	8007074 <HAL_UART_Transmit+0x124>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2221      	movs	r2, #33	; 0x21
 8006f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006fa2:	f7fa fe75 	bl	8001c90 <HAL_GetTick>
 8006fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	88fa      	ldrh	r2, [r7, #6]
 8006fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc0:	d108      	bne.n	8006fd4 <HAL_UART_Transmit+0x84>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d104      	bne.n	8006fd4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	e003      	b.n	8006fdc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fdc:	e02c      	b.n	8007038 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2180      	movs	r1, #128	; 0x80
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f002 fab1 	bl	8009550 <UART_WaitOnFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e03d      	b.n	8007074 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800700c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	3302      	adds	r3, #2
 8007012:	61bb      	str	r3, [r7, #24]
 8007014:	e007      	b.n	8007026 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	781a      	ldrb	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	3301      	adds	r3, #1
 8007024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1cc      	bne.n	8006fde <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2200      	movs	r2, #0
 800704c:	2140      	movs	r1, #64	; 0x40
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f002 fa7e 	bl	8009550 <UART_WaitOnFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e00a      	b.n	8007074 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2220      	movs	r2, #32
 8007062:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	e000      	b.n	8007074 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007072:	2302      	movs	r3, #2
  }
}
 8007074:	4618      	mov	r0, r3
 8007076:	3720      	adds	r7, #32
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	0000      	movs	r0, r0
	...

08007080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007080:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007084:	b090      	sub	sp, #64	; 0x40
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800708a:	2300      	movs	r3, #0
 800708c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007094:	2300      	movs	r3, #0
 8007096:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070b6:	4313      	orrs	r3, r2
 80070b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	4bc1      	ldr	r3, [pc, #772]	; (80073c8 <UART_SetConfig+0x348>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	6812      	ldr	r2, [r2, #0]
 80070c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070ca:	430b      	orrs	r3, r1
 80070cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68da      	ldr	r2, [r3, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4ab7      	ldr	r2, [pc, #732]	; (80073cc <UART_SetConfig+0x34c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d004      	beq.n	80070fe <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070fa:	4313      	orrs	r3, r2
 80070fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	4bb2      	ldr	r3, [pc, #712]	; (80073d0 <UART_SetConfig+0x350>)
 8007106:	4013      	ands	r3, r2
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800710e:	430b      	orrs	r3, r1
 8007110:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	f023 010f 	bic.w	r1, r3, #15
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4aa9      	ldr	r2, [pc, #676]	; (80073d4 <UART_SetConfig+0x354>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d177      	bne.n	8007222 <UART_SetConfig+0x1a2>
 8007132:	4ba9      	ldr	r3, [pc, #676]	; (80073d8 <UART_SetConfig+0x358>)
 8007134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800713a:	2b28      	cmp	r3, #40	; 0x28
 800713c:	d86c      	bhi.n	8007218 <UART_SetConfig+0x198>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <UART_SetConfig+0xc4>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	080071e9 	.word	0x080071e9
 8007148:	08007219 	.word	0x08007219
 800714c:	08007219 	.word	0x08007219
 8007150:	08007219 	.word	0x08007219
 8007154:	08007219 	.word	0x08007219
 8007158:	08007219 	.word	0x08007219
 800715c:	08007219 	.word	0x08007219
 8007160:	08007219 	.word	0x08007219
 8007164:	080071f1 	.word	0x080071f1
 8007168:	08007219 	.word	0x08007219
 800716c:	08007219 	.word	0x08007219
 8007170:	08007219 	.word	0x08007219
 8007174:	08007219 	.word	0x08007219
 8007178:	08007219 	.word	0x08007219
 800717c:	08007219 	.word	0x08007219
 8007180:	08007219 	.word	0x08007219
 8007184:	080071f9 	.word	0x080071f9
 8007188:	08007219 	.word	0x08007219
 800718c:	08007219 	.word	0x08007219
 8007190:	08007219 	.word	0x08007219
 8007194:	08007219 	.word	0x08007219
 8007198:	08007219 	.word	0x08007219
 800719c:	08007219 	.word	0x08007219
 80071a0:	08007219 	.word	0x08007219
 80071a4:	08007201 	.word	0x08007201
 80071a8:	08007219 	.word	0x08007219
 80071ac:	08007219 	.word	0x08007219
 80071b0:	08007219 	.word	0x08007219
 80071b4:	08007219 	.word	0x08007219
 80071b8:	08007219 	.word	0x08007219
 80071bc:	08007219 	.word	0x08007219
 80071c0:	08007219 	.word	0x08007219
 80071c4:	08007209 	.word	0x08007209
 80071c8:	08007219 	.word	0x08007219
 80071cc:	08007219 	.word	0x08007219
 80071d0:	08007219 	.word	0x08007219
 80071d4:	08007219 	.word	0x08007219
 80071d8:	08007219 	.word	0x08007219
 80071dc:	08007219 	.word	0x08007219
 80071e0:	08007219 	.word	0x08007219
 80071e4:	08007211 	.word	0x08007211
 80071e8:	2301      	movs	r3, #1
 80071ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071ee:	e233      	b.n	8007658 <UART_SetConfig+0x5d8>
 80071f0:	2304      	movs	r3, #4
 80071f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071f6:	e22f      	b.n	8007658 <UART_SetConfig+0x5d8>
 80071f8:	2308      	movs	r3, #8
 80071fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80071fe:	e22b      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007200:	2310      	movs	r3, #16
 8007202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007206:	e227      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007208:	2320      	movs	r3, #32
 800720a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800720e:	e223      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007210:	2340      	movs	r3, #64	; 0x40
 8007212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007216:	e21f      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007218:	2380      	movs	r3, #128	; 0x80
 800721a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800721e:	bf00      	nop
 8007220:	e21a      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a6d      	ldr	r2, [pc, #436]	; (80073dc <UART_SetConfig+0x35c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d132      	bne.n	8007292 <UART_SetConfig+0x212>
 800722c:	4b6a      	ldr	r3, [pc, #424]	; (80073d8 <UART_SetConfig+0x358>)
 800722e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	2b05      	cmp	r3, #5
 8007236:	d827      	bhi.n	8007288 <UART_SetConfig+0x208>
 8007238:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <UART_SetConfig+0x1c0>)
 800723a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723e:	bf00      	nop
 8007240:	08007259 	.word	0x08007259
 8007244:	08007261 	.word	0x08007261
 8007248:	08007269 	.word	0x08007269
 800724c:	08007271 	.word	0x08007271
 8007250:	08007279 	.word	0x08007279
 8007254:	08007281 	.word	0x08007281
 8007258:	2300      	movs	r3, #0
 800725a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800725e:	e1fb      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007260:	2304      	movs	r3, #4
 8007262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007266:	e1f7      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007268:	2308      	movs	r3, #8
 800726a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800726e:	e1f3      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007270:	2310      	movs	r3, #16
 8007272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007276:	e1ef      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007278:	2320      	movs	r3, #32
 800727a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800727e:	e1eb      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007286:	e1e7      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800728e:	bf00      	nop
 8007290:	e1e2      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a52      	ldr	r2, [pc, #328]	; (80073e0 <UART_SetConfig+0x360>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d132      	bne.n	8007302 <UART_SetConfig+0x282>
 800729c:	4b4e      	ldr	r3, [pc, #312]	; (80073d8 <UART_SetConfig+0x358>)
 800729e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	2b05      	cmp	r3, #5
 80072a6:	d827      	bhi.n	80072f8 <UART_SetConfig+0x278>
 80072a8:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <UART_SetConfig+0x230>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072c9 	.word	0x080072c9
 80072b4:	080072d1 	.word	0x080072d1
 80072b8:	080072d9 	.word	0x080072d9
 80072bc:	080072e1 	.word	0x080072e1
 80072c0:	080072e9 	.word	0x080072e9
 80072c4:	080072f1 	.word	0x080072f1
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072ce:	e1c3      	b.n	8007658 <UART_SetConfig+0x5d8>
 80072d0:	2304      	movs	r3, #4
 80072d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072d6:	e1bf      	b.n	8007658 <UART_SetConfig+0x5d8>
 80072d8:	2308      	movs	r3, #8
 80072da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072de:	e1bb      	b.n	8007658 <UART_SetConfig+0x5d8>
 80072e0:	2310      	movs	r3, #16
 80072e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072e6:	e1b7      	b.n	8007658 <UART_SetConfig+0x5d8>
 80072e8:	2320      	movs	r3, #32
 80072ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072ee:	e1b3      	b.n	8007658 <UART_SetConfig+0x5d8>
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072f6:	e1af      	b.n	8007658 <UART_SetConfig+0x5d8>
 80072f8:	2380      	movs	r3, #128	; 0x80
 80072fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80072fe:	bf00      	nop
 8007300:	e1aa      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a37      	ldr	r2, [pc, #220]	; (80073e4 <UART_SetConfig+0x364>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d132      	bne.n	8007372 <UART_SetConfig+0x2f2>
 800730c:	4b32      	ldr	r3, [pc, #200]	; (80073d8 <UART_SetConfig+0x358>)
 800730e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	2b05      	cmp	r3, #5
 8007316:	d827      	bhi.n	8007368 <UART_SetConfig+0x2e8>
 8007318:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <UART_SetConfig+0x2a0>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007339 	.word	0x08007339
 8007324:	08007341 	.word	0x08007341
 8007328:	08007349 	.word	0x08007349
 800732c:	08007351 	.word	0x08007351
 8007330:	08007359 	.word	0x08007359
 8007334:	08007361 	.word	0x08007361
 8007338:	2300      	movs	r3, #0
 800733a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800733e:	e18b      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007340:	2304      	movs	r3, #4
 8007342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007346:	e187      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007348:	2308      	movs	r3, #8
 800734a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800734e:	e183      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007350:	2310      	movs	r3, #16
 8007352:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007356:	e17f      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007358:	2320      	movs	r3, #32
 800735a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800735e:	e17b      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007360:	2340      	movs	r3, #64	; 0x40
 8007362:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007366:	e177      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007368:	2380      	movs	r3, #128	; 0x80
 800736a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800736e:	bf00      	nop
 8007370:	e172      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a1c      	ldr	r2, [pc, #112]	; (80073e8 <UART_SetConfig+0x368>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d144      	bne.n	8007406 <UART_SetConfig+0x386>
 800737c:	4b16      	ldr	r3, [pc, #88]	; (80073d8 <UART_SetConfig+0x358>)
 800737e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	2b05      	cmp	r3, #5
 8007386:	d839      	bhi.n	80073fc <UART_SetConfig+0x37c>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <UART_SetConfig+0x310>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073a9 	.word	0x080073a9
 8007394:	080073b1 	.word	0x080073b1
 8007398:	080073b9 	.word	0x080073b9
 800739c:	080073c1 	.word	0x080073c1
 80073a0:	080073ed 	.word	0x080073ed
 80073a4:	080073f5 	.word	0x080073f5
 80073a8:	2300      	movs	r3, #0
 80073aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073ae:	e153      	b.n	8007658 <UART_SetConfig+0x5d8>
 80073b0:	2304      	movs	r3, #4
 80073b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073b6:	e14f      	b.n	8007658 <UART_SetConfig+0x5d8>
 80073b8:	2308      	movs	r3, #8
 80073ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073be:	e14b      	b.n	8007658 <UART_SetConfig+0x5d8>
 80073c0:	2310      	movs	r3, #16
 80073c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073c6:	e147      	b.n	8007658 <UART_SetConfig+0x5d8>
 80073c8:	cfff69f3 	.word	0xcfff69f3
 80073cc:	58000c00 	.word	0x58000c00
 80073d0:	11fff4ff 	.word	0x11fff4ff
 80073d4:	40011000 	.word	0x40011000
 80073d8:	58024400 	.word	0x58024400
 80073dc:	40004400 	.word	0x40004400
 80073e0:	40004800 	.word	0x40004800
 80073e4:	40004c00 	.word	0x40004c00
 80073e8:	40005000 	.word	0x40005000
 80073ec:	2320      	movs	r3, #32
 80073ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073f2:	e131      	b.n	8007658 <UART_SetConfig+0x5d8>
 80073f4:	2340      	movs	r3, #64	; 0x40
 80073f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80073fa:	e12d      	b.n	8007658 <UART_SetConfig+0x5d8>
 80073fc:	2380      	movs	r3, #128	; 0x80
 80073fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007402:	bf00      	nop
 8007404:	e128      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4ac3      	ldr	r2, [pc, #780]	; (8007718 <UART_SetConfig+0x698>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d178      	bne.n	8007502 <UART_SetConfig+0x482>
 8007410:	4bc2      	ldr	r3, [pc, #776]	; (800771c <UART_SetConfig+0x69c>)
 8007412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007418:	2b28      	cmp	r3, #40	; 0x28
 800741a:	d86d      	bhi.n	80074f8 <UART_SetConfig+0x478>
 800741c:	a201      	add	r2, pc, #4	; (adr r2, 8007424 <UART_SetConfig+0x3a4>)
 800741e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007422:	bf00      	nop
 8007424:	080074c9 	.word	0x080074c9
 8007428:	080074f9 	.word	0x080074f9
 800742c:	080074f9 	.word	0x080074f9
 8007430:	080074f9 	.word	0x080074f9
 8007434:	080074f9 	.word	0x080074f9
 8007438:	080074f9 	.word	0x080074f9
 800743c:	080074f9 	.word	0x080074f9
 8007440:	080074f9 	.word	0x080074f9
 8007444:	080074d1 	.word	0x080074d1
 8007448:	080074f9 	.word	0x080074f9
 800744c:	080074f9 	.word	0x080074f9
 8007450:	080074f9 	.word	0x080074f9
 8007454:	080074f9 	.word	0x080074f9
 8007458:	080074f9 	.word	0x080074f9
 800745c:	080074f9 	.word	0x080074f9
 8007460:	080074f9 	.word	0x080074f9
 8007464:	080074d9 	.word	0x080074d9
 8007468:	080074f9 	.word	0x080074f9
 800746c:	080074f9 	.word	0x080074f9
 8007470:	080074f9 	.word	0x080074f9
 8007474:	080074f9 	.word	0x080074f9
 8007478:	080074f9 	.word	0x080074f9
 800747c:	080074f9 	.word	0x080074f9
 8007480:	080074f9 	.word	0x080074f9
 8007484:	080074e1 	.word	0x080074e1
 8007488:	080074f9 	.word	0x080074f9
 800748c:	080074f9 	.word	0x080074f9
 8007490:	080074f9 	.word	0x080074f9
 8007494:	080074f9 	.word	0x080074f9
 8007498:	080074f9 	.word	0x080074f9
 800749c:	080074f9 	.word	0x080074f9
 80074a0:	080074f9 	.word	0x080074f9
 80074a4:	080074e9 	.word	0x080074e9
 80074a8:	080074f9 	.word	0x080074f9
 80074ac:	080074f9 	.word	0x080074f9
 80074b0:	080074f9 	.word	0x080074f9
 80074b4:	080074f9 	.word	0x080074f9
 80074b8:	080074f9 	.word	0x080074f9
 80074bc:	080074f9 	.word	0x080074f9
 80074c0:	080074f9 	.word	0x080074f9
 80074c4:	080074f1 	.word	0x080074f1
 80074c8:	2301      	movs	r3, #1
 80074ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80074ce:	e0c3      	b.n	8007658 <UART_SetConfig+0x5d8>
 80074d0:	2304      	movs	r3, #4
 80074d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80074d6:	e0bf      	b.n	8007658 <UART_SetConfig+0x5d8>
 80074d8:	2308      	movs	r3, #8
 80074da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80074de:	e0bb      	b.n	8007658 <UART_SetConfig+0x5d8>
 80074e0:	2310      	movs	r3, #16
 80074e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80074e6:	e0b7      	b.n	8007658 <UART_SetConfig+0x5d8>
 80074e8:	2320      	movs	r3, #32
 80074ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80074ee:	e0b3      	b.n	8007658 <UART_SetConfig+0x5d8>
 80074f0:	2340      	movs	r3, #64	; 0x40
 80074f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80074f6:	e0af      	b.n	8007658 <UART_SetConfig+0x5d8>
 80074f8:	2380      	movs	r3, #128	; 0x80
 80074fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80074fe:	bf00      	nop
 8007500:	e0aa      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a86      	ldr	r2, [pc, #536]	; (8007720 <UART_SetConfig+0x6a0>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d132      	bne.n	8007572 <UART_SetConfig+0x4f2>
 800750c:	4b83      	ldr	r3, [pc, #524]	; (800771c <UART_SetConfig+0x69c>)
 800750e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007510:	f003 0307 	and.w	r3, r3, #7
 8007514:	2b05      	cmp	r3, #5
 8007516:	d827      	bhi.n	8007568 <UART_SetConfig+0x4e8>
 8007518:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <UART_SetConfig+0x4a0>)
 800751a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751e:	bf00      	nop
 8007520:	08007539 	.word	0x08007539
 8007524:	08007541 	.word	0x08007541
 8007528:	08007549 	.word	0x08007549
 800752c:	08007551 	.word	0x08007551
 8007530:	08007559 	.word	0x08007559
 8007534:	08007561 	.word	0x08007561
 8007538:	2300      	movs	r3, #0
 800753a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800753e:	e08b      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007540:	2304      	movs	r3, #4
 8007542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007546:	e087      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007548:	2308      	movs	r3, #8
 800754a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800754e:	e083      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007550:	2310      	movs	r3, #16
 8007552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007556:	e07f      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007558:	2320      	movs	r3, #32
 800755a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800755e:	e07b      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007560:	2340      	movs	r3, #64	; 0x40
 8007562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007566:	e077      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007568:	2380      	movs	r3, #128	; 0x80
 800756a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800756e:	bf00      	nop
 8007570:	e072      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a6b      	ldr	r2, [pc, #428]	; (8007724 <UART_SetConfig+0x6a4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d132      	bne.n	80075e2 <UART_SetConfig+0x562>
 800757c:	4b67      	ldr	r3, [pc, #412]	; (800771c <UART_SetConfig+0x69c>)
 800757e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007580:	f003 0307 	and.w	r3, r3, #7
 8007584:	2b05      	cmp	r3, #5
 8007586:	d827      	bhi.n	80075d8 <UART_SetConfig+0x558>
 8007588:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <UART_SetConfig+0x510>)
 800758a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758e:	bf00      	nop
 8007590:	080075a9 	.word	0x080075a9
 8007594:	080075b1 	.word	0x080075b1
 8007598:	080075b9 	.word	0x080075b9
 800759c:	080075c1 	.word	0x080075c1
 80075a0:	080075c9 	.word	0x080075c9
 80075a4:	080075d1 	.word	0x080075d1
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075ae:	e053      	b.n	8007658 <UART_SetConfig+0x5d8>
 80075b0:	2304      	movs	r3, #4
 80075b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075b6:	e04f      	b.n	8007658 <UART_SetConfig+0x5d8>
 80075b8:	2308      	movs	r3, #8
 80075ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075be:	e04b      	b.n	8007658 <UART_SetConfig+0x5d8>
 80075c0:	2310      	movs	r3, #16
 80075c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075c6:	e047      	b.n	8007658 <UART_SetConfig+0x5d8>
 80075c8:	2320      	movs	r3, #32
 80075ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075ce:	e043      	b.n	8007658 <UART_SetConfig+0x5d8>
 80075d0:	2340      	movs	r3, #64	; 0x40
 80075d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075d6:	e03f      	b.n	8007658 <UART_SetConfig+0x5d8>
 80075d8:	2380      	movs	r3, #128	; 0x80
 80075da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80075de:	bf00      	nop
 80075e0:	e03a      	b.n	8007658 <UART_SetConfig+0x5d8>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a50      	ldr	r2, [pc, #320]	; (8007728 <UART_SetConfig+0x6a8>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d132      	bne.n	8007652 <UART_SetConfig+0x5d2>
 80075ec:	4b4b      	ldr	r3, [pc, #300]	; (800771c <UART_SetConfig+0x69c>)
 80075ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	d827      	bhi.n	8007648 <UART_SetConfig+0x5c8>
 80075f8:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <UART_SetConfig+0x580>)
 80075fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fe:	bf00      	nop
 8007600:	08007619 	.word	0x08007619
 8007604:	08007621 	.word	0x08007621
 8007608:	08007629 	.word	0x08007629
 800760c:	08007631 	.word	0x08007631
 8007610:	08007639 	.word	0x08007639
 8007614:	08007641 	.word	0x08007641
 8007618:	2302      	movs	r3, #2
 800761a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800761e:	e01b      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007620:	2304      	movs	r3, #4
 8007622:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007626:	e017      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007628:	2308      	movs	r3, #8
 800762a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800762e:	e013      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007630:	2310      	movs	r3, #16
 8007632:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007636:	e00f      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007638:	2320      	movs	r3, #32
 800763a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800763e:	e00b      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007640:	2340      	movs	r3, #64	; 0x40
 8007642:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007646:	e007      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007648:	2380      	movs	r3, #128	; 0x80
 800764a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800764e:	bf00      	nop
 8007650:	e002      	b.n	8007658 <UART_SetConfig+0x5d8>
 8007652:	2380      	movs	r3, #128	; 0x80
 8007654:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a32      	ldr	r2, [pc, #200]	; (8007728 <UART_SetConfig+0x6a8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	f040 86f7 	bne.w	8008452 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007664:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007668:	2b08      	cmp	r3, #8
 800766a:	f000 80c0 	beq.w	80077ee <UART_SetConfig+0x76e>
 800766e:	2b08      	cmp	r3, #8
 8007670:	dc04      	bgt.n	800767c <UART_SetConfig+0x5fc>
 8007672:	2b02      	cmp	r3, #2
 8007674:	d00c      	beq.n	8007690 <UART_SetConfig+0x610>
 8007676:	2b04      	cmp	r3, #4
 8007678:	d065      	beq.n	8007746 <UART_SetConfig+0x6c6>
 800767a:	e27a      	b.n	8007b72 <UART_SetConfig+0xaf2>
 800767c:	2b20      	cmp	r3, #32
 800767e:	f000 81b0 	beq.w	80079e2 <UART_SetConfig+0x962>
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	f000 821e 	beq.w	8007ac4 <UART_SetConfig+0xa44>
 8007688:	2b10      	cmp	r3, #16
 800768a:	f000 8104 	beq.w	8007896 <UART_SetConfig+0x816>
 800768e:	e270      	b.n	8007b72 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007690:	f7fe fa9a 	bl	8005bc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007694:	4602      	mov	r2, r0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	2b00      	cmp	r3, #0
 800769c:	d04e      	beq.n	800773c <UART_SetConfig+0x6bc>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d048      	beq.n	8007738 <UART_SetConfig+0x6b8>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d042      	beq.n	8007734 <UART_SetConfig+0x6b4>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d03c      	beq.n	8007730 <UART_SetConfig+0x6b0>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d036      	beq.n	800772c <UART_SetConfig+0x6ac>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	2b05      	cmp	r3, #5
 80076c4:	d026      	beq.n	8007714 <UART_SetConfig+0x694>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	2b06      	cmp	r3, #6
 80076cc:	d020      	beq.n	8007710 <UART_SetConfig+0x690>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	2b07      	cmp	r3, #7
 80076d4:	d01a      	beq.n	800770c <UART_SetConfig+0x68c>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	2b08      	cmp	r3, #8
 80076dc:	d014      	beq.n	8007708 <UART_SetConfig+0x688>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	2b09      	cmp	r3, #9
 80076e4:	d00e      	beq.n	8007704 <UART_SetConfig+0x684>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	2b0a      	cmp	r3, #10
 80076ec:	d008      	beq.n	8007700 <UART_SetConfig+0x680>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	2b0b      	cmp	r3, #11
 80076f4:	d102      	bne.n	80076fc <UART_SetConfig+0x67c>
 80076f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076fa:	e020      	b.n	800773e <UART_SetConfig+0x6be>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e01e      	b.n	800773e <UART_SetConfig+0x6be>
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	e01c      	b.n	800773e <UART_SetConfig+0x6be>
 8007704:	2340      	movs	r3, #64	; 0x40
 8007706:	e01a      	b.n	800773e <UART_SetConfig+0x6be>
 8007708:	2320      	movs	r3, #32
 800770a:	e018      	b.n	800773e <UART_SetConfig+0x6be>
 800770c:	2310      	movs	r3, #16
 800770e:	e016      	b.n	800773e <UART_SetConfig+0x6be>
 8007710:	230c      	movs	r3, #12
 8007712:	e014      	b.n	800773e <UART_SetConfig+0x6be>
 8007714:	230a      	movs	r3, #10
 8007716:	e012      	b.n	800773e <UART_SetConfig+0x6be>
 8007718:	40011400 	.word	0x40011400
 800771c:	58024400 	.word	0x58024400
 8007720:	40007800 	.word	0x40007800
 8007724:	40007c00 	.word	0x40007c00
 8007728:	58000c00 	.word	0x58000c00
 800772c:	2308      	movs	r3, #8
 800772e:	e006      	b.n	800773e <UART_SetConfig+0x6be>
 8007730:	2306      	movs	r3, #6
 8007732:	e004      	b.n	800773e <UART_SetConfig+0x6be>
 8007734:	2304      	movs	r3, #4
 8007736:	e002      	b.n	800773e <UART_SetConfig+0x6be>
 8007738:	2302      	movs	r3, #2
 800773a:	e000      	b.n	800773e <UART_SetConfig+0x6be>
 800773c:	2301      	movs	r3, #1
 800773e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007744:	e219      	b.n	8007b7a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007746:	f107 0318 	add.w	r3, r7, #24
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fa52 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	2b00      	cmp	r3, #0
 8007758:	d044      	beq.n	80077e4 <UART_SetConfig+0x764>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	2b01      	cmp	r3, #1
 8007760:	d03e      	beq.n	80077e0 <UART_SetConfig+0x760>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	2b02      	cmp	r3, #2
 8007768:	d038      	beq.n	80077dc <UART_SetConfig+0x75c>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	2b03      	cmp	r3, #3
 8007770:	d032      	beq.n	80077d8 <UART_SetConfig+0x758>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007776:	2b04      	cmp	r3, #4
 8007778:	d02c      	beq.n	80077d4 <UART_SetConfig+0x754>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	2b05      	cmp	r3, #5
 8007780:	d026      	beq.n	80077d0 <UART_SetConfig+0x750>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	2b06      	cmp	r3, #6
 8007788:	d020      	beq.n	80077cc <UART_SetConfig+0x74c>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	2b07      	cmp	r3, #7
 8007790:	d01a      	beq.n	80077c8 <UART_SetConfig+0x748>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	2b08      	cmp	r3, #8
 8007798:	d014      	beq.n	80077c4 <UART_SetConfig+0x744>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b09      	cmp	r3, #9
 80077a0:	d00e      	beq.n	80077c0 <UART_SetConfig+0x740>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	2b0a      	cmp	r3, #10
 80077a8:	d008      	beq.n	80077bc <UART_SetConfig+0x73c>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b0b      	cmp	r3, #11
 80077b0:	d102      	bne.n	80077b8 <UART_SetConfig+0x738>
 80077b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077b6:	e016      	b.n	80077e6 <UART_SetConfig+0x766>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e014      	b.n	80077e6 <UART_SetConfig+0x766>
 80077bc:	2380      	movs	r3, #128	; 0x80
 80077be:	e012      	b.n	80077e6 <UART_SetConfig+0x766>
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	e010      	b.n	80077e6 <UART_SetConfig+0x766>
 80077c4:	2320      	movs	r3, #32
 80077c6:	e00e      	b.n	80077e6 <UART_SetConfig+0x766>
 80077c8:	2310      	movs	r3, #16
 80077ca:	e00c      	b.n	80077e6 <UART_SetConfig+0x766>
 80077cc:	230c      	movs	r3, #12
 80077ce:	e00a      	b.n	80077e6 <UART_SetConfig+0x766>
 80077d0:	230a      	movs	r3, #10
 80077d2:	e008      	b.n	80077e6 <UART_SetConfig+0x766>
 80077d4:	2308      	movs	r3, #8
 80077d6:	e006      	b.n	80077e6 <UART_SetConfig+0x766>
 80077d8:	2306      	movs	r3, #6
 80077da:	e004      	b.n	80077e6 <UART_SetConfig+0x766>
 80077dc:	2304      	movs	r3, #4
 80077de:	e002      	b.n	80077e6 <UART_SetConfig+0x766>
 80077e0:	2302      	movs	r3, #2
 80077e2:	e000      	b.n	80077e6 <UART_SetConfig+0x766>
 80077e4:	2301      	movs	r3, #1
 80077e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80077ec:	e1c5      	b.n	8007b7a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077ee:	f107 030c 	add.w	r3, r7, #12
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fe fb4a 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d044      	beq.n	800788c <UART_SetConfig+0x80c>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	2b01      	cmp	r3, #1
 8007808:	d03e      	beq.n	8007888 <UART_SetConfig+0x808>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	2b02      	cmp	r3, #2
 8007810:	d038      	beq.n	8007884 <UART_SetConfig+0x804>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2b03      	cmp	r3, #3
 8007818:	d032      	beq.n	8007880 <UART_SetConfig+0x800>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781e:	2b04      	cmp	r3, #4
 8007820:	d02c      	beq.n	800787c <UART_SetConfig+0x7fc>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	2b05      	cmp	r3, #5
 8007828:	d026      	beq.n	8007878 <UART_SetConfig+0x7f8>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	2b06      	cmp	r3, #6
 8007830:	d020      	beq.n	8007874 <UART_SetConfig+0x7f4>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	2b07      	cmp	r3, #7
 8007838:	d01a      	beq.n	8007870 <UART_SetConfig+0x7f0>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b08      	cmp	r3, #8
 8007840:	d014      	beq.n	800786c <UART_SetConfig+0x7ec>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	2b09      	cmp	r3, #9
 8007848:	d00e      	beq.n	8007868 <UART_SetConfig+0x7e8>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b0a      	cmp	r3, #10
 8007850:	d008      	beq.n	8007864 <UART_SetConfig+0x7e4>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	2b0b      	cmp	r3, #11
 8007858:	d102      	bne.n	8007860 <UART_SetConfig+0x7e0>
 800785a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800785e:	e016      	b.n	800788e <UART_SetConfig+0x80e>
 8007860:	2301      	movs	r3, #1
 8007862:	e014      	b.n	800788e <UART_SetConfig+0x80e>
 8007864:	2380      	movs	r3, #128	; 0x80
 8007866:	e012      	b.n	800788e <UART_SetConfig+0x80e>
 8007868:	2340      	movs	r3, #64	; 0x40
 800786a:	e010      	b.n	800788e <UART_SetConfig+0x80e>
 800786c:	2320      	movs	r3, #32
 800786e:	e00e      	b.n	800788e <UART_SetConfig+0x80e>
 8007870:	2310      	movs	r3, #16
 8007872:	e00c      	b.n	800788e <UART_SetConfig+0x80e>
 8007874:	230c      	movs	r3, #12
 8007876:	e00a      	b.n	800788e <UART_SetConfig+0x80e>
 8007878:	230a      	movs	r3, #10
 800787a:	e008      	b.n	800788e <UART_SetConfig+0x80e>
 800787c:	2308      	movs	r3, #8
 800787e:	e006      	b.n	800788e <UART_SetConfig+0x80e>
 8007880:	2306      	movs	r3, #6
 8007882:	e004      	b.n	800788e <UART_SetConfig+0x80e>
 8007884:	2304      	movs	r3, #4
 8007886:	e002      	b.n	800788e <UART_SetConfig+0x80e>
 8007888:	2302      	movs	r3, #2
 800788a:	e000      	b.n	800788e <UART_SetConfig+0x80e>
 800788c:	2301      	movs	r3, #1
 800788e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007894:	e171      	b.n	8007b7a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007896:	4b7a      	ldr	r3, [pc, #488]	; (8007a80 <UART_SetConfig+0xa00>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d054      	beq.n	800794c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80078a2:	4b77      	ldr	r3, [pc, #476]	; (8007a80 <UART_SetConfig+0xa00>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	08db      	lsrs	r3, r3, #3
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	4a75      	ldr	r2, [pc, #468]	; (8007a84 <UART_SetConfig+0xa04>)
 80078ae:	40da      	lsrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d044      	beq.n	8007942 <UART_SetConfig+0x8c2>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d03e      	beq.n	800793e <UART_SetConfig+0x8be>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d038      	beq.n	800793a <UART_SetConfig+0x8ba>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d032      	beq.n	8007936 <UART_SetConfig+0x8b6>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d02c      	beq.n	8007932 <UART_SetConfig+0x8b2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	2b05      	cmp	r3, #5
 80078de:	d026      	beq.n	800792e <UART_SetConfig+0x8ae>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	2b06      	cmp	r3, #6
 80078e6:	d020      	beq.n	800792a <UART_SetConfig+0x8aa>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	2b07      	cmp	r3, #7
 80078ee:	d01a      	beq.n	8007926 <UART_SetConfig+0x8a6>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d014      	beq.n	8007922 <UART_SetConfig+0x8a2>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2b09      	cmp	r3, #9
 80078fe:	d00e      	beq.n	800791e <UART_SetConfig+0x89e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	2b0a      	cmp	r3, #10
 8007906:	d008      	beq.n	800791a <UART_SetConfig+0x89a>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	2b0b      	cmp	r3, #11
 800790e:	d102      	bne.n	8007916 <UART_SetConfig+0x896>
 8007910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007914:	e016      	b.n	8007944 <UART_SetConfig+0x8c4>
 8007916:	2301      	movs	r3, #1
 8007918:	e014      	b.n	8007944 <UART_SetConfig+0x8c4>
 800791a:	2380      	movs	r3, #128	; 0x80
 800791c:	e012      	b.n	8007944 <UART_SetConfig+0x8c4>
 800791e:	2340      	movs	r3, #64	; 0x40
 8007920:	e010      	b.n	8007944 <UART_SetConfig+0x8c4>
 8007922:	2320      	movs	r3, #32
 8007924:	e00e      	b.n	8007944 <UART_SetConfig+0x8c4>
 8007926:	2310      	movs	r3, #16
 8007928:	e00c      	b.n	8007944 <UART_SetConfig+0x8c4>
 800792a:	230c      	movs	r3, #12
 800792c:	e00a      	b.n	8007944 <UART_SetConfig+0x8c4>
 800792e:	230a      	movs	r3, #10
 8007930:	e008      	b.n	8007944 <UART_SetConfig+0x8c4>
 8007932:	2308      	movs	r3, #8
 8007934:	e006      	b.n	8007944 <UART_SetConfig+0x8c4>
 8007936:	2306      	movs	r3, #6
 8007938:	e004      	b.n	8007944 <UART_SetConfig+0x8c4>
 800793a:	2304      	movs	r3, #4
 800793c:	e002      	b.n	8007944 <UART_SetConfig+0x8c4>
 800793e:	2302      	movs	r3, #2
 8007940:	e000      	b.n	8007944 <UART_SetConfig+0x8c4>
 8007942:	2301      	movs	r3, #1
 8007944:	fbb2 f3f3 	udiv	r3, r2, r3
 8007948:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800794a:	e116      	b.n	8007b7a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d043      	beq.n	80079dc <UART_SetConfig+0x95c>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	2b01      	cmp	r3, #1
 800795a:	d03d      	beq.n	80079d8 <UART_SetConfig+0x958>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	2b02      	cmp	r3, #2
 8007962:	d037      	beq.n	80079d4 <UART_SetConfig+0x954>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	2b03      	cmp	r3, #3
 800796a:	d031      	beq.n	80079d0 <UART_SetConfig+0x950>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	2b04      	cmp	r3, #4
 8007972:	d02b      	beq.n	80079cc <UART_SetConfig+0x94c>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	2b05      	cmp	r3, #5
 800797a:	d025      	beq.n	80079c8 <UART_SetConfig+0x948>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	2b06      	cmp	r3, #6
 8007982:	d01f      	beq.n	80079c4 <UART_SetConfig+0x944>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	2b07      	cmp	r3, #7
 800798a:	d019      	beq.n	80079c0 <UART_SetConfig+0x940>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	2b08      	cmp	r3, #8
 8007992:	d013      	beq.n	80079bc <UART_SetConfig+0x93c>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	2b09      	cmp	r3, #9
 800799a:	d00d      	beq.n	80079b8 <UART_SetConfig+0x938>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	2b0a      	cmp	r3, #10
 80079a2:	d007      	beq.n	80079b4 <UART_SetConfig+0x934>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	2b0b      	cmp	r3, #11
 80079aa:	d101      	bne.n	80079b0 <UART_SetConfig+0x930>
 80079ac:	4b36      	ldr	r3, [pc, #216]	; (8007a88 <UART_SetConfig+0xa08>)
 80079ae:	e016      	b.n	80079de <UART_SetConfig+0x95e>
 80079b0:	4b34      	ldr	r3, [pc, #208]	; (8007a84 <UART_SetConfig+0xa04>)
 80079b2:	e014      	b.n	80079de <UART_SetConfig+0x95e>
 80079b4:	4b35      	ldr	r3, [pc, #212]	; (8007a8c <UART_SetConfig+0xa0c>)
 80079b6:	e012      	b.n	80079de <UART_SetConfig+0x95e>
 80079b8:	4b35      	ldr	r3, [pc, #212]	; (8007a90 <UART_SetConfig+0xa10>)
 80079ba:	e010      	b.n	80079de <UART_SetConfig+0x95e>
 80079bc:	4b35      	ldr	r3, [pc, #212]	; (8007a94 <UART_SetConfig+0xa14>)
 80079be:	e00e      	b.n	80079de <UART_SetConfig+0x95e>
 80079c0:	4b35      	ldr	r3, [pc, #212]	; (8007a98 <UART_SetConfig+0xa18>)
 80079c2:	e00c      	b.n	80079de <UART_SetConfig+0x95e>
 80079c4:	4b35      	ldr	r3, [pc, #212]	; (8007a9c <UART_SetConfig+0xa1c>)
 80079c6:	e00a      	b.n	80079de <UART_SetConfig+0x95e>
 80079c8:	4b35      	ldr	r3, [pc, #212]	; (8007aa0 <UART_SetConfig+0xa20>)
 80079ca:	e008      	b.n	80079de <UART_SetConfig+0x95e>
 80079cc:	4b35      	ldr	r3, [pc, #212]	; (8007aa4 <UART_SetConfig+0xa24>)
 80079ce:	e006      	b.n	80079de <UART_SetConfig+0x95e>
 80079d0:	4b35      	ldr	r3, [pc, #212]	; (8007aa8 <UART_SetConfig+0xa28>)
 80079d2:	e004      	b.n	80079de <UART_SetConfig+0x95e>
 80079d4:	4b35      	ldr	r3, [pc, #212]	; (8007aac <UART_SetConfig+0xa2c>)
 80079d6:	e002      	b.n	80079de <UART_SetConfig+0x95e>
 80079d8:	4b35      	ldr	r3, [pc, #212]	; (8007ab0 <UART_SetConfig+0xa30>)
 80079da:	e000      	b.n	80079de <UART_SetConfig+0x95e>
 80079dc:	4b29      	ldr	r3, [pc, #164]	; (8007a84 <UART_SetConfig+0xa04>)
 80079de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079e0:	e0cb      	b.n	8007b7a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d046      	beq.n	8007a78 <UART_SetConfig+0x9f8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d040      	beq.n	8007a74 <UART_SetConfig+0x9f4>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d03a      	beq.n	8007a70 <UART_SetConfig+0x9f0>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	2b03      	cmp	r3, #3
 8007a00:	d034      	beq.n	8007a6c <UART_SetConfig+0x9ec>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	d02e      	beq.n	8007a68 <UART_SetConfig+0x9e8>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	d028      	beq.n	8007a64 <UART_SetConfig+0x9e4>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	2b06      	cmp	r3, #6
 8007a18:	d022      	beq.n	8007a60 <UART_SetConfig+0x9e0>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	2b07      	cmp	r3, #7
 8007a20:	d01c      	beq.n	8007a5c <UART_SetConfig+0x9dc>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	2b08      	cmp	r3, #8
 8007a28:	d016      	beq.n	8007a58 <UART_SetConfig+0x9d8>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	d00f      	beq.n	8007a52 <UART_SetConfig+0x9d2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	2b0a      	cmp	r3, #10
 8007a38:	d008      	beq.n	8007a4c <UART_SetConfig+0x9cc>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3e:	2b0b      	cmp	r3, #11
 8007a40:	d102      	bne.n	8007a48 <UART_SetConfig+0x9c8>
 8007a42:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007a46:	e018      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a48:	4b13      	ldr	r3, [pc, #76]	; (8007a98 <UART_SetConfig+0xa18>)
 8007a4a:	e016      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a4c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007a50:	e013      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a52:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007a56:	e010      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a58:	4b16      	ldr	r3, [pc, #88]	; (8007ab4 <UART_SetConfig+0xa34>)
 8007a5a:	e00e      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <UART_SetConfig+0xa08>)
 8007a5e:	e00c      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a60:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <UART_SetConfig+0xa38>)
 8007a62:	e00a      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a64:	4b15      	ldr	r3, [pc, #84]	; (8007abc <UART_SetConfig+0xa3c>)
 8007a66:	e008      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a68:	4b08      	ldr	r3, [pc, #32]	; (8007a8c <UART_SetConfig+0xa0c>)
 8007a6a:	e006      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a6c:	4b14      	ldr	r3, [pc, #80]	; (8007ac0 <UART_SetConfig+0xa40>)
 8007a6e:	e004      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a70:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <UART_SetConfig+0xa10>)
 8007a72:	e002      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a74:	4b07      	ldr	r3, [pc, #28]	; (8007a94 <UART_SetConfig+0xa14>)
 8007a76:	e000      	b.n	8007a7a <UART_SetConfig+0x9fa>
 8007a78:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <UART_SetConfig+0xa18>)
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a7c:	e07d      	b.n	8007b7a <UART_SetConfig+0xafa>
 8007a7e:	bf00      	nop
 8007a80:	58024400 	.word	0x58024400
 8007a84:	03d09000 	.word	0x03d09000
 8007a88:	0003d090 	.word	0x0003d090
 8007a8c:	0007a120 	.word	0x0007a120
 8007a90:	000f4240 	.word	0x000f4240
 8007a94:	001e8480 	.word	0x001e8480
 8007a98:	003d0900 	.word	0x003d0900
 8007a9c:	00516155 	.word	0x00516155
 8007aa0:	0061a800 	.word	0x0061a800
 8007aa4:	007a1200 	.word	0x007a1200
 8007aa8:	00a2c2aa 	.word	0x00a2c2aa
 8007aac:	00f42400 	.word	0x00f42400
 8007ab0:	01e84800 	.word	0x01e84800
 8007ab4:	0001e848 	.word	0x0001e848
 8007ab8:	00051615 	.word	0x00051615
 8007abc:	00061a80 	.word	0x00061a80
 8007ac0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d04e      	beq.n	8007b6a <UART_SetConfig+0xaea>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d047      	beq.n	8007b64 <UART_SetConfig+0xae4>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d040      	beq.n	8007b5e <UART_SetConfig+0xade>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d039      	beq.n	8007b58 <UART_SetConfig+0xad8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d032      	beq.n	8007b52 <UART_SetConfig+0xad2>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2b05      	cmp	r3, #5
 8007af2:	d02b      	beq.n	8007b4c <UART_SetConfig+0xacc>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b06      	cmp	r3, #6
 8007afa:	d024      	beq.n	8007b46 <UART_SetConfig+0xac6>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	2b07      	cmp	r3, #7
 8007b02:	d01d      	beq.n	8007b40 <UART_SetConfig+0xac0>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d016      	beq.n	8007b3a <UART_SetConfig+0xaba>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b09      	cmp	r3, #9
 8007b12:	d00f      	beq.n	8007b34 <UART_SetConfig+0xab4>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b18:	2b0a      	cmp	r3, #10
 8007b1a:	d008      	beq.n	8007b2e <UART_SetConfig+0xaae>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	2b0b      	cmp	r3, #11
 8007b22:	d101      	bne.n	8007b28 <UART_SetConfig+0xaa8>
 8007b24:	2380      	movs	r3, #128	; 0x80
 8007b26:	e022      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b2c:	e01f      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b32:	e01c      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b38:	e019      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b3e:	e016      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b44:	e013      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b46:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007b4a:	e010      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b4c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007b50:	e00d      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b56:	e00a      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b58:	f241 5355 	movw	r3, #5461	; 0x1555
 8007b5c:	e007      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b62:	e004      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b68:	e001      	b.n	8007b6e <UART_SetConfig+0xaee>
 8007b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b70:	e003      	b.n	8007b7a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007b78:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f001 83e8 	beq.w	8009352 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	4613      	mov	r3, r2
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	4413      	add	r3, r2
 8007b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d305      	bcc.n	8007b9e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d904      	bls.n	8007ba8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ba4:	f001 bbd5 	b.w	8009352 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007ba8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	f000 8154 	beq.w	8007e5a <UART_SetConfig+0xdda>
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	dc06      	bgt.n	8007bc4 <UART_SetConfig+0xb44>
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d00f      	beq.n	8007bda <UART_SetConfig+0xb5a>
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	f000 80ac 	beq.w	8007d18 <UART_SetConfig+0xc98>
 8007bc0:	f000 bc30 	b.w	8008424 <UART_SetConfig+0x13a4>
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	f000 832d 	beq.w	8008224 <UART_SetConfig+0x11a4>
 8007bca:	2b40      	cmp	r3, #64	; 0x40
 8007bcc:	f000 83a5 	beq.w	800831a <UART_SetConfig+0x129a>
 8007bd0:	2b10      	cmp	r3, #16
 8007bd2:	f000 81e3 	beq.w	8007f9c <UART_SetConfig+0xf1c>
 8007bd6:	f000 bc25 	b.w	8008424 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007bda:	f7fd fff5 	bl	8005bc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007bde:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	4618      	mov	r0, r3
 8007be4:	f04f 0100 	mov.w	r1, #0
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d067      	beq.n	8007cc0 <UART_SetConfig+0xc40>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d05e      	beq.n	8007cb6 <UART_SetConfig+0xc36>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d055      	beq.n	8007cac <UART_SetConfig+0xc2c>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d04c      	beq.n	8007ca2 <UART_SetConfig+0xc22>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d043      	beq.n	8007c98 <UART_SetConfig+0xc18>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	2b05      	cmp	r3, #5
 8007c16:	d03a      	beq.n	8007c8e <UART_SetConfig+0xc0e>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	2b06      	cmp	r3, #6
 8007c1e:	d031      	beq.n	8007c84 <UART_SetConfig+0xc04>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	2b07      	cmp	r3, #7
 8007c26:	d028      	beq.n	8007c7a <UART_SetConfig+0xbfa>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d01f      	beq.n	8007c70 <UART_SetConfig+0xbf0>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	d016      	beq.n	8007c66 <UART_SetConfig+0xbe6>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	2b0a      	cmp	r3, #10
 8007c3e:	d00d      	beq.n	8007c5c <UART_SetConfig+0xbdc>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b0b      	cmp	r3, #11
 8007c46:	d104      	bne.n	8007c52 <UART_SetConfig+0xbd2>
 8007c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c4c:	f04f 0400 	mov.w	r4, #0
 8007c50:	e03a      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007c52:	f04f 0301 	mov.w	r3, #1
 8007c56:	f04f 0400 	mov.w	r4, #0
 8007c5a:	e035      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007c5c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007c60:	f04f 0400 	mov.w	r4, #0
 8007c64:	e030      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007c66:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007c6a:	f04f 0400 	mov.w	r4, #0
 8007c6e:	e02b      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007c70:	f04f 0320 	mov.w	r3, #32
 8007c74:	f04f 0400 	mov.w	r4, #0
 8007c78:	e026      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007c7a:	f04f 0310 	mov.w	r3, #16
 8007c7e:	f04f 0400 	mov.w	r4, #0
 8007c82:	e021      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007c84:	f04f 030c 	mov.w	r3, #12
 8007c88:	f04f 0400 	mov.w	r4, #0
 8007c8c:	e01c      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007c8e:	f04f 030a 	mov.w	r3, #10
 8007c92:	f04f 0400 	mov.w	r4, #0
 8007c96:	e017      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007c98:	f04f 0308 	mov.w	r3, #8
 8007c9c:	f04f 0400 	mov.w	r4, #0
 8007ca0:	e012      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007ca2:	f04f 0306 	mov.w	r3, #6
 8007ca6:	f04f 0400 	mov.w	r4, #0
 8007caa:	e00d      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007cac:	f04f 0304 	mov.w	r3, #4
 8007cb0:	f04f 0400 	mov.w	r4, #0
 8007cb4:	e008      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007cb6:	f04f 0302 	mov.w	r3, #2
 8007cba:	f04f 0400 	mov.w	r4, #0
 8007cbe:	e003      	b.n	8007cc8 <UART_SetConfig+0xc48>
 8007cc0:	f04f 0301 	mov.w	r3, #1
 8007cc4:	f04f 0400 	mov.w	r4, #0
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4623      	mov	r3, r4
 8007ccc:	f7f8 fb60 	bl	8000390 <__aeabi_uldivmod>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	f04f 0300 	mov.w	r3, #0
 8007cdc:	f04f 0400 	mov.w	r4, #0
 8007ce0:	0214      	lsls	r4, r2, #8
 8007ce2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007ce6:	020b      	lsls	r3, r1, #8
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6852      	ldr	r2, [r2, #4]
 8007cec:	0852      	lsrs	r2, r2, #1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	eb13 0b01 	adds.w	fp, r3, r1
 8007cf8:	eb44 0c02 	adc.w	ip, r4, r2
 8007cfc:	4658      	mov	r0, fp
 8007cfe:	4661      	mov	r1, ip
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f04f 0400 	mov.w	r4, #0
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4623      	mov	r3, r4
 8007d0c:	f7f8 fb40 	bl	8000390 <__aeabi_uldivmod>
 8007d10:	4603      	mov	r3, r0
 8007d12:	460c      	mov	r4, r1
 8007d14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d16:	e389      	b.n	800842c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d18:	f107 0318 	add.w	r3, r7, #24
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fd ff69 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f04f 0100 	mov.w	r1, #0
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d067      	beq.n	8007e02 <UART_SetConfig+0xd82>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d05e      	beq.n	8007df8 <UART_SetConfig+0xd78>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d055      	beq.n	8007dee <UART_SetConfig+0xd6e>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d04c      	beq.n	8007de4 <UART_SetConfig+0xd64>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d043      	beq.n	8007dda <UART_SetConfig+0xd5a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	2b05      	cmp	r3, #5
 8007d58:	d03a      	beq.n	8007dd0 <UART_SetConfig+0xd50>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	2b06      	cmp	r3, #6
 8007d60:	d031      	beq.n	8007dc6 <UART_SetConfig+0xd46>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	2b07      	cmp	r3, #7
 8007d68:	d028      	beq.n	8007dbc <UART_SetConfig+0xd3c>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	2b08      	cmp	r3, #8
 8007d70:	d01f      	beq.n	8007db2 <UART_SetConfig+0xd32>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	2b09      	cmp	r3, #9
 8007d78:	d016      	beq.n	8007da8 <UART_SetConfig+0xd28>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	2b0a      	cmp	r3, #10
 8007d80:	d00d      	beq.n	8007d9e <UART_SetConfig+0xd1e>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	2b0b      	cmp	r3, #11
 8007d88:	d104      	bne.n	8007d94 <UART_SetConfig+0xd14>
 8007d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d8e:	f04f 0400 	mov.w	r4, #0
 8007d92:	e03a      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007d94:	f04f 0301 	mov.w	r3, #1
 8007d98:	f04f 0400 	mov.w	r4, #0
 8007d9c:	e035      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007d9e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007da2:	f04f 0400 	mov.w	r4, #0
 8007da6:	e030      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007da8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007dac:	f04f 0400 	mov.w	r4, #0
 8007db0:	e02b      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007db2:	f04f 0320 	mov.w	r3, #32
 8007db6:	f04f 0400 	mov.w	r4, #0
 8007dba:	e026      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007dbc:	f04f 0310 	mov.w	r3, #16
 8007dc0:	f04f 0400 	mov.w	r4, #0
 8007dc4:	e021      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007dc6:	f04f 030c 	mov.w	r3, #12
 8007dca:	f04f 0400 	mov.w	r4, #0
 8007dce:	e01c      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007dd0:	f04f 030a 	mov.w	r3, #10
 8007dd4:	f04f 0400 	mov.w	r4, #0
 8007dd8:	e017      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007dda:	f04f 0308 	mov.w	r3, #8
 8007dde:	f04f 0400 	mov.w	r4, #0
 8007de2:	e012      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007de4:	f04f 0306 	mov.w	r3, #6
 8007de8:	f04f 0400 	mov.w	r4, #0
 8007dec:	e00d      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007dee:	f04f 0304 	mov.w	r3, #4
 8007df2:	f04f 0400 	mov.w	r4, #0
 8007df6:	e008      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007df8:	f04f 0302 	mov.w	r3, #2
 8007dfc:	f04f 0400 	mov.w	r4, #0
 8007e00:	e003      	b.n	8007e0a <UART_SetConfig+0xd8a>
 8007e02:	f04f 0301 	mov.w	r3, #1
 8007e06:	f04f 0400 	mov.w	r4, #0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	f7f8 fabf 	bl	8000390 <__aeabi_uldivmod>
 8007e12:	4603      	mov	r3, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	4619      	mov	r1, r3
 8007e18:	4622      	mov	r2, r4
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	f04f 0400 	mov.w	r4, #0
 8007e22:	0214      	lsls	r4, r2, #8
 8007e24:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007e28:	020b      	lsls	r3, r1, #8
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6852      	ldr	r2, [r2, #4]
 8007e2e:	0852      	lsrs	r2, r2, #1
 8007e30:	4611      	mov	r1, r2
 8007e32:	f04f 0200 	mov.w	r2, #0
 8007e36:	eb13 0b01 	adds.w	fp, r3, r1
 8007e3a:	eb44 0c02 	adc.w	ip, r4, r2
 8007e3e:	4658      	mov	r0, fp
 8007e40:	4661      	mov	r1, ip
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f04f 0400 	mov.w	r4, #0
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	4623      	mov	r3, r4
 8007e4e:	f7f8 fa9f 	bl	8000390 <__aeabi_uldivmod>
 8007e52:	4603      	mov	r3, r0
 8007e54:	460c      	mov	r4, r1
 8007e56:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e58:	e2e8      	b.n	800842c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e5a:	f107 030c 	add.w	r3, r7, #12
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe f814 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f04f 0100 	mov.w	r1, #0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d067      	beq.n	8007f44 <UART_SetConfig+0xec4>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d05e      	beq.n	8007f3a <UART_SetConfig+0xeba>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d055      	beq.n	8007f30 <UART_SetConfig+0xeb0>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d04c      	beq.n	8007f26 <UART_SetConfig+0xea6>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d043      	beq.n	8007f1c <UART_SetConfig+0xe9c>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b05      	cmp	r3, #5
 8007e9a:	d03a      	beq.n	8007f12 <UART_SetConfig+0xe92>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	2b06      	cmp	r3, #6
 8007ea2:	d031      	beq.n	8007f08 <UART_SetConfig+0xe88>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	2b07      	cmp	r3, #7
 8007eaa:	d028      	beq.n	8007efe <UART_SetConfig+0xe7e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d01f      	beq.n	8007ef4 <UART_SetConfig+0xe74>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	2b09      	cmp	r3, #9
 8007eba:	d016      	beq.n	8007eea <UART_SetConfig+0xe6a>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	2b0a      	cmp	r3, #10
 8007ec2:	d00d      	beq.n	8007ee0 <UART_SetConfig+0xe60>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	2b0b      	cmp	r3, #11
 8007eca:	d104      	bne.n	8007ed6 <UART_SetConfig+0xe56>
 8007ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ed0:	f04f 0400 	mov.w	r4, #0
 8007ed4:	e03a      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007ed6:	f04f 0301 	mov.w	r3, #1
 8007eda:	f04f 0400 	mov.w	r4, #0
 8007ede:	e035      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007ee0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007ee4:	f04f 0400 	mov.w	r4, #0
 8007ee8:	e030      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007eea:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007eee:	f04f 0400 	mov.w	r4, #0
 8007ef2:	e02b      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007ef4:	f04f 0320 	mov.w	r3, #32
 8007ef8:	f04f 0400 	mov.w	r4, #0
 8007efc:	e026      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007efe:	f04f 0310 	mov.w	r3, #16
 8007f02:	f04f 0400 	mov.w	r4, #0
 8007f06:	e021      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007f08:	f04f 030c 	mov.w	r3, #12
 8007f0c:	f04f 0400 	mov.w	r4, #0
 8007f10:	e01c      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007f12:	f04f 030a 	mov.w	r3, #10
 8007f16:	f04f 0400 	mov.w	r4, #0
 8007f1a:	e017      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007f1c:	f04f 0308 	mov.w	r3, #8
 8007f20:	f04f 0400 	mov.w	r4, #0
 8007f24:	e012      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007f26:	f04f 0306 	mov.w	r3, #6
 8007f2a:	f04f 0400 	mov.w	r4, #0
 8007f2e:	e00d      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007f30:	f04f 0304 	mov.w	r3, #4
 8007f34:	f04f 0400 	mov.w	r4, #0
 8007f38:	e008      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007f3a:	f04f 0302 	mov.w	r3, #2
 8007f3e:	f04f 0400 	mov.w	r4, #0
 8007f42:	e003      	b.n	8007f4c <UART_SetConfig+0xecc>
 8007f44:	f04f 0301 	mov.w	r3, #1
 8007f48:	f04f 0400 	mov.w	r4, #0
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4623      	mov	r3, r4
 8007f50:	f7f8 fa1e 	bl	8000390 <__aeabi_uldivmod>
 8007f54:	4603      	mov	r3, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4622      	mov	r2, r4
 8007f5c:	f04f 0300 	mov.w	r3, #0
 8007f60:	f04f 0400 	mov.w	r4, #0
 8007f64:	0214      	lsls	r4, r2, #8
 8007f66:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007f6a:	020b      	lsls	r3, r1, #8
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6852      	ldr	r2, [r2, #4]
 8007f70:	0852      	lsrs	r2, r2, #1
 8007f72:	4611      	mov	r1, r2
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	eb13 0b01 	adds.w	fp, r3, r1
 8007f7c:	eb44 0c02 	adc.w	ip, r4, r2
 8007f80:	4658      	mov	r0, fp
 8007f82:	4661      	mov	r1, ip
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f04f 0400 	mov.w	r4, #0
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	4623      	mov	r3, r4
 8007f90:	f7f8 f9fe 	bl	8000390 <__aeabi_uldivmod>
 8007f94:	4603      	mov	r3, r0
 8007f96:	460c      	mov	r4, r1
 8007f98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f9a:	e247      	b.n	800842c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f9c:	4b96      	ldr	r3, [pc, #600]	; (80081f8 <UART_SetConfig+0x1178>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0320 	and.w	r3, r3, #32
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 80a3 	beq.w	80080f0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007faa:	4b93      	ldr	r3, [pc, #588]	; (80081f8 <UART_SetConfig+0x1178>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	08db      	lsrs	r3, r3, #3
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	4a91      	ldr	r2, [pc, #580]	; (80081fc <UART_SetConfig+0x117c>)
 8007fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f04f 0100 	mov.w	r1, #0
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d067      	beq.n	8008098 <UART_SetConfig+0x1018>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d05e      	beq.n	800808e <UART_SetConfig+0x100e>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d055      	beq.n	8008084 <UART_SetConfig+0x1004>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d04c      	beq.n	800807a <UART_SetConfig+0xffa>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d043      	beq.n	8008070 <UART_SetConfig+0xff0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	2b05      	cmp	r3, #5
 8007fee:	d03a      	beq.n	8008066 <UART_SetConfig+0xfe6>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	2b06      	cmp	r3, #6
 8007ff6:	d031      	beq.n	800805c <UART_SetConfig+0xfdc>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	2b07      	cmp	r3, #7
 8007ffe:	d028      	beq.n	8008052 <UART_SetConfig+0xfd2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	2b08      	cmp	r3, #8
 8008006:	d01f      	beq.n	8008048 <UART_SetConfig+0xfc8>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	2b09      	cmp	r3, #9
 800800e:	d016      	beq.n	800803e <UART_SetConfig+0xfbe>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	2b0a      	cmp	r3, #10
 8008016:	d00d      	beq.n	8008034 <UART_SetConfig+0xfb4>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	2b0b      	cmp	r3, #11
 800801e:	d104      	bne.n	800802a <UART_SetConfig+0xfaa>
 8008020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008024:	f04f 0400 	mov.w	r4, #0
 8008028:	e03a      	b.n	80080a0 <UART_SetConfig+0x1020>
 800802a:	f04f 0301 	mov.w	r3, #1
 800802e:	f04f 0400 	mov.w	r4, #0
 8008032:	e035      	b.n	80080a0 <UART_SetConfig+0x1020>
 8008034:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008038:	f04f 0400 	mov.w	r4, #0
 800803c:	e030      	b.n	80080a0 <UART_SetConfig+0x1020>
 800803e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008042:	f04f 0400 	mov.w	r4, #0
 8008046:	e02b      	b.n	80080a0 <UART_SetConfig+0x1020>
 8008048:	f04f 0320 	mov.w	r3, #32
 800804c:	f04f 0400 	mov.w	r4, #0
 8008050:	e026      	b.n	80080a0 <UART_SetConfig+0x1020>
 8008052:	f04f 0310 	mov.w	r3, #16
 8008056:	f04f 0400 	mov.w	r4, #0
 800805a:	e021      	b.n	80080a0 <UART_SetConfig+0x1020>
 800805c:	f04f 030c 	mov.w	r3, #12
 8008060:	f04f 0400 	mov.w	r4, #0
 8008064:	e01c      	b.n	80080a0 <UART_SetConfig+0x1020>
 8008066:	f04f 030a 	mov.w	r3, #10
 800806a:	f04f 0400 	mov.w	r4, #0
 800806e:	e017      	b.n	80080a0 <UART_SetConfig+0x1020>
 8008070:	f04f 0308 	mov.w	r3, #8
 8008074:	f04f 0400 	mov.w	r4, #0
 8008078:	e012      	b.n	80080a0 <UART_SetConfig+0x1020>
 800807a:	f04f 0306 	mov.w	r3, #6
 800807e:	f04f 0400 	mov.w	r4, #0
 8008082:	e00d      	b.n	80080a0 <UART_SetConfig+0x1020>
 8008084:	f04f 0304 	mov.w	r3, #4
 8008088:	f04f 0400 	mov.w	r4, #0
 800808c:	e008      	b.n	80080a0 <UART_SetConfig+0x1020>
 800808e:	f04f 0302 	mov.w	r3, #2
 8008092:	f04f 0400 	mov.w	r4, #0
 8008096:	e003      	b.n	80080a0 <UART_SetConfig+0x1020>
 8008098:	f04f 0301 	mov.w	r3, #1
 800809c:	f04f 0400 	mov.w	r4, #0
 80080a0:	461a      	mov	r2, r3
 80080a2:	4623      	mov	r3, r4
 80080a4:	f7f8 f974 	bl	8000390 <__aeabi_uldivmod>
 80080a8:	4603      	mov	r3, r0
 80080aa:	460c      	mov	r4, r1
 80080ac:	4619      	mov	r1, r3
 80080ae:	4622      	mov	r2, r4
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	f04f 0400 	mov.w	r4, #0
 80080b8:	0214      	lsls	r4, r2, #8
 80080ba:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80080be:	020b      	lsls	r3, r1, #8
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6852      	ldr	r2, [r2, #4]
 80080c4:	0852      	lsrs	r2, r2, #1
 80080c6:	4611      	mov	r1, r2
 80080c8:	f04f 0200 	mov.w	r2, #0
 80080cc:	eb13 0b01 	adds.w	fp, r3, r1
 80080d0:	eb44 0c02 	adc.w	ip, r4, r2
 80080d4:	4658      	mov	r0, fp
 80080d6:	4661      	mov	r1, ip
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f04f 0400 	mov.w	r4, #0
 80080e0:	461a      	mov	r2, r3
 80080e2:	4623      	mov	r3, r4
 80080e4:	f7f8 f954 	bl	8000390 <__aeabi_uldivmod>
 80080e8:	4603      	mov	r3, r0
 80080ea:	460c      	mov	r4, r1
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80080ee:	e19d      	b.n	800842c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d05b      	beq.n	80081b0 <UART_SetConfig+0x1130>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d053      	beq.n	80081a8 <UART_SetConfig+0x1128>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	2b02      	cmp	r3, #2
 8008106:	d04b      	beq.n	80081a0 <UART_SetConfig+0x1120>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	2b03      	cmp	r3, #3
 800810e:	d043      	beq.n	8008198 <UART_SetConfig+0x1118>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	2b04      	cmp	r3, #4
 8008116:	d03b      	beq.n	8008190 <UART_SetConfig+0x1110>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	2b05      	cmp	r3, #5
 800811e:	d033      	beq.n	8008188 <UART_SetConfig+0x1108>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	2b06      	cmp	r3, #6
 8008126:	d02b      	beq.n	8008180 <UART_SetConfig+0x1100>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	2b07      	cmp	r3, #7
 800812e:	d023      	beq.n	8008178 <UART_SetConfig+0x10f8>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	2b08      	cmp	r3, #8
 8008136:	d01b      	beq.n	8008170 <UART_SetConfig+0x10f0>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813c:	2b09      	cmp	r3, #9
 800813e:	d013      	beq.n	8008168 <UART_SetConfig+0x10e8>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	2b0a      	cmp	r3, #10
 8008146:	d00b      	beq.n	8008160 <UART_SetConfig+0x10e0>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	2b0b      	cmp	r3, #11
 800814e:	d103      	bne.n	8008158 <UART_SetConfig+0x10d8>
 8008150:	4b2a      	ldr	r3, [pc, #168]	; (80081fc <UART_SetConfig+0x117c>)
 8008152:	f04f 0400 	mov.w	r4, #0
 8008156:	e02e      	b.n	80081b6 <UART_SetConfig+0x1136>
 8008158:	4b29      	ldr	r3, [pc, #164]	; (8008200 <UART_SetConfig+0x1180>)
 800815a:	f04f 0403 	mov.w	r4, #3
 800815e:	e02a      	b.n	80081b6 <UART_SetConfig+0x1136>
 8008160:	4b28      	ldr	r3, [pc, #160]	; (8008204 <UART_SetConfig+0x1184>)
 8008162:	f04f 0400 	mov.w	r4, #0
 8008166:	e026      	b.n	80081b6 <UART_SetConfig+0x1136>
 8008168:	4b27      	ldr	r3, [pc, #156]	; (8008208 <UART_SetConfig+0x1188>)
 800816a:	f04f 0400 	mov.w	r4, #0
 800816e:	e022      	b.n	80081b6 <UART_SetConfig+0x1136>
 8008170:	4b26      	ldr	r3, [pc, #152]	; (800820c <UART_SetConfig+0x118c>)
 8008172:	f04f 0400 	mov.w	r4, #0
 8008176:	e01e      	b.n	80081b6 <UART_SetConfig+0x1136>
 8008178:	4b25      	ldr	r3, [pc, #148]	; (8008210 <UART_SetConfig+0x1190>)
 800817a:	f04f 0400 	mov.w	r4, #0
 800817e:	e01a      	b.n	80081b6 <UART_SetConfig+0x1136>
 8008180:	a419      	add	r4, pc, #100	; (adr r4, 80081e8 <UART_SetConfig+0x1168>)
 8008182:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008186:	e016      	b.n	80081b6 <UART_SetConfig+0x1136>
 8008188:	4b22      	ldr	r3, [pc, #136]	; (8008214 <UART_SetConfig+0x1194>)
 800818a:	f04f 0400 	mov.w	r4, #0
 800818e:	e012      	b.n	80081b6 <UART_SetConfig+0x1136>
 8008190:	4b21      	ldr	r3, [pc, #132]	; (8008218 <UART_SetConfig+0x1198>)
 8008192:	f04f 0400 	mov.w	r4, #0
 8008196:	e00e      	b.n	80081b6 <UART_SetConfig+0x1136>
 8008198:	a415      	add	r4, pc, #84	; (adr r4, 80081f0 <UART_SetConfig+0x1170>)
 800819a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800819e:	e00a      	b.n	80081b6 <UART_SetConfig+0x1136>
 80081a0:	4b1e      	ldr	r3, [pc, #120]	; (800821c <UART_SetConfig+0x119c>)
 80081a2:	f04f 0400 	mov.w	r4, #0
 80081a6:	e006      	b.n	80081b6 <UART_SetConfig+0x1136>
 80081a8:	4b1d      	ldr	r3, [pc, #116]	; (8008220 <UART_SetConfig+0x11a0>)
 80081aa:	f04f 0401 	mov.w	r4, #1
 80081ae:	e002      	b.n	80081b6 <UART_SetConfig+0x1136>
 80081b0:	4b13      	ldr	r3, [pc, #76]	; (8008200 <UART_SetConfig+0x1180>)
 80081b2:	f04f 0403 	mov.w	r4, #3
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6852      	ldr	r2, [r2, #4]
 80081ba:	0852      	lsrs	r2, r2, #1
 80081bc:	4611      	mov	r1, r2
 80081be:	f04f 0200 	mov.w	r2, #0
 80081c2:	eb13 0b01 	adds.w	fp, r3, r1
 80081c6:	eb44 0c02 	adc.w	ip, r4, r2
 80081ca:	4658      	mov	r0, fp
 80081cc:	4661      	mov	r1, ip
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f04f 0400 	mov.w	r4, #0
 80081d6:	461a      	mov	r2, r3
 80081d8:	4623      	mov	r3, r4
 80081da:	f7f8 f8d9 	bl	8000390 <__aeabi_uldivmod>
 80081de:	4603      	mov	r3, r0
 80081e0:	460c      	mov	r4, r1
 80081e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081e4:	e122      	b.n	800842c <UART_SetConfig+0x13ac>
 80081e6:	bf00      	nop
 80081e8:	51615500 	.word	0x51615500
 80081ec:	00000000 	.word	0x00000000
 80081f0:	a2c2aa00 	.word	0xa2c2aa00
 80081f4:	00000000 	.word	0x00000000
 80081f8:	58024400 	.word	0x58024400
 80081fc:	03d09000 	.word	0x03d09000
 8008200:	d0900000 	.word	0xd0900000
 8008204:	07a12000 	.word	0x07a12000
 8008208:	0f424000 	.word	0x0f424000
 800820c:	1e848000 	.word	0x1e848000
 8008210:	3d090000 	.word	0x3d090000
 8008214:	61a80000 	.word	0x61a80000
 8008218:	7a120000 	.word	0x7a120000
 800821c:	f4240000 	.word	0xf4240000
 8008220:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	2b00      	cmp	r3, #0
 800822a:	d05b      	beq.n	80082e4 <UART_SetConfig+0x1264>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008230:	2b01      	cmp	r3, #1
 8008232:	d053      	beq.n	80082dc <UART_SetConfig+0x125c>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008238:	2b02      	cmp	r3, #2
 800823a:	d04b      	beq.n	80082d4 <UART_SetConfig+0x1254>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008240:	2b03      	cmp	r3, #3
 8008242:	d043      	beq.n	80082cc <UART_SetConfig+0x124c>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008248:	2b04      	cmp	r3, #4
 800824a:	d03b      	beq.n	80082c4 <UART_SetConfig+0x1244>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	2b05      	cmp	r3, #5
 8008252:	d033      	beq.n	80082bc <UART_SetConfig+0x123c>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	2b06      	cmp	r3, #6
 800825a:	d02b      	beq.n	80082b4 <UART_SetConfig+0x1234>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b07      	cmp	r3, #7
 8008262:	d023      	beq.n	80082ac <UART_SetConfig+0x122c>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b08      	cmp	r3, #8
 800826a:	d01b      	beq.n	80082a4 <UART_SetConfig+0x1224>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	2b09      	cmp	r3, #9
 8008272:	d013      	beq.n	800829c <UART_SetConfig+0x121c>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	2b0a      	cmp	r3, #10
 800827a:	d00b      	beq.n	8008294 <UART_SetConfig+0x1214>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b0b      	cmp	r3, #11
 8008282:	d103      	bne.n	800828c <UART_SetConfig+0x120c>
 8008284:	4bc0      	ldr	r3, [pc, #768]	; (8008588 <UART_SetConfig+0x1508>)
 8008286:	f04f 0400 	mov.w	r4, #0
 800828a:	e02e      	b.n	80082ea <UART_SetConfig+0x126a>
 800828c:	4bbf      	ldr	r3, [pc, #764]	; (800858c <UART_SetConfig+0x150c>)
 800828e:	f04f 0400 	mov.w	r4, #0
 8008292:	e02a      	b.n	80082ea <UART_SetConfig+0x126a>
 8008294:	4bbe      	ldr	r3, [pc, #760]	; (8008590 <UART_SetConfig+0x1510>)
 8008296:	f04f 0400 	mov.w	r4, #0
 800829a:	e026      	b.n	80082ea <UART_SetConfig+0x126a>
 800829c:	4bbd      	ldr	r3, [pc, #756]	; (8008594 <UART_SetConfig+0x1514>)
 800829e:	f04f 0400 	mov.w	r4, #0
 80082a2:	e022      	b.n	80082ea <UART_SetConfig+0x126a>
 80082a4:	4bbc      	ldr	r3, [pc, #752]	; (8008598 <UART_SetConfig+0x1518>)
 80082a6:	f04f 0400 	mov.w	r4, #0
 80082aa:	e01e      	b.n	80082ea <UART_SetConfig+0x126a>
 80082ac:	4bbb      	ldr	r3, [pc, #748]	; (800859c <UART_SetConfig+0x151c>)
 80082ae:	f04f 0400 	mov.w	r4, #0
 80082b2:	e01a      	b.n	80082ea <UART_SetConfig+0x126a>
 80082b4:	a4b0      	add	r4, pc, #704	; (adr r4, 8008578 <UART_SetConfig+0x14f8>)
 80082b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80082ba:	e016      	b.n	80082ea <UART_SetConfig+0x126a>
 80082bc:	4bb8      	ldr	r3, [pc, #736]	; (80085a0 <UART_SetConfig+0x1520>)
 80082be:	f04f 0400 	mov.w	r4, #0
 80082c2:	e012      	b.n	80082ea <UART_SetConfig+0x126a>
 80082c4:	4bb7      	ldr	r3, [pc, #732]	; (80085a4 <UART_SetConfig+0x1524>)
 80082c6:	f04f 0400 	mov.w	r4, #0
 80082ca:	e00e      	b.n	80082ea <UART_SetConfig+0x126a>
 80082cc:	a4ac      	add	r4, pc, #688	; (adr r4, 8008580 <UART_SetConfig+0x1500>)
 80082ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80082d2:	e00a      	b.n	80082ea <UART_SetConfig+0x126a>
 80082d4:	4bb4      	ldr	r3, [pc, #720]	; (80085a8 <UART_SetConfig+0x1528>)
 80082d6:	f04f 0400 	mov.w	r4, #0
 80082da:	e006      	b.n	80082ea <UART_SetConfig+0x126a>
 80082dc:	4bb3      	ldr	r3, [pc, #716]	; (80085ac <UART_SetConfig+0x152c>)
 80082de:	f04f 0400 	mov.w	r4, #0
 80082e2:	e002      	b.n	80082ea <UART_SetConfig+0x126a>
 80082e4:	4ba9      	ldr	r3, [pc, #676]	; (800858c <UART_SetConfig+0x150c>)
 80082e6:	f04f 0400 	mov.w	r4, #0
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6852      	ldr	r2, [r2, #4]
 80082ee:	0852      	lsrs	r2, r2, #1
 80082f0:	4611      	mov	r1, r2
 80082f2:	f04f 0200 	mov.w	r2, #0
 80082f6:	eb13 0b01 	adds.w	fp, r3, r1
 80082fa:	eb44 0c02 	adc.w	ip, r4, r2
 80082fe:	4658      	mov	r0, fp
 8008300:	4661      	mov	r1, ip
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f04f 0400 	mov.w	r4, #0
 800830a:	461a      	mov	r2, r3
 800830c:	4623      	mov	r3, r4
 800830e:	f7f8 f83f 	bl	8000390 <__aeabi_uldivmod>
 8008312:	4603      	mov	r3, r0
 8008314:	460c      	mov	r4, r1
 8008316:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008318:	e088      	b.n	800842c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	d064      	beq.n	80083ec <UART_SetConfig+0x136c>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	2b01      	cmp	r3, #1
 8008328:	d05b      	beq.n	80083e2 <UART_SetConfig+0x1362>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	2b02      	cmp	r3, #2
 8008330:	d052      	beq.n	80083d8 <UART_SetConfig+0x1358>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	2b03      	cmp	r3, #3
 8008338:	d04a      	beq.n	80083d0 <UART_SetConfig+0x1350>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2b04      	cmp	r3, #4
 8008340:	d041      	beq.n	80083c6 <UART_SetConfig+0x1346>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b05      	cmp	r3, #5
 8008348:	d039      	beq.n	80083be <UART_SetConfig+0x133e>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	2b06      	cmp	r3, #6
 8008350:	d031      	beq.n	80083b6 <UART_SetConfig+0x1336>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	2b07      	cmp	r3, #7
 8008358:	d028      	beq.n	80083ac <UART_SetConfig+0x132c>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	2b08      	cmp	r3, #8
 8008360:	d01f      	beq.n	80083a2 <UART_SetConfig+0x1322>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	2b09      	cmp	r3, #9
 8008368:	d016      	beq.n	8008398 <UART_SetConfig+0x1318>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	2b0a      	cmp	r3, #10
 8008370:	d00d      	beq.n	800838e <UART_SetConfig+0x130e>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	2b0b      	cmp	r3, #11
 8008378:	d104      	bne.n	8008384 <UART_SetConfig+0x1304>
 800837a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837e:	f04f 0400 	mov.w	r4, #0
 8008382:	e037      	b.n	80083f4 <UART_SetConfig+0x1374>
 8008384:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008388:	f04f 0400 	mov.w	r4, #0
 800838c:	e032      	b.n	80083f4 <UART_SetConfig+0x1374>
 800838e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008392:	f04f 0400 	mov.w	r4, #0
 8008396:	e02d      	b.n	80083f4 <UART_SetConfig+0x1374>
 8008398:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800839c:	f04f 0400 	mov.w	r4, #0
 80083a0:	e028      	b.n	80083f4 <UART_SetConfig+0x1374>
 80083a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80083a6:	f04f 0400 	mov.w	r4, #0
 80083aa:	e023      	b.n	80083f4 <UART_SetConfig+0x1374>
 80083ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80083b0:	f04f 0400 	mov.w	r4, #0
 80083b4:	e01e      	b.n	80083f4 <UART_SetConfig+0x1374>
 80083b6:	4b7e      	ldr	r3, [pc, #504]	; (80085b0 <UART_SetConfig+0x1530>)
 80083b8:	f04f 0400 	mov.w	r4, #0
 80083bc:	e01a      	b.n	80083f4 <UART_SetConfig+0x1374>
 80083be:	4b7d      	ldr	r3, [pc, #500]	; (80085b4 <UART_SetConfig+0x1534>)
 80083c0:	f04f 0400 	mov.w	r4, #0
 80083c4:	e016      	b.n	80083f4 <UART_SetConfig+0x1374>
 80083c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80083ca:	f04f 0400 	mov.w	r4, #0
 80083ce:	e011      	b.n	80083f4 <UART_SetConfig+0x1374>
 80083d0:	4b79      	ldr	r3, [pc, #484]	; (80085b8 <UART_SetConfig+0x1538>)
 80083d2:	f04f 0400 	mov.w	r4, #0
 80083d6:	e00d      	b.n	80083f4 <UART_SetConfig+0x1374>
 80083d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80083dc:	f04f 0400 	mov.w	r4, #0
 80083e0:	e008      	b.n	80083f4 <UART_SetConfig+0x1374>
 80083e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80083e6:	f04f 0400 	mov.w	r4, #0
 80083ea:	e003      	b.n	80083f4 <UART_SetConfig+0x1374>
 80083ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80083f0:	f04f 0400 	mov.w	r4, #0
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6852      	ldr	r2, [r2, #4]
 80083f8:	0852      	lsrs	r2, r2, #1
 80083fa:	4611      	mov	r1, r2
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	eb13 0b01 	adds.w	fp, r3, r1
 8008404:	eb44 0c02 	adc.w	ip, r4, r2
 8008408:	4658      	mov	r0, fp
 800840a:	4661      	mov	r1, ip
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f04f 0400 	mov.w	r4, #0
 8008414:	461a      	mov	r2, r3
 8008416:	4623      	mov	r3, r4
 8008418:	f7f7 ffba 	bl	8000390 <__aeabi_uldivmod>
 800841c:	4603      	mov	r3, r0
 800841e:	460c      	mov	r4, r1
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008422:	e003      	b.n	800842c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800842a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800842c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008432:	d309      	bcc.n	8008448 <UART_SetConfig+0x13c8>
 8008434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800843a:	d205      	bcs.n	8008448 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008442:	60da      	str	r2, [r3, #12]
 8008444:	f000 bf85 	b.w	8009352 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800844e:	f000 bf80 	b.w	8009352 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800845a:	f040 83da 	bne.w	8008c12 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800845e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	f200 83b3 	bhi.w	8008bce <UART_SetConfig+0x1b4e>
 8008468:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <UART_SetConfig+0x13f0>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	080085bd 	.word	0x080085bd
 8008474:	08008675 	.word	0x08008675
 8008478:	08008bcf 	.word	0x08008bcf
 800847c:	08008bcf 	.word	0x08008bcf
 8008480:	0800872d 	.word	0x0800872d
 8008484:	08008bcf 	.word	0x08008bcf
 8008488:	08008bcf 	.word	0x08008bcf
 800848c:	08008bcf 	.word	0x08008bcf
 8008490:	080087e9 	.word	0x080087e9
 8008494:	08008bcf 	.word	0x08008bcf
 8008498:	08008bcf 	.word	0x08008bcf
 800849c:	08008bcf 	.word	0x08008bcf
 80084a0:	08008bcf 	.word	0x08008bcf
 80084a4:	08008bcf 	.word	0x08008bcf
 80084a8:	08008bcf 	.word	0x08008bcf
 80084ac:	08008bcf 	.word	0x08008bcf
 80084b0:	080088a5 	.word	0x080088a5
 80084b4:	08008bcf 	.word	0x08008bcf
 80084b8:	08008bcf 	.word	0x08008bcf
 80084bc:	08008bcf 	.word	0x08008bcf
 80084c0:	08008bcf 	.word	0x08008bcf
 80084c4:	08008bcf 	.word	0x08008bcf
 80084c8:	08008bcf 	.word	0x08008bcf
 80084cc:	08008bcf 	.word	0x08008bcf
 80084d0:	08008bcf 	.word	0x08008bcf
 80084d4:	08008bcf 	.word	0x08008bcf
 80084d8:	08008bcf 	.word	0x08008bcf
 80084dc:	08008bcf 	.word	0x08008bcf
 80084e0:	08008bcf 	.word	0x08008bcf
 80084e4:	08008bcf 	.word	0x08008bcf
 80084e8:	08008bcf 	.word	0x08008bcf
 80084ec:	08008bcf 	.word	0x08008bcf
 80084f0:	08008a17 	.word	0x08008a17
 80084f4:	08008bcf 	.word	0x08008bcf
 80084f8:	08008bcf 	.word	0x08008bcf
 80084fc:	08008bcf 	.word	0x08008bcf
 8008500:	08008bcf 	.word	0x08008bcf
 8008504:	08008bcf 	.word	0x08008bcf
 8008508:	08008bcf 	.word	0x08008bcf
 800850c:	08008bcf 	.word	0x08008bcf
 8008510:	08008bcf 	.word	0x08008bcf
 8008514:	08008bcf 	.word	0x08008bcf
 8008518:	08008bcf 	.word	0x08008bcf
 800851c:	08008bcf 	.word	0x08008bcf
 8008520:	08008bcf 	.word	0x08008bcf
 8008524:	08008bcf 	.word	0x08008bcf
 8008528:	08008bcf 	.word	0x08008bcf
 800852c:	08008bcf 	.word	0x08008bcf
 8008530:	08008bcf 	.word	0x08008bcf
 8008534:	08008bcf 	.word	0x08008bcf
 8008538:	08008bcf 	.word	0x08008bcf
 800853c:	08008bcf 	.word	0x08008bcf
 8008540:	08008bcf 	.word	0x08008bcf
 8008544:	08008bcf 	.word	0x08008bcf
 8008548:	08008bcf 	.word	0x08008bcf
 800854c:	08008bcf 	.word	0x08008bcf
 8008550:	08008bcf 	.word	0x08008bcf
 8008554:	08008bcf 	.word	0x08008bcf
 8008558:	08008bcf 	.word	0x08008bcf
 800855c:	08008bcf 	.word	0x08008bcf
 8008560:	08008bcf 	.word	0x08008bcf
 8008564:	08008bcf 	.word	0x08008bcf
 8008568:	08008bcf 	.word	0x08008bcf
 800856c:	08008bcf 	.word	0x08008bcf
 8008570:	08008b0d 	.word	0x08008b0d
 8008574:	f3af 8000 	nop.w
 8008578:	05161500 	.word	0x05161500
 800857c:	00000000 	.word	0x00000000
 8008580:	0a2c2a00 	.word	0x0a2c2a00
 8008584:	00000000 	.word	0x00000000
 8008588:	003d0900 	.word	0x003d0900
 800858c:	3d090000 	.word	0x3d090000
 8008590:	007a1200 	.word	0x007a1200
 8008594:	00f42400 	.word	0x00f42400
 8008598:	01e84800 	.word	0x01e84800
 800859c:	03d09000 	.word	0x03d09000
 80085a0:	061a8000 	.word	0x061a8000
 80085a4:	07a12000 	.word	0x07a12000
 80085a8:	0f424000 	.word	0x0f424000
 80085ac:	1e848000 	.word	0x1e848000
 80085b0:	000aaa00 	.word	0x000aaa00
 80085b4:	000ccc00 	.word	0x000ccc00
 80085b8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085bc:	f7fc f9b2 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 80085c0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d044      	beq.n	8008654 <UART_SetConfig+0x15d4>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d03e      	beq.n	8008650 <UART_SetConfig+0x15d0>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d038      	beq.n	800864c <UART_SetConfig+0x15cc>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d032      	beq.n	8008648 <UART_SetConfig+0x15c8>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d02c      	beq.n	8008644 <UART_SetConfig+0x15c4>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ee:	2b05      	cmp	r3, #5
 80085f0:	d026      	beq.n	8008640 <UART_SetConfig+0x15c0>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f6:	2b06      	cmp	r3, #6
 80085f8:	d020      	beq.n	800863c <UART_SetConfig+0x15bc>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fe:	2b07      	cmp	r3, #7
 8008600:	d01a      	beq.n	8008638 <UART_SetConfig+0x15b8>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	2b08      	cmp	r3, #8
 8008608:	d014      	beq.n	8008634 <UART_SetConfig+0x15b4>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	2b09      	cmp	r3, #9
 8008610:	d00e      	beq.n	8008630 <UART_SetConfig+0x15b0>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	2b0a      	cmp	r3, #10
 8008618:	d008      	beq.n	800862c <UART_SetConfig+0x15ac>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	2b0b      	cmp	r3, #11
 8008620:	d102      	bne.n	8008628 <UART_SetConfig+0x15a8>
 8008622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008626:	e016      	b.n	8008656 <UART_SetConfig+0x15d6>
 8008628:	2301      	movs	r3, #1
 800862a:	e014      	b.n	8008656 <UART_SetConfig+0x15d6>
 800862c:	2380      	movs	r3, #128	; 0x80
 800862e:	e012      	b.n	8008656 <UART_SetConfig+0x15d6>
 8008630:	2340      	movs	r3, #64	; 0x40
 8008632:	e010      	b.n	8008656 <UART_SetConfig+0x15d6>
 8008634:	2320      	movs	r3, #32
 8008636:	e00e      	b.n	8008656 <UART_SetConfig+0x15d6>
 8008638:	2310      	movs	r3, #16
 800863a:	e00c      	b.n	8008656 <UART_SetConfig+0x15d6>
 800863c:	230c      	movs	r3, #12
 800863e:	e00a      	b.n	8008656 <UART_SetConfig+0x15d6>
 8008640:	230a      	movs	r3, #10
 8008642:	e008      	b.n	8008656 <UART_SetConfig+0x15d6>
 8008644:	2308      	movs	r3, #8
 8008646:	e006      	b.n	8008656 <UART_SetConfig+0x15d6>
 8008648:	2306      	movs	r3, #6
 800864a:	e004      	b.n	8008656 <UART_SetConfig+0x15d6>
 800864c:	2304      	movs	r3, #4
 800864e:	e002      	b.n	8008656 <UART_SetConfig+0x15d6>
 8008650:	2302      	movs	r3, #2
 8008652:	e000      	b.n	8008656 <UART_SetConfig+0x15d6>
 8008654:	2301      	movs	r3, #1
 8008656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008658:	fbb2 f3f3 	udiv	r3, r2, r3
 800865c:	005a      	lsls	r2, r3, #1
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	085b      	lsrs	r3, r3, #1
 8008664:	441a      	add	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	fbb2 f3f3 	udiv	r3, r2, r3
 800866e:	b29b      	uxth	r3, r3
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008672:	e2b0      	b.n	8008bd6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008674:	f7fc f96c 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 8008678:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	2b00      	cmp	r3, #0
 8008680:	d044      	beq.n	800870c <UART_SetConfig+0x168c>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	2b01      	cmp	r3, #1
 8008688:	d03e      	beq.n	8008708 <UART_SetConfig+0x1688>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	2b02      	cmp	r3, #2
 8008690:	d038      	beq.n	8008704 <UART_SetConfig+0x1684>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008696:	2b03      	cmp	r3, #3
 8008698:	d032      	beq.n	8008700 <UART_SetConfig+0x1680>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d02c      	beq.n	80086fc <UART_SetConfig+0x167c>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	2b05      	cmp	r3, #5
 80086a8:	d026      	beq.n	80086f8 <UART_SetConfig+0x1678>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	2b06      	cmp	r3, #6
 80086b0:	d020      	beq.n	80086f4 <UART_SetConfig+0x1674>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	2b07      	cmp	r3, #7
 80086b8:	d01a      	beq.n	80086f0 <UART_SetConfig+0x1670>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	2b08      	cmp	r3, #8
 80086c0:	d014      	beq.n	80086ec <UART_SetConfig+0x166c>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	2b09      	cmp	r3, #9
 80086c8:	d00e      	beq.n	80086e8 <UART_SetConfig+0x1668>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ce:	2b0a      	cmp	r3, #10
 80086d0:	d008      	beq.n	80086e4 <UART_SetConfig+0x1664>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	2b0b      	cmp	r3, #11
 80086d8:	d102      	bne.n	80086e0 <UART_SetConfig+0x1660>
 80086da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086de:	e016      	b.n	800870e <UART_SetConfig+0x168e>
 80086e0:	2301      	movs	r3, #1
 80086e2:	e014      	b.n	800870e <UART_SetConfig+0x168e>
 80086e4:	2380      	movs	r3, #128	; 0x80
 80086e6:	e012      	b.n	800870e <UART_SetConfig+0x168e>
 80086e8:	2340      	movs	r3, #64	; 0x40
 80086ea:	e010      	b.n	800870e <UART_SetConfig+0x168e>
 80086ec:	2320      	movs	r3, #32
 80086ee:	e00e      	b.n	800870e <UART_SetConfig+0x168e>
 80086f0:	2310      	movs	r3, #16
 80086f2:	e00c      	b.n	800870e <UART_SetConfig+0x168e>
 80086f4:	230c      	movs	r3, #12
 80086f6:	e00a      	b.n	800870e <UART_SetConfig+0x168e>
 80086f8:	230a      	movs	r3, #10
 80086fa:	e008      	b.n	800870e <UART_SetConfig+0x168e>
 80086fc:	2308      	movs	r3, #8
 80086fe:	e006      	b.n	800870e <UART_SetConfig+0x168e>
 8008700:	2306      	movs	r3, #6
 8008702:	e004      	b.n	800870e <UART_SetConfig+0x168e>
 8008704:	2304      	movs	r3, #4
 8008706:	e002      	b.n	800870e <UART_SetConfig+0x168e>
 8008708:	2302      	movs	r3, #2
 800870a:	e000      	b.n	800870e <UART_SetConfig+0x168e>
 800870c:	2301      	movs	r3, #1
 800870e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008710:	fbb2 f3f3 	udiv	r3, r2, r3
 8008714:	005a      	lsls	r2, r3, #1
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	085b      	lsrs	r3, r3, #1
 800871c:	441a      	add	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	fbb2 f3f3 	udiv	r3, r2, r3
 8008726:	b29b      	uxth	r3, r3
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800872a:	e254      	b.n	8008bd6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800872c:	f107 0318 	add.w	r3, r7, #24
 8008730:	4618      	mov	r0, r3
 8008732:	f7fd fa5f 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	2b00      	cmp	r3, #0
 800873e:	d044      	beq.n	80087ca <UART_SetConfig+0x174a>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b01      	cmp	r3, #1
 8008746:	d03e      	beq.n	80087c6 <UART_SetConfig+0x1746>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b02      	cmp	r3, #2
 800874e:	d038      	beq.n	80087c2 <UART_SetConfig+0x1742>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b03      	cmp	r3, #3
 8008756:	d032      	beq.n	80087be <UART_SetConfig+0x173e>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b04      	cmp	r3, #4
 800875e:	d02c      	beq.n	80087ba <UART_SetConfig+0x173a>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b05      	cmp	r3, #5
 8008766:	d026      	beq.n	80087b6 <UART_SetConfig+0x1736>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b06      	cmp	r3, #6
 800876e:	d020      	beq.n	80087b2 <UART_SetConfig+0x1732>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b07      	cmp	r3, #7
 8008776:	d01a      	beq.n	80087ae <UART_SetConfig+0x172e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b08      	cmp	r3, #8
 800877e:	d014      	beq.n	80087aa <UART_SetConfig+0x172a>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b09      	cmp	r3, #9
 8008786:	d00e      	beq.n	80087a6 <UART_SetConfig+0x1726>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	2b0a      	cmp	r3, #10
 800878e:	d008      	beq.n	80087a2 <UART_SetConfig+0x1722>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b0b      	cmp	r3, #11
 8008796:	d102      	bne.n	800879e <UART_SetConfig+0x171e>
 8008798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800879c:	e016      	b.n	80087cc <UART_SetConfig+0x174c>
 800879e:	2301      	movs	r3, #1
 80087a0:	e014      	b.n	80087cc <UART_SetConfig+0x174c>
 80087a2:	2380      	movs	r3, #128	; 0x80
 80087a4:	e012      	b.n	80087cc <UART_SetConfig+0x174c>
 80087a6:	2340      	movs	r3, #64	; 0x40
 80087a8:	e010      	b.n	80087cc <UART_SetConfig+0x174c>
 80087aa:	2320      	movs	r3, #32
 80087ac:	e00e      	b.n	80087cc <UART_SetConfig+0x174c>
 80087ae:	2310      	movs	r3, #16
 80087b0:	e00c      	b.n	80087cc <UART_SetConfig+0x174c>
 80087b2:	230c      	movs	r3, #12
 80087b4:	e00a      	b.n	80087cc <UART_SetConfig+0x174c>
 80087b6:	230a      	movs	r3, #10
 80087b8:	e008      	b.n	80087cc <UART_SetConfig+0x174c>
 80087ba:	2308      	movs	r3, #8
 80087bc:	e006      	b.n	80087cc <UART_SetConfig+0x174c>
 80087be:	2306      	movs	r3, #6
 80087c0:	e004      	b.n	80087cc <UART_SetConfig+0x174c>
 80087c2:	2304      	movs	r3, #4
 80087c4:	e002      	b.n	80087cc <UART_SetConfig+0x174c>
 80087c6:	2302      	movs	r3, #2
 80087c8:	e000      	b.n	80087cc <UART_SetConfig+0x174c>
 80087ca:	2301      	movs	r3, #1
 80087cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d0:	005a      	lsls	r2, r3, #1
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	441a      	add	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087e6:	e1f6      	b.n	8008bd6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087e8:	f107 030c 	add.w	r3, r7, #12
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fd fb4d 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d044      	beq.n	8008886 <UART_SetConfig+0x1806>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008800:	2b01      	cmp	r3, #1
 8008802:	d03e      	beq.n	8008882 <UART_SetConfig+0x1802>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	2b02      	cmp	r3, #2
 800880a:	d038      	beq.n	800887e <UART_SetConfig+0x17fe>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	2b03      	cmp	r3, #3
 8008812:	d032      	beq.n	800887a <UART_SetConfig+0x17fa>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	2b04      	cmp	r3, #4
 800881a:	d02c      	beq.n	8008876 <UART_SetConfig+0x17f6>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008820:	2b05      	cmp	r3, #5
 8008822:	d026      	beq.n	8008872 <UART_SetConfig+0x17f2>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	2b06      	cmp	r3, #6
 800882a:	d020      	beq.n	800886e <UART_SetConfig+0x17ee>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	2b07      	cmp	r3, #7
 8008832:	d01a      	beq.n	800886a <UART_SetConfig+0x17ea>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	2b08      	cmp	r3, #8
 800883a:	d014      	beq.n	8008866 <UART_SetConfig+0x17e6>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	2b09      	cmp	r3, #9
 8008842:	d00e      	beq.n	8008862 <UART_SetConfig+0x17e2>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b0a      	cmp	r3, #10
 800884a:	d008      	beq.n	800885e <UART_SetConfig+0x17de>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2b0b      	cmp	r3, #11
 8008852:	d102      	bne.n	800885a <UART_SetConfig+0x17da>
 8008854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008858:	e016      	b.n	8008888 <UART_SetConfig+0x1808>
 800885a:	2301      	movs	r3, #1
 800885c:	e014      	b.n	8008888 <UART_SetConfig+0x1808>
 800885e:	2380      	movs	r3, #128	; 0x80
 8008860:	e012      	b.n	8008888 <UART_SetConfig+0x1808>
 8008862:	2340      	movs	r3, #64	; 0x40
 8008864:	e010      	b.n	8008888 <UART_SetConfig+0x1808>
 8008866:	2320      	movs	r3, #32
 8008868:	e00e      	b.n	8008888 <UART_SetConfig+0x1808>
 800886a:	2310      	movs	r3, #16
 800886c:	e00c      	b.n	8008888 <UART_SetConfig+0x1808>
 800886e:	230c      	movs	r3, #12
 8008870:	e00a      	b.n	8008888 <UART_SetConfig+0x1808>
 8008872:	230a      	movs	r3, #10
 8008874:	e008      	b.n	8008888 <UART_SetConfig+0x1808>
 8008876:	2308      	movs	r3, #8
 8008878:	e006      	b.n	8008888 <UART_SetConfig+0x1808>
 800887a:	2306      	movs	r3, #6
 800887c:	e004      	b.n	8008888 <UART_SetConfig+0x1808>
 800887e:	2304      	movs	r3, #4
 8008880:	e002      	b.n	8008888 <UART_SetConfig+0x1808>
 8008882:	2302      	movs	r3, #2
 8008884:	e000      	b.n	8008888 <UART_SetConfig+0x1808>
 8008886:	2301      	movs	r3, #1
 8008888:	fbb2 f3f3 	udiv	r3, r2, r3
 800888c:	005a      	lsls	r2, r3, #1
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	085b      	lsrs	r3, r3, #1
 8008894:	441a      	add	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	fbb2 f3f3 	udiv	r3, r2, r3
 800889e:	b29b      	uxth	r3, r3
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088a2:	e198      	b.n	8008bd6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088a4:	4b87      	ldr	r3, [pc, #540]	; (8008ac4 <UART_SetConfig+0x1a44>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0320 	and.w	r3, r3, #32
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d05e      	beq.n	800896e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088b0:	4b84      	ldr	r3, [pc, #528]	; (8008ac4 <UART_SetConfig+0x1a44>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	08db      	lsrs	r3, r3, #3
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	4a83      	ldr	r2, [pc, #524]	; (8008ac8 <UART_SetConfig+0x1a48>)
 80088bc:	40da      	lsrs	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d044      	beq.n	8008950 <UART_SetConfig+0x18d0>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d03e      	beq.n	800894c <UART_SetConfig+0x18cc>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d038      	beq.n	8008948 <UART_SetConfig+0x18c8>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d032      	beq.n	8008944 <UART_SetConfig+0x18c4>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d02c      	beq.n	8008940 <UART_SetConfig+0x18c0>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d026      	beq.n	800893c <UART_SetConfig+0x18bc>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f2:	2b06      	cmp	r3, #6
 80088f4:	d020      	beq.n	8008938 <UART_SetConfig+0x18b8>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	2b07      	cmp	r3, #7
 80088fc:	d01a      	beq.n	8008934 <UART_SetConfig+0x18b4>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008902:	2b08      	cmp	r3, #8
 8008904:	d014      	beq.n	8008930 <UART_SetConfig+0x18b0>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	2b09      	cmp	r3, #9
 800890c:	d00e      	beq.n	800892c <UART_SetConfig+0x18ac>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	2b0a      	cmp	r3, #10
 8008914:	d008      	beq.n	8008928 <UART_SetConfig+0x18a8>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	2b0b      	cmp	r3, #11
 800891c:	d102      	bne.n	8008924 <UART_SetConfig+0x18a4>
 800891e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008922:	e016      	b.n	8008952 <UART_SetConfig+0x18d2>
 8008924:	2301      	movs	r3, #1
 8008926:	e014      	b.n	8008952 <UART_SetConfig+0x18d2>
 8008928:	2380      	movs	r3, #128	; 0x80
 800892a:	e012      	b.n	8008952 <UART_SetConfig+0x18d2>
 800892c:	2340      	movs	r3, #64	; 0x40
 800892e:	e010      	b.n	8008952 <UART_SetConfig+0x18d2>
 8008930:	2320      	movs	r3, #32
 8008932:	e00e      	b.n	8008952 <UART_SetConfig+0x18d2>
 8008934:	2310      	movs	r3, #16
 8008936:	e00c      	b.n	8008952 <UART_SetConfig+0x18d2>
 8008938:	230c      	movs	r3, #12
 800893a:	e00a      	b.n	8008952 <UART_SetConfig+0x18d2>
 800893c:	230a      	movs	r3, #10
 800893e:	e008      	b.n	8008952 <UART_SetConfig+0x18d2>
 8008940:	2308      	movs	r3, #8
 8008942:	e006      	b.n	8008952 <UART_SetConfig+0x18d2>
 8008944:	2306      	movs	r3, #6
 8008946:	e004      	b.n	8008952 <UART_SetConfig+0x18d2>
 8008948:	2304      	movs	r3, #4
 800894a:	e002      	b.n	8008952 <UART_SetConfig+0x18d2>
 800894c:	2302      	movs	r3, #2
 800894e:	e000      	b.n	8008952 <UART_SetConfig+0x18d2>
 8008950:	2301      	movs	r3, #1
 8008952:	fbb2 f3f3 	udiv	r3, r2, r3
 8008956:	005a      	lsls	r2, r3, #1
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	085b      	lsrs	r3, r3, #1
 800895e:	441a      	add	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	fbb2 f3f3 	udiv	r3, r2, r3
 8008968:	b29b      	uxth	r3, r3
 800896a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800896c:	e133      	b.n	8008bd6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	2b00      	cmp	r3, #0
 8008974:	d043      	beq.n	80089fe <UART_SetConfig+0x197e>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	2b01      	cmp	r3, #1
 800897c:	d03d      	beq.n	80089fa <UART_SetConfig+0x197a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	2b02      	cmp	r3, #2
 8008984:	d037      	beq.n	80089f6 <UART_SetConfig+0x1976>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	2b03      	cmp	r3, #3
 800898c:	d031      	beq.n	80089f2 <UART_SetConfig+0x1972>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	2b04      	cmp	r3, #4
 8008994:	d02b      	beq.n	80089ee <UART_SetConfig+0x196e>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	2b05      	cmp	r3, #5
 800899c:	d025      	beq.n	80089ea <UART_SetConfig+0x196a>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	2b06      	cmp	r3, #6
 80089a4:	d01f      	beq.n	80089e6 <UART_SetConfig+0x1966>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	2b07      	cmp	r3, #7
 80089ac:	d019      	beq.n	80089e2 <UART_SetConfig+0x1962>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	d013      	beq.n	80089de <UART_SetConfig+0x195e>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ba:	2b09      	cmp	r3, #9
 80089bc:	d00d      	beq.n	80089da <UART_SetConfig+0x195a>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	2b0a      	cmp	r3, #10
 80089c4:	d007      	beq.n	80089d6 <UART_SetConfig+0x1956>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ca:	2b0b      	cmp	r3, #11
 80089cc:	d101      	bne.n	80089d2 <UART_SetConfig+0x1952>
 80089ce:	4b3f      	ldr	r3, [pc, #252]	; (8008acc <UART_SetConfig+0x1a4c>)
 80089d0:	e016      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089d2:	4b3f      	ldr	r3, [pc, #252]	; (8008ad0 <UART_SetConfig+0x1a50>)
 80089d4:	e014      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089d6:	4b3f      	ldr	r3, [pc, #252]	; (8008ad4 <UART_SetConfig+0x1a54>)
 80089d8:	e012      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089da:	4b3f      	ldr	r3, [pc, #252]	; (8008ad8 <UART_SetConfig+0x1a58>)
 80089dc:	e010      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089de:	4b3f      	ldr	r3, [pc, #252]	; (8008adc <UART_SetConfig+0x1a5c>)
 80089e0:	e00e      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089e2:	4b3f      	ldr	r3, [pc, #252]	; (8008ae0 <UART_SetConfig+0x1a60>)
 80089e4:	e00c      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089e6:	4b3f      	ldr	r3, [pc, #252]	; (8008ae4 <UART_SetConfig+0x1a64>)
 80089e8:	e00a      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089ea:	4b3f      	ldr	r3, [pc, #252]	; (8008ae8 <UART_SetConfig+0x1a68>)
 80089ec:	e008      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089ee:	4b3f      	ldr	r3, [pc, #252]	; (8008aec <UART_SetConfig+0x1a6c>)
 80089f0:	e006      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089f2:	4b3f      	ldr	r3, [pc, #252]	; (8008af0 <UART_SetConfig+0x1a70>)
 80089f4:	e004      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089f6:	4b3f      	ldr	r3, [pc, #252]	; (8008af4 <UART_SetConfig+0x1a74>)
 80089f8:	e002      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089fa:	4b33      	ldr	r3, [pc, #204]	; (8008ac8 <UART_SetConfig+0x1a48>)
 80089fc:	e000      	b.n	8008a00 <UART_SetConfig+0x1980>
 80089fe:	4b34      	ldr	r3, [pc, #208]	; (8008ad0 <UART_SetConfig+0x1a50>)
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	6852      	ldr	r2, [r2, #4]
 8008a04:	0852      	lsrs	r2, r2, #1
 8008a06:	441a      	add	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a14:	e0df      	b.n	8008bd6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d045      	beq.n	8008aaa <UART_SetConfig+0x1a2a>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d03f      	beq.n	8008aa6 <UART_SetConfig+0x1a26>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d039      	beq.n	8008aa2 <UART_SetConfig+0x1a22>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d033      	beq.n	8008a9e <UART_SetConfig+0x1a1e>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d02d      	beq.n	8008a9a <UART_SetConfig+0x1a1a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a42:	2b05      	cmp	r3, #5
 8008a44:	d027      	beq.n	8008a96 <UART_SetConfig+0x1a16>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	2b06      	cmp	r3, #6
 8008a4c:	d021      	beq.n	8008a92 <UART_SetConfig+0x1a12>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a52:	2b07      	cmp	r3, #7
 8008a54:	d01b      	beq.n	8008a8e <UART_SetConfig+0x1a0e>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5a:	2b08      	cmp	r3, #8
 8008a5c:	d015      	beq.n	8008a8a <UART_SetConfig+0x1a0a>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	2b09      	cmp	r3, #9
 8008a64:	d00f      	beq.n	8008a86 <UART_SetConfig+0x1a06>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6a:	2b0a      	cmp	r3, #10
 8008a6c:	d008      	beq.n	8008a80 <UART_SetConfig+0x1a00>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	2b0b      	cmp	r3, #11
 8008a74:	d102      	bne.n	8008a7c <UART_SetConfig+0x19fc>
 8008a76:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008a7a:	e017      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008a7c:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <UART_SetConfig+0x1a60>)
 8008a7e:	e015      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008a80:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008a84:	e012      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008a86:	4b1c      	ldr	r3, [pc, #112]	; (8008af8 <UART_SetConfig+0x1a78>)
 8008a88:	e010      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008a8a:	4b1c      	ldr	r3, [pc, #112]	; (8008afc <UART_SetConfig+0x1a7c>)
 8008a8c:	e00e      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <UART_SetConfig+0x1a4c>)
 8008a90:	e00c      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008a92:	4b1b      	ldr	r3, [pc, #108]	; (8008b00 <UART_SetConfig+0x1a80>)
 8008a94:	e00a      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008a96:	4b1b      	ldr	r3, [pc, #108]	; (8008b04 <UART_SetConfig+0x1a84>)
 8008a98:	e008      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008a9a:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <UART_SetConfig+0x1a54>)
 8008a9c:	e006      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008a9e:	4b1a      	ldr	r3, [pc, #104]	; (8008b08 <UART_SetConfig+0x1a88>)
 8008aa0:	e004      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008aa2:	4b0d      	ldr	r3, [pc, #52]	; (8008ad8 <UART_SetConfig+0x1a58>)
 8008aa4:	e002      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	; (8008adc <UART_SetConfig+0x1a5c>)
 8008aa8:	e000      	b.n	8008aac <UART_SetConfig+0x1a2c>
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <UART_SetConfig+0x1a60>)
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6852      	ldr	r2, [r2, #4]
 8008ab0:	0852      	lsrs	r2, r2, #1
 8008ab2:	441a      	add	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ac0:	e089      	b.n	8008bd6 <UART_SetConfig+0x1b56>
 8008ac2:	bf00      	nop
 8008ac4:	58024400 	.word	0x58024400
 8008ac8:	03d09000 	.word	0x03d09000
 8008acc:	0007a120 	.word	0x0007a120
 8008ad0:	07a12000 	.word	0x07a12000
 8008ad4:	000f4240 	.word	0x000f4240
 8008ad8:	001e8480 	.word	0x001e8480
 8008adc:	003d0900 	.word	0x003d0900
 8008ae0:	007a1200 	.word	0x007a1200
 8008ae4:	00a2c2aa 	.word	0x00a2c2aa
 8008ae8:	00c35000 	.word	0x00c35000
 8008aec:	00f42400 	.word	0x00f42400
 8008af0:	01458554 	.word	0x01458554
 8008af4:	01e84800 	.word	0x01e84800
 8008af8:	0001e848 	.word	0x0001e848
 8008afc:	0003d090 	.word	0x0003d090
 8008b00:	000a2c2a 	.word	0x000a2c2a
 8008b04:	000c3500 	.word	0x000c3500
 8008b08:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d04f      	beq.n	8008bb4 <UART_SetConfig+0x1b34>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d048      	beq.n	8008bae <UART_SetConfig+0x1b2e>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d041      	beq.n	8008ba8 <UART_SetConfig+0x1b28>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d03a      	beq.n	8008ba2 <UART_SetConfig+0x1b22>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d033      	beq.n	8008b9c <UART_SetConfig+0x1b1c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	2b05      	cmp	r3, #5
 8008b3a:	d02c      	beq.n	8008b96 <UART_SetConfig+0x1b16>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b06      	cmp	r3, #6
 8008b42:	d025      	beq.n	8008b90 <UART_SetConfig+0x1b10>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	2b07      	cmp	r3, #7
 8008b4a:	d01e      	beq.n	8008b8a <UART_SetConfig+0x1b0a>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d017      	beq.n	8008b84 <UART_SetConfig+0x1b04>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	2b09      	cmp	r3, #9
 8008b5a:	d010      	beq.n	8008b7e <UART_SetConfig+0x1afe>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b0a      	cmp	r3, #10
 8008b62:	d009      	beq.n	8008b78 <UART_SetConfig+0x1af8>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b0b      	cmp	r3, #11
 8008b6a:	d102      	bne.n	8008b72 <UART_SetConfig+0x1af2>
 8008b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b70:	e022      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b76:	e01f      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b7c:	e01c      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b82:	e019      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b88:	e016      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b8e:	e013      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008b90:	f241 5354 	movw	r3, #5460	; 0x1554
 8008b94:	e010      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008b96:	f641 1398 	movw	r3, #6552	; 0x1998
 8008b9a:	e00d      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ba0:	e00a      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008ba2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008ba6:	e007      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008ba8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008bac:	e004      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bb2:	e001      	b.n	8008bb8 <UART_SetConfig+0x1b38>
 8008bb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6852      	ldr	r2, [r2, #4]
 8008bbc:	0852      	lsrs	r2, r2, #1
 8008bbe:	441a      	add	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bcc:	e003      	b.n	8008bd6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008bd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd8:	2b0f      	cmp	r3, #15
 8008bda:	d916      	bls.n	8008c0a <UART_SetConfig+0x1b8a>
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be2:	d212      	bcs.n	8008c0a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	f023 030f 	bic.w	r3, r3, #15
 8008bec:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf0:	085b      	lsrs	r3, r3, #1
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f003 0307 	and.w	r3, r3, #7
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008c06:	60da      	str	r2, [r3, #12]
 8008c08:	e3a3      	b.n	8009352 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c10:	e39f      	b.n	8009352 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8008c12:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008c16:	2b40      	cmp	r3, #64	; 0x40
 8008c18:	f200 8388 	bhi.w	800932c <UART_SetConfig+0x22ac>
 8008c1c:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <UART_SetConfig+0x1ba4>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008d29 	.word	0x08008d29
 8008c28:	08008ddf 	.word	0x08008ddf
 8008c2c:	0800932d 	.word	0x0800932d
 8008c30:	0800932d 	.word	0x0800932d
 8008c34:	08008e95 	.word	0x08008e95
 8008c38:	0800932d 	.word	0x0800932d
 8008c3c:	0800932d 	.word	0x0800932d
 8008c40:	0800932d 	.word	0x0800932d
 8008c44:	08008f4f 	.word	0x08008f4f
 8008c48:	0800932d 	.word	0x0800932d
 8008c4c:	0800932d 	.word	0x0800932d
 8008c50:	0800932d 	.word	0x0800932d
 8008c54:	0800932d 	.word	0x0800932d
 8008c58:	0800932d 	.word	0x0800932d
 8008c5c:	0800932d 	.word	0x0800932d
 8008c60:	0800932d 	.word	0x0800932d
 8008c64:	08009009 	.word	0x08009009
 8008c68:	0800932d 	.word	0x0800932d
 8008c6c:	0800932d 	.word	0x0800932d
 8008c70:	0800932d 	.word	0x0800932d
 8008c74:	0800932d 	.word	0x0800932d
 8008c78:	0800932d 	.word	0x0800932d
 8008c7c:	0800932d 	.word	0x0800932d
 8008c80:	0800932d 	.word	0x0800932d
 8008c84:	0800932d 	.word	0x0800932d
 8008c88:	0800932d 	.word	0x0800932d
 8008c8c:	0800932d 	.word	0x0800932d
 8008c90:	0800932d 	.word	0x0800932d
 8008c94:	0800932d 	.word	0x0800932d
 8008c98:	0800932d 	.word	0x0800932d
 8008c9c:	0800932d 	.word	0x0800932d
 8008ca0:	0800932d 	.word	0x0800932d
 8008ca4:	08009179 	.word	0x08009179
 8008ca8:	0800932d 	.word	0x0800932d
 8008cac:	0800932d 	.word	0x0800932d
 8008cb0:	0800932d 	.word	0x0800932d
 8008cb4:	0800932d 	.word	0x0800932d
 8008cb8:	0800932d 	.word	0x0800932d
 8008cbc:	0800932d 	.word	0x0800932d
 8008cc0:	0800932d 	.word	0x0800932d
 8008cc4:	0800932d 	.word	0x0800932d
 8008cc8:	0800932d 	.word	0x0800932d
 8008ccc:	0800932d 	.word	0x0800932d
 8008cd0:	0800932d 	.word	0x0800932d
 8008cd4:	0800932d 	.word	0x0800932d
 8008cd8:	0800932d 	.word	0x0800932d
 8008cdc:	0800932d 	.word	0x0800932d
 8008ce0:	0800932d 	.word	0x0800932d
 8008ce4:	0800932d 	.word	0x0800932d
 8008ce8:	0800932d 	.word	0x0800932d
 8008cec:	0800932d 	.word	0x0800932d
 8008cf0:	0800932d 	.word	0x0800932d
 8008cf4:	0800932d 	.word	0x0800932d
 8008cf8:	0800932d 	.word	0x0800932d
 8008cfc:	0800932d 	.word	0x0800932d
 8008d00:	0800932d 	.word	0x0800932d
 8008d04:	0800932d 	.word	0x0800932d
 8008d08:	0800932d 	.word	0x0800932d
 8008d0c:	0800932d 	.word	0x0800932d
 8008d10:	0800932d 	.word	0x0800932d
 8008d14:	0800932d 	.word	0x0800932d
 8008d18:	0800932d 	.word	0x0800932d
 8008d1c:	0800932d 	.word	0x0800932d
 8008d20:	0800932d 	.word	0x0800932d
 8008d24:	0800926d 	.word	0x0800926d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d28:	f7fb fdfc 	bl	8004924 <HAL_RCC_GetPCLK1Freq>
 8008d2c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d044      	beq.n	8008dc0 <UART_SetConfig+0x1d40>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d03e      	beq.n	8008dbc <UART_SetConfig+0x1d3c>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d038      	beq.n	8008db8 <UART_SetConfig+0x1d38>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d032      	beq.n	8008db4 <UART_SetConfig+0x1d34>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	d02c      	beq.n	8008db0 <UART_SetConfig+0x1d30>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	2b05      	cmp	r3, #5
 8008d5c:	d026      	beq.n	8008dac <UART_SetConfig+0x1d2c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	2b06      	cmp	r3, #6
 8008d64:	d020      	beq.n	8008da8 <UART_SetConfig+0x1d28>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	2b07      	cmp	r3, #7
 8008d6c:	d01a      	beq.n	8008da4 <UART_SetConfig+0x1d24>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d72:	2b08      	cmp	r3, #8
 8008d74:	d014      	beq.n	8008da0 <UART_SetConfig+0x1d20>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7a:	2b09      	cmp	r3, #9
 8008d7c:	d00e      	beq.n	8008d9c <UART_SetConfig+0x1d1c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	2b0a      	cmp	r3, #10
 8008d84:	d008      	beq.n	8008d98 <UART_SetConfig+0x1d18>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	2b0b      	cmp	r3, #11
 8008d8c:	d102      	bne.n	8008d94 <UART_SetConfig+0x1d14>
 8008d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d92:	e016      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008d94:	2301      	movs	r3, #1
 8008d96:	e014      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008d98:	2380      	movs	r3, #128	; 0x80
 8008d9a:	e012      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008d9c:	2340      	movs	r3, #64	; 0x40
 8008d9e:	e010      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008da0:	2320      	movs	r3, #32
 8008da2:	e00e      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008da4:	2310      	movs	r3, #16
 8008da6:	e00c      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008da8:	230c      	movs	r3, #12
 8008daa:	e00a      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008dac:	230a      	movs	r3, #10
 8008dae:	e008      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008db0:	2308      	movs	r3, #8
 8008db2:	e006      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008db4:	2306      	movs	r3, #6
 8008db6:	e004      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008db8:	2304      	movs	r3, #4
 8008dba:	e002      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e000      	b.n	8008dc2 <UART_SetConfig+0x1d42>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	085b      	lsrs	r3, r3, #1
 8008dce:	441a      	add	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ddc:	e2aa      	b.n	8009334 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dde:	f7fb fdb7 	bl	8004950 <HAL_RCC_GetPCLK2Freq>
 8008de2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d044      	beq.n	8008e76 <UART_SetConfig+0x1df6>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d03e      	beq.n	8008e72 <UART_SetConfig+0x1df2>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d038      	beq.n	8008e6e <UART_SetConfig+0x1dee>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d032      	beq.n	8008e6a <UART_SetConfig+0x1dea>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d02c      	beq.n	8008e66 <UART_SetConfig+0x1de6>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	2b05      	cmp	r3, #5
 8008e12:	d026      	beq.n	8008e62 <UART_SetConfig+0x1de2>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	2b06      	cmp	r3, #6
 8008e1a:	d020      	beq.n	8008e5e <UART_SetConfig+0x1dde>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	2b07      	cmp	r3, #7
 8008e22:	d01a      	beq.n	8008e5a <UART_SetConfig+0x1dda>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2b08      	cmp	r3, #8
 8008e2a:	d014      	beq.n	8008e56 <UART_SetConfig+0x1dd6>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	2b09      	cmp	r3, #9
 8008e32:	d00e      	beq.n	8008e52 <UART_SetConfig+0x1dd2>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	2b0a      	cmp	r3, #10
 8008e3a:	d008      	beq.n	8008e4e <UART_SetConfig+0x1dce>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	2b0b      	cmp	r3, #11
 8008e42:	d102      	bne.n	8008e4a <UART_SetConfig+0x1dca>
 8008e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e48:	e016      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e014      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e4e:	2380      	movs	r3, #128	; 0x80
 8008e50:	e012      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e52:	2340      	movs	r3, #64	; 0x40
 8008e54:	e010      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e56:	2320      	movs	r3, #32
 8008e58:	e00e      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e5a:	2310      	movs	r3, #16
 8008e5c:	e00c      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e5e:	230c      	movs	r3, #12
 8008e60:	e00a      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e62:	230a      	movs	r3, #10
 8008e64:	e008      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e66:	2308      	movs	r3, #8
 8008e68:	e006      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e6a:	2306      	movs	r3, #6
 8008e6c:	e004      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e6e:	2304      	movs	r3, #4
 8008e70:	e002      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e000      	b.n	8008e78 <UART_SetConfig+0x1df8>
 8008e76:	2301      	movs	r3, #1
 8008e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	085b      	lsrs	r3, r3, #1
 8008e84:	441a      	add	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e92:	e24f      	b.n	8009334 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e94:	f107 0318 	add.w	r3, r7, #24
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fc feab 	bl	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d044      	beq.n	8008f32 <UART_SetConfig+0x1eb2>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d03e      	beq.n	8008f2e <UART_SetConfig+0x1eae>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d038      	beq.n	8008f2a <UART_SetConfig+0x1eaa>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d032      	beq.n	8008f26 <UART_SetConfig+0x1ea6>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	d02c      	beq.n	8008f22 <UART_SetConfig+0x1ea2>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	2b05      	cmp	r3, #5
 8008ece:	d026      	beq.n	8008f1e <UART_SetConfig+0x1e9e>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	2b06      	cmp	r3, #6
 8008ed6:	d020      	beq.n	8008f1a <UART_SetConfig+0x1e9a>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	2b07      	cmp	r3, #7
 8008ede:	d01a      	beq.n	8008f16 <UART_SetConfig+0x1e96>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d014      	beq.n	8008f12 <UART_SetConfig+0x1e92>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b09      	cmp	r3, #9
 8008eee:	d00e      	beq.n	8008f0e <UART_SetConfig+0x1e8e>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	2b0a      	cmp	r3, #10
 8008ef6:	d008      	beq.n	8008f0a <UART_SetConfig+0x1e8a>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	2b0b      	cmp	r3, #11
 8008efe:	d102      	bne.n	8008f06 <UART_SetConfig+0x1e86>
 8008f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f04:	e016      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e014      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f0a:	2380      	movs	r3, #128	; 0x80
 8008f0c:	e012      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f0e:	2340      	movs	r3, #64	; 0x40
 8008f10:	e010      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f12:	2320      	movs	r3, #32
 8008f14:	e00e      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f16:	2310      	movs	r3, #16
 8008f18:	e00c      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f1a:	230c      	movs	r3, #12
 8008f1c:	e00a      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f1e:	230a      	movs	r3, #10
 8008f20:	e008      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f22:	2308      	movs	r3, #8
 8008f24:	e006      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f26:	2306      	movs	r3, #6
 8008f28:	e004      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f2a:	2304      	movs	r3, #4
 8008f2c:	e002      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e000      	b.n	8008f34 <UART_SetConfig+0x1eb4>
 8008f32:	2301      	movs	r3, #1
 8008f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	085b      	lsrs	r3, r3, #1
 8008f3e:	441a      	add	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f4c:	e1f2      	b.n	8009334 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f4e:	f107 030c 	add.w	r3, r7, #12
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fc ff9a 	bl	8005e8c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d044      	beq.n	8008fec <UART_SetConfig+0x1f6c>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d03e      	beq.n	8008fe8 <UART_SetConfig+0x1f68>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d038      	beq.n	8008fe4 <UART_SetConfig+0x1f64>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d032      	beq.n	8008fe0 <UART_SetConfig+0x1f60>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	d02c      	beq.n	8008fdc <UART_SetConfig+0x1f5c>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	2b05      	cmp	r3, #5
 8008f88:	d026      	beq.n	8008fd8 <UART_SetConfig+0x1f58>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8e:	2b06      	cmp	r3, #6
 8008f90:	d020      	beq.n	8008fd4 <UART_SetConfig+0x1f54>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	2b07      	cmp	r3, #7
 8008f98:	d01a      	beq.n	8008fd0 <UART_SetConfig+0x1f50>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	2b08      	cmp	r3, #8
 8008fa0:	d014      	beq.n	8008fcc <UART_SetConfig+0x1f4c>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	2b09      	cmp	r3, #9
 8008fa8:	d00e      	beq.n	8008fc8 <UART_SetConfig+0x1f48>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fae:	2b0a      	cmp	r3, #10
 8008fb0:	d008      	beq.n	8008fc4 <UART_SetConfig+0x1f44>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	2b0b      	cmp	r3, #11
 8008fb8:	d102      	bne.n	8008fc0 <UART_SetConfig+0x1f40>
 8008fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fbe:	e016      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e014      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fc4:	2380      	movs	r3, #128	; 0x80
 8008fc6:	e012      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fc8:	2340      	movs	r3, #64	; 0x40
 8008fca:	e010      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fcc:	2320      	movs	r3, #32
 8008fce:	e00e      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	e00c      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fd4:	230c      	movs	r3, #12
 8008fd6:	e00a      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fd8:	230a      	movs	r3, #10
 8008fda:	e008      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fdc:	2308      	movs	r3, #8
 8008fde:	e006      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fe0:	2306      	movs	r3, #6
 8008fe2:	e004      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fe4:	2304      	movs	r3, #4
 8008fe6:	e002      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e000      	b.n	8008fee <UART_SetConfig+0x1f6e>
 8008fec:	2301      	movs	r3, #1
 8008fee:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	085b      	lsrs	r3, r3, #1
 8008ff8:	441a      	add	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009002:	b29b      	uxth	r3, r3
 8009004:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009006:	e195      	b.n	8009334 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009008:	4b87      	ldr	r3, [pc, #540]	; (8009228 <UART_SetConfig+0x21a8>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0320 	and.w	r3, r3, #32
 8009010:	2b00      	cmp	r3, #0
 8009012:	d05d      	beq.n	80090d0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009014:	4b84      	ldr	r3, [pc, #528]	; (8009228 <UART_SetConfig+0x21a8>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	08db      	lsrs	r3, r3, #3
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	4a83      	ldr	r2, [pc, #524]	; (800922c <UART_SetConfig+0x21ac>)
 8009020:	40da      	lsrs	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	2b00      	cmp	r3, #0
 8009028:	d044      	beq.n	80090b4 <UART_SetConfig+0x2034>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	2b01      	cmp	r3, #1
 8009030:	d03e      	beq.n	80090b0 <UART_SetConfig+0x2030>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	2b02      	cmp	r3, #2
 8009038:	d038      	beq.n	80090ac <UART_SetConfig+0x202c>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	2b03      	cmp	r3, #3
 8009040:	d032      	beq.n	80090a8 <UART_SetConfig+0x2028>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	2b04      	cmp	r3, #4
 8009048:	d02c      	beq.n	80090a4 <UART_SetConfig+0x2024>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	2b05      	cmp	r3, #5
 8009050:	d026      	beq.n	80090a0 <UART_SetConfig+0x2020>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	2b06      	cmp	r3, #6
 8009058:	d020      	beq.n	800909c <UART_SetConfig+0x201c>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	2b07      	cmp	r3, #7
 8009060:	d01a      	beq.n	8009098 <UART_SetConfig+0x2018>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	2b08      	cmp	r3, #8
 8009068:	d014      	beq.n	8009094 <UART_SetConfig+0x2014>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	2b09      	cmp	r3, #9
 8009070:	d00e      	beq.n	8009090 <UART_SetConfig+0x2010>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	2b0a      	cmp	r3, #10
 8009078:	d008      	beq.n	800908c <UART_SetConfig+0x200c>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2b0b      	cmp	r3, #11
 8009080:	d102      	bne.n	8009088 <UART_SetConfig+0x2008>
 8009082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009086:	e016      	b.n	80090b6 <UART_SetConfig+0x2036>
 8009088:	2301      	movs	r3, #1
 800908a:	e014      	b.n	80090b6 <UART_SetConfig+0x2036>
 800908c:	2380      	movs	r3, #128	; 0x80
 800908e:	e012      	b.n	80090b6 <UART_SetConfig+0x2036>
 8009090:	2340      	movs	r3, #64	; 0x40
 8009092:	e010      	b.n	80090b6 <UART_SetConfig+0x2036>
 8009094:	2320      	movs	r3, #32
 8009096:	e00e      	b.n	80090b6 <UART_SetConfig+0x2036>
 8009098:	2310      	movs	r3, #16
 800909a:	e00c      	b.n	80090b6 <UART_SetConfig+0x2036>
 800909c:	230c      	movs	r3, #12
 800909e:	e00a      	b.n	80090b6 <UART_SetConfig+0x2036>
 80090a0:	230a      	movs	r3, #10
 80090a2:	e008      	b.n	80090b6 <UART_SetConfig+0x2036>
 80090a4:	2308      	movs	r3, #8
 80090a6:	e006      	b.n	80090b6 <UART_SetConfig+0x2036>
 80090a8:	2306      	movs	r3, #6
 80090aa:	e004      	b.n	80090b6 <UART_SetConfig+0x2036>
 80090ac:	2304      	movs	r3, #4
 80090ae:	e002      	b.n	80090b6 <UART_SetConfig+0x2036>
 80090b0:	2302      	movs	r3, #2
 80090b2:	e000      	b.n	80090b6 <UART_SetConfig+0x2036>
 80090b4:	2301      	movs	r3, #1
 80090b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	085b      	lsrs	r3, r3, #1
 80090c0:	441a      	add	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80090ce:	e131      	b.n	8009334 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d043      	beq.n	8009160 <UART_SetConfig+0x20e0>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d03d      	beq.n	800915c <UART_SetConfig+0x20dc>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d037      	beq.n	8009158 <UART_SetConfig+0x20d8>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d031      	beq.n	8009154 <UART_SetConfig+0x20d4>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d02b      	beq.n	8009150 <UART_SetConfig+0x20d0>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	2b05      	cmp	r3, #5
 80090fe:	d025      	beq.n	800914c <UART_SetConfig+0x20cc>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	2b06      	cmp	r3, #6
 8009106:	d01f      	beq.n	8009148 <UART_SetConfig+0x20c8>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	2b07      	cmp	r3, #7
 800910e:	d019      	beq.n	8009144 <UART_SetConfig+0x20c4>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	2b08      	cmp	r3, #8
 8009116:	d013      	beq.n	8009140 <UART_SetConfig+0x20c0>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	2b09      	cmp	r3, #9
 800911e:	d00d      	beq.n	800913c <UART_SetConfig+0x20bc>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009124:	2b0a      	cmp	r3, #10
 8009126:	d007      	beq.n	8009138 <UART_SetConfig+0x20b8>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912c:	2b0b      	cmp	r3, #11
 800912e:	d101      	bne.n	8009134 <UART_SetConfig+0x20b4>
 8009130:	4b3f      	ldr	r3, [pc, #252]	; (8009230 <UART_SetConfig+0x21b0>)
 8009132:	e016      	b.n	8009162 <UART_SetConfig+0x20e2>
 8009134:	4b3d      	ldr	r3, [pc, #244]	; (800922c <UART_SetConfig+0x21ac>)
 8009136:	e014      	b.n	8009162 <UART_SetConfig+0x20e2>
 8009138:	4b3e      	ldr	r3, [pc, #248]	; (8009234 <UART_SetConfig+0x21b4>)
 800913a:	e012      	b.n	8009162 <UART_SetConfig+0x20e2>
 800913c:	4b3e      	ldr	r3, [pc, #248]	; (8009238 <UART_SetConfig+0x21b8>)
 800913e:	e010      	b.n	8009162 <UART_SetConfig+0x20e2>
 8009140:	4b3e      	ldr	r3, [pc, #248]	; (800923c <UART_SetConfig+0x21bc>)
 8009142:	e00e      	b.n	8009162 <UART_SetConfig+0x20e2>
 8009144:	4b3e      	ldr	r3, [pc, #248]	; (8009240 <UART_SetConfig+0x21c0>)
 8009146:	e00c      	b.n	8009162 <UART_SetConfig+0x20e2>
 8009148:	4b3e      	ldr	r3, [pc, #248]	; (8009244 <UART_SetConfig+0x21c4>)
 800914a:	e00a      	b.n	8009162 <UART_SetConfig+0x20e2>
 800914c:	4b3e      	ldr	r3, [pc, #248]	; (8009248 <UART_SetConfig+0x21c8>)
 800914e:	e008      	b.n	8009162 <UART_SetConfig+0x20e2>
 8009150:	4b3e      	ldr	r3, [pc, #248]	; (800924c <UART_SetConfig+0x21cc>)
 8009152:	e006      	b.n	8009162 <UART_SetConfig+0x20e2>
 8009154:	4b3e      	ldr	r3, [pc, #248]	; (8009250 <UART_SetConfig+0x21d0>)
 8009156:	e004      	b.n	8009162 <UART_SetConfig+0x20e2>
 8009158:	4b3e      	ldr	r3, [pc, #248]	; (8009254 <UART_SetConfig+0x21d4>)
 800915a:	e002      	b.n	8009162 <UART_SetConfig+0x20e2>
 800915c:	4b3e      	ldr	r3, [pc, #248]	; (8009258 <UART_SetConfig+0x21d8>)
 800915e:	e000      	b.n	8009162 <UART_SetConfig+0x20e2>
 8009160:	4b32      	ldr	r3, [pc, #200]	; (800922c <UART_SetConfig+0x21ac>)
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6852      	ldr	r2, [r2, #4]
 8009166:	0852      	lsrs	r2, r2, #1
 8009168:	441a      	add	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009172:	b29b      	uxth	r3, r3
 8009174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009176:	e0dd      	b.n	8009334 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917c:	2b00      	cmp	r3, #0
 800917e:	d046      	beq.n	800920e <UART_SetConfig+0x218e>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009184:	2b01      	cmp	r3, #1
 8009186:	d040      	beq.n	800920a <UART_SetConfig+0x218a>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	2b02      	cmp	r3, #2
 800918e:	d03a      	beq.n	8009206 <UART_SetConfig+0x2186>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	2b03      	cmp	r3, #3
 8009196:	d034      	beq.n	8009202 <UART_SetConfig+0x2182>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	2b04      	cmp	r3, #4
 800919e:	d02e      	beq.n	80091fe <UART_SetConfig+0x217e>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a4:	2b05      	cmp	r3, #5
 80091a6:	d028      	beq.n	80091fa <UART_SetConfig+0x217a>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	2b06      	cmp	r3, #6
 80091ae:	d022      	beq.n	80091f6 <UART_SetConfig+0x2176>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	2b07      	cmp	r3, #7
 80091b6:	d01c      	beq.n	80091f2 <UART_SetConfig+0x2172>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d016      	beq.n	80091ee <UART_SetConfig+0x216e>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	2b09      	cmp	r3, #9
 80091c6:	d00f      	beq.n	80091e8 <UART_SetConfig+0x2168>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	2b0a      	cmp	r3, #10
 80091ce:	d008      	beq.n	80091e2 <UART_SetConfig+0x2162>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	2b0b      	cmp	r3, #11
 80091d6:	d102      	bne.n	80091de <UART_SetConfig+0x215e>
 80091d8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80091dc:	e018      	b.n	8009210 <UART_SetConfig+0x2190>
 80091de:	4b18      	ldr	r3, [pc, #96]	; (8009240 <UART_SetConfig+0x21c0>)
 80091e0:	e016      	b.n	8009210 <UART_SetConfig+0x2190>
 80091e2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80091e6:	e013      	b.n	8009210 <UART_SetConfig+0x2190>
 80091e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80091ec:	e010      	b.n	8009210 <UART_SetConfig+0x2190>
 80091ee:	4b1b      	ldr	r3, [pc, #108]	; (800925c <UART_SetConfig+0x21dc>)
 80091f0:	e00e      	b.n	8009210 <UART_SetConfig+0x2190>
 80091f2:	4b0f      	ldr	r3, [pc, #60]	; (8009230 <UART_SetConfig+0x21b0>)
 80091f4:	e00c      	b.n	8009210 <UART_SetConfig+0x2190>
 80091f6:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <UART_SetConfig+0x21e0>)
 80091f8:	e00a      	b.n	8009210 <UART_SetConfig+0x2190>
 80091fa:	4b1a      	ldr	r3, [pc, #104]	; (8009264 <UART_SetConfig+0x21e4>)
 80091fc:	e008      	b.n	8009210 <UART_SetConfig+0x2190>
 80091fe:	4b0d      	ldr	r3, [pc, #52]	; (8009234 <UART_SetConfig+0x21b4>)
 8009200:	e006      	b.n	8009210 <UART_SetConfig+0x2190>
 8009202:	4b19      	ldr	r3, [pc, #100]	; (8009268 <UART_SetConfig+0x21e8>)
 8009204:	e004      	b.n	8009210 <UART_SetConfig+0x2190>
 8009206:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <UART_SetConfig+0x21b8>)
 8009208:	e002      	b.n	8009210 <UART_SetConfig+0x2190>
 800920a:	4b0c      	ldr	r3, [pc, #48]	; (800923c <UART_SetConfig+0x21bc>)
 800920c:	e000      	b.n	8009210 <UART_SetConfig+0x2190>
 800920e:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <UART_SetConfig+0x21c0>)
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6852      	ldr	r2, [r2, #4]
 8009214:	0852      	lsrs	r2, r2, #1
 8009216:	441a      	add	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009220:	b29b      	uxth	r3, r3
 8009222:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009224:	e086      	b.n	8009334 <UART_SetConfig+0x22b4>
 8009226:	bf00      	nop
 8009228:	58024400 	.word	0x58024400
 800922c:	03d09000 	.word	0x03d09000
 8009230:	0003d090 	.word	0x0003d090
 8009234:	0007a120 	.word	0x0007a120
 8009238:	000f4240 	.word	0x000f4240
 800923c:	001e8480 	.word	0x001e8480
 8009240:	003d0900 	.word	0x003d0900
 8009244:	00516155 	.word	0x00516155
 8009248:	0061a800 	.word	0x0061a800
 800924c:	007a1200 	.word	0x007a1200
 8009250:	00a2c2aa 	.word	0x00a2c2aa
 8009254:	00f42400 	.word	0x00f42400
 8009258:	01e84800 	.word	0x01e84800
 800925c:	0001e848 	.word	0x0001e848
 8009260:	00051615 	.word	0x00051615
 8009264:	00061a80 	.word	0x00061a80
 8009268:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	2b00      	cmp	r3, #0
 8009272:	d04e      	beq.n	8009312 <UART_SetConfig+0x2292>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	2b01      	cmp	r3, #1
 800927a:	d047      	beq.n	800930c <UART_SetConfig+0x228c>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	2b02      	cmp	r3, #2
 8009282:	d040      	beq.n	8009306 <UART_SetConfig+0x2286>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009288:	2b03      	cmp	r3, #3
 800928a:	d039      	beq.n	8009300 <UART_SetConfig+0x2280>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009290:	2b04      	cmp	r3, #4
 8009292:	d032      	beq.n	80092fa <UART_SetConfig+0x227a>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2b05      	cmp	r3, #5
 800929a:	d02b      	beq.n	80092f4 <UART_SetConfig+0x2274>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	2b06      	cmp	r3, #6
 80092a2:	d024      	beq.n	80092ee <UART_SetConfig+0x226e>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	2b07      	cmp	r3, #7
 80092aa:	d01d      	beq.n	80092e8 <UART_SetConfig+0x2268>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d016      	beq.n	80092e2 <UART_SetConfig+0x2262>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	2b09      	cmp	r3, #9
 80092ba:	d00f      	beq.n	80092dc <UART_SetConfig+0x225c>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	2b0a      	cmp	r3, #10
 80092c2:	d008      	beq.n	80092d6 <UART_SetConfig+0x2256>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b0b      	cmp	r3, #11
 80092ca:	d101      	bne.n	80092d0 <UART_SetConfig+0x2250>
 80092cc:	2380      	movs	r3, #128	; 0x80
 80092ce:	e022      	b.n	8009316 <UART_SetConfig+0x2296>
 80092d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092d4:	e01f      	b.n	8009316 <UART_SetConfig+0x2296>
 80092d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092da:	e01c      	b.n	8009316 <UART_SetConfig+0x2296>
 80092dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092e0:	e019      	b.n	8009316 <UART_SetConfig+0x2296>
 80092e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092e6:	e016      	b.n	8009316 <UART_SetConfig+0x2296>
 80092e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092ec:	e013      	b.n	8009316 <UART_SetConfig+0x2296>
 80092ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80092f2:	e010      	b.n	8009316 <UART_SetConfig+0x2296>
 80092f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80092f8:	e00d      	b.n	8009316 <UART_SetConfig+0x2296>
 80092fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092fe:	e00a      	b.n	8009316 <UART_SetConfig+0x2296>
 8009300:	f241 5355 	movw	r3, #5461	; 0x1555
 8009304:	e007      	b.n	8009316 <UART_SetConfig+0x2296>
 8009306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800930a:	e004      	b.n	8009316 <UART_SetConfig+0x2296>
 800930c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009310:	e001      	b.n	8009316 <UART_SetConfig+0x2296>
 8009312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	6852      	ldr	r2, [r2, #4]
 800931a:	0852      	lsrs	r2, r2, #1
 800931c:	441a      	add	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	fbb2 f3f3 	udiv	r3, r2, r3
 8009326:	b29b      	uxth	r3, r3
 8009328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800932a:	e003      	b.n	8009334 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009336:	2b0f      	cmp	r3, #15
 8009338:	d908      	bls.n	800934c <UART_SetConfig+0x22cc>
 800933a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009340:	d204      	bcs.n	800934c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009348:	60da      	str	r2, [r3, #12]
 800934a:	e002      	b.n	8009352 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800936e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8009372:	4618      	mov	r0, r3
 8009374:	3740      	adds	r7, #64	; 0x40
 8009376:	46bd      	mov	sp, r7
 8009378:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800937c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00a      	beq.n	80093a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00a      	beq.n	80093c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	430a      	orrs	r2, r1
 80093c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00a      	beq.n	80093ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	430a      	orrs	r2, r1
 800940a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00a      	beq.n	800942e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	430a      	orrs	r2, r1
 800942c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	430a      	orrs	r2, r1
 800944e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	d01a      	beq.n	8009492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800947a:	d10a      	bne.n	8009492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	430a      	orrs	r2, r1
 80094b2:	605a      	str	r2, [r3, #4]
  }
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af02      	add	r7, sp, #8
 80094c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80094d0:	f7f8 fbde 	bl	8001c90 <HAL_GetTick>
 80094d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0308 	and.w	r3, r3, #8
 80094e0:	2b08      	cmp	r3, #8
 80094e2:	d10e      	bne.n	8009502 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f82c 	bl	8009550 <UART_WaitOnFlagUntilTimeout>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e022      	b.n	8009548 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b04      	cmp	r3, #4
 800950e:	d10e      	bne.n	800952e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2200      	movs	r2, #0
 800951a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f816 	bl	8009550 <UART_WaitOnFlagUntilTimeout>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e00c      	b.n	8009548 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2220      	movs	r2, #32
 8009532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	4613      	mov	r3, r2
 800955e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009560:	e062      	b.n	8009628 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009568:	d05e      	beq.n	8009628 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800956a:	f7f8 fb91 	bl	8001c90 <HAL_GetTick>
 800956e:	4602      	mov	r2, r0
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	429a      	cmp	r2, r3
 8009578:	d302      	bcc.n	8009580 <UART_WaitOnFlagUntilTimeout+0x30>
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d11d      	bne.n	80095bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800958e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689a      	ldr	r2, [r3, #8]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f022 0201 	bic.w	r2, r2, #1
 800959e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2220      	movs	r2, #32
 80095a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80095b8:	2303      	movs	r3, #3
 80095ba:	e045      	b.n	8009648 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0304 	and.w	r3, r3, #4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d02e      	beq.n	8009628 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095d8:	d126      	bne.n	8009628 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095e2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095f2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	689a      	ldr	r2, [r3, #8]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 0201 	bic.w	r2, r2, #1
 8009602:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2220      	movs	r2, #32
 8009608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2220      	movs	r2, #32
 8009610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2220      	movs	r2, #32
 8009618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e00f      	b.n	8009648 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	69da      	ldr	r2, [r3, #28]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	4013      	ands	r3, r2
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	429a      	cmp	r2, r3
 8009636:	bf0c      	ite	eq
 8009638:	2301      	moveq	r3, #1
 800963a:	2300      	movne	r3, #0
 800963c:	b2db      	uxtb	r3, r3
 800963e:	461a      	mov	r2, r3
 8009640:	79fb      	ldrb	r3, [r7, #7]
 8009642:	429a      	cmp	r2, r3
 8009644:	d08d      	beq.n	8009562 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800965e:	2b01      	cmp	r3, #1
 8009660:	d101      	bne.n	8009666 <HAL_UARTEx_DisableFifoMode+0x16>
 8009662:	2302      	movs	r3, #2
 8009664:	e027      	b.n	80096b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2224      	movs	r2, #36	; 0x24
 8009672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f022 0201 	bic.w	r2, r2, #1
 800968c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009694:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d101      	bne.n	80096da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096d6:	2302      	movs	r3, #2
 80096d8:	e02d      	b.n	8009736 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2224      	movs	r2, #36	; 0x24
 80096e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0201 	bic.w	r2, r2, #1
 8009700:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f850 	bl	80097bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2220      	movs	r2, #32
 8009728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800974e:	2b01      	cmp	r3, #1
 8009750:	d101      	bne.n	8009756 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009752:	2302      	movs	r3, #2
 8009754:	e02d      	b.n	80097b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2224      	movs	r2, #36	; 0x24
 8009762:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f022 0201 	bic.w	r2, r2, #1
 800977c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f812 	bl	80097bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2220      	movs	r2, #32
 80097a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b089      	sub	sp, #36	; 0x24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80097c4:	4a2f      	ldr	r2, [pc, #188]	; (8009884 <UARTEx_SetNbDataToProcess+0xc8>)
 80097c6:	f107 0314 	add.w	r3, r7, #20
 80097ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80097ce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80097d2:	4a2d      	ldr	r2, [pc, #180]	; (8009888 <UARTEx_SetNbDataToProcess+0xcc>)
 80097d4:	f107 030c 	add.w	r3, r7, #12
 80097d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80097dc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d108      	bne.n	80097fa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097f8:	e03d      	b.n	8009876 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097fa:	2308      	movs	r3, #8
 80097fc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097fe:	2308      	movs	r3, #8
 8009800:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	0e5b      	lsrs	r3, r3, #25
 800980a:	b2db      	uxtb	r3, r3
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	0f5b      	lsrs	r3, r3, #29
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f003 0307 	and.w	r3, r3, #7
 8009820:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009822:	7fbb      	ldrb	r3, [r7, #30]
 8009824:	7f3a      	ldrb	r2, [r7, #28]
 8009826:	f107 0120 	add.w	r1, r7, #32
 800982a:	440a      	add	r2, r1
 800982c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009830:	fb02 f303 	mul.w	r3, r2, r3
 8009834:	7f3a      	ldrb	r2, [r7, #28]
 8009836:	f107 0120 	add.w	r1, r7, #32
 800983a:	440a      	add	r2, r1
 800983c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009840:	fb93 f3f2 	sdiv	r3, r3, r2
 8009844:	b29a      	uxth	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800984c:	7ffb      	ldrb	r3, [r7, #31]
 800984e:	7f7a      	ldrb	r2, [r7, #29]
 8009850:	f107 0120 	add.w	r1, r7, #32
 8009854:	440a      	add	r2, r1
 8009856:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800985a:	fb02 f303 	mul.w	r3, r2, r3
 800985e:	7f7a      	ldrb	r2, [r7, #29]
 8009860:	f107 0120 	add.w	r1, r7, #32
 8009864:	440a      	add	r2, r1
 8009866:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800986a:	fb93 f3f2 	sdiv	r3, r3, r2
 800986e:	b29a      	uxth	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009876:	bf00      	nop
 8009878:	3724      	adds	r7, #36	; 0x24
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	0800b8b4 	.word	0x0800b8b4
 8009888:	0800b8bc 	.word	0x0800b8bc

0800988c <__errno>:
 800988c:	4b01      	ldr	r3, [pc, #4]	; (8009894 <__errno+0x8>)
 800988e:	6818      	ldr	r0, [r3, #0]
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	24000010 	.word	0x24000010

08009898 <__libc_init_array>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	4e0d      	ldr	r6, [pc, #52]	; (80098d0 <__libc_init_array+0x38>)
 800989c:	4c0d      	ldr	r4, [pc, #52]	; (80098d4 <__libc_init_array+0x3c>)
 800989e:	1ba4      	subs	r4, r4, r6
 80098a0:	10a4      	asrs	r4, r4, #2
 80098a2:	2500      	movs	r5, #0
 80098a4:	42a5      	cmp	r5, r4
 80098a6:	d109      	bne.n	80098bc <__libc_init_array+0x24>
 80098a8:	4e0b      	ldr	r6, [pc, #44]	; (80098d8 <__libc_init_array+0x40>)
 80098aa:	4c0c      	ldr	r4, [pc, #48]	; (80098dc <__libc_init_array+0x44>)
 80098ac:	f001 ffd0 	bl	800b850 <_init>
 80098b0:	1ba4      	subs	r4, r4, r6
 80098b2:	10a4      	asrs	r4, r4, #2
 80098b4:	2500      	movs	r5, #0
 80098b6:	42a5      	cmp	r5, r4
 80098b8:	d105      	bne.n	80098c6 <__libc_init_array+0x2e>
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098c0:	4798      	blx	r3
 80098c2:	3501      	adds	r5, #1
 80098c4:	e7ee      	b.n	80098a4 <__libc_init_array+0xc>
 80098c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098ca:	4798      	blx	r3
 80098cc:	3501      	adds	r5, #1
 80098ce:	e7f2      	b.n	80098b6 <__libc_init_array+0x1e>
 80098d0:	0800bb38 	.word	0x0800bb38
 80098d4:	0800bb38 	.word	0x0800bb38
 80098d8:	0800bb38 	.word	0x0800bb38
 80098dc:	0800bb3c 	.word	0x0800bb3c

080098e0 <memset>:
 80098e0:	4402      	add	r2, r0
 80098e2:	4603      	mov	r3, r0
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d100      	bne.n	80098ea <memset+0xa>
 80098e8:	4770      	bx	lr
 80098ea:	f803 1b01 	strb.w	r1, [r3], #1
 80098ee:	e7f9      	b.n	80098e4 <memset+0x4>

080098f0 <__cvt>:
 80098f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098f2:	ed2d 8b02 	vpush	{d8}
 80098f6:	eeb0 8b40 	vmov.f64	d8, d0
 80098fa:	b085      	sub	sp, #20
 80098fc:	4617      	mov	r7, r2
 80098fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009900:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009902:	ee18 2a90 	vmov	r2, s17
 8009906:	f025 0520 	bic.w	r5, r5, #32
 800990a:	2a00      	cmp	r2, #0
 800990c:	bfb6      	itet	lt
 800990e:	222d      	movlt	r2, #45	; 0x2d
 8009910:	2200      	movge	r2, #0
 8009912:	eeb1 8b40 	vneglt.f64	d8, d0
 8009916:	2d46      	cmp	r5, #70	; 0x46
 8009918:	460c      	mov	r4, r1
 800991a:	701a      	strb	r2, [r3, #0]
 800991c:	d004      	beq.n	8009928 <__cvt+0x38>
 800991e:	2d45      	cmp	r5, #69	; 0x45
 8009920:	d100      	bne.n	8009924 <__cvt+0x34>
 8009922:	3401      	adds	r4, #1
 8009924:	2102      	movs	r1, #2
 8009926:	e000      	b.n	800992a <__cvt+0x3a>
 8009928:	2103      	movs	r1, #3
 800992a:	ab03      	add	r3, sp, #12
 800992c:	9301      	str	r3, [sp, #4]
 800992e:	ab02      	add	r3, sp, #8
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	4622      	mov	r2, r4
 8009934:	4633      	mov	r3, r6
 8009936:	eeb0 0b48 	vmov.f64	d0, d8
 800993a:	f000 fcc1 	bl	800a2c0 <_dtoa_r>
 800993e:	2d47      	cmp	r5, #71	; 0x47
 8009940:	d101      	bne.n	8009946 <__cvt+0x56>
 8009942:	07fb      	lsls	r3, r7, #31
 8009944:	d51e      	bpl.n	8009984 <__cvt+0x94>
 8009946:	2d46      	cmp	r5, #70	; 0x46
 8009948:	eb00 0304 	add.w	r3, r0, r4
 800994c:	d10c      	bne.n	8009968 <__cvt+0x78>
 800994e:	7802      	ldrb	r2, [r0, #0]
 8009950:	2a30      	cmp	r2, #48	; 0x30
 8009952:	d107      	bne.n	8009964 <__cvt+0x74>
 8009954:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800995c:	bf1c      	itt	ne
 800995e:	f1c4 0401 	rsbne	r4, r4, #1
 8009962:	6034      	strne	r4, [r6, #0]
 8009964:	6832      	ldr	r2, [r6, #0]
 8009966:	4413      	add	r3, r2
 8009968:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800996c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009970:	d007      	beq.n	8009982 <__cvt+0x92>
 8009972:	2130      	movs	r1, #48	; 0x30
 8009974:	9a03      	ldr	r2, [sp, #12]
 8009976:	429a      	cmp	r2, r3
 8009978:	d204      	bcs.n	8009984 <__cvt+0x94>
 800997a:	1c54      	adds	r4, r2, #1
 800997c:	9403      	str	r4, [sp, #12]
 800997e:	7011      	strb	r1, [r2, #0]
 8009980:	e7f8      	b.n	8009974 <__cvt+0x84>
 8009982:	9303      	str	r3, [sp, #12]
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009988:	1a1b      	subs	r3, r3, r0
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	b005      	add	sp, #20
 800998e:	ecbd 8b02 	vpop	{d8}
 8009992:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009994 <__exponent>:
 8009994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009996:	2900      	cmp	r1, #0
 8009998:	4604      	mov	r4, r0
 800999a:	bfba      	itte	lt
 800999c:	4249      	neglt	r1, r1
 800999e:	232d      	movlt	r3, #45	; 0x2d
 80099a0:	232b      	movge	r3, #43	; 0x2b
 80099a2:	2909      	cmp	r1, #9
 80099a4:	f804 2b02 	strb.w	r2, [r4], #2
 80099a8:	7043      	strb	r3, [r0, #1]
 80099aa:	dd20      	ble.n	80099ee <__exponent+0x5a>
 80099ac:	f10d 0307 	add.w	r3, sp, #7
 80099b0:	461f      	mov	r7, r3
 80099b2:	260a      	movs	r6, #10
 80099b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80099b8:	fb06 1115 	mls	r1, r6, r5, r1
 80099bc:	3130      	adds	r1, #48	; 0x30
 80099be:	2d09      	cmp	r5, #9
 80099c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80099c4:	f103 32ff 	add.w	r2, r3, #4294967295
 80099c8:	4629      	mov	r1, r5
 80099ca:	dc09      	bgt.n	80099e0 <__exponent+0x4c>
 80099cc:	3130      	adds	r1, #48	; 0x30
 80099ce:	3b02      	subs	r3, #2
 80099d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80099d4:	42bb      	cmp	r3, r7
 80099d6:	4622      	mov	r2, r4
 80099d8:	d304      	bcc.n	80099e4 <__exponent+0x50>
 80099da:	1a10      	subs	r0, r2, r0
 80099dc:	b003      	add	sp, #12
 80099de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e0:	4613      	mov	r3, r2
 80099e2:	e7e7      	b.n	80099b4 <__exponent+0x20>
 80099e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e8:	f804 2b01 	strb.w	r2, [r4], #1
 80099ec:	e7f2      	b.n	80099d4 <__exponent+0x40>
 80099ee:	2330      	movs	r3, #48	; 0x30
 80099f0:	4419      	add	r1, r3
 80099f2:	7083      	strb	r3, [r0, #2]
 80099f4:	1d02      	adds	r2, r0, #4
 80099f6:	70c1      	strb	r1, [r0, #3]
 80099f8:	e7ef      	b.n	80099da <__exponent+0x46>
 80099fa:	0000      	movs	r0, r0
 80099fc:	0000      	movs	r0, r0
	...

08009a00 <_printf_float>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	b08d      	sub	sp, #52	; 0x34
 8009a06:	460c      	mov	r4, r1
 8009a08:	4616      	mov	r6, r2
 8009a0a:	461f      	mov	r7, r3
 8009a0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009a10:	4605      	mov	r5, r0
 8009a12:	f001 f9a1 	bl	800ad58 <_localeconv_r>
 8009a16:	f8d0 b000 	ldr.w	fp, [r0]
 8009a1a:	4658      	mov	r0, fp
 8009a1c:	f7f6 fc60 	bl	80002e0 <strlen>
 8009a20:	2300      	movs	r3, #0
 8009a22:	930a      	str	r3, [sp, #40]	; 0x28
 8009a24:	f8d8 3000 	ldr.w	r3, [r8]
 8009a28:	9005      	str	r0, [sp, #20]
 8009a2a:	3307      	adds	r3, #7
 8009a2c:	f023 0307 	bic.w	r3, r3, #7
 8009a30:	f103 0108 	add.w	r1, r3, #8
 8009a34:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	f8c8 1000 	str.w	r1, [r8]
 8009a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a42:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009a46:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8009cd0 <_printf_float+0x2d0>
 8009a4a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009a4e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009a52:	eeb4 6b47 	vcmp.f64	d6, d7
 8009a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a5a:	dd24      	ble.n	8009aa6 <_printf_float+0xa6>
 8009a5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a64:	d502      	bpl.n	8009a6c <_printf_float+0x6c>
 8009a66:	232d      	movs	r3, #45	; 0x2d
 8009a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a6c:	499a      	ldr	r1, [pc, #616]	; (8009cd8 <_printf_float+0x2d8>)
 8009a6e:	4b9b      	ldr	r3, [pc, #620]	; (8009cdc <_printf_float+0x2dc>)
 8009a70:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009a74:	bf8c      	ite	hi
 8009a76:	4688      	movhi	r8, r1
 8009a78:	4698      	movls	r8, r3
 8009a7a:	f022 0204 	bic.w	r2, r2, #4
 8009a7e:	2303      	movs	r3, #3
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	6022      	str	r2, [r4, #0]
 8009a84:	f04f 0a00 	mov.w	sl, #0
 8009a88:	9700      	str	r7, [sp, #0]
 8009a8a:	4633      	mov	r3, r6
 8009a8c:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4628      	mov	r0, r5
 8009a92:	f000 f9e1 	bl	8009e58 <_printf_common>
 8009a96:	3001      	adds	r0, #1
 8009a98:	f040 8089 	bne.w	8009bae <_printf_float+0x1ae>
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	b00d      	add	sp, #52	; 0x34
 8009aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa6:	eeb4 0b40 	vcmp.f64	d0, d0
 8009aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aae:	d702      	bvc.n	8009ab6 <_printf_float+0xb6>
 8009ab0:	498b      	ldr	r1, [pc, #556]	; (8009ce0 <_printf_float+0x2e0>)
 8009ab2:	4b8c      	ldr	r3, [pc, #560]	; (8009ce4 <_printf_float+0x2e4>)
 8009ab4:	e7dc      	b.n	8009a70 <_printf_float+0x70>
 8009ab6:	6861      	ldr	r1, [r4, #4]
 8009ab8:	1c4b      	adds	r3, r1, #1
 8009aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009abe:	ab0a      	add	r3, sp, #40	; 0x28
 8009ac0:	a809      	add	r0, sp, #36	; 0x24
 8009ac2:	d13b      	bne.n	8009b3c <_printf_float+0x13c>
 8009ac4:	2106      	movs	r1, #6
 8009ac6:	6061      	str	r1, [r4, #4]
 8009ac8:	f04f 0c00 	mov.w	ip, #0
 8009acc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8009ad0:	e9cd 0900 	strd	r0, r9, [sp]
 8009ad4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ad8:	6022      	str	r2, [r4, #0]
 8009ada:	6861      	ldr	r1, [r4, #4]
 8009adc:	4628      	mov	r0, r5
 8009ade:	f7ff ff07 	bl	80098f0 <__cvt>
 8009ae2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8009ae6:	2b47      	cmp	r3, #71	; 0x47
 8009ae8:	4680      	mov	r8, r0
 8009aea:	d109      	bne.n	8009b00 <_printf_float+0x100>
 8009aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aee:	1cd8      	adds	r0, r3, #3
 8009af0:	db02      	blt.n	8009af8 <_printf_float+0xf8>
 8009af2:	6862      	ldr	r2, [r4, #4]
 8009af4:	4293      	cmp	r3, r2
 8009af6:	dd47      	ble.n	8009b88 <_printf_float+0x188>
 8009af8:	f1a9 0902 	sub.w	r9, r9, #2
 8009afc:	fa5f f989 	uxtb.w	r9, r9
 8009b00:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b06:	d824      	bhi.n	8009b52 <_printf_float+0x152>
 8009b08:	3901      	subs	r1, #1
 8009b0a:	464a      	mov	r2, r9
 8009b0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b10:	9109      	str	r1, [sp, #36]	; 0x24
 8009b12:	f7ff ff3f 	bl	8009994 <__exponent>
 8009b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b18:	1813      	adds	r3, r2, r0
 8009b1a:	2a01      	cmp	r2, #1
 8009b1c:	4682      	mov	sl, r0
 8009b1e:	6123      	str	r3, [r4, #16]
 8009b20:	dc02      	bgt.n	8009b28 <_printf_float+0x128>
 8009b22:	6822      	ldr	r2, [r4, #0]
 8009b24:	07d1      	lsls	r1, r2, #31
 8009b26:	d501      	bpl.n	8009b2c <_printf_float+0x12c>
 8009b28:	3301      	adds	r3, #1
 8009b2a:	6123      	str	r3, [r4, #16]
 8009b2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0a9      	beq.n	8009a88 <_printf_float+0x88>
 8009b34:	232d      	movs	r3, #45	; 0x2d
 8009b36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b3a:	e7a5      	b.n	8009a88 <_printf_float+0x88>
 8009b3c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8009b40:	f000 8178 	beq.w	8009e34 <_printf_float+0x434>
 8009b44:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009b48:	d1be      	bne.n	8009ac8 <_printf_float+0xc8>
 8009b4a:	2900      	cmp	r1, #0
 8009b4c:	d1bc      	bne.n	8009ac8 <_printf_float+0xc8>
 8009b4e:	2101      	movs	r1, #1
 8009b50:	e7b9      	b.n	8009ac6 <_printf_float+0xc6>
 8009b52:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009b56:	d119      	bne.n	8009b8c <_printf_float+0x18c>
 8009b58:	2900      	cmp	r1, #0
 8009b5a:	6863      	ldr	r3, [r4, #4]
 8009b5c:	dd0c      	ble.n	8009b78 <_printf_float+0x178>
 8009b5e:	6121      	str	r1, [r4, #16]
 8009b60:	b913      	cbnz	r3, 8009b68 <_printf_float+0x168>
 8009b62:	6822      	ldr	r2, [r4, #0]
 8009b64:	07d2      	lsls	r2, r2, #31
 8009b66:	d502      	bpl.n	8009b6e <_printf_float+0x16e>
 8009b68:	3301      	adds	r3, #1
 8009b6a:	440b      	add	r3, r1
 8009b6c:	6123      	str	r3, [r4, #16]
 8009b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b70:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b72:	f04f 0a00 	mov.w	sl, #0
 8009b76:	e7d9      	b.n	8009b2c <_printf_float+0x12c>
 8009b78:	b913      	cbnz	r3, 8009b80 <_printf_float+0x180>
 8009b7a:	6822      	ldr	r2, [r4, #0]
 8009b7c:	07d0      	lsls	r0, r2, #31
 8009b7e:	d501      	bpl.n	8009b84 <_printf_float+0x184>
 8009b80:	3302      	adds	r3, #2
 8009b82:	e7f3      	b.n	8009b6c <_printf_float+0x16c>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e7f1      	b.n	8009b6c <_printf_float+0x16c>
 8009b88:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009b8c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b90:	4293      	cmp	r3, r2
 8009b92:	db05      	blt.n	8009ba0 <_printf_float+0x1a0>
 8009b94:	6822      	ldr	r2, [r4, #0]
 8009b96:	6123      	str	r3, [r4, #16]
 8009b98:	07d1      	lsls	r1, r2, #31
 8009b9a:	d5e8      	bpl.n	8009b6e <_printf_float+0x16e>
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	e7e5      	b.n	8009b6c <_printf_float+0x16c>
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	bfd4      	ite	le
 8009ba4:	f1c3 0302 	rsble	r3, r3, #2
 8009ba8:	2301      	movgt	r3, #1
 8009baa:	4413      	add	r3, r2
 8009bac:	e7de      	b.n	8009b6c <_printf_float+0x16c>
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	055a      	lsls	r2, r3, #21
 8009bb2:	d407      	bmi.n	8009bc4 <_printf_float+0x1c4>
 8009bb4:	6923      	ldr	r3, [r4, #16]
 8009bb6:	4642      	mov	r2, r8
 8009bb8:	4631      	mov	r1, r6
 8009bba:	4628      	mov	r0, r5
 8009bbc:	47b8      	blx	r7
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	d12a      	bne.n	8009c18 <_printf_float+0x218>
 8009bc2:	e76b      	b.n	8009a9c <_printf_float+0x9c>
 8009bc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009bc8:	f240 80de 	bls.w	8009d88 <_printf_float+0x388>
 8009bcc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009bd0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd8:	d133      	bne.n	8009c42 <_printf_float+0x242>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	4a42      	ldr	r2, [pc, #264]	; (8009ce8 <_printf_float+0x2e8>)
 8009bde:	4631      	mov	r1, r6
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b8      	blx	r7
 8009be4:	3001      	adds	r0, #1
 8009be6:	f43f af59 	beq.w	8009a9c <_printf_float+0x9c>
 8009bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	db02      	blt.n	8009bf8 <_printf_float+0x1f8>
 8009bf2:	6823      	ldr	r3, [r4, #0]
 8009bf4:	07d8      	lsls	r0, r3, #31
 8009bf6:	d50f      	bpl.n	8009c18 <_printf_float+0x218>
 8009bf8:	9b05      	ldr	r3, [sp, #20]
 8009bfa:	465a      	mov	r2, fp
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b8      	blx	r7
 8009c02:	3001      	adds	r0, #1
 8009c04:	f43f af4a 	beq.w	8009a9c <_printf_float+0x9c>
 8009c08:	f04f 0800 	mov.w	r8, #0
 8009c0c:	f104 091a 	add.w	r9, r4, #26
 8009c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c12:	3b01      	subs	r3, #1
 8009c14:	4543      	cmp	r3, r8
 8009c16:	dc09      	bgt.n	8009c2c <_printf_float+0x22c>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	079b      	lsls	r3, r3, #30
 8009c1c:	f100 8105 	bmi.w	8009e2a <_printf_float+0x42a>
 8009c20:	68e0      	ldr	r0, [r4, #12]
 8009c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c24:	4298      	cmp	r0, r3
 8009c26:	bfb8      	it	lt
 8009c28:	4618      	movlt	r0, r3
 8009c2a:	e739      	b.n	8009aa0 <_printf_float+0xa0>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	464a      	mov	r2, r9
 8009c30:	4631      	mov	r1, r6
 8009c32:	4628      	mov	r0, r5
 8009c34:	47b8      	blx	r7
 8009c36:	3001      	adds	r0, #1
 8009c38:	f43f af30 	beq.w	8009a9c <_printf_float+0x9c>
 8009c3c:	f108 0801 	add.w	r8, r8, #1
 8009c40:	e7e6      	b.n	8009c10 <_printf_float+0x210>
 8009c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	dc2b      	bgt.n	8009ca0 <_printf_float+0x2a0>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	4a27      	ldr	r2, [pc, #156]	; (8009ce8 <_printf_float+0x2e8>)
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	f43f af22 	beq.w	8009a9c <_printf_float+0x9c>
 8009c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c5a:	b923      	cbnz	r3, 8009c66 <_printf_float+0x266>
 8009c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c5e:	b913      	cbnz	r3, 8009c66 <_printf_float+0x266>
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	07d9      	lsls	r1, r3, #31
 8009c64:	d5d8      	bpl.n	8009c18 <_printf_float+0x218>
 8009c66:	9b05      	ldr	r3, [sp, #20]
 8009c68:	465a      	mov	r2, fp
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b8      	blx	r7
 8009c70:	3001      	adds	r0, #1
 8009c72:	f43f af13 	beq.w	8009a9c <_printf_float+0x9c>
 8009c76:	f04f 0900 	mov.w	r9, #0
 8009c7a:	f104 0a1a 	add.w	sl, r4, #26
 8009c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c80:	425b      	negs	r3, r3
 8009c82:	454b      	cmp	r3, r9
 8009c84:	dc01      	bgt.n	8009c8a <_printf_float+0x28a>
 8009c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c88:	e795      	b.n	8009bb6 <_printf_float+0x1b6>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4652      	mov	r2, sl
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	f43f af01 	beq.w	8009a9c <_printf_float+0x9c>
 8009c9a:	f109 0901 	add.w	r9, r9, #1
 8009c9e:	e7ee      	b.n	8009c7e <_printf_float+0x27e>
 8009ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ca2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	bfa8      	it	ge
 8009ca8:	461a      	movge	r2, r3
 8009caa:	2a00      	cmp	r2, #0
 8009cac:	4691      	mov	r9, r2
 8009cae:	dd07      	ble.n	8009cc0 <_printf_float+0x2c0>
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4642      	mov	r2, r8
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	f43f aeee 	beq.w	8009a9c <_printf_float+0x9c>
 8009cc0:	f104 031a 	add.w	r3, r4, #26
 8009cc4:	f04f 0a00 	mov.w	sl, #0
 8009cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ccc:	9307      	str	r3, [sp, #28]
 8009cce:	e017      	b.n	8009d00 <_printf_float+0x300>
 8009cd0:	ffffffff 	.word	0xffffffff
 8009cd4:	7fefffff 	.word	0x7fefffff
 8009cd8:	0800b8d8 	.word	0x0800b8d8
 8009cdc:	0800b8d4 	.word	0x0800b8d4
 8009ce0:	0800b8e0 	.word	0x0800b8e0
 8009ce4:	0800b8dc 	.word	0x0800b8dc
 8009ce8:	0800b8e4 	.word	0x0800b8e4
 8009cec:	2301      	movs	r3, #1
 8009cee:	9a07      	ldr	r2, [sp, #28]
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f43f aed0 	beq.w	8009a9c <_printf_float+0x9c>
 8009cfc:	f10a 0a01 	add.w	sl, sl, #1
 8009d00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d02:	9306      	str	r3, [sp, #24]
 8009d04:	eba3 0309 	sub.w	r3, r3, r9
 8009d08:	4553      	cmp	r3, sl
 8009d0a:	dcef      	bgt.n	8009cec <_printf_float+0x2ec>
 8009d0c:	9b06      	ldr	r3, [sp, #24]
 8009d0e:	4498      	add	r8, r3
 8009d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d14:	429a      	cmp	r2, r3
 8009d16:	db15      	blt.n	8009d44 <_printf_float+0x344>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	07da      	lsls	r2, r3, #31
 8009d1c:	d412      	bmi.n	8009d44 <_printf_float+0x344>
 8009d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d20:	9a06      	ldr	r2, [sp, #24]
 8009d22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d24:	1a9a      	subs	r2, r3, r2
 8009d26:	eba3 0a01 	sub.w	sl, r3, r1
 8009d2a:	4592      	cmp	sl, r2
 8009d2c:	bfa8      	it	ge
 8009d2e:	4692      	movge	sl, r2
 8009d30:	f1ba 0f00 	cmp.w	sl, #0
 8009d34:	dc0e      	bgt.n	8009d54 <_printf_float+0x354>
 8009d36:	f04f 0800 	mov.w	r8, #0
 8009d3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d3e:	f104 091a 	add.w	r9, r4, #26
 8009d42:	e019      	b.n	8009d78 <_printf_float+0x378>
 8009d44:	9b05      	ldr	r3, [sp, #20]
 8009d46:	465a      	mov	r2, fp
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	d1e5      	bne.n	8009d1e <_printf_float+0x31e>
 8009d52:	e6a3      	b.n	8009a9c <_printf_float+0x9c>
 8009d54:	4653      	mov	r3, sl
 8009d56:	4642      	mov	r2, r8
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	47b8      	blx	r7
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d1e9      	bne.n	8009d36 <_printf_float+0x336>
 8009d62:	e69b      	b.n	8009a9c <_printf_float+0x9c>
 8009d64:	2301      	movs	r3, #1
 8009d66:	464a      	mov	r2, r9
 8009d68:	4631      	mov	r1, r6
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	47b8      	blx	r7
 8009d6e:	3001      	adds	r0, #1
 8009d70:	f43f ae94 	beq.w	8009a9c <_printf_float+0x9c>
 8009d74:	f108 0801 	add.w	r8, r8, #1
 8009d78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d7c:	1a9b      	subs	r3, r3, r2
 8009d7e:	eba3 030a 	sub.w	r3, r3, sl
 8009d82:	4543      	cmp	r3, r8
 8009d84:	dcee      	bgt.n	8009d64 <_printf_float+0x364>
 8009d86:	e747      	b.n	8009c18 <_printf_float+0x218>
 8009d88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d8a:	2a01      	cmp	r2, #1
 8009d8c:	dc01      	bgt.n	8009d92 <_printf_float+0x392>
 8009d8e:	07db      	lsls	r3, r3, #31
 8009d90:	d539      	bpl.n	8009e06 <_printf_float+0x406>
 8009d92:	2301      	movs	r3, #1
 8009d94:	4642      	mov	r2, r8
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	f43f ae7d 	beq.w	8009a9c <_printf_float+0x9c>
 8009da2:	9b05      	ldr	r3, [sp, #20]
 8009da4:	465a      	mov	r2, fp
 8009da6:	4631      	mov	r1, r6
 8009da8:	4628      	mov	r0, r5
 8009daa:	47b8      	blx	r7
 8009dac:	3001      	adds	r0, #1
 8009dae:	f108 0801 	add.w	r8, r8, #1
 8009db2:	f43f ae73 	beq.w	8009a9c <_printf_float+0x9c>
 8009db6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dc4:	f103 33ff 	add.w	r3, r3, #4294967295
 8009dc8:	d018      	beq.n	8009dfc <_printf_float+0x3fc>
 8009dca:	4642      	mov	r2, r8
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4628      	mov	r0, r5
 8009dd0:	47b8      	blx	r7
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d10e      	bne.n	8009df4 <_printf_float+0x3f4>
 8009dd6:	e661      	b.n	8009a9c <_printf_float+0x9c>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	464a      	mov	r2, r9
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4628      	mov	r0, r5
 8009de0:	47b8      	blx	r7
 8009de2:	3001      	adds	r0, #1
 8009de4:	f43f ae5a 	beq.w	8009a9c <_printf_float+0x9c>
 8009de8:	f108 0801 	add.w	r8, r8, #1
 8009dec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dee:	3b01      	subs	r3, #1
 8009df0:	4543      	cmp	r3, r8
 8009df2:	dcf1      	bgt.n	8009dd8 <_printf_float+0x3d8>
 8009df4:	4653      	mov	r3, sl
 8009df6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009dfa:	e6dd      	b.n	8009bb8 <_printf_float+0x1b8>
 8009dfc:	f04f 0800 	mov.w	r8, #0
 8009e00:	f104 091a 	add.w	r9, r4, #26
 8009e04:	e7f2      	b.n	8009dec <_printf_float+0x3ec>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e7df      	b.n	8009dca <_printf_float+0x3ca>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	464a      	mov	r2, r9
 8009e0e:	4631      	mov	r1, r6
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b8      	blx	r7
 8009e14:	3001      	adds	r0, #1
 8009e16:	f43f ae41 	beq.w	8009a9c <_printf_float+0x9c>
 8009e1a:	f108 0801 	add.w	r8, r8, #1
 8009e1e:	68e3      	ldr	r3, [r4, #12]
 8009e20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e22:	1a9b      	subs	r3, r3, r2
 8009e24:	4543      	cmp	r3, r8
 8009e26:	dcf0      	bgt.n	8009e0a <_printf_float+0x40a>
 8009e28:	e6fa      	b.n	8009c20 <_printf_float+0x220>
 8009e2a:	f04f 0800 	mov.w	r8, #0
 8009e2e:	f104 0919 	add.w	r9, r4, #25
 8009e32:	e7f4      	b.n	8009e1e <_printf_float+0x41e>
 8009e34:	2900      	cmp	r1, #0
 8009e36:	f43f ae8a 	beq.w	8009b4e <_printf_float+0x14e>
 8009e3a:	f04f 0c00 	mov.w	ip, #0
 8009e3e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8009e42:	e9cd 0900 	strd	r0, r9, [sp]
 8009e46:	6022      	str	r2, [r4, #0]
 8009e48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f7ff fd4f 	bl	80098f0 <__cvt>
 8009e52:	4680      	mov	r8, r0
 8009e54:	e64a      	b.n	8009aec <_printf_float+0xec>
 8009e56:	bf00      	nop

08009e58 <_printf_common>:
 8009e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5c:	4691      	mov	r9, r2
 8009e5e:	461f      	mov	r7, r3
 8009e60:	688a      	ldr	r2, [r1, #8]
 8009e62:	690b      	ldr	r3, [r1, #16]
 8009e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	bfb8      	it	lt
 8009e6c:	4613      	movlt	r3, r2
 8009e6e:	f8c9 3000 	str.w	r3, [r9]
 8009e72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e76:	4606      	mov	r6, r0
 8009e78:	460c      	mov	r4, r1
 8009e7a:	b112      	cbz	r2, 8009e82 <_printf_common+0x2a>
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	f8c9 3000 	str.w	r3, [r9]
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	0699      	lsls	r1, r3, #26
 8009e86:	bf42      	ittt	mi
 8009e88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009e8c:	3302      	addmi	r3, #2
 8009e8e:	f8c9 3000 	strmi.w	r3, [r9]
 8009e92:	6825      	ldr	r5, [r4, #0]
 8009e94:	f015 0506 	ands.w	r5, r5, #6
 8009e98:	d107      	bne.n	8009eaa <_printf_common+0x52>
 8009e9a:	f104 0a19 	add.w	sl, r4, #25
 8009e9e:	68e3      	ldr	r3, [r4, #12]
 8009ea0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ea4:	1a9b      	subs	r3, r3, r2
 8009ea6:	42ab      	cmp	r3, r5
 8009ea8:	dc28      	bgt.n	8009efc <_printf_common+0xa4>
 8009eaa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009eae:	6822      	ldr	r2, [r4, #0]
 8009eb0:	3300      	adds	r3, #0
 8009eb2:	bf18      	it	ne
 8009eb4:	2301      	movne	r3, #1
 8009eb6:	0692      	lsls	r2, r2, #26
 8009eb8:	d42d      	bmi.n	8009f16 <_printf_common+0xbe>
 8009eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	47c0      	blx	r8
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d020      	beq.n	8009f0a <_printf_common+0xb2>
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	68e5      	ldr	r5, [r4, #12]
 8009ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8009ed0:	f003 0306 	and.w	r3, r3, #6
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	bf08      	it	eq
 8009ed8:	1aad      	subeq	r5, r5, r2
 8009eda:	68a3      	ldr	r3, [r4, #8]
 8009edc:	6922      	ldr	r2, [r4, #16]
 8009ede:	bf0c      	ite	eq
 8009ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ee4:	2500      	movne	r5, #0
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	bfc4      	itt	gt
 8009eea:	1a9b      	subgt	r3, r3, r2
 8009eec:	18ed      	addgt	r5, r5, r3
 8009eee:	f04f 0900 	mov.w	r9, #0
 8009ef2:	341a      	adds	r4, #26
 8009ef4:	454d      	cmp	r5, r9
 8009ef6:	d11a      	bne.n	8009f2e <_printf_common+0xd6>
 8009ef8:	2000      	movs	r0, #0
 8009efa:	e008      	b.n	8009f0e <_printf_common+0xb6>
 8009efc:	2301      	movs	r3, #1
 8009efe:	4652      	mov	r2, sl
 8009f00:	4639      	mov	r1, r7
 8009f02:	4630      	mov	r0, r6
 8009f04:	47c0      	blx	r8
 8009f06:	3001      	adds	r0, #1
 8009f08:	d103      	bne.n	8009f12 <_printf_common+0xba>
 8009f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f12:	3501      	adds	r5, #1
 8009f14:	e7c3      	b.n	8009e9e <_printf_common+0x46>
 8009f16:	18e1      	adds	r1, r4, r3
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	2030      	movs	r0, #48	; 0x30
 8009f1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f20:	4422      	add	r2, r4
 8009f22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f2a:	3302      	adds	r3, #2
 8009f2c:	e7c5      	b.n	8009eba <_printf_common+0x62>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4622      	mov	r2, r4
 8009f32:	4639      	mov	r1, r7
 8009f34:	4630      	mov	r0, r6
 8009f36:	47c0      	blx	r8
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d0e6      	beq.n	8009f0a <_printf_common+0xb2>
 8009f3c:	f109 0901 	add.w	r9, r9, #1
 8009f40:	e7d8      	b.n	8009ef4 <_printf_common+0x9c>
	...

08009f44 <_printf_i>:
 8009f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	7e09      	ldrb	r1, [r1, #24]
 8009f50:	b085      	sub	sp, #20
 8009f52:	296e      	cmp	r1, #110	; 0x6e
 8009f54:	4617      	mov	r7, r2
 8009f56:	4606      	mov	r6, r0
 8009f58:	4698      	mov	r8, r3
 8009f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f5c:	f000 80b3 	beq.w	800a0c6 <_printf_i+0x182>
 8009f60:	d822      	bhi.n	8009fa8 <_printf_i+0x64>
 8009f62:	2963      	cmp	r1, #99	; 0x63
 8009f64:	d036      	beq.n	8009fd4 <_printf_i+0x90>
 8009f66:	d80a      	bhi.n	8009f7e <_printf_i+0x3a>
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	f000 80b9 	beq.w	800a0e0 <_printf_i+0x19c>
 8009f6e:	2958      	cmp	r1, #88	; 0x58
 8009f70:	f000 8083 	beq.w	800a07a <_printf_i+0x136>
 8009f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009f7c:	e032      	b.n	8009fe4 <_printf_i+0xa0>
 8009f7e:	2964      	cmp	r1, #100	; 0x64
 8009f80:	d001      	beq.n	8009f86 <_printf_i+0x42>
 8009f82:	2969      	cmp	r1, #105	; 0x69
 8009f84:	d1f6      	bne.n	8009f74 <_printf_i+0x30>
 8009f86:	6820      	ldr	r0, [r4, #0]
 8009f88:	6813      	ldr	r3, [r2, #0]
 8009f8a:	0605      	lsls	r5, r0, #24
 8009f8c:	f103 0104 	add.w	r1, r3, #4
 8009f90:	d52a      	bpl.n	8009fe8 <_printf_i+0xa4>
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6011      	str	r1, [r2, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	da03      	bge.n	8009fa2 <_printf_i+0x5e>
 8009f9a:	222d      	movs	r2, #45	; 0x2d
 8009f9c:	425b      	negs	r3, r3
 8009f9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009fa2:	486f      	ldr	r0, [pc, #444]	; (800a160 <_printf_i+0x21c>)
 8009fa4:	220a      	movs	r2, #10
 8009fa6:	e039      	b.n	800a01c <_printf_i+0xd8>
 8009fa8:	2973      	cmp	r1, #115	; 0x73
 8009faa:	f000 809d 	beq.w	800a0e8 <_printf_i+0x1a4>
 8009fae:	d808      	bhi.n	8009fc2 <_printf_i+0x7e>
 8009fb0:	296f      	cmp	r1, #111	; 0x6f
 8009fb2:	d020      	beq.n	8009ff6 <_printf_i+0xb2>
 8009fb4:	2970      	cmp	r1, #112	; 0x70
 8009fb6:	d1dd      	bne.n	8009f74 <_printf_i+0x30>
 8009fb8:	6823      	ldr	r3, [r4, #0]
 8009fba:	f043 0320 	orr.w	r3, r3, #32
 8009fbe:	6023      	str	r3, [r4, #0]
 8009fc0:	e003      	b.n	8009fca <_printf_i+0x86>
 8009fc2:	2975      	cmp	r1, #117	; 0x75
 8009fc4:	d017      	beq.n	8009ff6 <_printf_i+0xb2>
 8009fc6:	2978      	cmp	r1, #120	; 0x78
 8009fc8:	d1d4      	bne.n	8009f74 <_printf_i+0x30>
 8009fca:	2378      	movs	r3, #120	; 0x78
 8009fcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fd0:	4864      	ldr	r0, [pc, #400]	; (800a164 <_printf_i+0x220>)
 8009fd2:	e055      	b.n	800a080 <_printf_i+0x13c>
 8009fd4:	6813      	ldr	r3, [r2, #0]
 8009fd6:	1d19      	adds	r1, r3, #4
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6011      	str	r1, [r2, #0]
 8009fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e08c      	b.n	800a102 <_printf_i+0x1be>
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6011      	str	r1, [r2, #0]
 8009fec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ff0:	bf18      	it	ne
 8009ff2:	b21b      	sxthne	r3, r3
 8009ff4:	e7cf      	b.n	8009f96 <_printf_i+0x52>
 8009ff6:	6813      	ldr	r3, [r2, #0]
 8009ff8:	6825      	ldr	r5, [r4, #0]
 8009ffa:	1d18      	adds	r0, r3, #4
 8009ffc:	6010      	str	r0, [r2, #0]
 8009ffe:	0628      	lsls	r0, r5, #24
 800a000:	d501      	bpl.n	800a006 <_printf_i+0xc2>
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	e002      	b.n	800a00c <_printf_i+0xc8>
 800a006:	0668      	lsls	r0, r5, #25
 800a008:	d5fb      	bpl.n	800a002 <_printf_i+0xbe>
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	4854      	ldr	r0, [pc, #336]	; (800a160 <_printf_i+0x21c>)
 800a00e:	296f      	cmp	r1, #111	; 0x6f
 800a010:	bf14      	ite	ne
 800a012:	220a      	movne	r2, #10
 800a014:	2208      	moveq	r2, #8
 800a016:	2100      	movs	r1, #0
 800a018:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a01c:	6865      	ldr	r5, [r4, #4]
 800a01e:	60a5      	str	r5, [r4, #8]
 800a020:	2d00      	cmp	r5, #0
 800a022:	f2c0 8095 	blt.w	800a150 <_printf_i+0x20c>
 800a026:	6821      	ldr	r1, [r4, #0]
 800a028:	f021 0104 	bic.w	r1, r1, #4
 800a02c:	6021      	str	r1, [r4, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d13d      	bne.n	800a0ae <_printf_i+0x16a>
 800a032:	2d00      	cmp	r5, #0
 800a034:	f040 808e 	bne.w	800a154 <_printf_i+0x210>
 800a038:	4665      	mov	r5, ip
 800a03a:	2a08      	cmp	r2, #8
 800a03c:	d10b      	bne.n	800a056 <_printf_i+0x112>
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	07db      	lsls	r3, r3, #31
 800a042:	d508      	bpl.n	800a056 <_printf_i+0x112>
 800a044:	6923      	ldr	r3, [r4, #16]
 800a046:	6862      	ldr	r2, [r4, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	bfde      	ittt	le
 800a04c:	2330      	movle	r3, #48	; 0x30
 800a04e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a052:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a056:	ebac 0305 	sub.w	r3, ip, r5
 800a05a:	6123      	str	r3, [r4, #16]
 800a05c:	f8cd 8000 	str.w	r8, [sp]
 800a060:	463b      	mov	r3, r7
 800a062:	aa03      	add	r2, sp, #12
 800a064:	4621      	mov	r1, r4
 800a066:	4630      	mov	r0, r6
 800a068:	f7ff fef6 	bl	8009e58 <_printf_common>
 800a06c:	3001      	adds	r0, #1
 800a06e:	d14d      	bne.n	800a10c <_printf_i+0x1c8>
 800a070:	f04f 30ff 	mov.w	r0, #4294967295
 800a074:	b005      	add	sp, #20
 800a076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a07a:	4839      	ldr	r0, [pc, #228]	; (800a160 <_printf_i+0x21c>)
 800a07c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a080:	6813      	ldr	r3, [r2, #0]
 800a082:	6821      	ldr	r1, [r4, #0]
 800a084:	1d1d      	adds	r5, r3, #4
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	6015      	str	r5, [r2, #0]
 800a08a:	060a      	lsls	r2, r1, #24
 800a08c:	d50b      	bpl.n	800a0a6 <_printf_i+0x162>
 800a08e:	07ca      	lsls	r2, r1, #31
 800a090:	bf44      	itt	mi
 800a092:	f041 0120 	orrmi.w	r1, r1, #32
 800a096:	6021      	strmi	r1, [r4, #0]
 800a098:	b91b      	cbnz	r3, 800a0a2 <_printf_i+0x15e>
 800a09a:	6822      	ldr	r2, [r4, #0]
 800a09c:	f022 0220 	bic.w	r2, r2, #32
 800a0a0:	6022      	str	r2, [r4, #0]
 800a0a2:	2210      	movs	r2, #16
 800a0a4:	e7b7      	b.n	800a016 <_printf_i+0xd2>
 800a0a6:	064d      	lsls	r5, r1, #25
 800a0a8:	bf48      	it	mi
 800a0aa:	b29b      	uxthmi	r3, r3
 800a0ac:	e7ef      	b.n	800a08e <_printf_i+0x14a>
 800a0ae:	4665      	mov	r5, ip
 800a0b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0b4:	fb02 3311 	mls	r3, r2, r1, r3
 800a0b8:	5cc3      	ldrb	r3, [r0, r3]
 800a0ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a0be:	460b      	mov	r3, r1
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	d1f5      	bne.n	800a0b0 <_printf_i+0x16c>
 800a0c4:	e7b9      	b.n	800a03a <_printf_i+0xf6>
 800a0c6:	6813      	ldr	r3, [r2, #0]
 800a0c8:	6825      	ldr	r5, [r4, #0]
 800a0ca:	6961      	ldr	r1, [r4, #20]
 800a0cc:	1d18      	adds	r0, r3, #4
 800a0ce:	6010      	str	r0, [r2, #0]
 800a0d0:	0628      	lsls	r0, r5, #24
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	d501      	bpl.n	800a0da <_printf_i+0x196>
 800a0d6:	6019      	str	r1, [r3, #0]
 800a0d8:	e002      	b.n	800a0e0 <_printf_i+0x19c>
 800a0da:	066a      	lsls	r2, r5, #25
 800a0dc:	d5fb      	bpl.n	800a0d6 <_printf_i+0x192>
 800a0de:	8019      	strh	r1, [r3, #0]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	6123      	str	r3, [r4, #16]
 800a0e4:	4665      	mov	r5, ip
 800a0e6:	e7b9      	b.n	800a05c <_printf_i+0x118>
 800a0e8:	6813      	ldr	r3, [r2, #0]
 800a0ea:	1d19      	adds	r1, r3, #4
 800a0ec:	6011      	str	r1, [r2, #0]
 800a0ee:	681d      	ldr	r5, [r3, #0]
 800a0f0:	6862      	ldr	r2, [r4, #4]
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f7f6 f8fb 	bl	80002f0 <memchr>
 800a0fa:	b108      	cbz	r0, 800a100 <_printf_i+0x1bc>
 800a0fc:	1b40      	subs	r0, r0, r5
 800a0fe:	6060      	str	r0, [r4, #4]
 800a100:	6863      	ldr	r3, [r4, #4]
 800a102:	6123      	str	r3, [r4, #16]
 800a104:	2300      	movs	r3, #0
 800a106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a10a:	e7a7      	b.n	800a05c <_printf_i+0x118>
 800a10c:	6923      	ldr	r3, [r4, #16]
 800a10e:	462a      	mov	r2, r5
 800a110:	4639      	mov	r1, r7
 800a112:	4630      	mov	r0, r6
 800a114:	47c0      	blx	r8
 800a116:	3001      	adds	r0, #1
 800a118:	d0aa      	beq.n	800a070 <_printf_i+0x12c>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	079b      	lsls	r3, r3, #30
 800a11e:	d413      	bmi.n	800a148 <_printf_i+0x204>
 800a120:	68e0      	ldr	r0, [r4, #12]
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	4298      	cmp	r0, r3
 800a126:	bfb8      	it	lt
 800a128:	4618      	movlt	r0, r3
 800a12a:	e7a3      	b.n	800a074 <_printf_i+0x130>
 800a12c:	2301      	movs	r3, #1
 800a12e:	464a      	mov	r2, r9
 800a130:	4639      	mov	r1, r7
 800a132:	4630      	mov	r0, r6
 800a134:	47c0      	blx	r8
 800a136:	3001      	adds	r0, #1
 800a138:	d09a      	beq.n	800a070 <_printf_i+0x12c>
 800a13a:	3501      	adds	r5, #1
 800a13c:	68e3      	ldr	r3, [r4, #12]
 800a13e:	9a03      	ldr	r2, [sp, #12]
 800a140:	1a9b      	subs	r3, r3, r2
 800a142:	42ab      	cmp	r3, r5
 800a144:	dcf2      	bgt.n	800a12c <_printf_i+0x1e8>
 800a146:	e7eb      	b.n	800a120 <_printf_i+0x1dc>
 800a148:	2500      	movs	r5, #0
 800a14a:	f104 0919 	add.w	r9, r4, #25
 800a14e:	e7f5      	b.n	800a13c <_printf_i+0x1f8>
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1ac      	bne.n	800a0ae <_printf_i+0x16a>
 800a154:	7803      	ldrb	r3, [r0, #0]
 800a156:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a15a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a15e:	e76c      	b.n	800a03a <_printf_i+0xf6>
 800a160:	0800b8e6 	.word	0x0800b8e6
 800a164:	0800b8f7 	.word	0x0800b8f7

0800a168 <siprintf>:
 800a168:	b40e      	push	{r1, r2, r3}
 800a16a:	b500      	push	{lr}
 800a16c:	b09c      	sub	sp, #112	; 0x70
 800a16e:	ab1d      	add	r3, sp, #116	; 0x74
 800a170:	9002      	str	r0, [sp, #8]
 800a172:	9006      	str	r0, [sp, #24]
 800a174:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a178:	4809      	ldr	r0, [pc, #36]	; (800a1a0 <siprintf+0x38>)
 800a17a:	9107      	str	r1, [sp, #28]
 800a17c:	9104      	str	r1, [sp, #16]
 800a17e:	4909      	ldr	r1, [pc, #36]	; (800a1a4 <siprintf+0x3c>)
 800a180:	f853 2b04 	ldr.w	r2, [r3], #4
 800a184:	9105      	str	r1, [sp, #20]
 800a186:	6800      	ldr	r0, [r0, #0]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	a902      	add	r1, sp, #8
 800a18c:	f001 f9f0 	bl	800b570 <_svfiprintf_r>
 800a190:	9b02      	ldr	r3, [sp, #8]
 800a192:	2200      	movs	r2, #0
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	b01c      	add	sp, #112	; 0x70
 800a198:	f85d eb04 	ldr.w	lr, [sp], #4
 800a19c:	b003      	add	sp, #12
 800a19e:	4770      	bx	lr
 800a1a0:	24000010 	.word	0x24000010
 800a1a4:	ffff0208 	.word	0xffff0208

0800a1a8 <quorem>:
 800a1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	6903      	ldr	r3, [r0, #16]
 800a1ae:	690c      	ldr	r4, [r1, #16]
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	f2c0 8082 	blt.w	800a2bc <quorem+0x114>
 800a1b8:	3c01      	subs	r4, #1
 800a1ba:	f101 0714 	add.w	r7, r1, #20
 800a1be:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a1c2:	f100 0614 	add.w	r6, r0, #20
 800a1c6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a1ca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a1ce:	eb06 030c 	add.w	r3, r6, ip
 800a1d2:	3501      	adds	r5, #1
 800a1d4:	eb07 090c 	add.w	r9, r7, ip
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	fbb0 f5f5 	udiv	r5, r0, r5
 800a1de:	b395      	cbz	r5, 800a246 <quorem+0x9e>
 800a1e0:	f04f 0a00 	mov.w	sl, #0
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	46b6      	mov	lr, r6
 800a1e8:	46d3      	mov	fp, sl
 800a1ea:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1ee:	b293      	uxth	r3, r2
 800a1f0:	fb05 a303 	mla	r3, r5, r3, sl
 800a1f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	ebab 0303 	sub.w	r3, fp, r3
 800a1fe:	0c12      	lsrs	r2, r2, #16
 800a200:	f8de b000 	ldr.w	fp, [lr]
 800a204:	fb05 a202 	mla	r2, r5, r2, sl
 800a208:	fa13 f38b 	uxtah	r3, r3, fp
 800a20c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a210:	fa1f fb82 	uxth.w	fp, r2
 800a214:	f8de 2000 	ldr.w	r2, [lr]
 800a218:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a21c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a220:	b29b      	uxth	r3, r3
 800a222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a226:	4581      	cmp	r9, r0
 800a228:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a22c:	f84e 3b04 	str.w	r3, [lr], #4
 800a230:	d2db      	bcs.n	800a1ea <quorem+0x42>
 800a232:	f856 300c 	ldr.w	r3, [r6, ip]
 800a236:	b933      	cbnz	r3, 800a246 <quorem+0x9e>
 800a238:	9b01      	ldr	r3, [sp, #4]
 800a23a:	3b04      	subs	r3, #4
 800a23c:	429e      	cmp	r6, r3
 800a23e:	461a      	mov	r2, r3
 800a240:	d330      	bcc.n	800a2a4 <quorem+0xfc>
 800a242:	f8c8 4010 	str.w	r4, [r8, #16]
 800a246:	4640      	mov	r0, r8
 800a248:	f000 ffbc 	bl	800b1c4 <__mcmp>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	db25      	blt.n	800a29c <quorem+0xf4>
 800a250:	3501      	adds	r5, #1
 800a252:	4630      	mov	r0, r6
 800a254:	f04f 0c00 	mov.w	ip, #0
 800a258:	f857 2b04 	ldr.w	r2, [r7], #4
 800a25c:	f8d0 e000 	ldr.w	lr, [r0]
 800a260:	b293      	uxth	r3, r2
 800a262:	ebac 0303 	sub.w	r3, ip, r3
 800a266:	0c12      	lsrs	r2, r2, #16
 800a268:	fa13 f38e 	uxtah	r3, r3, lr
 800a26c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a270:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a274:	b29b      	uxth	r3, r3
 800a276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a27a:	45b9      	cmp	r9, r7
 800a27c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a280:	f840 3b04 	str.w	r3, [r0], #4
 800a284:	d2e8      	bcs.n	800a258 <quorem+0xb0>
 800a286:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a28a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a28e:	b92a      	cbnz	r2, 800a29c <quorem+0xf4>
 800a290:	3b04      	subs	r3, #4
 800a292:	429e      	cmp	r6, r3
 800a294:	461a      	mov	r2, r3
 800a296:	d30b      	bcc.n	800a2b0 <quorem+0x108>
 800a298:	f8c8 4010 	str.w	r4, [r8, #16]
 800a29c:	4628      	mov	r0, r5
 800a29e:	b003      	add	sp, #12
 800a2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a4:	6812      	ldr	r2, [r2, #0]
 800a2a6:	3b04      	subs	r3, #4
 800a2a8:	2a00      	cmp	r2, #0
 800a2aa:	d1ca      	bne.n	800a242 <quorem+0x9a>
 800a2ac:	3c01      	subs	r4, #1
 800a2ae:	e7c5      	b.n	800a23c <quorem+0x94>
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	3b04      	subs	r3, #4
 800a2b4:	2a00      	cmp	r2, #0
 800a2b6:	d1ef      	bne.n	800a298 <quorem+0xf0>
 800a2b8:	3c01      	subs	r4, #1
 800a2ba:	e7ea      	b.n	800a292 <quorem+0xea>
 800a2bc:	2000      	movs	r0, #0
 800a2be:	e7ee      	b.n	800a29e <quorem+0xf6>

0800a2c0 <_dtoa_r>:
 800a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	ec57 6b10 	vmov	r6, r7, d0
 800a2c8:	b095      	sub	sp, #84	; 0x54
 800a2ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2cc:	9108      	str	r1, [sp, #32]
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	920a      	str	r2, [sp, #40]	; 0x28
 800a2d2:	9311      	str	r3, [sp, #68]	; 0x44
 800a2d4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800a2d8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a2dc:	b93d      	cbnz	r5, 800a2ee <_dtoa_r+0x2e>
 800a2de:	2010      	movs	r0, #16
 800a2e0:	f000 fd48 	bl	800ad74 <malloc>
 800a2e4:	6260      	str	r0, [r4, #36]	; 0x24
 800a2e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2ea:	6005      	str	r5, [r0, #0]
 800a2ec:	60c5      	str	r5, [r0, #12]
 800a2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f0:	6819      	ldr	r1, [r3, #0]
 800a2f2:	b151      	cbz	r1, 800a30a <_dtoa_r+0x4a>
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	604a      	str	r2, [r1, #4]
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	4093      	lsls	r3, r2
 800a2fc:	608b      	str	r3, [r1, #8]
 800a2fe:	4620      	mov	r0, r4
 800a300:	f000 fd7f 	bl	800ae02 <_Bfree>
 800a304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]
 800a30a:	1e3b      	subs	r3, r7, #0
 800a30c:	bfb9      	ittee	lt
 800a30e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a312:	9303      	strlt	r3, [sp, #12]
 800a314:	2300      	movge	r3, #0
 800a316:	f8c8 3000 	strge.w	r3, [r8]
 800a31a:	9d03      	ldr	r5, [sp, #12]
 800a31c:	4bac      	ldr	r3, [pc, #688]	; (800a5d0 <_dtoa_r+0x310>)
 800a31e:	bfbc      	itt	lt
 800a320:	2201      	movlt	r2, #1
 800a322:	f8c8 2000 	strlt.w	r2, [r8]
 800a326:	43ab      	bics	r3, r5
 800a328:	d11b      	bne.n	800a362 <_dtoa_r+0xa2>
 800a32a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a32c:	f242 730f 	movw	r3, #9999	; 0x270f
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	9b02      	ldr	r3, [sp, #8]
 800a334:	b923      	cbnz	r3, 800a340 <_dtoa_r+0x80>
 800a336:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a33a:	2d00      	cmp	r5, #0
 800a33c:	f000 84dd 	beq.w	800acfa <_dtoa_r+0xa3a>
 800a340:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a342:	b953      	cbnz	r3, 800a35a <_dtoa_r+0x9a>
 800a344:	4ba3      	ldr	r3, [pc, #652]	; (800a5d4 <_dtoa_r+0x314>)
 800a346:	e020      	b.n	800a38a <_dtoa_r+0xca>
 800a348:	4ba3      	ldr	r3, [pc, #652]	; (800a5d8 <_dtoa_r+0x318>)
 800a34a:	9304      	str	r3, [sp, #16]
 800a34c:	3308      	adds	r3, #8
 800a34e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	9804      	ldr	r0, [sp, #16]
 800a354:	b015      	add	sp, #84	; 0x54
 800a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35a:	4b9e      	ldr	r3, [pc, #632]	; (800a5d4 <_dtoa_r+0x314>)
 800a35c:	9304      	str	r3, [sp, #16]
 800a35e:	3303      	adds	r3, #3
 800a360:	e7f5      	b.n	800a34e <_dtoa_r+0x8e>
 800a362:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a366:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a372:	d10c      	bne.n	800a38e <_dtoa_r+0xce>
 800a374:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a376:	2301      	movs	r3, #1
 800a378:	6013      	str	r3, [r2, #0]
 800a37a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 84b9 	beq.w	800acf4 <_dtoa_r+0xa34>
 800a382:	4b96      	ldr	r3, [pc, #600]	; (800a5dc <_dtoa_r+0x31c>)
 800a384:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a386:	6013      	str	r3, [r2, #0]
 800a388:	3b01      	subs	r3, #1
 800a38a:	9304      	str	r3, [sp, #16]
 800a38c:	e7e1      	b.n	800a352 <_dtoa_r+0x92>
 800a38e:	a913      	add	r1, sp, #76	; 0x4c
 800a390:	aa12      	add	r2, sp, #72	; 0x48
 800a392:	ed9d 0b04 	vldr	d0, [sp, #16]
 800a396:	4620      	mov	r0, r4
 800a398:	f000 ff8b 	bl	800b2b2 <__d2b>
 800a39c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800a3a0:	9001      	str	r0, [sp, #4]
 800a3a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a3a4:	2e00      	cmp	r6, #0
 800a3a6:	d046      	beq.n	800a436 <_dtoa_r+0x176>
 800a3a8:	9805      	ldr	r0, [sp, #20]
 800a3aa:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800a3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800a3b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a3ba:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800a3be:	2700      	movs	r7, #0
 800a3c0:	ee07 aa90 	vmov	s15, sl
 800a3c4:	ec43 2b16 	vmov	d6, r2, r3
 800a3c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a3cc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800a5b8 <_dtoa_r+0x2f8>
 800a3d0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a3d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a3d8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800a5c0 <_dtoa_r+0x300>
 800a3dc:	eea7 6b04 	vfma.f64	d6, d7, d4
 800a3e0:	eeb0 7b46 	vmov.f64	d7, d6
 800a3e4:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800a5c8 <_dtoa_r+0x308>
 800a3e8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a3ec:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a3f0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f8:	ee16 ba90 	vmov	fp, s13
 800a3fc:	d508      	bpl.n	800a410 <_dtoa_r+0x150>
 800a3fe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a402:	eeb4 6b47 	vcmp.f64	d6, d7
 800a406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40a:	bf18      	it	ne
 800a40c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a410:	f1bb 0f16 	cmp.w	fp, #22
 800a414:	d834      	bhi.n	800a480 <_dtoa_r+0x1c0>
 800a416:	4b72      	ldr	r3, [pc, #456]	; (800a5e0 <_dtoa_r+0x320>)
 800a418:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a41c:	ed93 7b00 	vldr	d7, [r3]
 800a420:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a424:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42c:	dd01      	ble.n	800a432 <_dtoa_r+0x172>
 800a42e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a432:	2300      	movs	r3, #0
 800a434:	e025      	b.n	800a482 <_dtoa_r+0x1c2>
 800a436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a438:	eb01 0a03 	add.w	sl, r1, r3
 800a43c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800a440:	2b20      	cmp	r3, #32
 800a442:	dd17      	ble.n	800a474 <_dtoa_r+0x1b4>
 800a444:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800a448:	9a02      	ldr	r2, [sp, #8]
 800a44a:	409d      	lsls	r5, r3
 800a44c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800a450:	fa22 f303 	lsr.w	r3, r2, r3
 800a454:	432b      	orrs	r3, r5
 800a456:	ee07 3a90 	vmov	s15, r3
 800a45a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a45e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a462:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a466:	9805      	ldr	r0, [sp, #20]
 800a468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a46c:	2701      	movs	r7, #1
 800a46e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800a472:	e7a5      	b.n	800a3c0 <_dtoa_r+0x100>
 800a474:	9a02      	ldr	r2, [sp, #8]
 800a476:	f1c3 0320 	rsb	r3, r3, #32
 800a47a:	fa02 f303 	lsl.w	r3, r2, r3
 800a47e:	e7ea      	b.n	800a456 <_dtoa_r+0x196>
 800a480:	2301      	movs	r3, #1
 800a482:	eba1 0a0a 	sub.w	sl, r1, sl
 800a486:	9310      	str	r3, [sp, #64]	; 0x40
 800a488:	f1ba 0301 	subs.w	r3, sl, #1
 800a48c:	9307      	str	r3, [sp, #28]
 800a48e:	bf43      	ittte	mi
 800a490:	2300      	movmi	r3, #0
 800a492:	f1ca 0a01 	rsbmi	sl, sl, #1
 800a496:	9307      	strmi	r3, [sp, #28]
 800a498:	f04f 0a00 	movpl.w	sl, #0
 800a49c:	f1bb 0f00 	cmp.w	fp, #0
 800a4a0:	db19      	blt.n	800a4d6 <_dtoa_r+0x216>
 800a4a2:	9b07      	ldr	r3, [sp, #28]
 800a4a4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a4a8:	445b      	add	r3, fp
 800a4aa:	9307      	str	r3, [sp, #28]
 800a4ac:	f04f 0800 	mov.w	r8, #0
 800a4b0:	9b08      	ldr	r3, [sp, #32]
 800a4b2:	2b09      	cmp	r3, #9
 800a4b4:	d866      	bhi.n	800a584 <_dtoa_r+0x2c4>
 800a4b6:	2b05      	cmp	r3, #5
 800a4b8:	bfc4      	itt	gt
 800a4ba:	3b04      	subgt	r3, #4
 800a4bc:	9308      	strgt	r3, [sp, #32]
 800a4be:	9b08      	ldr	r3, [sp, #32]
 800a4c0:	f1a3 0302 	sub.w	r3, r3, #2
 800a4c4:	bfcc      	ite	gt
 800a4c6:	2500      	movgt	r5, #0
 800a4c8:	2501      	movle	r5, #1
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d866      	bhi.n	800a59c <_dtoa_r+0x2dc>
 800a4ce:	e8df f003 	tbb	[pc, r3]
 800a4d2:	5755      	.short	0x5755
 800a4d4:	4909      	.short	0x4909
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	ebaa 0a0b 	sub.w	sl, sl, fp
 800a4dc:	f1cb 0800 	rsb	r8, fp, #0
 800a4e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4e2:	e7e5      	b.n	800a4b0 <_dtoa_r+0x1f0>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	dd59      	ble.n	800a5a2 <_dtoa_r+0x2e2>
 800a4ee:	9306      	str	r3, [sp, #24]
 800a4f0:	4699      	mov	r9, r3
 800a4f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	6072      	str	r2, [r6, #4]
 800a4f8:	2204      	movs	r2, #4
 800a4fa:	f102 0014 	add.w	r0, r2, #20
 800a4fe:	4298      	cmp	r0, r3
 800a500:	6871      	ldr	r1, [r6, #4]
 800a502:	d953      	bls.n	800a5ac <_dtoa_r+0x2ec>
 800a504:	4620      	mov	r0, r4
 800a506:	f000 fc48 	bl	800ad9a <_Balloc>
 800a50a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a50c:	6030      	str	r0, [r6, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	9304      	str	r3, [sp, #16]
 800a512:	f1b9 0f0e 	cmp.w	r9, #14
 800a516:	f200 80c2 	bhi.w	800a69e <_dtoa_r+0x3de>
 800a51a:	2d00      	cmp	r5, #0
 800a51c:	f000 80bf 	beq.w	800a69e <_dtoa_r+0x3de>
 800a520:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a524:	f1bb 0f00 	cmp.w	fp, #0
 800a528:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800a52c:	f340 80e6 	ble.w	800a6fc <_dtoa_r+0x43c>
 800a530:	4a2b      	ldr	r2, [pc, #172]	; (800a5e0 <_dtoa_r+0x320>)
 800a532:	f00b 030f 	and.w	r3, fp, #15
 800a536:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a53a:	ed93 7b00 	vldr	d7, [r3]
 800a53e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800a542:	06da      	lsls	r2, r3, #27
 800a544:	f140 80d8 	bpl.w	800a6f8 <_dtoa_r+0x438>
 800a548:	4a26      	ldr	r2, [pc, #152]	; (800a5e4 <_dtoa_r+0x324>)
 800a54a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800a54e:	ed92 6b08 	vldr	d6, [r2, #32]
 800a552:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a556:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a55a:	f003 030f 	and.w	r3, r3, #15
 800a55e:	2203      	movs	r2, #3
 800a560:	4920      	ldr	r1, [pc, #128]	; (800a5e4 <_dtoa_r+0x324>)
 800a562:	e04a      	b.n	800a5fa <_dtoa_r+0x33a>
 800a564:	2301      	movs	r3, #1
 800a566:	9309      	str	r3, [sp, #36]	; 0x24
 800a568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a56a:	445b      	add	r3, fp
 800a56c:	f103 0901 	add.w	r9, r3, #1
 800a570:	9306      	str	r3, [sp, #24]
 800a572:	464b      	mov	r3, r9
 800a574:	2b01      	cmp	r3, #1
 800a576:	bfb8      	it	lt
 800a578:	2301      	movlt	r3, #1
 800a57a:	e7ba      	b.n	800a4f2 <_dtoa_r+0x232>
 800a57c:	2300      	movs	r3, #0
 800a57e:	e7b2      	b.n	800a4e6 <_dtoa_r+0x226>
 800a580:	2300      	movs	r3, #0
 800a582:	e7f0      	b.n	800a566 <_dtoa_r+0x2a6>
 800a584:	2501      	movs	r5, #1
 800a586:	2300      	movs	r3, #0
 800a588:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800a58c:	f04f 33ff 	mov.w	r3, #4294967295
 800a590:	9306      	str	r3, [sp, #24]
 800a592:	4699      	mov	r9, r3
 800a594:	2200      	movs	r2, #0
 800a596:	2312      	movs	r3, #18
 800a598:	920a      	str	r2, [sp, #40]	; 0x28
 800a59a:	e7aa      	b.n	800a4f2 <_dtoa_r+0x232>
 800a59c:	2301      	movs	r3, #1
 800a59e:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a0:	e7f4      	b.n	800a58c <_dtoa_r+0x2cc>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	9306      	str	r3, [sp, #24]
 800a5a6:	4699      	mov	r9, r3
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	e7f5      	b.n	800a598 <_dtoa_r+0x2d8>
 800a5ac:	3101      	adds	r1, #1
 800a5ae:	6071      	str	r1, [r6, #4]
 800a5b0:	0052      	lsls	r2, r2, #1
 800a5b2:	e7a2      	b.n	800a4fa <_dtoa_r+0x23a>
 800a5b4:	f3af 8000 	nop.w
 800a5b8:	636f4361 	.word	0x636f4361
 800a5bc:	3fd287a7 	.word	0x3fd287a7
 800a5c0:	8b60c8b3 	.word	0x8b60c8b3
 800a5c4:	3fc68a28 	.word	0x3fc68a28
 800a5c8:	509f79fb 	.word	0x509f79fb
 800a5cc:	3fd34413 	.word	0x3fd34413
 800a5d0:	7ff00000 	.word	0x7ff00000
 800a5d4:	0800b911 	.word	0x0800b911
 800a5d8:	0800b908 	.word	0x0800b908
 800a5dc:	0800b8e5 	.word	0x0800b8e5
 800a5e0:	0800b940 	.word	0x0800b940
 800a5e4:	0800b918 	.word	0x0800b918
 800a5e8:	07de      	lsls	r6, r3, #31
 800a5ea:	d504      	bpl.n	800a5f6 <_dtoa_r+0x336>
 800a5ec:	ed91 6b00 	vldr	d6, [r1]
 800a5f0:	3201      	adds	r2, #1
 800a5f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5f6:	105b      	asrs	r3, r3, #1
 800a5f8:	3108      	adds	r1, #8
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1f4      	bne.n	800a5e8 <_dtoa_r+0x328>
 800a5fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a602:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a606:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a60a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 80a7 	beq.w	800a760 <_dtoa_r+0x4a0>
 800a612:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a616:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a61a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a622:	f140 809d 	bpl.w	800a760 <_dtoa_r+0x4a0>
 800a626:	f1b9 0f00 	cmp.w	r9, #0
 800a62a:	f000 8099 	beq.w	800a760 <_dtoa_r+0x4a0>
 800a62e:	9b06      	ldr	r3, [sp, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	dd30      	ble.n	800a696 <_dtoa_r+0x3d6>
 800a634:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a638:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a63c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a640:	9d06      	ldr	r5, [sp, #24]
 800a642:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a646:	3201      	adds	r2, #1
 800a648:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a64c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a650:	ee07 2a90 	vmov	s15, r2
 800a654:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a658:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a65c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a660:	9a03      	ldr	r2, [sp, #12]
 800a662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a666:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800a66a:	2d00      	cmp	r5, #0
 800a66c:	d17b      	bne.n	800a766 <_dtoa_r+0x4a6>
 800a66e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a672:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a676:	ec41 0b17 	vmov	d7, r0, r1
 800a67a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a682:	f300 8253 	bgt.w	800ab2c <_dtoa_r+0x86c>
 800a686:	eeb1 7b47 	vneg.f64	d7, d7
 800a68a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a692:	f100 8249 	bmi.w	800ab28 <_dtoa_r+0x868>
 800a696:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a69a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a69e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f2c0 8119 	blt.w	800a8d8 <_dtoa_r+0x618>
 800a6a6:	f1bb 0f0e 	cmp.w	fp, #14
 800a6aa:	f300 8115 	bgt.w	800a8d8 <_dtoa_r+0x618>
 800a6ae:	4bc3      	ldr	r3, [pc, #780]	; (800a9bc <_dtoa_r+0x6fc>)
 800a6b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6b4:	ed93 6b00 	vldr	d6, [r3]
 800a6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f280 80ba 	bge.w	800a834 <_dtoa_r+0x574>
 800a6c0:	f1b9 0f00 	cmp.w	r9, #0
 800a6c4:	f300 80b6 	bgt.w	800a834 <_dtoa_r+0x574>
 800a6c8:	f040 822d 	bne.w	800ab26 <_dtoa_r+0x866>
 800a6cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a6d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a6d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e0:	464d      	mov	r5, r9
 800a6e2:	464f      	mov	r7, r9
 800a6e4:	f280 8204 	bge.w	800aaf0 <_dtoa_r+0x830>
 800a6e8:	9b04      	ldr	r3, [sp, #16]
 800a6ea:	9a04      	ldr	r2, [sp, #16]
 800a6ec:	1c5e      	adds	r6, r3, #1
 800a6ee:	2331      	movs	r3, #49	; 0x31
 800a6f0:	7013      	strb	r3, [r2, #0]
 800a6f2:	f10b 0b01 	add.w	fp, fp, #1
 800a6f6:	e1ff      	b.n	800aaf8 <_dtoa_r+0x838>
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	e731      	b.n	800a560 <_dtoa_r+0x2a0>
 800a6fc:	d02e      	beq.n	800a75c <_dtoa_r+0x49c>
 800a6fe:	f1cb 0300 	rsb	r3, fp, #0
 800a702:	4aae      	ldr	r2, [pc, #696]	; (800a9bc <_dtoa_r+0x6fc>)
 800a704:	f003 010f 	and.w	r1, r3, #15
 800a708:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a70c:	ed92 7b00 	vldr	d7, [r2]
 800a710:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800a714:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a718:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a71c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800a720:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a724:	49a6      	ldr	r1, [pc, #664]	; (800a9c0 <_dtoa_r+0x700>)
 800a726:	111b      	asrs	r3, r3, #4
 800a728:	2000      	movs	r0, #0
 800a72a:	2202      	movs	r2, #2
 800a72c:	b93b      	cbnz	r3, 800a73e <_dtoa_r+0x47e>
 800a72e:	2800      	cmp	r0, #0
 800a730:	f43f af6b 	beq.w	800a60a <_dtoa_r+0x34a>
 800a734:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a73c:	e765      	b.n	800a60a <_dtoa_r+0x34a>
 800a73e:	07dd      	lsls	r5, r3, #31
 800a740:	d509      	bpl.n	800a756 <_dtoa_r+0x496>
 800a742:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a746:	ed91 7b00 	vldr	d7, [r1]
 800a74a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a74e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a752:	3201      	adds	r2, #1
 800a754:	2001      	movs	r0, #1
 800a756:	105b      	asrs	r3, r3, #1
 800a758:	3108      	adds	r1, #8
 800a75a:	e7e7      	b.n	800a72c <_dtoa_r+0x46c>
 800a75c:	2202      	movs	r2, #2
 800a75e:	e754      	b.n	800a60a <_dtoa_r+0x34a>
 800a760:	465b      	mov	r3, fp
 800a762:	464d      	mov	r5, r9
 800a764:	e770      	b.n	800a648 <_dtoa_r+0x388>
 800a766:	4a95      	ldr	r2, [pc, #596]	; (800a9bc <_dtoa_r+0x6fc>)
 800a768:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800a76c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a772:	ec41 0b17 	vmov	d7, r0, r1
 800a776:	b35a      	cbz	r2, 800a7d0 <_dtoa_r+0x510>
 800a778:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a77c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a780:	9e04      	ldr	r6, [sp, #16]
 800a782:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a786:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a78a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a78e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a792:	ee14 2a90 	vmov	r2, s9
 800a796:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a79a:	3230      	adds	r2, #48	; 0x30
 800a79c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a7a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a8:	f806 2b01 	strb.w	r2, [r6], #1
 800a7ac:	d43b      	bmi.n	800a826 <_dtoa_r+0x566>
 800a7ae:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a7b2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ba:	d472      	bmi.n	800a8a2 <_dtoa_r+0x5e2>
 800a7bc:	9a04      	ldr	r2, [sp, #16]
 800a7be:	1ab2      	subs	r2, r6, r2
 800a7c0:	4295      	cmp	r5, r2
 800a7c2:	f77f af68 	ble.w	800a696 <_dtoa_r+0x3d6>
 800a7c6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a7ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a7ce:	e7de      	b.n	800a78e <_dtoa_r+0x4ce>
 800a7d0:	9a04      	ldr	r2, [sp, #16]
 800a7d2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a7d6:	1956      	adds	r6, r2, r5
 800a7d8:	4611      	mov	r1, r2
 800a7da:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a7de:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a7e2:	ee14 2a90 	vmov	r2, s9
 800a7e6:	3230      	adds	r2, #48	; 0x30
 800a7e8:	f801 2b01 	strb.w	r2, [r1], #1
 800a7ec:	42b1      	cmp	r1, r6
 800a7ee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a7f2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a7f6:	d11a      	bne.n	800a82e <_dtoa_r+0x56e>
 800a7f8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a7fc:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a800:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a808:	dc4b      	bgt.n	800a8a2 <_dtoa_r+0x5e2>
 800a80a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a80e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a816:	f57f af3e 	bpl.w	800a696 <_dtoa_r+0x3d6>
 800a81a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a81e:	2a30      	cmp	r2, #48	; 0x30
 800a820:	f106 31ff 	add.w	r1, r6, #4294967295
 800a824:	d001      	beq.n	800a82a <_dtoa_r+0x56a>
 800a826:	469b      	mov	fp, r3
 800a828:	e02a      	b.n	800a880 <_dtoa_r+0x5c0>
 800a82a:	460e      	mov	r6, r1
 800a82c:	e7f5      	b.n	800a81a <_dtoa_r+0x55a>
 800a82e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a832:	e7d4      	b.n	800a7de <_dtoa_r+0x51e>
 800a834:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a838:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a83c:	9e04      	ldr	r6, [sp, #16]
 800a83e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a842:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a846:	ee15 3a10 	vmov	r3, s10
 800a84a:	3330      	adds	r3, #48	; 0x30
 800a84c:	f806 3b01 	strb.w	r3, [r6], #1
 800a850:	9b04      	ldr	r3, [sp, #16]
 800a852:	1af3      	subs	r3, r6, r3
 800a854:	4599      	cmp	r9, r3
 800a856:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a85a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a85e:	d133      	bne.n	800a8c8 <_dtoa_r+0x608>
 800a860:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a864:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a86c:	dc18      	bgt.n	800a8a0 <_dtoa_r+0x5e0>
 800a86e:	eeb4 7b46 	vcmp.f64	d7, d6
 800a872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a876:	d103      	bne.n	800a880 <_dtoa_r+0x5c0>
 800a878:	ee15 3a10 	vmov	r3, s10
 800a87c:	07db      	lsls	r3, r3, #31
 800a87e:	d40f      	bmi.n	800a8a0 <_dtoa_r+0x5e0>
 800a880:	9901      	ldr	r1, [sp, #4]
 800a882:	4620      	mov	r0, r4
 800a884:	f000 fabd 	bl	800ae02 <_Bfree>
 800a888:	2300      	movs	r3, #0
 800a88a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a88c:	7033      	strb	r3, [r6, #0]
 800a88e:	f10b 0301 	add.w	r3, fp, #1
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a896:	2b00      	cmp	r3, #0
 800a898:	f43f ad5b 	beq.w	800a352 <_dtoa_r+0x92>
 800a89c:	601e      	str	r6, [r3, #0]
 800a89e:	e558      	b.n	800a352 <_dtoa_r+0x92>
 800a8a0:	465b      	mov	r3, fp
 800a8a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a8a6:	2939      	cmp	r1, #57	; 0x39
 800a8a8:	f106 32ff 	add.w	r2, r6, #4294967295
 800a8ac:	d106      	bne.n	800a8bc <_dtoa_r+0x5fc>
 800a8ae:	9904      	ldr	r1, [sp, #16]
 800a8b0:	4291      	cmp	r1, r2
 800a8b2:	d107      	bne.n	800a8c4 <_dtoa_r+0x604>
 800a8b4:	2230      	movs	r2, #48	; 0x30
 800a8b6:	700a      	strb	r2, [r1, #0]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	460a      	mov	r2, r1
 800a8bc:	7811      	ldrb	r1, [r2, #0]
 800a8be:	3101      	adds	r1, #1
 800a8c0:	7011      	strb	r1, [r2, #0]
 800a8c2:	e7b0      	b.n	800a826 <_dtoa_r+0x566>
 800a8c4:	4616      	mov	r6, r2
 800a8c6:	e7ec      	b.n	800a8a2 <_dtoa_r+0x5e2>
 800a8c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a8cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d4:	d1b3      	bne.n	800a83e <_dtoa_r+0x57e>
 800a8d6:	e7d3      	b.n	800a880 <_dtoa_r+0x5c0>
 800a8d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8da:	2a00      	cmp	r2, #0
 800a8dc:	f000 808d 	beq.w	800a9fa <_dtoa_r+0x73a>
 800a8e0:	9a08      	ldr	r2, [sp, #32]
 800a8e2:	2a01      	cmp	r2, #1
 800a8e4:	dc72      	bgt.n	800a9cc <_dtoa_r+0x70c>
 800a8e6:	2f00      	cmp	r7, #0
 800a8e8:	d06c      	beq.n	800a9c4 <_dtoa_r+0x704>
 800a8ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8ee:	4645      	mov	r5, r8
 800a8f0:	4656      	mov	r6, sl
 800a8f2:	9a07      	ldr	r2, [sp, #28]
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	441a      	add	r2, r3
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	449a      	add	sl, r3
 800a8fc:	9207      	str	r2, [sp, #28]
 800a8fe:	f000 fb20 	bl	800af42 <__i2b>
 800a902:	4607      	mov	r7, r0
 800a904:	2e00      	cmp	r6, #0
 800a906:	dd0b      	ble.n	800a920 <_dtoa_r+0x660>
 800a908:	9b07      	ldr	r3, [sp, #28]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	dd08      	ble.n	800a920 <_dtoa_r+0x660>
 800a90e:	42b3      	cmp	r3, r6
 800a910:	9a07      	ldr	r2, [sp, #28]
 800a912:	bfa8      	it	ge
 800a914:	4633      	movge	r3, r6
 800a916:	ebaa 0a03 	sub.w	sl, sl, r3
 800a91a:	1af6      	subs	r6, r6, r3
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	9307      	str	r3, [sp, #28]
 800a920:	f1b8 0f00 	cmp.w	r8, #0
 800a924:	d01d      	beq.n	800a962 <_dtoa_r+0x6a2>
 800a926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d06a      	beq.n	800aa02 <_dtoa_r+0x742>
 800a92c:	b18d      	cbz	r5, 800a952 <_dtoa_r+0x692>
 800a92e:	4639      	mov	r1, r7
 800a930:	462a      	mov	r2, r5
 800a932:	4620      	mov	r0, r4
 800a934:	f000 fba4 	bl	800b080 <__pow5mult>
 800a938:	9a01      	ldr	r2, [sp, #4]
 800a93a:	4601      	mov	r1, r0
 800a93c:	4607      	mov	r7, r0
 800a93e:	4620      	mov	r0, r4
 800a940:	f000 fb08 	bl	800af54 <__multiply>
 800a944:	9901      	ldr	r1, [sp, #4]
 800a946:	900c      	str	r0, [sp, #48]	; 0x30
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 fa5a 	bl	800ae02 <_Bfree>
 800a94e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	ebb8 0205 	subs.w	r2, r8, r5
 800a956:	d004      	beq.n	800a962 <_dtoa_r+0x6a2>
 800a958:	9901      	ldr	r1, [sp, #4]
 800a95a:	4620      	mov	r0, r4
 800a95c:	f000 fb90 	bl	800b080 <__pow5mult>
 800a960:	9001      	str	r0, [sp, #4]
 800a962:	2101      	movs	r1, #1
 800a964:	4620      	mov	r0, r4
 800a966:	f000 faec 	bl	800af42 <__i2b>
 800a96a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a96c:	4605      	mov	r5, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f000 81ca 	beq.w	800ad08 <_dtoa_r+0xa48>
 800a974:	461a      	mov	r2, r3
 800a976:	4601      	mov	r1, r0
 800a978:	4620      	mov	r0, r4
 800a97a:	f000 fb81 	bl	800b080 <__pow5mult>
 800a97e:	9b08      	ldr	r3, [sp, #32]
 800a980:	2b01      	cmp	r3, #1
 800a982:	4605      	mov	r5, r0
 800a984:	dc44      	bgt.n	800aa10 <_dtoa_r+0x750>
 800a986:	9b02      	ldr	r3, [sp, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d13c      	bne.n	800aa06 <_dtoa_r+0x746>
 800a98c:	9b03      	ldr	r3, [sp, #12]
 800a98e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a992:	2b00      	cmp	r3, #0
 800a994:	d137      	bne.n	800aa06 <_dtoa_r+0x746>
 800a996:	9b03      	ldr	r3, [sp, #12]
 800a998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a99c:	0d1b      	lsrs	r3, r3, #20
 800a99e:	051b      	lsls	r3, r3, #20
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d033      	beq.n	800aa0c <_dtoa_r+0x74c>
 800a9a4:	9b07      	ldr	r3, [sp, #28]
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	f10a 0a01 	add.w	sl, sl, #1
 800a9ac:	9307      	str	r3, [sp, #28]
 800a9ae:	f04f 0801 	mov.w	r8, #1
 800a9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b4:	bb73      	cbnz	r3, 800aa14 <_dtoa_r+0x754>
 800a9b6:	2001      	movs	r0, #1
 800a9b8:	e034      	b.n	800aa24 <_dtoa_r+0x764>
 800a9ba:	bf00      	nop
 800a9bc:	0800b940 	.word	0x0800b940
 800a9c0:	0800b918 	.word	0x0800b918
 800a9c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9ca:	e790      	b.n	800a8ee <_dtoa_r+0x62e>
 800a9cc:	f109 35ff 	add.w	r5, r9, #4294967295
 800a9d0:	45a8      	cmp	r8, r5
 800a9d2:	bfbf      	itttt	lt
 800a9d4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800a9d6:	eba5 0808 	sublt.w	r8, r5, r8
 800a9da:	4443      	addlt	r3, r8
 800a9dc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800a9de:	bfb6      	itet	lt
 800a9e0:	46a8      	movlt	r8, r5
 800a9e2:	eba8 0505 	subge.w	r5, r8, r5
 800a9e6:	2500      	movlt	r5, #0
 800a9e8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ec:	bfb9      	ittee	lt
 800a9ee:	ebaa 0609 	sublt.w	r6, sl, r9
 800a9f2:	2300      	movlt	r3, #0
 800a9f4:	4656      	movge	r6, sl
 800a9f6:	464b      	movge	r3, r9
 800a9f8:	e77b      	b.n	800a8f2 <_dtoa_r+0x632>
 800a9fa:	4645      	mov	r5, r8
 800a9fc:	4656      	mov	r6, sl
 800a9fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa00:	e780      	b.n	800a904 <_dtoa_r+0x644>
 800aa02:	4642      	mov	r2, r8
 800aa04:	e7a8      	b.n	800a958 <_dtoa_r+0x698>
 800aa06:	f04f 0800 	mov.w	r8, #0
 800aa0a:	e7d2      	b.n	800a9b2 <_dtoa_r+0x6f2>
 800aa0c:	4698      	mov	r8, r3
 800aa0e:	e7d0      	b.n	800a9b2 <_dtoa_r+0x6f2>
 800aa10:	f04f 0800 	mov.w	r8, #0
 800aa14:	692b      	ldr	r3, [r5, #16]
 800aa16:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aa1a:	6918      	ldr	r0, [r3, #16]
 800aa1c:	f000 fa43 	bl	800aea6 <__hi0bits>
 800aa20:	f1c0 0020 	rsb	r0, r0, #32
 800aa24:	9b07      	ldr	r3, [sp, #28]
 800aa26:	4418      	add	r0, r3
 800aa28:	f010 001f 	ands.w	r0, r0, #31
 800aa2c:	d047      	beq.n	800aabe <_dtoa_r+0x7fe>
 800aa2e:	f1c0 0320 	rsb	r3, r0, #32
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	dd3b      	ble.n	800aaae <_dtoa_r+0x7ee>
 800aa36:	9b07      	ldr	r3, [sp, #28]
 800aa38:	f1c0 001c 	rsb	r0, r0, #28
 800aa3c:	4482      	add	sl, r0
 800aa3e:	4406      	add	r6, r0
 800aa40:	4403      	add	r3, r0
 800aa42:	9307      	str	r3, [sp, #28]
 800aa44:	f1ba 0f00 	cmp.w	sl, #0
 800aa48:	dd05      	ble.n	800aa56 <_dtoa_r+0x796>
 800aa4a:	4652      	mov	r2, sl
 800aa4c:	9901      	ldr	r1, [sp, #4]
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 fb64 	bl	800b11c <__lshift>
 800aa54:	9001      	str	r0, [sp, #4]
 800aa56:	9b07      	ldr	r3, [sp, #28]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	dd05      	ble.n	800aa68 <_dtoa_r+0x7a8>
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	461a      	mov	r2, r3
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 fb5b 	bl	800b11c <__lshift>
 800aa66:	4605      	mov	r5, r0
 800aa68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa6a:	b353      	cbz	r3, 800aac2 <_dtoa_r+0x802>
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	9801      	ldr	r0, [sp, #4]
 800aa70:	f000 fba8 	bl	800b1c4 <__mcmp>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	da24      	bge.n	800aac2 <_dtoa_r+0x802>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	220a      	movs	r2, #10
 800aa7c:	9901      	ldr	r1, [sp, #4]
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 f9d6 	bl	800ae30 <__multadd>
 800aa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa86:	9001      	str	r0, [sp, #4]
 800aa88:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f000 8142 	beq.w	800ad16 <_dtoa_r+0xa56>
 800aa92:	2300      	movs	r3, #0
 800aa94:	4639      	mov	r1, r7
 800aa96:	220a      	movs	r2, #10
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f000 f9c9 	bl	800ae30 <__multadd>
 800aa9e:	9b06      	ldr	r3, [sp, #24]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	4607      	mov	r7, r0
 800aaa4:	dc4b      	bgt.n	800ab3e <_dtoa_r+0x87e>
 800aaa6:	9b08      	ldr	r3, [sp, #32]
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	dd48      	ble.n	800ab3e <_dtoa_r+0x87e>
 800aaac:	e011      	b.n	800aad2 <_dtoa_r+0x812>
 800aaae:	d0c9      	beq.n	800aa44 <_dtoa_r+0x784>
 800aab0:	9a07      	ldr	r2, [sp, #28]
 800aab2:	331c      	adds	r3, #28
 800aab4:	441a      	add	r2, r3
 800aab6:	449a      	add	sl, r3
 800aab8:	441e      	add	r6, r3
 800aaba:	4613      	mov	r3, r2
 800aabc:	e7c1      	b.n	800aa42 <_dtoa_r+0x782>
 800aabe:	4603      	mov	r3, r0
 800aac0:	e7f6      	b.n	800aab0 <_dtoa_r+0x7f0>
 800aac2:	f1b9 0f00 	cmp.w	r9, #0
 800aac6:	dc34      	bgt.n	800ab32 <_dtoa_r+0x872>
 800aac8:	9b08      	ldr	r3, [sp, #32]
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	dd31      	ble.n	800ab32 <_dtoa_r+0x872>
 800aace:	f8cd 9018 	str.w	r9, [sp, #24]
 800aad2:	9b06      	ldr	r3, [sp, #24]
 800aad4:	b963      	cbnz	r3, 800aaf0 <_dtoa_r+0x830>
 800aad6:	4629      	mov	r1, r5
 800aad8:	2205      	movs	r2, #5
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 f9a8 	bl	800ae30 <__multadd>
 800aae0:	4601      	mov	r1, r0
 800aae2:	4605      	mov	r5, r0
 800aae4:	9801      	ldr	r0, [sp, #4]
 800aae6:	f000 fb6d 	bl	800b1c4 <__mcmp>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	f73f adfc 	bgt.w	800a6e8 <_dtoa_r+0x428>
 800aaf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaf2:	9e04      	ldr	r6, [sp, #16]
 800aaf4:	ea6f 0b03 	mvn.w	fp, r3
 800aaf8:	f04f 0900 	mov.w	r9, #0
 800aafc:	4629      	mov	r1, r5
 800aafe:	4620      	mov	r0, r4
 800ab00:	f000 f97f 	bl	800ae02 <_Bfree>
 800ab04:	2f00      	cmp	r7, #0
 800ab06:	f43f aebb 	beq.w	800a880 <_dtoa_r+0x5c0>
 800ab0a:	f1b9 0f00 	cmp.w	r9, #0
 800ab0e:	d005      	beq.n	800ab1c <_dtoa_r+0x85c>
 800ab10:	45b9      	cmp	r9, r7
 800ab12:	d003      	beq.n	800ab1c <_dtoa_r+0x85c>
 800ab14:	4649      	mov	r1, r9
 800ab16:	4620      	mov	r0, r4
 800ab18:	f000 f973 	bl	800ae02 <_Bfree>
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f000 f96f 	bl	800ae02 <_Bfree>
 800ab24:	e6ac      	b.n	800a880 <_dtoa_r+0x5c0>
 800ab26:	2500      	movs	r5, #0
 800ab28:	462f      	mov	r7, r5
 800ab2a:	e7e1      	b.n	800aaf0 <_dtoa_r+0x830>
 800ab2c:	469b      	mov	fp, r3
 800ab2e:	462f      	mov	r7, r5
 800ab30:	e5da      	b.n	800a6e8 <_dtoa_r+0x428>
 800ab32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab34:	f8cd 9018 	str.w	r9, [sp, #24]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	f000 80f3 	beq.w	800ad24 <_dtoa_r+0xa64>
 800ab3e:	2e00      	cmp	r6, #0
 800ab40:	dd05      	ble.n	800ab4e <_dtoa_r+0x88e>
 800ab42:	4639      	mov	r1, r7
 800ab44:	4632      	mov	r2, r6
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 fae8 	bl	800b11c <__lshift>
 800ab4c:	4607      	mov	r7, r0
 800ab4e:	f1b8 0f00 	cmp.w	r8, #0
 800ab52:	d04c      	beq.n	800abee <_dtoa_r+0x92e>
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	4620      	mov	r0, r4
 800ab58:	f000 f91f 	bl	800ad9a <_Balloc>
 800ab5c:	693a      	ldr	r2, [r7, #16]
 800ab5e:	3202      	adds	r2, #2
 800ab60:	4606      	mov	r6, r0
 800ab62:	0092      	lsls	r2, r2, #2
 800ab64:	f107 010c 	add.w	r1, r7, #12
 800ab68:	300c      	adds	r0, #12
 800ab6a:	f000 f90b 	bl	800ad84 <memcpy>
 800ab6e:	2201      	movs	r2, #1
 800ab70:	4631      	mov	r1, r6
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 fad2 	bl	800b11c <__lshift>
 800ab78:	9b02      	ldr	r3, [sp, #8]
 800ab7a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	46b9      	mov	r9, r7
 800ab84:	9307      	str	r3, [sp, #28]
 800ab86:	4607      	mov	r7, r0
 800ab88:	4629      	mov	r1, r5
 800ab8a:	9801      	ldr	r0, [sp, #4]
 800ab8c:	f7ff fb0c 	bl	800a1a8 <quorem>
 800ab90:	4649      	mov	r1, r9
 800ab92:	4606      	mov	r6, r0
 800ab94:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab98:	9801      	ldr	r0, [sp, #4]
 800ab9a:	f000 fb13 	bl	800b1c4 <__mcmp>
 800ab9e:	463a      	mov	r2, r7
 800aba0:	9002      	str	r0, [sp, #8]
 800aba2:	4629      	mov	r1, r5
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 fb27 	bl	800b1f8 <__mdiff>
 800abaa:	68c3      	ldr	r3, [r0, #12]
 800abac:	4602      	mov	r2, r0
 800abae:	bb03      	cbnz	r3, 800abf2 <_dtoa_r+0x932>
 800abb0:	4601      	mov	r1, r0
 800abb2:	9009      	str	r0, [sp, #36]	; 0x24
 800abb4:	9801      	ldr	r0, [sp, #4]
 800abb6:	f000 fb05 	bl	800b1c4 <__mcmp>
 800abba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abbc:	4603      	mov	r3, r0
 800abbe:	4611      	mov	r1, r2
 800abc0:	4620      	mov	r0, r4
 800abc2:	9309      	str	r3, [sp, #36]	; 0x24
 800abc4:	f000 f91d 	bl	800ae02 <_Bfree>
 800abc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abca:	b9a3      	cbnz	r3, 800abf6 <_dtoa_r+0x936>
 800abcc:	9a08      	ldr	r2, [sp, #32]
 800abce:	b992      	cbnz	r2, 800abf6 <_dtoa_r+0x936>
 800abd0:	9a07      	ldr	r2, [sp, #28]
 800abd2:	b982      	cbnz	r2, 800abf6 <_dtoa_r+0x936>
 800abd4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800abd8:	d029      	beq.n	800ac2e <_dtoa_r+0x96e>
 800abda:	9b02      	ldr	r3, [sp, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	dd01      	ble.n	800abe4 <_dtoa_r+0x924>
 800abe0:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800abe4:	f10a 0601 	add.w	r6, sl, #1
 800abe8:	f88a 8000 	strb.w	r8, [sl]
 800abec:	e786      	b.n	800aafc <_dtoa_r+0x83c>
 800abee:	4638      	mov	r0, r7
 800abf0:	e7c2      	b.n	800ab78 <_dtoa_r+0x8b8>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e7e3      	b.n	800abbe <_dtoa_r+0x8fe>
 800abf6:	9a02      	ldr	r2, [sp, #8]
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	db04      	blt.n	800ac06 <_dtoa_r+0x946>
 800abfc:	d124      	bne.n	800ac48 <_dtoa_r+0x988>
 800abfe:	9a08      	ldr	r2, [sp, #32]
 800ac00:	bb12      	cbnz	r2, 800ac48 <_dtoa_r+0x988>
 800ac02:	9a07      	ldr	r2, [sp, #28]
 800ac04:	bb02      	cbnz	r2, 800ac48 <_dtoa_r+0x988>
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	ddec      	ble.n	800abe4 <_dtoa_r+0x924>
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	9901      	ldr	r1, [sp, #4]
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f000 fa84 	bl	800b11c <__lshift>
 800ac14:	4629      	mov	r1, r5
 800ac16:	9001      	str	r0, [sp, #4]
 800ac18:	f000 fad4 	bl	800b1c4 <__mcmp>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	dc03      	bgt.n	800ac28 <_dtoa_r+0x968>
 800ac20:	d1e0      	bne.n	800abe4 <_dtoa_r+0x924>
 800ac22:	f018 0f01 	tst.w	r8, #1
 800ac26:	d0dd      	beq.n	800abe4 <_dtoa_r+0x924>
 800ac28:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac2c:	d1d8      	bne.n	800abe0 <_dtoa_r+0x920>
 800ac2e:	2339      	movs	r3, #57	; 0x39
 800ac30:	f10a 0601 	add.w	r6, sl, #1
 800ac34:	f88a 3000 	strb.w	r3, [sl]
 800ac38:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac3c:	2b39      	cmp	r3, #57	; 0x39
 800ac3e:	f106 32ff 	add.w	r2, r6, #4294967295
 800ac42:	d04c      	beq.n	800acde <_dtoa_r+0xa1e>
 800ac44:	3301      	adds	r3, #1
 800ac46:	e051      	b.n	800acec <_dtoa_r+0xa2c>
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f10a 0601 	add.w	r6, sl, #1
 800ac4e:	dd05      	ble.n	800ac5c <_dtoa_r+0x99c>
 800ac50:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac54:	d0eb      	beq.n	800ac2e <_dtoa_r+0x96e>
 800ac56:	f108 0801 	add.w	r8, r8, #1
 800ac5a:	e7c5      	b.n	800abe8 <_dtoa_r+0x928>
 800ac5c:	9b04      	ldr	r3, [sp, #16]
 800ac5e:	9a06      	ldr	r2, [sp, #24]
 800ac60:	f806 8c01 	strb.w	r8, [r6, #-1]
 800ac64:	1af3      	subs	r3, r6, r3
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d021      	beq.n	800acae <_dtoa_r+0x9ee>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	220a      	movs	r2, #10
 800ac6e:	9901      	ldr	r1, [sp, #4]
 800ac70:	4620      	mov	r0, r4
 800ac72:	f000 f8dd 	bl	800ae30 <__multadd>
 800ac76:	45b9      	cmp	r9, r7
 800ac78:	9001      	str	r0, [sp, #4]
 800ac7a:	f04f 0300 	mov.w	r3, #0
 800ac7e:	f04f 020a 	mov.w	r2, #10
 800ac82:	4649      	mov	r1, r9
 800ac84:	4620      	mov	r0, r4
 800ac86:	d105      	bne.n	800ac94 <_dtoa_r+0x9d4>
 800ac88:	f000 f8d2 	bl	800ae30 <__multadd>
 800ac8c:	4681      	mov	r9, r0
 800ac8e:	4607      	mov	r7, r0
 800ac90:	46b2      	mov	sl, r6
 800ac92:	e779      	b.n	800ab88 <_dtoa_r+0x8c8>
 800ac94:	f000 f8cc 	bl	800ae30 <__multadd>
 800ac98:	4639      	mov	r1, r7
 800ac9a:	4681      	mov	r9, r0
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	220a      	movs	r2, #10
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 f8c5 	bl	800ae30 <__multadd>
 800aca6:	4607      	mov	r7, r0
 800aca8:	e7f2      	b.n	800ac90 <_dtoa_r+0x9d0>
 800acaa:	f04f 0900 	mov.w	r9, #0
 800acae:	2201      	movs	r2, #1
 800acb0:	9901      	ldr	r1, [sp, #4]
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 fa32 	bl	800b11c <__lshift>
 800acb8:	4629      	mov	r1, r5
 800acba:	9001      	str	r0, [sp, #4]
 800acbc:	f000 fa82 	bl	800b1c4 <__mcmp>
 800acc0:	2800      	cmp	r0, #0
 800acc2:	dcb9      	bgt.n	800ac38 <_dtoa_r+0x978>
 800acc4:	d102      	bne.n	800accc <_dtoa_r+0xa0c>
 800acc6:	f018 0f01 	tst.w	r8, #1
 800acca:	d1b5      	bne.n	800ac38 <_dtoa_r+0x978>
 800accc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800acd0:	2b30      	cmp	r3, #48	; 0x30
 800acd2:	f106 32ff 	add.w	r2, r6, #4294967295
 800acd6:	f47f af11 	bne.w	800aafc <_dtoa_r+0x83c>
 800acda:	4616      	mov	r6, r2
 800acdc:	e7f6      	b.n	800accc <_dtoa_r+0xa0c>
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d105      	bne.n	800acf0 <_dtoa_r+0xa30>
 800ace4:	9a04      	ldr	r2, [sp, #16]
 800ace6:	f10b 0b01 	add.w	fp, fp, #1
 800acea:	2331      	movs	r3, #49	; 0x31
 800acec:	7013      	strb	r3, [r2, #0]
 800acee:	e705      	b.n	800aafc <_dtoa_r+0x83c>
 800acf0:	4616      	mov	r6, r2
 800acf2:	e7a1      	b.n	800ac38 <_dtoa_r+0x978>
 800acf4:	4b16      	ldr	r3, [pc, #88]	; (800ad50 <_dtoa_r+0xa90>)
 800acf6:	f7ff bb48 	b.w	800a38a <_dtoa_r+0xca>
 800acfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f47f ab23 	bne.w	800a348 <_dtoa_r+0x88>
 800ad02:	4b14      	ldr	r3, [pc, #80]	; (800ad54 <_dtoa_r+0xa94>)
 800ad04:	f7ff bb41 	b.w	800a38a <_dtoa_r+0xca>
 800ad08:	9b08      	ldr	r3, [sp, #32]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	f77f ae3b 	ble.w	800a986 <_dtoa_r+0x6c6>
 800ad10:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ad14:	e64f      	b.n	800a9b6 <_dtoa_r+0x6f6>
 800ad16:	9b06      	ldr	r3, [sp, #24]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	dc03      	bgt.n	800ad24 <_dtoa_r+0xa64>
 800ad1c:	9b08      	ldr	r3, [sp, #32]
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	f73f aed7 	bgt.w	800aad2 <_dtoa_r+0x812>
 800ad24:	9e04      	ldr	r6, [sp, #16]
 800ad26:	9801      	ldr	r0, [sp, #4]
 800ad28:	4629      	mov	r1, r5
 800ad2a:	f7ff fa3d 	bl	800a1a8 <quorem>
 800ad2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ad32:	f806 8b01 	strb.w	r8, [r6], #1
 800ad36:	9b04      	ldr	r3, [sp, #16]
 800ad38:	9a06      	ldr	r2, [sp, #24]
 800ad3a:	1af3      	subs	r3, r6, r3
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	ddb4      	ble.n	800acaa <_dtoa_r+0x9ea>
 800ad40:	2300      	movs	r3, #0
 800ad42:	220a      	movs	r2, #10
 800ad44:	9901      	ldr	r1, [sp, #4]
 800ad46:	4620      	mov	r0, r4
 800ad48:	f000 f872 	bl	800ae30 <__multadd>
 800ad4c:	9001      	str	r0, [sp, #4]
 800ad4e:	e7ea      	b.n	800ad26 <_dtoa_r+0xa66>
 800ad50:	0800b8e4 	.word	0x0800b8e4
 800ad54:	0800b908 	.word	0x0800b908

0800ad58 <_localeconv_r>:
 800ad58:	4b04      	ldr	r3, [pc, #16]	; (800ad6c <_localeconv_r+0x14>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	6a18      	ldr	r0, [r3, #32]
 800ad5e:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <_localeconv_r+0x18>)
 800ad60:	2800      	cmp	r0, #0
 800ad62:	bf08      	it	eq
 800ad64:	4618      	moveq	r0, r3
 800ad66:	30f0      	adds	r0, #240	; 0xf0
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	24000010 	.word	0x24000010
 800ad70:	24000074 	.word	0x24000074

0800ad74 <malloc>:
 800ad74:	4b02      	ldr	r3, [pc, #8]	; (800ad80 <malloc+0xc>)
 800ad76:	4601      	mov	r1, r0
 800ad78:	6818      	ldr	r0, [r3, #0]
 800ad7a:	f000 bb45 	b.w	800b408 <_malloc_r>
 800ad7e:	bf00      	nop
 800ad80:	24000010 	.word	0x24000010

0800ad84 <memcpy>:
 800ad84:	b510      	push	{r4, lr}
 800ad86:	1e43      	subs	r3, r0, #1
 800ad88:	440a      	add	r2, r1
 800ad8a:	4291      	cmp	r1, r2
 800ad8c:	d100      	bne.n	800ad90 <memcpy+0xc>
 800ad8e:	bd10      	pop	{r4, pc}
 800ad90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad98:	e7f7      	b.n	800ad8a <memcpy+0x6>

0800ad9a <_Balloc>:
 800ad9a:	b570      	push	{r4, r5, r6, lr}
 800ad9c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad9e:	4604      	mov	r4, r0
 800ada0:	460e      	mov	r6, r1
 800ada2:	b93d      	cbnz	r5, 800adb4 <_Balloc+0x1a>
 800ada4:	2010      	movs	r0, #16
 800ada6:	f7ff ffe5 	bl	800ad74 <malloc>
 800adaa:	6260      	str	r0, [r4, #36]	; 0x24
 800adac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800adb0:	6005      	str	r5, [r0, #0]
 800adb2:	60c5      	str	r5, [r0, #12]
 800adb4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800adb6:	68eb      	ldr	r3, [r5, #12]
 800adb8:	b183      	cbz	r3, 800addc <_Balloc+0x42>
 800adba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800adc2:	b9b8      	cbnz	r0, 800adf4 <_Balloc+0x5a>
 800adc4:	2101      	movs	r1, #1
 800adc6:	fa01 f506 	lsl.w	r5, r1, r6
 800adca:	1d6a      	adds	r2, r5, #5
 800adcc:	0092      	lsls	r2, r2, #2
 800adce:	4620      	mov	r0, r4
 800add0:	f000 fabe 	bl	800b350 <_calloc_r>
 800add4:	b160      	cbz	r0, 800adf0 <_Balloc+0x56>
 800add6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800adda:	e00e      	b.n	800adfa <_Balloc+0x60>
 800addc:	2221      	movs	r2, #33	; 0x21
 800adde:	2104      	movs	r1, #4
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 fab5 	bl	800b350 <_calloc_r>
 800ade6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ade8:	60e8      	str	r0, [r5, #12]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1e4      	bne.n	800adba <_Balloc+0x20>
 800adf0:	2000      	movs	r0, #0
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	6802      	ldr	r2, [r0, #0]
 800adf6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800adfa:	2300      	movs	r3, #0
 800adfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae00:	e7f7      	b.n	800adf2 <_Balloc+0x58>

0800ae02 <_Bfree>:
 800ae02:	b570      	push	{r4, r5, r6, lr}
 800ae04:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ae06:	4606      	mov	r6, r0
 800ae08:	460d      	mov	r5, r1
 800ae0a:	b93c      	cbnz	r4, 800ae1c <_Bfree+0x1a>
 800ae0c:	2010      	movs	r0, #16
 800ae0e:	f7ff ffb1 	bl	800ad74 <malloc>
 800ae12:	6270      	str	r0, [r6, #36]	; 0x24
 800ae14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae18:	6004      	str	r4, [r0, #0]
 800ae1a:	60c4      	str	r4, [r0, #12]
 800ae1c:	b13d      	cbz	r5, 800ae2e <_Bfree+0x2c>
 800ae1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ae20:	686a      	ldr	r2, [r5, #4]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae28:	6029      	str	r1, [r5, #0]
 800ae2a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ae2e:	bd70      	pop	{r4, r5, r6, pc}

0800ae30 <__multadd>:
 800ae30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae34:	690d      	ldr	r5, [r1, #16]
 800ae36:	461f      	mov	r7, r3
 800ae38:	4606      	mov	r6, r0
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	f101 0c14 	add.w	ip, r1, #20
 800ae40:	2300      	movs	r3, #0
 800ae42:	f8dc 0000 	ldr.w	r0, [ip]
 800ae46:	b281      	uxth	r1, r0
 800ae48:	fb02 7101 	mla	r1, r2, r1, r7
 800ae4c:	0c0f      	lsrs	r7, r1, #16
 800ae4e:	0c00      	lsrs	r0, r0, #16
 800ae50:	fb02 7000 	mla	r0, r2, r0, r7
 800ae54:	b289      	uxth	r1, r1
 800ae56:	3301      	adds	r3, #1
 800ae58:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ae5c:	429d      	cmp	r5, r3
 800ae5e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ae62:	f84c 1b04 	str.w	r1, [ip], #4
 800ae66:	dcec      	bgt.n	800ae42 <__multadd+0x12>
 800ae68:	b1d7      	cbz	r7, 800aea0 <__multadd+0x70>
 800ae6a:	68a3      	ldr	r3, [r4, #8]
 800ae6c:	42ab      	cmp	r3, r5
 800ae6e:	dc12      	bgt.n	800ae96 <__multadd+0x66>
 800ae70:	6861      	ldr	r1, [r4, #4]
 800ae72:	4630      	mov	r0, r6
 800ae74:	3101      	adds	r1, #1
 800ae76:	f7ff ff90 	bl	800ad9a <_Balloc>
 800ae7a:	6922      	ldr	r2, [r4, #16]
 800ae7c:	3202      	adds	r2, #2
 800ae7e:	f104 010c 	add.w	r1, r4, #12
 800ae82:	4680      	mov	r8, r0
 800ae84:	0092      	lsls	r2, r2, #2
 800ae86:	300c      	adds	r0, #12
 800ae88:	f7ff ff7c 	bl	800ad84 <memcpy>
 800ae8c:	4621      	mov	r1, r4
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f7ff ffb7 	bl	800ae02 <_Bfree>
 800ae94:	4644      	mov	r4, r8
 800ae96:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae9a:	3501      	adds	r5, #1
 800ae9c:	615f      	str	r7, [r3, #20]
 800ae9e:	6125      	str	r5, [r4, #16]
 800aea0:	4620      	mov	r0, r4
 800aea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aea6 <__hi0bits>:
 800aea6:	0c02      	lsrs	r2, r0, #16
 800aea8:	0412      	lsls	r2, r2, #16
 800aeaa:	4603      	mov	r3, r0
 800aeac:	b9b2      	cbnz	r2, 800aedc <__hi0bits+0x36>
 800aeae:	0403      	lsls	r3, r0, #16
 800aeb0:	2010      	movs	r0, #16
 800aeb2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aeb6:	bf04      	itt	eq
 800aeb8:	021b      	lsleq	r3, r3, #8
 800aeba:	3008      	addeq	r0, #8
 800aebc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aec0:	bf04      	itt	eq
 800aec2:	011b      	lsleq	r3, r3, #4
 800aec4:	3004      	addeq	r0, #4
 800aec6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aeca:	bf04      	itt	eq
 800aecc:	009b      	lsleq	r3, r3, #2
 800aece:	3002      	addeq	r0, #2
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	db06      	blt.n	800aee2 <__hi0bits+0x3c>
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	d503      	bpl.n	800aee0 <__hi0bits+0x3a>
 800aed8:	3001      	adds	r0, #1
 800aeda:	4770      	bx	lr
 800aedc:	2000      	movs	r0, #0
 800aede:	e7e8      	b.n	800aeb2 <__hi0bits+0xc>
 800aee0:	2020      	movs	r0, #32
 800aee2:	4770      	bx	lr

0800aee4 <__lo0bits>:
 800aee4:	6803      	ldr	r3, [r0, #0]
 800aee6:	f013 0207 	ands.w	r2, r3, #7
 800aeea:	4601      	mov	r1, r0
 800aeec:	d00b      	beq.n	800af06 <__lo0bits+0x22>
 800aeee:	07da      	lsls	r2, r3, #31
 800aef0:	d423      	bmi.n	800af3a <__lo0bits+0x56>
 800aef2:	0798      	lsls	r0, r3, #30
 800aef4:	bf49      	itett	mi
 800aef6:	085b      	lsrmi	r3, r3, #1
 800aef8:	089b      	lsrpl	r3, r3, #2
 800aefa:	2001      	movmi	r0, #1
 800aefc:	600b      	strmi	r3, [r1, #0]
 800aefe:	bf5c      	itt	pl
 800af00:	600b      	strpl	r3, [r1, #0]
 800af02:	2002      	movpl	r0, #2
 800af04:	4770      	bx	lr
 800af06:	b298      	uxth	r0, r3
 800af08:	b9a8      	cbnz	r0, 800af36 <__lo0bits+0x52>
 800af0a:	0c1b      	lsrs	r3, r3, #16
 800af0c:	2010      	movs	r0, #16
 800af0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800af12:	bf04      	itt	eq
 800af14:	0a1b      	lsreq	r3, r3, #8
 800af16:	3008      	addeq	r0, #8
 800af18:	071a      	lsls	r2, r3, #28
 800af1a:	bf04      	itt	eq
 800af1c:	091b      	lsreq	r3, r3, #4
 800af1e:	3004      	addeq	r0, #4
 800af20:	079a      	lsls	r2, r3, #30
 800af22:	bf04      	itt	eq
 800af24:	089b      	lsreq	r3, r3, #2
 800af26:	3002      	addeq	r0, #2
 800af28:	07da      	lsls	r2, r3, #31
 800af2a:	d402      	bmi.n	800af32 <__lo0bits+0x4e>
 800af2c:	085b      	lsrs	r3, r3, #1
 800af2e:	d006      	beq.n	800af3e <__lo0bits+0x5a>
 800af30:	3001      	adds	r0, #1
 800af32:	600b      	str	r3, [r1, #0]
 800af34:	4770      	bx	lr
 800af36:	4610      	mov	r0, r2
 800af38:	e7e9      	b.n	800af0e <__lo0bits+0x2a>
 800af3a:	2000      	movs	r0, #0
 800af3c:	4770      	bx	lr
 800af3e:	2020      	movs	r0, #32
 800af40:	4770      	bx	lr

0800af42 <__i2b>:
 800af42:	b510      	push	{r4, lr}
 800af44:	460c      	mov	r4, r1
 800af46:	2101      	movs	r1, #1
 800af48:	f7ff ff27 	bl	800ad9a <_Balloc>
 800af4c:	2201      	movs	r2, #1
 800af4e:	6144      	str	r4, [r0, #20]
 800af50:	6102      	str	r2, [r0, #16]
 800af52:	bd10      	pop	{r4, pc}

0800af54 <__multiply>:
 800af54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	4614      	mov	r4, r2
 800af5a:	690a      	ldr	r2, [r1, #16]
 800af5c:	6923      	ldr	r3, [r4, #16]
 800af5e:	429a      	cmp	r2, r3
 800af60:	bfb8      	it	lt
 800af62:	460b      	movlt	r3, r1
 800af64:	4688      	mov	r8, r1
 800af66:	bfbc      	itt	lt
 800af68:	46a0      	movlt	r8, r4
 800af6a:	461c      	movlt	r4, r3
 800af6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af7c:	eb07 0609 	add.w	r6, r7, r9
 800af80:	42b3      	cmp	r3, r6
 800af82:	bfb8      	it	lt
 800af84:	3101      	addlt	r1, #1
 800af86:	f7ff ff08 	bl	800ad9a <_Balloc>
 800af8a:	f100 0514 	add.w	r5, r0, #20
 800af8e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800af92:	462b      	mov	r3, r5
 800af94:	2200      	movs	r2, #0
 800af96:	4573      	cmp	r3, lr
 800af98:	d316      	bcc.n	800afc8 <__multiply+0x74>
 800af9a:	f104 0214 	add.w	r2, r4, #20
 800af9e:	f108 0114 	add.w	r1, r8, #20
 800afa2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800afa6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	9b00      	ldr	r3, [sp, #0]
 800afae:	9201      	str	r2, [sp, #4]
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d80c      	bhi.n	800afce <__multiply+0x7a>
 800afb4:	2e00      	cmp	r6, #0
 800afb6:	dd03      	ble.n	800afc0 <__multiply+0x6c>
 800afb8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d05d      	beq.n	800b07c <__multiply+0x128>
 800afc0:	6106      	str	r6, [r0, #16]
 800afc2:	b003      	add	sp, #12
 800afc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc8:	f843 2b04 	str.w	r2, [r3], #4
 800afcc:	e7e3      	b.n	800af96 <__multiply+0x42>
 800afce:	f8b2 b000 	ldrh.w	fp, [r2]
 800afd2:	f1bb 0f00 	cmp.w	fp, #0
 800afd6:	d023      	beq.n	800b020 <__multiply+0xcc>
 800afd8:	4689      	mov	r9, r1
 800afda:	46ac      	mov	ip, r5
 800afdc:	f04f 0800 	mov.w	r8, #0
 800afe0:	f859 4b04 	ldr.w	r4, [r9], #4
 800afe4:	f8dc a000 	ldr.w	sl, [ip]
 800afe8:	b2a3      	uxth	r3, r4
 800afea:	fa1f fa8a 	uxth.w	sl, sl
 800afee:	fb0b a303 	mla	r3, fp, r3, sl
 800aff2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aff6:	f8dc 4000 	ldr.w	r4, [ip]
 800affa:	4443      	add	r3, r8
 800affc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b000:	fb0b 840a 	mla	r4, fp, sl, r8
 800b004:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b008:	46e2      	mov	sl, ip
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b010:	454f      	cmp	r7, r9
 800b012:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b016:	f84a 3b04 	str.w	r3, [sl], #4
 800b01a:	d82b      	bhi.n	800b074 <__multiply+0x120>
 800b01c:	f8cc 8004 	str.w	r8, [ip, #4]
 800b020:	9b01      	ldr	r3, [sp, #4]
 800b022:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b026:	3204      	adds	r2, #4
 800b028:	f1ba 0f00 	cmp.w	sl, #0
 800b02c:	d020      	beq.n	800b070 <__multiply+0x11c>
 800b02e:	682b      	ldr	r3, [r5, #0]
 800b030:	4689      	mov	r9, r1
 800b032:	46a8      	mov	r8, r5
 800b034:	f04f 0b00 	mov.w	fp, #0
 800b038:	f8b9 c000 	ldrh.w	ip, [r9]
 800b03c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b040:	fb0a 440c 	mla	r4, sl, ip, r4
 800b044:	445c      	add	r4, fp
 800b046:	46c4      	mov	ip, r8
 800b048:	b29b      	uxth	r3, r3
 800b04a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b04e:	f84c 3b04 	str.w	r3, [ip], #4
 800b052:	f859 3b04 	ldr.w	r3, [r9], #4
 800b056:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b05a:	0c1b      	lsrs	r3, r3, #16
 800b05c:	fb0a b303 	mla	r3, sl, r3, fp
 800b060:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b064:	454f      	cmp	r7, r9
 800b066:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b06a:	d805      	bhi.n	800b078 <__multiply+0x124>
 800b06c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b070:	3504      	adds	r5, #4
 800b072:	e79b      	b.n	800afac <__multiply+0x58>
 800b074:	46d4      	mov	ip, sl
 800b076:	e7b3      	b.n	800afe0 <__multiply+0x8c>
 800b078:	46e0      	mov	r8, ip
 800b07a:	e7dd      	b.n	800b038 <__multiply+0xe4>
 800b07c:	3e01      	subs	r6, #1
 800b07e:	e799      	b.n	800afb4 <__multiply+0x60>

0800b080 <__pow5mult>:
 800b080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b084:	4615      	mov	r5, r2
 800b086:	f012 0203 	ands.w	r2, r2, #3
 800b08a:	4606      	mov	r6, r0
 800b08c:	460f      	mov	r7, r1
 800b08e:	d007      	beq.n	800b0a0 <__pow5mult+0x20>
 800b090:	3a01      	subs	r2, #1
 800b092:	4c21      	ldr	r4, [pc, #132]	; (800b118 <__pow5mult+0x98>)
 800b094:	2300      	movs	r3, #0
 800b096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b09a:	f7ff fec9 	bl	800ae30 <__multadd>
 800b09e:	4607      	mov	r7, r0
 800b0a0:	10ad      	asrs	r5, r5, #2
 800b0a2:	d035      	beq.n	800b110 <__pow5mult+0x90>
 800b0a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0a6:	b93c      	cbnz	r4, 800b0b8 <__pow5mult+0x38>
 800b0a8:	2010      	movs	r0, #16
 800b0aa:	f7ff fe63 	bl	800ad74 <malloc>
 800b0ae:	6270      	str	r0, [r6, #36]	; 0x24
 800b0b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0b4:	6004      	str	r4, [r0, #0]
 800b0b6:	60c4      	str	r4, [r0, #12]
 800b0b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0c0:	b94c      	cbnz	r4, 800b0d6 <__pow5mult+0x56>
 800b0c2:	f240 2171 	movw	r1, #625	; 0x271
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f7ff ff3b 	bl	800af42 <__i2b>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	6003      	str	r3, [r0, #0]
 800b0d6:	f04f 0800 	mov.w	r8, #0
 800b0da:	07eb      	lsls	r3, r5, #31
 800b0dc:	d50a      	bpl.n	800b0f4 <__pow5mult+0x74>
 800b0de:	4639      	mov	r1, r7
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7ff ff36 	bl	800af54 <__multiply>
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	4681      	mov	r9, r0
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7ff fe88 	bl	800ae02 <_Bfree>
 800b0f2:	464f      	mov	r7, r9
 800b0f4:	106d      	asrs	r5, r5, #1
 800b0f6:	d00b      	beq.n	800b110 <__pow5mult+0x90>
 800b0f8:	6820      	ldr	r0, [r4, #0]
 800b0fa:	b938      	cbnz	r0, 800b10c <__pow5mult+0x8c>
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	4621      	mov	r1, r4
 800b100:	4630      	mov	r0, r6
 800b102:	f7ff ff27 	bl	800af54 <__multiply>
 800b106:	6020      	str	r0, [r4, #0]
 800b108:	f8c0 8000 	str.w	r8, [r0]
 800b10c:	4604      	mov	r4, r0
 800b10e:	e7e4      	b.n	800b0da <__pow5mult+0x5a>
 800b110:	4638      	mov	r0, r7
 800b112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b116:	bf00      	nop
 800b118:	0800ba08 	.word	0x0800ba08

0800b11c <__lshift>:
 800b11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b120:	460c      	mov	r4, r1
 800b122:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b126:	6923      	ldr	r3, [r4, #16]
 800b128:	6849      	ldr	r1, [r1, #4]
 800b12a:	eb0a 0903 	add.w	r9, sl, r3
 800b12e:	68a3      	ldr	r3, [r4, #8]
 800b130:	4607      	mov	r7, r0
 800b132:	4616      	mov	r6, r2
 800b134:	f109 0501 	add.w	r5, r9, #1
 800b138:	42ab      	cmp	r3, r5
 800b13a:	db32      	blt.n	800b1a2 <__lshift+0x86>
 800b13c:	4638      	mov	r0, r7
 800b13e:	f7ff fe2c 	bl	800ad9a <_Balloc>
 800b142:	2300      	movs	r3, #0
 800b144:	4680      	mov	r8, r0
 800b146:	f100 0114 	add.w	r1, r0, #20
 800b14a:	461a      	mov	r2, r3
 800b14c:	4553      	cmp	r3, sl
 800b14e:	db2b      	blt.n	800b1a8 <__lshift+0x8c>
 800b150:	6920      	ldr	r0, [r4, #16]
 800b152:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b156:	f104 0314 	add.w	r3, r4, #20
 800b15a:	f016 021f 	ands.w	r2, r6, #31
 800b15e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b162:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b166:	d025      	beq.n	800b1b4 <__lshift+0x98>
 800b168:	f1c2 0e20 	rsb	lr, r2, #32
 800b16c:	2000      	movs	r0, #0
 800b16e:	681e      	ldr	r6, [r3, #0]
 800b170:	468a      	mov	sl, r1
 800b172:	4096      	lsls	r6, r2
 800b174:	4330      	orrs	r0, r6
 800b176:	f84a 0b04 	str.w	r0, [sl], #4
 800b17a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b17e:	459c      	cmp	ip, r3
 800b180:	fa20 f00e 	lsr.w	r0, r0, lr
 800b184:	d814      	bhi.n	800b1b0 <__lshift+0x94>
 800b186:	6048      	str	r0, [r1, #4]
 800b188:	b108      	cbz	r0, 800b18e <__lshift+0x72>
 800b18a:	f109 0502 	add.w	r5, r9, #2
 800b18e:	3d01      	subs	r5, #1
 800b190:	4638      	mov	r0, r7
 800b192:	f8c8 5010 	str.w	r5, [r8, #16]
 800b196:	4621      	mov	r1, r4
 800b198:	f7ff fe33 	bl	800ae02 <_Bfree>
 800b19c:	4640      	mov	r0, r8
 800b19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a2:	3101      	adds	r1, #1
 800b1a4:	005b      	lsls	r3, r3, #1
 800b1a6:	e7c7      	b.n	800b138 <__lshift+0x1c>
 800b1a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	e7cd      	b.n	800b14c <__lshift+0x30>
 800b1b0:	4651      	mov	r1, sl
 800b1b2:	e7dc      	b.n	800b16e <__lshift+0x52>
 800b1b4:	3904      	subs	r1, #4
 800b1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ba:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1be:	459c      	cmp	ip, r3
 800b1c0:	d8f9      	bhi.n	800b1b6 <__lshift+0x9a>
 800b1c2:	e7e4      	b.n	800b18e <__lshift+0x72>

0800b1c4 <__mcmp>:
 800b1c4:	6903      	ldr	r3, [r0, #16]
 800b1c6:	690a      	ldr	r2, [r1, #16]
 800b1c8:	1a9b      	subs	r3, r3, r2
 800b1ca:	b530      	push	{r4, r5, lr}
 800b1cc:	d10c      	bne.n	800b1e8 <__mcmp+0x24>
 800b1ce:	0092      	lsls	r2, r2, #2
 800b1d0:	3014      	adds	r0, #20
 800b1d2:	3114      	adds	r1, #20
 800b1d4:	1884      	adds	r4, r0, r2
 800b1d6:	4411      	add	r1, r2
 800b1d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1e0:	4295      	cmp	r5, r2
 800b1e2:	d003      	beq.n	800b1ec <__mcmp+0x28>
 800b1e4:	d305      	bcc.n	800b1f2 <__mcmp+0x2e>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	bd30      	pop	{r4, r5, pc}
 800b1ec:	42a0      	cmp	r0, r4
 800b1ee:	d3f3      	bcc.n	800b1d8 <__mcmp+0x14>
 800b1f0:	e7fa      	b.n	800b1e8 <__mcmp+0x24>
 800b1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f6:	e7f7      	b.n	800b1e8 <__mcmp+0x24>

0800b1f8 <__mdiff>:
 800b1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1fc:	460d      	mov	r5, r1
 800b1fe:	4607      	mov	r7, r0
 800b200:	4611      	mov	r1, r2
 800b202:	4628      	mov	r0, r5
 800b204:	4614      	mov	r4, r2
 800b206:	f7ff ffdd 	bl	800b1c4 <__mcmp>
 800b20a:	1e06      	subs	r6, r0, #0
 800b20c:	d108      	bne.n	800b220 <__mdiff+0x28>
 800b20e:	4631      	mov	r1, r6
 800b210:	4638      	mov	r0, r7
 800b212:	f7ff fdc2 	bl	800ad9a <_Balloc>
 800b216:	2301      	movs	r3, #1
 800b218:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b220:	bfa4      	itt	ge
 800b222:	4623      	movge	r3, r4
 800b224:	462c      	movge	r4, r5
 800b226:	4638      	mov	r0, r7
 800b228:	6861      	ldr	r1, [r4, #4]
 800b22a:	bfa6      	itte	ge
 800b22c:	461d      	movge	r5, r3
 800b22e:	2600      	movge	r6, #0
 800b230:	2601      	movlt	r6, #1
 800b232:	f7ff fdb2 	bl	800ad9a <_Balloc>
 800b236:	692b      	ldr	r3, [r5, #16]
 800b238:	60c6      	str	r6, [r0, #12]
 800b23a:	6926      	ldr	r6, [r4, #16]
 800b23c:	f105 0914 	add.w	r9, r5, #20
 800b240:	f104 0214 	add.w	r2, r4, #20
 800b244:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b248:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b24c:	f100 0514 	add.w	r5, r0, #20
 800b250:	f04f 0e00 	mov.w	lr, #0
 800b254:	f852 ab04 	ldr.w	sl, [r2], #4
 800b258:	f859 4b04 	ldr.w	r4, [r9], #4
 800b25c:	fa1e f18a 	uxtah	r1, lr, sl
 800b260:	b2a3      	uxth	r3, r4
 800b262:	1ac9      	subs	r1, r1, r3
 800b264:	0c23      	lsrs	r3, r4, #16
 800b266:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b26a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b26e:	b289      	uxth	r1, r1
 800b270:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b274:	45c8      	cmp	r8, r9
 800b276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b27a:	4694      	mov	ip, r2
 800b27c:	f845 3b04 	str.w	r3, [r5], #4
 800b280:	d8e8      	bhi.n	800b254 <__mdiff+0x5c>
 800b282:	45bc      	cmp	ip, r7
 800b284:	d304      	bcc.n	800b290 <__mdiff+0x98>
 800b286:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b28a:	b183      	cbz	r3, 800b2ae <__mdiff+0xb6>
 800b28c:	6106      	str	r6, [r0, #16]
 800b28e:	e7c5      	b.n	800b21c <__mdiff+0x24>
 800b290:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b294:	fa1e f381 	uxtah	r3, lr, r1
 800b298:	141a      	asrs	r2, r3, #16
 800b29a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b2a8:	f845 3b04 	str.w	r3, [r5], #4
 800b2ac:	e7e9      	b.n	800b282 <__mdiff+0x8a>
 800b2ae:	3e01      	subs	r6, #1
 800b2b0:	e7e9      	b.n	800b286 <__mdiff+0x8e>

0800b2b2 <__d2b>:
 800b2b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2b6:	460e      	mov	r6, r1
 800b2b8:	2101      	movs	r1, #1
 800b2ba:	ec59 8b10 	vmov	r8, r9, d0
 800b2be:	4615      	mov	r5, r2
 800b2c0:	f7ff fd6b 	bl	800ad9a <_Balloc>
 800b2c4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2ce:	bb34      	cbnz	r4, 800b31e <__d2b+0x6c>
 800b2d0:	9301      	str	r3, [sp, #4]
 800b2d2:	f1b8 0300 	subs.w	r3, r8, #0
 800b2d6:	d027      	beq.n	800b328 <__d2b+0x76>
 800b2d8:	a802      	add	r0, sp, #8
 800b2da:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b2de:	f7ff fe01 	bl	800aee4 <__lo0bits>
 800b2e2:	9900      	ldr	r1, [sp, #0]
 800b2e4:	b1f0      	cbz	r0, 800b324 <__d2b+0x72>
 800b2e6:	9a01      	ldr	r2, [sp, #4]
 800b2e8:	f1c0 0320 	rsb	r3, r0, #32
 800b2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f0:	430b      	orrs	r3, r1
 800b2f2:	40c2      	lsrs	r2, r0
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	9201      	str	r2, [sp, #4]
 800b2f8:	9b01      	ldr	r3, [sp, #4]
 800b2fa:	61bb      	str	r3, [r7, #24]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	bf14      	ite	ne
 800b300:	2102      	movne	r1, #2
 800b302:	2101      	moveq	r1, #1
 800b304:	6139      	str	r1, [r7, #16]
 800b306:	b1c4      	cbz	r4, 800b33a <__d2b+0x88>
 800b308:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b30c:	4404      	add	r4, r0
 800b30e:	6034      	str	r4, [r6, #0]
 800b310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b314:	6028      	str	r0, [r5, #0]
 800b316:	4638      	mov	r0, r7
 800b318:	b003      	add	sp, #12
 800b31a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b31e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b322:	e7d5      	b.n	800b2d0 <__d2b+0x1e>
 800b324:	6179      	str	r1, [r7, #20]
 800b326:	e7e7      	b.n	800b2f8 <__d2b+0x46>
 800b328:	a801      	add	r0, sp, #4
 800b32a:	f7ff fddb 	bl	800aee4 <__lo0bits>
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	617b      	str	r3, [r7, #20]
 800b332:	2101      	movs	r1, #1
 800b334:	6139      	str	r1, [r7, #16]
 800b336:	3020      	adds	r0, #32
 800b338:	e7e5      	b.n	800b306 <__d2b+0x54>
 800b33a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b33e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b342:	6030      	str	r0, [r6, #0]
 800b344:	6918      	ldr	r0, [r3, #16]
 800b346:	f7ff fdae 	bl	800aea6 <__hi0bits>
 800b34a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b34e:	e7e1      	b.n	800b314 <__d2b+0x62>

0800b350 <_calloc_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	fb02 f401 	mul.w	r4, r2, r1
 800b356:	4621      	mov	r1, r4
 800b358:	f000 f856 	bl	800b408 <_malloc_r>
 800b35c:	4605      	mov	r5, r0
 800b35e:	b118      	cbz	r0, 800b368 <_calloc_r+0x18>
 800b360:	4622      	mov	r2, r4
 800b362:	2100      	movs	r1, #0
 800b364:	f7fe fabc 	bl	80098e0 <memset>
 800b368:	4628      	mov	r0, r5
 800b36a:	bd38      	pop	{r3, r4, r5, pc}

0800b36c <_free_r>:
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	4605      	mov	r5, r0
 800b370:	2900      	cmp	r1, #0
 800b372:	d045      	beq.n	800b400 <_free_r+0x94>
 800b374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b378:	1f0c      	subs	r4, r1, #4
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	bfb8      	it	lt
 800b37e:	18e4      	addlt	r4, r4, r3
 800b380:	f000 fa29 	bl	800b7d6 <__malloc_lock>
 800b384:	4a1f      	ldr	r2, [pc, #124]	; (800b404 <_free_r+0x98>)
 800b386:	6813      	ldr	r3, [r2, #0]
 800b388:	4610      	mov	r0, r2
 800b38a:	b933      	cbnz	r3, 800b39a <_free_r+0x2e>
 800b38c:	6063      	str	r3, [r4, #4]
 800b38e:	6014      	str	r4, [r2, #0]
 800b390:	4628      	mov	r0, r5
 800b392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b396:	f000 ba1f 	b.w	800b7d8 <__malloc_unlock>
 800b39a:	42a3      	cmp	r3, r4
 800b39c:	d90c      	bls.n	800b3b8 <_free_r+0x4c>
 800b39e:	6821      	ldr	r1, [r4, #0]
 800b3a0:	1862      	adds	r2, r4, r1
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	bf04      	itt	eq
 800b3a6:	681a      	ldreq	r2, [r3, #0]
 800b3a8:	685b      	ldreq	r3, [r3, #4]
 800b3aa:	6063      	str	r3, [r4, #4]
 800b3ac:	bf04      	itt	eq
 800b3ae:	1852      	addeq	r2, r2, r1
 800b3b0:	6022      	streq	r2, [r4, #0]
 800b3b2:	6004      	str	r4, [r0, #0]
 800b3b4:	e7ec      	b.n	800b390 <_free_r+0x24>
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	685a      	ldr	r2, [r3, #4]
 800b3ba:	b10a      	cbz	r2, 800b3c0 <_free_r+0x54>
 800b3bc:	42a2      	cmp	r2, r4
 800b3be:	d9fa      	bls.n	800b3b6 <_free_r+0x4a>
 800b3c0:	6819      	ldr	r1, [r3, #0]
 800b3c2:	1858      	adds	r0, r3, r1
 800b3c4:	42a0      	cmp	r0, r4
 800b3c6:	d10b      	bne.n	800b3e0 <_free_r+0x74>
 800b3c8:	6820      	ldr	r0, [r4, #0]
 800b3ca:	4401      	add	r1, r0
 800b3cc:	1858      	adds	r0, r3, r1
 800b3ce:	4282      	cmp	r2, r0
 800b3d0:	6019      	str	r1, [r3, #0]
 800b3d2:	d1dd      	bne.n	800b390 <_free_r+0x24>
 800b3d4:	6810      	ldr	r0, [r2, #0]
 800b3d6:	6852      	ldr	r2, [r2, #4]
 800b3d8:	605a      	str	r2, [r3, #4]
 800b3da:	4401      	add	r1, r0
 800b3dc:	6019      	str	r1, [r3, #0]
 800b3de:	e7d7      	b.n	800b390 <_free_r+0x24>
 800b3e0:	d902      	bls.n	800b3e8 <_free_r+0x7c>
 800b3e2:	230c      	movs	r3, #12
 800b3e4:	602b      	str	r3, [r5, #0]
 800b3e6:	e7d3      	b.n	800b390 <_free_r+0x24>
 800b3e8:	6820      	ldr	r0, [r4, #0]
 800b3ea:	1821      	adds	r1, r4, r0
 800b3ec:	428a      	cmp	r2, r1
 800b3ee:	bf04      	itt	eq
 800b3f0:	6811      	ldreq	r1, [r2, #0]
 800b3f2:	6852      	ldreq	r2, [r2, #4]
 800b3f4:	6062      	str	r2, [r4, #4]
 800b3f6:	bf04      	itt	eq
 800b3f8:	1809      	addeq	r1, r1, r0
 800b3fa:	6021      	streq	r1, [r4, #0]
 800b3fc:	605c      	str	r4, [r3, #4]
 800b3fe:	e7c7      	b.n	800b390 <_free_r+0x24>
 800b400:	bd38      	pop	{r3, r4, r5, pc}
 800b402:	bf00      	nop
 800b404:	24000200 	.word	0x24000200

0800b408 <_malloc_r>:
 800b408:	b570      	push	{r4, r5, r6, lr}
 800b40a:	1ccd      	adds	r5, r1, #3
 800b40c:	f025 0503 	bic.w	r5, r5, #3
 800b410:	3508      	adds	r5, #8
 800b412:	2d0c      	cmp	r5, #12
 800b414:	bf38      	it	cc
 800b416:	250c      	movcc	r5, #12
 800b418:	2d00      	cmp	r5, #0
 800b41a:	4606      	mov	r6, r0
 800b41c:	db01      	blt.n	800b422 <_malloc_r+0x1a>
 800b41e:	42a9      	cmp	r1, r5
 800b420:	d903      	bls.n	800b42a <_malloc_r+0x22>
 800b422:	230c      	movs	r3, #12
 800b424:	6033      	str	r3, [r6, #0]
 800b426:	2000      	movs	r0, #0
 800b428:	bd70      	pop	{r4, r5, r6, pc}
 800b42a:	f000 f9d4 	bl	800b7d6 <__malloc_lock>
 800b42e:	4a21      	ldr	r2, [pc, #132]	; (800b4b4 <_malloc_r+0xac>)
 800b430:	6814      	ldr	r4, [r2, #0]
 800b432:	4621      	mov	r1, r4
 800b434:	b991      	cbnz	r1, 800b45c <_malloc_r+0x54>
 800b436:	4c20      	ldr	r4, [pc, #128]	; (800b4b8 <_malloc_r+0xb0>)
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	b91b      	cbnz	r3, 800b444 <_malloc_r+0x3c>
 800b43c:	4630      	mov	r0, r6
 800b43e:	f000 f98f 	bl	800b760 <_sbrk_r>
 800b442:	6020      	str	r0, [r4, #0]
 800b444:	4629      	mov	r1, r5
 800b446:	4630      	mov	r0, r6
 800b448:	f000 f98a 	bl	800b760 <_sbrk_r>
 800b44c:	1c43      	adds	r3, r0, #1
 800b44e:	d124      	bne.n	800b49a <_malloc_r+0x92>
 800b450:	230c      	movs	r3, #12
 800b452:	6033      	str	r3, [r6, #0]
 800b454:	4630      	mov	r0, r6
 800b456:	f000 f9bf 	bl	800b7d8 <__malloc_unlock>
 800b45a:	e7e4      	b.n	800b426 <_malloc_r+0x1e>
 800b45c:	680b      	ldr	r3, [r1, #0]
 800b45e:	1b5b      	subs	r3, r3, r5
 800b460:	d418      	bmi.n	800b494 <_malloc_r+0x8c>
 800b462:	2b0b      	cmp	r3, #11
 800b464:	d90f      	bls.n	800b486 <_malloc_r+0x7e>
 800b466:	600b      	str	r3, [r1, #0]
 800b468:	50cd      	str	r5, [r1, r3]
 800b46a:	18cc      	adds	r4, r1, r3
 800b46c:	4630      	mov	r0, r6
 800b46e:	f000 f9b3 	bl	800b7d8 <__malloc_unlock>
 800b472:	f104 000b 	add.w	r0, r4, #11
 800b476:	1d23      	adds	r3, r4, #4
 800b478:	f020 0007 	bic.w	r0, r0, #7
 800b47c:	1ac3      	subs	r3, r0, r3
 800b47e:	d0d3      	beq.n	800b428 <_malloc_r+0x20>
 800b480:	425a      	negs	r2, r3
 800b482:	50e2      	str	r2, [r4, r3]
 800b484:	e7d0      	b.n	800b428 <_malloc_r+0x20>
 800b486:	428c      	cmp	r4, r1
 800b488:	684b      	ldr	r3, [r1, #4]
 800b48a:	bf16      	itet	ne
 800b48c:	6063      	strne	r3, [r4, #4]
 800b48e:	6013      	streq	r3, [r2, #0]
 800b490:	460c      	movne	r4, r1
 800b492:	e7eb      	b.n	800b46c <_malloc_r+0x64>
 800b494:	460c      	mov	r4, r1
 800b496:	6849      	ldr	r1, [r1, #4]
 800b498:	e7cc      	b.n	800b434 <_malloc_r+0x2c>
 800b49a:	1cc4      	adds	r4, r0, #3
 800b49c:	f024 0403 	bic.w	r4, r4, #3
 800b4a0:	42a0      	cmp	r0, r4
 800b4a2:	d005      	beq.n	800b4b0 <_malloc_r+0xa8>
 800b4a4:	1a21      	subs	r1, r4, r0
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	f000 f95a 	bl	800b760 <_sbrk_r>
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d0cf      	beq.n	800b450 <_malloc_r+0x48>
 800b4b0:	6025      	str	r5, [r4, #0]
 800b4b2:	e7db      	b.n	800b46c <_malloc_r+0x64>
 800b4b4:	24000200 	.word	0x24000200
 800b4b8:	24000204 	.word	0x24000204

0800b4bc <__ssputs_r>:
 800b4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c0:	688e      	ldr	r6, [r1, #8]
 800b4c2:	429e      	cmp	r6, r3
 800b4c4:	4682      	mov	sl, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	4690      	mov	r8, r2
 800b4ca:	4699      	mov	r9, r3
 800b4cc:	d837      	bhi.n	800b53e <__ssputs_r+0x82>
 800b4ce:	898a      	ldrh	r2, [r1, #12]
 800b4d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4d4:	d031      	beq.n	800b53a <__ssputs_r+0x7e>
 800b4d6:	6825      	ldr	r5, [r4, #0]
 800b4d8:	6909      	ldr	r1, [r1, #16]
 800b4da:	1a6f      	subs	r7, r5, r1
 800b4dc:	6965      	ldr	r5, [r4, #20]
 800b4de:	2302      	movs	r3, #2
 800b4e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4e4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b4e8:	f109 0301 	add.w	r3, r9, #1
 800b4ec:	443b      	add	r3, r7
 800b4ee:	429d      	cmp	r5, r3
 800b4f0:	bf38      	it	cc
 800b4f2:	461d      	movcc	r5, r3
 800b4f4:	0553      	lsls	r3, r2, #21
 800b4f6:	d530      	bpl.n	800b55a <__ssputs_r+0x9e>
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	f7ff ff85 	bl	800b408 <_malloc_r>
 800b4fe:	4606      	mov	r6, r0
 800b500:	b950      	cbnz	r0, 800b518 <__ssputs_r+0x5c>
 800b502:	230c      	movs	r3, #12
 800b504:	f8ca 3000 	str.w	r3, [sl]
 800b508:	89a3      	ldrh	r3, [r4, #12]
 800b50a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b50e:	81a3      	strh	r3, [r4, #12]
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b518:	463a      	mov	r2, r7
 800b51a:	6921      	ldr	r1, [r4, #16]
 800b51c:	f7ff fc32 	bl	800ad84 <memcpy>
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b52a:	81a3      	strh	r3, [r4, #12]
 800b52c:	6126      	str	r6, [r4, #16]
 800b52e:	6165      	str	r5, [r4, #20]
 800b530:	443e      	add	r6, r7
 800b532:	1bed      	subs	r5, r5, r7
 800b534:	6026      	str	r6, [r4, #0]
 800b536:	60a5      	str	r5, [r4, #8]
 800b538:	464e      	mov	r6, r9
 800b53a:	454e      	cmp	r6, r9
 800b53c:	d900      	bls.n	800b540 <__ssputs_r+0x84>
 800b53e:	464e      	mov	r6, r9
 800b540:	4632      	mov	r2, r6
 800b542:	4641      	mov	r1, r8
 800b544:	6820      	ldr	r0, [r4, #0]
 800b546:	f000 f92d 	bl	800b7a4 <memmove>
 800b54a:	68a3      	ldr	r3, [r4, #8]
 800b54c:	1b9b      	subs	r3, r3, r6
 800b54e:	60a3      	str	r3, [r4, #8]
 800b550:	6823      	ldr	r3, [r4, #0]
 800b552:	441e      	add	r6, r3
 800b554:	6026      	str	r6, [r4, #0]
 800b556:	2000      	movs	r0, #0
 800b558:	e7dc      	b.n	800b514 <__ssputs_r+0x58>
 800b55a:	462a      	mov	r2, r5
 800b55c:	f000 f93d 	bl	800b7da <_realloc_r>
 800b560:	4606      	mov	r6, r0
 800b562:	2800      	cmp	r0, #0
 800b564:	d1e2      	bne.n	800b52c <__ssputs_r+0x70>
 800b566:	6921      	ldr	r1, [r4, #16]
 800b568:	4650      	mov	r0, sl
 800b56a:	f7ff feff 	bl	800b36c <_free_r>
 800b56e:	e7c8      	b.n	800b502 <__ssputs_r+0x46>

0800b570 <_svfiprintf_r>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	461d      	mov	r5, r3
 800b576:	898b      	ldrh	r3, [r1, #12]
 800b578:	061f      	lsls	r7, r3, #24
 800b57a:	b09d      	sub	sp, #116	; 0x74
 800b57c:	4680      	mov	r8, r0
 800b57e:	460c      	mov	r4, r1
 800b580:	4616      	mov	r6, r2
 800b582:	d50f      	bpl.n	800b5a4 <_svfiprintf_r+0x34>
 800b584:	690b      	ldr	r3, [r1, #16]
 800b586:	b96b      	cbnz	r3, 800b5a4 <_svfiprintf_r+0x34>
 800b588:	2140      	movs	r1, #64	; 0x40
 800b58a:	f7ff ff3d 	bl	800b408 <_malloc_r>
 800b58e:	6020      	str	r0, [r4, #0]
 800b590:	6120      	str	r0, [r4, #16]
 800b592:	b928      	cbnz	r0, 800b5a0 <_svfiprintf_r+0x30>
 800b594:	230c      	movs	r3, #12
 800b596:	f8c8 3000 	str.w	r3, [r8]
 800b59a:	f04f 30ff 	mov.w	r0, #4294967295
 800b59e:	e0c8      	b.n	800b732 <_svfiprintf_r+0x1c2>
 800b5a0:	2340      	movs	r3, #64	; 0x40
 800b5a2:	6163      	str	r3, [r4, #20]
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a8:	2320      	movs	r3, #32
 800b5aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ae:	2330      	movs	r3, #48	; 0x30
 800b5b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5b4:	9503      	str	r5, [sp, #12]
 800b5b6:	f04f 0b01 	mov.w	fp, #1
 800b5ba:	4637      	mov	r7, r6
 800b5bc:	463d      	mov	r5, r7
 800b5be:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5c2:	b10b      	cbz	r3, 800b5c8 <_svfiprintf_r+0x58>
 800b5c4:	2b25      	cmp	r3, #37	; 0x25
 800b5c6:	d13e      	bne.n	800b646 <_svfiprintf_r+0xd6>
 800b5c8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b5cc:	d00b      	beq.n	800b5e6 <_svfiprintf_r+0x76>
 800b5ce:	4653      	mov	r3, sl
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	f7ff ff71 	bl	800b4bc <__ssputs_r>
 800b5da:	3001      	adds	r0, #1
 800b5dc:	f000 80a4 	beq.w	800b728 <_svfiprintf_r+0x1b8>
 800b5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e2:	4453      	add	r3, sl
 800b5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e6:	783b      	ldrb	r3, [r7, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f000 809d 	beq.w	800b728 <_svfiprintf_r+0x1b8>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5f8:	9304      	str	r3, [sp, #16]
 800b5fa:	9307      	str	r3, [sp, #28]
 800b5fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b600:	931a      	str	r3, [sp, #104]	; 0x68
 800b602:	462f      	mov	r7, r5
 800b604:	2205      	movs	r2, #5
 800b606:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b60a:	4850      	ldr	r0, [pc, #320]	; (800b74c <_svfiprintf_r+0x1dc>)
 800b60c:	f7f4 fe70 	bl	80002f0 <memchr>
 800b610:	9b04      	ldr	r3, [sp, #16]
 800b612:	b9d0      	cbnz	r0, 800b64a <_svfiprintf_r+0xda>
 800b614:	06d9      	lsls	r1, r3, #27
 800b616:	bf44      	itt	mi
 800b618:	2220      	movmi	r2, #32
 800b61a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b61e:	071a      	lsls	r2, r3, #28
 800b620:	bf44      	itt	mi
 800b622:	222b      	movmi	r2, #43	; 0x2b
 800b624:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b628:	782a      	ldrb	r2, [r5, #0]
 800b62a:	2a2a      	cmp	r2, #42	; 0x2a
 800b62c:	d015      	beq.n	800b65a <_svfiprintf_r+0xea>
 800b62e:	9a07      	ldr	r2, [sp, #28]
 800b630:	462f      	mov	r7, r5
 800b632:	2000      	movs	r0, #0
 800b634:	250a      	movs	r5, #10
 800b636:	4639      	mov	r1, r7
 800b638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b63c:	3b30      	subs	r3, #48	; 0x30
 800b63e:	2b09      	cmp	r3, #9
 800b640:	d94d      	bls.n	800b6de <_svfiprintf_r+0x16e>
 800b642:	b1b8      	cbz	r0, 800b674 <_svfiprintf_r+0x104>
 800b644:	e00f      	b.n	800b666 <_svfiprintf_r+0xf6>
 800b646:	462f      	mov	r7, r5
 800b648:	e7b8      	b.n	800b5bc <_svfiprintf_r+0x4c>
 800b64a:	4a40      	ldr	r2, [pc, #256]	; (800b74c <_svfiprintf_r+0x1dc>)
 800b64c:	1a80      	subs	r0, r0, r2
 800b64e:	fa0b f000 	lsl.w	r0, fp, r0
 800b652:	4318      	orrs	r0, r3
 800b654:	9004      	str	r0, [sp, #16]
 800b656:	463d      	mov	r5, r7
 800b658:	e7d3      	b.n	800b602 <_svfiprintf_r+0x92>
 800b65a:	9a03      	ldr	r2, [sp, #12]
 800b65c:	1d11      	adds	r1, r2, #4
 800b65e:	6812      	ldr	r2, [r2, #0]
 800b660:	9103      	str	r1, [sp, #12]
 800b662:	2a00      	cmp	r2, #0
 800b664:	db01      	blt.n	800b66a <_svfiprintf_r+0xfa>
 800b666:	9207      	str	r2, [sp, #28]
 800b668:	e004      	b.n	800b674 <_svfiprintf_r+0x104>
 800b66a:	4252      	negs	r2, r2
 800b66c:	f043 0302 	orr.w	r3, r3, #2
 800b670:	9207      	str	r2, [sp, #28]
 800b672:	9304      	str	r3, [sp, #16]
 800b674:	783b      	ldrb	r3, [r7, #0]
 800b676:	2b2e      	cmp	r3, #46	; 0x2e
 800b678:	d10c      	bne.n	800b694 <_svfiprintf_r+0x124>
 800b67a:	787b      	ldrb	r3, [r7, #1]
 800b67c:	2b2a      	cmp	r3, #42	; 0x2a
 800b67e:	d133      	bne.n	800b6e8 <_svfiprintf_r+0x178>
 800b680:	9b03      	ldr	r3, [sp, #12]
 800b682:	1d1a      	adds	r2, r3, #4
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	9203      	str	r2, [sp, #12]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	bfb8      	it	lt
 800b68c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b690:	3702      	adds	r7, #2
 800b692:	9305      	str	r3, [sp, #20]
 800b694:	4d2e      	ldr	r5, [pc, #184]	; (800b750 <_svfiprintf_r+0x1e0>)
 800b696:	7839      	ldrb	r1, [r7, #0]
 800b698:	2203      	movs	r2, #3
 800b69a:	4628      	mov	r0, r5
 800b69c:	f7f4 fe28 	bl	80002f0 <memchr>
 800b6a0:	b138      	cbz	r0, 800b6b2 <_svfiprintf_r+0x142>
 800b6a2:	2340      	movs	r3, #64	; 0x40
 800b6a4:	1b40      	subs	r0, r0, r5
 800b6a6:	fa03 f000 	lsl.w	r0, r3, r0
 800b6aa:	9b04      	ldr	r3, [sp, #16]
 800b6ac:	4303      	orrs	r3, r0
 800b6ae:	3701      	adds	r7, #1
 800b6b0:	9304      	str	r3, [sp, #16]
 800b6b2:	7839      	ldrb	r1, [r7, #0]
 800b6b4:	4827      	ldr	r0, [pc, #156]	; (800b754 <_svfiprintf_r+0x1e4>)
 800b6b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ba:	2206      	movs	r2, #6
 800b6bc:	1c7e      	adds	r6, r7, #1
 800b6be:	f7f4 fe17 	bl	80002f0 <memchr>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d038      	beq.n	800b738 <_svfiprintf_r+0x1c8>
 800b6c6:	4b24      	ldr	r3, [pc, #144]	; (800b758 <_svfiprintf_r+0x1e8>)
 800b6c8:	bb13      	cbnz	r3, 800b710 <_svfiprintf_r+0x1a0>
 800b6ca:	9b03      	ldr	r3, [sp, #12]
 800b6cc:	3307      	adds	r3, #7
 800b6ce:	f023 0307 	bic.w	r3, r3, #7
 800b6d2:	3308      	adds	r3, #8
 800b6d4:	9303      	str	r3, [sp, #12]
 800b6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d8:	444b      	add	r3, r9
 800b6da:	9309      	str	r3, [sp, #36]	; 0x24
 800b6dc:	e76d      	b.n	800b5ba <_svfiprintf_r+0x4a>
 800b6de:	fb05 3202 	mla	r2, r5, r2, r3
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	460f      	mov	r7, r1
 800b6e6:	e7a6      	b.n	800b636 <_svfiprintf_r+0xc6>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	3701      	adds	r7, #1
 800b6ec:	9305      	str	r3, [sp, #20]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	250a      	movs	r5, #10
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f8:	3a30      	subs	r2, #48	; 0x30
 800b6fa:	2a09      	cmp	r2, #9
 800b6fc:	d903      	bls.n	800b706 <_svfiprintf_r+0x196>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d0c8      	beq.n	800b694 <_svfiprintf_r+0x124>
 800b702:	9105      	str	r1, [sp, #20]
 800b704:	e7c6      	b.n	800b694 <_svfiprintf_r+0x124>
 800b706:	fb05 2101 	mla	r1, r5, r1, r2
 800b70a:	2301      	movs	r3, #1
 800b70c:	4607      	mov	r7, r0
 800b70e:	e7f0      	b.n	800b6f2 <_svfiprintf_r+0x182>
 800b710:	ab03      	add	r3, sp, #12
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	4622      	mov	r2, r4
 800b716:	4b11      	ldr	r3, [pc, #68]	; (800b75c <_svfiprintf_r+0x1ec>)
 800b718:	a904      	add	r1, sp, #16
 800b71a:	4640      	mov	r0, r8
 800b71c:	f7fe f970 	bl	8009a00 <_printf_float>
 800b720:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b724:	4681      	mov	r9, r0
 800b726:	d1d6      	bne.n	800b6d6 <_svfiprintf_r+0x166>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	065b      	lsls	r3, r3, #25
 800b72c:	f53f af35 	bmi.w	800b59a <_svfiprintf_r+0x2a>
 800b730:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b732:	b01d      	add	sp, #116	; 0x74
 800b734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b738:	ab03      	add	r3, sp, #12
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	4622      	mov	r2, r4
 800b73e:	4b07      	ldr	r3, [pc, #28]	; (800b75c <_svfiprintf_r+0x1ec>)
 800b740:	a904      	add	r1, sp, #16
 800b742:	4640      	mov	r0, r8
 800b744:	f7fe fbfe 	bl	8009f44 <_printf_i>
 800b748:	e7ea      	b.n	800b720 <_svfiprintf_r+0x1b0>
 800b74a:	bf00      	nop
 800b74c:	0800ba14 	.word	0x0800ba14
 800b750:	0800ba1a 	.word	0x0800ba1a
 800b754:	0800ba1e 	.word	0x0800ba1e
 800b758:	08009a01 	.word	0x08009a01
 800b75c:	0800b4bd 	.word	0x0800b4bd

0800b760 <_sbrk_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4c06      	ldr	r4, [pc, #24]	; (800b77c <_sbrk_r+0x1c>)
 800b764:	2300      	movs	r3, #0
 800b766:	4605      	mov	r5, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	6023      	str	r3, [r4, #0]
 800b76c:	f7f6 f956 	bl	8001a1c <_sbrk>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d102      	bne.n	800b77a <_sbrk_r+0x1a>
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	b103      	cbz	r3, 800b77a <_sbrk_r+0x1a>
 800b778:	602b      	str	r3, [r5, #0]
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	240006f4 	.word	0x240006f4

0800b780 <__ascii_mbtowc>:
 800b780:	b082      	sub	sp, #8
 800b782:	b901      	cbnz	r1, 800b786 <__ascii_mbtowc+0x6>
 800b784:	a901      	add	r1, sp, #4
 800b786:	b142      	cbz	r2, 800b79a <__ascii_mbtowc+0x1a>
 800b788:	b14b      	cbz	r3, 800b79e <__ascii_mbtowc+0x1e>
 800b78a:	7813      	ldrb	r3, [r2, #0]
 800b78c:	600b      	str	r3, [r1, #0]
 800b78e:	7812      	ldrb	r2, [r2, #0]
 800b790:	1c10      	adds	r0, r2, #0
 800b792:	bf18      	it	ne
 800b794:	2001      	movne	r0, #1
 800b796:	b002      	add	sp, #8
 800b798:	4770      	bx	lr
 800b79a:	4610      	mov	r0, r2
 800b79c:	e7fb      	b.n	800b796 <__ascii_mbtowc+0x16>
 800b79e:	f06f 0001 	mvn.w	r0, #1
 800b7a2:	e7f8      	b.n	800b796 <__ascii_mbtowc+0x16>

0800b7a4 <memmove>:
 800b7a4:	4288      	cmp	r0, r1
 800b7a6:	b510      	push	{r4, lr}
 800b7a8:	eb01 0302 	add.w	r3, r1, r2
 800b7ac:	d807      	bhi.n	800b7be <memmove+0x1a>
 800b7ae:	1e42      	subs	r2, r0, #1
 800b7b0:	4299      	cmp	r1, r3
 800b7b2:	d00a      	beq.n	800b7ca <memmove+0x26>
 800b7b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b7bc:	e7f8      	b.n	800b7b0 <memmove+0xc>
 800b7be:	4283      	cmp	r3, r0
 800b7c0:	d9f5      	bls.n	800b7ae <memmove+0xa>
 800b7c2:	1881      	adds	r1, r0, r2
 800b7c4:	1ad2      	subs	r2, r2, r3
 800b7c6:	42d3      	cmn	r3, r2
 800b7c8:	d100      	bne.n	800b7cc <memmove+0x28>
 800b7ca:	bd10      	pop	{r4, pc}
 800b7cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b7d4:	e7f7      	b.n	800b7c6 <memmove+0x22>

0800b7d6 <__malloc_lock>:
 800b7d6:	4770      	bx	lr

0800b7d8 <__malloc_unlock>:
 800b7d8:	4770      	bx	lr

0800b7da <_realloc_r>:
 800b7da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7dc:	4607      	mov	r7, r0
 800b7de:	4614      	mov	r4, r2
 800b7e0:	460e      	mov	r6, r1
 800b7e2:	b921      	cbnz	r1, 800b7ee <_realloc_r+0x14>
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7ea:	f7ff be0d 	b.w	800b408 <_malloc_r>
 800b7ee:	b922      	cbnz	r2, 800b7fa <_realloc_r+0x20>
 800b7f0:	f7ff fdbc 	bl	800b36c <_free_r>
 800b7f4:	4625      	mov	r5, r4
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7fa:	f000 f821 	bl	800b840 <_malloc_usable_size_r>
 800b7fe:	42a0      	cmp	r0, r4
 800b800:	d20f      	bcs.n	800b822 <_realloc_r+0x48>
 800b802:	4621      	mov	r1, r4
 800b804:	4638      	mov	r0, r7
 800b806:	f7ff fdff 	bl	800b408 <_malloc_r>
 800b80a:	4605      	mov	r5, r0
 800b80c:	2800      	cmp	r0, #0
 800b80e:	d0f2      	beq.n	800b7f6 <_realloc_r+0x1c>
 800b810:	4631      	mov	r1, r6
 800b812:	4622      	mov	r2, r4
 800b814:	f7ff fab6 	bl	800ad84 <memcpy>
 800b818:	4631      	mov	r1, r6
 800b81a:	4638      	mov	r0, r7
 800b81c:	f7ff fda6 	bl	800b36c <_free_r>
 800b820:	e7e9      	b.n	800b7f6 <_realloc_r+0x1c>
 800b822:	4635      	mov	r5, r6
 800b824:	e7e7      	b.n	800b7f6 <_realloc_r+0x1c>

0800b826 <__ascii_wctomb>:
 800b826:	b149      	cbz	r1, 800b83c <__ascii_wctomb+0x16>
 800b828:	2aff      	cmp	r2, #255	; 0xff
 800b82a:	bf85      	ittet	hi
 800b82c:	238a      	movhi	r3, #138	; 0x8a
 800b82e:	6003      	strhi	r3, [r0, #0]
 800b830:	700a      	strbls	r2, [r1, #0]
 800b832:	f04f 30ff 	movhi.w	r0, #4294967295
 800b836:	bf98      	it	ls
 800b838:	2001      	movls	r0, #1
 800b83a:	4770      	bx	lr
 800b83c:	4608      	mov	r0, r1
 800b83e:	4770      	bx	lr

0800b840 <_malloc_usable_size_r>:
 800b840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b844:	1f18      	subs	r0, r3, #4
 800b846:	2b00      	cmp	r3, #0
 800b848:	bfbc      	itt	lt
 800b84a:	580b      	ldrlt	r3, [r1, r0]
 800b84c:	18c0      	addlt	r0, r0, r3
 800b84e:	4770      	bx	lr

0800b850 <_init>:
 800b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b852:	bf00      	nop
 800b854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b856:	bc08      	pop	{r3}
 800b858:	469e      	mov	lr, r3
 800b85a:	4770      	bx	lr

0800b85c <_fini>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	bf00      	nop
 800b860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b862:	bc08      	pop	{r3}
 800b864:	469e      	mov	lr, r3
 800b866:	4770      	bx	lr
